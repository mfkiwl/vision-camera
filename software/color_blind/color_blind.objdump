
color_blind.elf:     file format elf32-littlenios2
color_blind.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x018001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01800000 paddr 0x01800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01800020 paddr 0x01800020 align 2**12
         filesz 0x0000dd58 memsz 0x0000dd58 flags r-x
    LOAD off    0x0000ed78 vaddr 0x0180dd78 paddr 0x0180f884 align 2**12
         filesz 0x00001b0c memsz 0x00001b0c flags rw-
    LOAD off    0x00011390 vaddr 0x01811390 paddr 0x01811390 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01800000  01800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01800020  01800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d6fc  018001b4  018001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004c8  0180d8b0  0180d8b0  0000e8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b0c  0180dd78  0180f884  0000ed78  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  01811390  01811390  00011390  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00010884  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cf8  00000000  00000000  000108b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001567  00000000  00000000  000115a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025b5e  00000000  00000000  00012b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007eb8  00000000  00000000  0003866d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000144a9  00000000  00000000  00040525  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a64  00000000  00000000  000549d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002388  00000000  00000000  00056434  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c330  00000000  00000000  000587bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00064aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00064b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00068692  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00068695  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00068698  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00068699  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006869a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000686a5  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000686b0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  000686bb  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003e  00000000  00000000  000686c7  2**0
                  CONTENTS, READONLY
 26 .jdi          0000510a  00000000  00000000  00068705  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00085ad9  00000000  00000000  0006d80f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01800000 l    d  .entry	00000000 .entry
01800020 l    d  .exceptions	00000000 .exceptions
018001b4 l    d  .text	00000000 .text
0180d8b0 l    d  .rodata	00000000 .rodata
0180dd78 l    d  .rwdata	00000000 .rwdata
01811390 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
018001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01800800 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01800aec l     F .text	00000058 __sprint_r
0180da66 l     O .rodata	00000010 blanks.3452
0180da56 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01802b68 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01804590 l     F .text	00000058 std
0180469c l     F .text	00000008 __fp_lock
018046a4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0180dd78 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0180f850 l     O .rwdata	00000004 charset
0180da9c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0180dbe4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
01808a50 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0180a36c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0180a3cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0180a4d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0180a5f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0180a6d4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0180a834 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0180acfc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0180f874 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0180afb4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0180e734 l     O .rwdata	00001060 jtag_uart_0
0180f794 l     O .rwdata	00000030 AV_Config
0180f7c4 l     O .rwdata	0000002c character_lcd_0
0180f7f0 l     O .rwdata	00000054 Pixel_Buffer_DMA
0180b2a8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0180b4e8 l     F .text	00000228 altera_avalon_jtag_uart_irq
0180b710 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0180c4e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0180c984 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0180cad4 l     F .text	000000f8 alt_file_locked
0180cd58 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0180d698 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0180d84c l     F .text	00000040 alt_sim_halt
01806380 g     F .text	00000094 _mprec_log10
0180646c g     F .text	00000088 __any_on
01807c24 g     F .text	00000070 _isatty_r
0180dbbc g     O .rodata	00000028 __mprec_tinytens
0180a894 g     F .text	0000006c alt_main
018009c4 g     F .text	000000a0 _puts_r
018113ec g     O .bss	00000100 alt_irq
01807c94 g     F .text	00000078 _lseek_r
0180f884 g       *ABS*	00000000 __flash_rwdata_start
0180be08 g     F .text	00000034 alt_up_character_lcd_send_cmd
01809570 g     F .text	00000088 __eqdf2
0181167c g       *ABS*	00000000 __alt_heap_start
0180094c g     F .text	00000044 printf
018076dc g     F .text	00000068 __sseek
018045f8 g     F .text	000000a4 __sinit
0180d418 g     F .text	00000130 __swbuf_r
01805304 g     F .text	00000084 _setlocale_r
018046f8 g     F .text	0000009c __sfmoreglue
0180a920 g     F .text	00000020 __malloc_unlock
01805dfc g     F .text	000000e0 memmove
018046e8 g     F .text	00000010 _cleanup
018064f4 g     F .text	000000bc _Balloc
01809680 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0180bd8c g     F .text	0000007c get_DDRAM_addr
01800000 g     F .entry	0000000c __reset
01800020 g       *ABS*	00000000 __flash_exceptions_start
01807bb0 g     F .text	00000074 _fstat_r
018113a8 g     O .bss	00000004 errno
018113b0 g     O .bss	00000004 alt_argv
01817844 g       *ABS*	00000000 _gp
0180e5b4 g     O .rwdata	00000180 alt_fd_list
0180c608 g     F .text	00000094 alt_find_dev
01805d5c g     F .text	000000a0 memcpy
0180bfa0 g     F .text	0000004c alt_up_character_lcd_write_fd
018046dc g     F .text	0000000c _cleanup_r
01809818 g     F .text	000000f8 __floatsidf
0180ca5c g     F .text	00000078 alt_io_redirect
01809790 g     F .text	00000088 __ltdf2
0180d8b0 g       *ABS*	00000000 __DTOR_END__
01800a64 g     F .text	00000014 puts
018062d0 g     F .text	000000b0 __ratio
0180b928 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01800990 g     F .text	00000034 _printf_r
0180093c g     F .text	00000008 __udivsi3
0180a530 g     F .text	000000c4 isatty
0180dacc g     O .rodata	000000c8 __mprec_tens
018052e0 g     F .text	00000008 __locale_charset
0181139c g     O .bss	00000004 __malloc_top_pad
0180f84c g     O .rwdata	00000004 __mb_cur_max
018052e8 g     F .text	0000000c _localeconv_r
01806c58 g     F .text	0000003c __i2b
01804cc4 g     F .text	0000049c __sfvwrite_r
01807664 g     F .text	00000070 _sbrk_r
01807d0c g     F .text	00000078 _read_r
0180e178 g     O .rwdata	0000000c __lc_ctype
0180f86c g     O .rwdata	00000004 alt_max_fd
0180a06c g     F .text	00000138 __unpack_d
01807a8c g     F .text	00000110 _fclose_r
0180455c g     F .text	00000034 fflush
018113a0 g     O .bss	00000004 __malloc_max_sbrked_mem
01808ee0 g     F .text	00000074 __adddf3
018061b0 g     F .text	00000120 __b2d
018083f0 g     F .text	00000660 __umoddi3
0180a740 g     F .text	000000f4 lseek
0180f848 g     O .rwdata	00000004 _global_impure_ptr
01807000 g     F .text	000005f4 _realloc_r
0181167c g       *ABS*	00000000 __bss_end
0180c88c g     F .text	000000f8 alt_iic_isr_register
0180ce50 g     F .text	0000010c alt_tick
01807d84 g     F .text	0000066c __udivdi3
0180db94 g     O .rodata	00000028 __mprec_bigtens
01806ee0 g     F .text	00000120 __s2b
018099e8 g     F .text	00000194 __floatunsidf
018060d0 g     F .text	00000060 __mcmp
018046c4 g     F .text	00000018 __fp_lock_all
0180c844 g     F .text	00000048 alt_ic_irq_enabled
0180cdb8 g     F .text	00000098 alt_alarm_stop
018113b8 g     O .bss	00000004 alt_irq_active
018000ec g     F .exceptions	000000c8 alt_irq_handler
0180e58c g     O .rwdata	00000028 alt_dev_null
0180c288 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0180c410 g     F .text	0000001c alt_dcache_flush_all
01805f9c g     F .text	00000070 __hi0bits
01809910 g     F .text	000000d8 __fixdfsi
0180f884 g       *ABS*	00000000 __ram_rwdata_end
0180f864 g     O .rwdata	00000008 alt_dev_list
0180ae90 g     F .text	00000124 write
0180d330 g     F .text	000000e8 _putc_r
0180dd78 g       *ABS*	00000000 __ram_rodata_end
0180a3f8 g     F .text	000000d8 fstat
01806dc0 g     F .text	00000120 __pow5mult
01811390 g     O .bss	00000004 __nlocale_changed
01800944 g     F .text	00000008 __umodsi3
0181167c g       *ABS*	00000000 end
0180b428 g     F .text	000000c0 altera_avalon_jtag_uart_init
0180d8ac g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
01809cd8 g     F .text	00000080 __clzsi2
0180bb4c g     F .text	00000240 altera_avalon_jtag_uart_write
018045e8 g     F .text	00000004 __sfp_lock_acquire
01805c78 g     F .text	000000e4 memchr
0180beb0 g     F .text	00000078 alt_up_character_lcd_write
01800b44 g     F .text	00001ec4 ___vfprintf_internal_r
018049b0 g     F .text	00000314 _free_r
0180a940 g     F .text	00000258 alt_printf
0180d69c g     F .text	000001b0 __call_exitprocs
01811394 g     O .bss	00000004 __mlocale_changed
0180f858 g     O .rwdata	00000004 __malloc_sbrk_base
018001b4 g     F .text	0000003c _start
018113bc g     O .bss	00000004 _alt_tick_rate
018068b8 g     F .text	0000014c __lshift
018113c0 g     O .bss	00000004 _alt_nticks
0180abd8 g     F .text	00000124 read
0180b048 g     F .text	00000260 alt_sys_init
0180c114 g     F .text	000000b0 alt_up_character_lcd_shift_display
0180d564 g     F .text	00000134 __register_exitproc
01806a04 g     F .text	00000254 __multiply
0180c1c4 g     F .text	00000090 alt_up_character_lcd_erase_pos
0180b7c0 g     F .text	00000074 altera_avalon_jtag_uart_close
01809b7c g     F .text	00000038 __mulsi3
0180dd78 g       *ABS*	00000000 __ram_rwdata_start
0180d8b0 g       *ABS*	00000000 __ram_rodata_start
018113c4 g     O .bss	00000028 __malloc_current_mallinfo
018065b0 g     F .text	0000017c __d2b
0180b2e0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0180d09c g     F .text	000000d0 alt_get_fd
0180a1a4 g     F .text	000000c8 __fpcmp_parts_d
01807a1c g     F .text	00000070 _close_r
0180d1b8 g     F .text	00000074 memcmp
0180b390 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0181167c g       *ABS*	00000000 __alt_stack_base
0180b3d8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01802a2c g     F .text	0000013c __swsetup_r
01809318 g     F .text	00000258 __divdf3
01804794 g     F .text	000000f0 __sfp
01806414 g     F .text	00000058 __copybits
0180e184 g     O .rwdata	00000408 __malloc_av_
018045f4 g     F .text	00000004 __sinit_lock_release
01808f54 g     F .text	000003c4 __muldf3
018077c0 g     F .text	00000060 __sread
0180cf7c g     F .text	00000120 alt_find_file
0180c42c g     F .text	000000b4 alt_dev_llist_insert
0180a900 g     F .text	00000020 __malloc_lock
0180add4 g     F .text	000000bc sbrk
01804360 g     F .text	000001fc _fflush_r
01807954 g     F .text	000000c8 _calloc_r
01811390 g       *ABS*	00000000 __bss_start
01805edc g     F .text	00000098 memset
0180023c g     F .text	000005c4 main
018113b4 g     O .bss	00000004 alt_envp
018113a4 g     O .bss	00000004 __malloc_max_total_mem
0180b338 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0180d548 g     F .text	0000001c __swbuf
018001f0 g     F .text	0000004c write_pixel
0180c064 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
018076d4 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
01807b9c g     F .text	00000014 fclose
018114ec g     O .bss	00000190 _atexit0
01802dac g     F .text	000015b4 _dtoa_r
01805538 g     F .text	00000740 _malloc_r
0180f870 g     O .rwdata	00000004 alt_errno
01805228 g     F .text	000000b8 _fwalk
0180d22c g     F .text	00000104 putc
0180087c g     F .text	00000060 __divsi3
0180dbf0 g     O .rodata	00000014 __thenan_df
0180be70 g     F .text	00000040 alt_up_character_lcd_open_dev
01804884 g     F .text	0000012c _malloc_trim_r
0180d8b0 g       *ABS*	00000000 __CTOR_END__
0180be3c g     F .text	00000034 alt_up_character_lcd_init
01807820 g     F .text	000000bc strcmp
0180d8b0 g       *ABS*	00000000 __flash_rodata_start
0180d8b0 g       *ABS*	00000000 __DTOR_LIST__
018095f8 g     F .text	00000088 __nedf2
0180b014 g     F .text	00000034 alt_irq_init
0180ad5c g     F .text	00000078 alt_release_fd
0180c254 g     F .text	00000034 alt_up_character_lcd_cursor_off
0180dc04 g     O .rodata	00000100 __clz_tab
01811398 g     O .bss	00000004 _PathLocale
0180d16c g     F .text	00000014 atexit
018078dc g     F .text	00000078 _write_r
01805388 g     F .text	0000001c setlocale
0180f844 g     O .rwdata	00000004 _impure_ptr
018113ac g     O .bss	00000004 alt_argc
0180c5a4 g     F .text	00000064 _do_dtors
01800020 g       .exceptions	00000000 alt_irq_entry
01806130 g     F .text	00000080 __ulp
018075f4 g     F .text	00000040 __isinfd
018046ac g     F .text	00000018 __fp_unlock_all
0180f85c g     O .rwdata	00000008 alt_fs_list
01800020 g       *ABS*	00000000 __ram_exceptions_start
018052f4 g     F .text	00000010 localeconv
0180c6b8 g     F .text	00000050 alt_ic_isr_register
0180f884 g       *ABS*	00000000 _edata
0181167c g       *ABS*	00000000 _end
018001b4 g       *ABS*	00000000 __ram_exceptions_end
0180b834 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0180c7a4 g     F .text	000000a0 alt_ic_irq_disable
01004000 g       *ABS*	00000000 __alt_mem_Onchip_Memory
01807744 g     F .text	0000007c __swrite
0180f854 g     O .rwdata	00000004 __malloc_trim_threshold
0180cf5c g     F .text	00000020 altera_nios2_qsys_irq_init
0180d180 g     F .text	00000038 exit
01805160 g     F .text	000000c8 _fwalk_reent
0180672c g     F .text	0000018c __mdiff
018008dc g     F .text	00000060 __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
01800020 g     F .exceptions	00000000 alt_exception
018045ec g     F .text	00000004 __sfp_lock_release
01800000 g       *ABS*	00000000 __alt_mem_sdram
0180bf28 g     F .text	00000078 alt_up_character_lcd_string
0180d88c g     F .text	00000020 _exit
01807634 g     F .text	00000030 __isnand
0180c2bc g     F .text	00000154 alt_alarm_start
01809bb4 g     F .text	00000124 __muldi3
018053a4 g     F .text	00000194 __smakebuf_r
01800a78 g     F .text	00000074 strlen
0180cbcc g     F .text	0000018c open
01809708 g     F .text	00000088 __gedf2
0180ab98 g     F .text	00000040 alt_putchar
0180c69c g     F .text	0000001c alt_icache_flush_all
0180bfec g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0180f878 g     O .rwdata	00000004 alt_priority_mask
0180c708 g     F .text	0000009c alt_ic_irq_enable
01802a08 g     F .text	00000024 __vfprintf_internal
01808e60 g     F .text	00000080 __subdf3
0180600c g     F .text	000000c4 __lo0bits
0180f87c g     O .rwdata	00000008 alt_alarm_list
0180c540 g     F .text	00000064 _do_ctors
0180a26c g     F .text	00000100 close
0180a654 g     F .text	00000080 alt_load
01809d58 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
018045f0 g     F .text	00000004 __sinit_lock_acquire
01806c94 g     F .text	0000012c __multadd
01805f74 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1800000:	00406034 	movhi	at,384
    ori r1, r1, %lo(_start)
 1800004:	08406d14 	ori	at,at,436
    jmp r1
 1800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 180002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 180003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 180004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 180005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 180006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 180007c:	10000326 	beq	r2,zero,180008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1800080:	20000226 	beq	r4,zero,180008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1800084:	18000ec0 	call	18000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1800088:	00000306 	br	1800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 180008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 180009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 18000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 18000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 18000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 18000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 18000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 18000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 18000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 18000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 18000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 18000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 18000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 18000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 18000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 18000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 18000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 18000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 18000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 18000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 18000e8:	ef80083a 	eret

018000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 18000ec:	defff904 	addi	sp,sp,-28
 18000f0:	dfc00615 	stw	ra,24(sp)
 18000f4:	df000515 	stw	fp,20(sp)
 18000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 18000fc:	0005313a 	rdctl	r2,ipending
 1800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 180010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1800110:	00800044 	movi	r2,1
 1800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1800118:	e0ffff17 	ldw	r3,-4(fp)
 180011c:	e0bffe17 	ldw	r2,-8(fp)
 1800120:	1884703a 	and	r2,r3,r2
 1800124:	1005003a 	cmpeq	r2,r2,zero
 1800128:	1000161e 	bne	r2,zero,1800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 180012c:	e0bffd17 	ldw	r2,-12(fp)
 1800130:	00c06074 	movhi	r3,385
 1800134:	18c4fb04 	addi	r3,r3,5100
 1800138:	100490fa 	slli	r2,r2,3
 180013c:	10c5883a 	add	r2,r2,r3
 1800140:	11400017 	ldw	r5,0(r2)
 1800144:	e0bffd17 	ldw	r2,-12(fp)
 1800148:	00c06074 	movhi	r3,385
 180014c:	18c4fb04 	addi	r3,r3,5100
 1800150:	100490fa 	slli	r2,r2,3
 1800154:	10c5883a 	add	r2,r2,r3
 1800158:	10800104 	addi	r2,r2,4
 180015c:	11000017 	ldw	r4,0(r2)
 1800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1800164:	0005313a 	rdctl	r2,ipending
 1800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 180016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1800174:	e0bfff17 	ldw	r2,-4(fp)
 1800178:	1004c03a 	cmpne	r2,r2,zero
 180017c:	103fe31e 	bne	r2,zero,180010c <alt_irq_handler+0x20>
 1800180:	00000706 	br	18001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1800184:	e0bffe17 	ldw	r2,-8(fp)
 1800188:	1085883a 	add	r2,r2,r2
 180018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1800190:	e0bffd17 	ldw	r2,-12(fp)
 1800194:	10800044 	addi	r2,r2,1
 1800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 180019c:	003fde06 	br	1800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 18001a0:	e037883a 	mov	sp,fp
 18001a4:	dfc00117 	ldw	ra,4(sp)
 18001a8:	df000017 	ldw	fp,0(sp)
 18001ac:	dec00204 	addi	sp,sp,8
 18001b0:	f800283a 	ret

Disassembly of section .text:

018001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 18001b4:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 18001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 18001bc:	06806074 	movhi	gp,385
    ori gp, gp, %lo(_gp)
 18001c0:	d69e1114 	ori	gp,gp,30788
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 18001c4:	00806074 	movhi	r2,385
    ori r2, r2, %lo(__bss_start)
 18001c8:	1084e414 	ori	r2,r2,5008

    movhi r3, %hi(__bss_end)
 18001cc:	00c06074 	movhi	r3,385
    ori r3, r3, %lo(__bss_end)
 18001d0:	18c59f14 	ori	r3,r3,5756

    beq r2, r3, 1f
 18001d4:	10c00326 	beq	r2,r3,18001e4 <_start+0x30>

0:
    stw zero, (r2)
 18001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 18001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 18001e0:	10fffd36 	bltu	r2,r3,18001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 18001e4:	180a6540 	call	180a654 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 18001e8:	180a8940 	call	180a894 <alt_main>

018001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 18001ec:	003fff06 	br	18001ec <alt_after_alt_main>

018001f0 <write_pixel>:
#include "altera_up_avalon_video_pixel_buffer_dma.h"
#include "altera_up_avalon_character_lcd.h"
#define PIXEL_BUFFER_BASE (volatile unsigned int ) 0x00000000
#define RETICLE_COLOR (volatile unsigned int) 0xFFFF

void write_pixel(int x, int y, short color) {
 18001f0:	defffb04 	addi	sp,sp,-20
 18001f4:	df000415 	stw	fp,16(sp)
 18001f8:	df000404 	addi	fp,sp,16
 18001fc:	e13ffd15 	stw	r4,-12(fp)
 1800200:	e17ffe15 	stw	r5,-8(fp)
 1800204:	e1bfff0d 	sth	r6,-4(fp)
	volatile short *write_addr=(volatile short*)(0x00000000 + (y<<10) + (x<<1));
 1800208:	e0bffe17 	ldw	r2,-8(fp)
 180020c:	100692ba 	slli	r3,r2,10
 1800210:	e0bffd17 	ldw	r2,-12(fp)
 1800214:	1085883a 	add	r2,r2,r2
 1800218:	1885883a 	add	r2,r3,r2
 180021c:	e0bffc15 	stw	r2,-16(fp)
	*write_addr=color;
 1800220:	e0fffc17 	ldw	r3,-16(fp)
 1800224:	e0bfff0b 	ldhu	r2,-4(fp)
 1800228:	1880000d 	sth	r2,0(r3)
}
 180022c:	e037883a 	mov	sp,fp
 1800230:	df000017 	ldw	fp,0(sp)
 1800234:	dec00104 	addi	sp,sp,4
 1800238:	f800283a 	ret

0180023c <main>:

int main() {
 180023c:	deffe704 	addi	sp,sp,-100
 1800240:	dfc01815 	stw	ra,96(sp)
 1800244:	df001715 	stw	fp,92(sp)
 1800248:	df001704 	addi	fp,sp,92
	printf("System Initialized\n");
 180024c:	01006074 	movhi	r4,385
 1800250:	21362c04 	addi	r4,r4,-10064
 1800254:	1800a640 	call	1800a64 <puts>
	volatile unsigned int base = PIXEL_BUFFER_BASE;
 1800258:	e03ff615 	stw	zero,-40(fp)
	alt_up_character_lcd_dev * char_lcd_dev;
	char *first_row;
	// Open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");
 180025c:	01006074 	movhi	r4,385
 1800260:	21363104 	addi	r4,r4,-10044
 1800264:	180be700 	call	180be70 <alt_up_character_lcd_open_dev>
 1800268:	e0bff515 	stw	r2,-44(fp)
	if ( char_lcd_dev == NULL)
 180026c:	e0bff517 	ldw	r2,-44(fp)
 1800270:	1004c03a 	cmpne	r2,r2,zero
 1800274:	1000041e 	bne	r2,zero,1800288 <main+0x4c>
		alt_printf ("Error: could not open character LCD device\n");
 1800278:	01006074 	movhi	r4,385
 180027c:	21363704 	addi	r4,r4,-10020
 1800280:	180a9400 	call	180a940 <alt_printf>
 1800284:	00000306 	br	1800294 <main+0x58>
	else
		alt_printf ("Opened character LCD device\n");
 1800288:	01006074 	movhi	r4,385
 180028c:	21364204 	addi	r4,r4,-9976
 1800290:	180a9400 	call	180a940 <alt_printf>

	// Initialize the character display
	alt_up_character_lcd_init (char_lcd_dev);
 1800294:	e13ff517 	ldw	r4,-44(fp)
 1800298:	180be3c0 	call	180be3c <alt_up_character_lcd_init>
	int counter = 0;
 180029c:	e03ff315 	stw	zero,-52(fp)
 18002a0:	00000006 	br	18002a4 <main+0x68>
	while(1) {
		// Draw the reticle
		int m;
		int n;
		// Left bar
		for (m = 312; m <= 316; m++)
 18002a4:	00804e04 	movi	r2,312
 18002a8:	e0bff215 	stw	r2,-56(fp)
 18002ac:	00000706 	br	18002cc <main+0x90>
			write_pixel(m, 240, RETICLE_COLOR);
 18002b0:	e13ff217 	ldw	r4,-56(fp)
 18002b4:	01403c04 	movi	r5,240
 18002b8:	01bfffc4 	movi	r6,-1
 18002bc:	18001f00 	call	18001f0 <write_pixel>
	while(1) {
		// Draw the reticle
		int m;
		int n;
		// Left bar
		for (m = 312; m <= 316; m++)
 18002c0:	e0bff217 	ldw	r2,-56(fp)
 18002c4:	10800044 	addi	r2,r2,1
 18002c8:	e0bff215 	stw	r2,-56(fp)
 18002cc:	e0bff217 	ldw	r2,-56(fp)
 18002d0:	10804f50 	cmplti	r2,r2,317
 18002d4:	103ff61e 	bne	r2,zero,18002b0 <main+0x74>
			write_pixel(m, 240, RETICLE_COLOR);
		// Right bar
		for (n = 324; n <= 328; n++)
 18002d8:	00805104 	movi	r2,324
 18002dc:	e0bff115 	stw	r2,-60(fp)
 18002e0:	00000706 	br	1800300 <main+0xc4>
			write_pixel(n, 240, RETICLE_COLOR);
 18002e4:	e13ff117 	ldw	r4,-60(fp)
 18002e8:	01403c04 	movi	r5,240
 18002ec:	01bfffc4 	movi	r6,-1
 18002f0:	18001f00 	call	18001f0 <write_pixel>
		int n;
		// Left bar
		for (m = 312; m <= 316; m++)
			write_pixel(m, 240, RETICLE_COLOR);
		// Right bar
		for (n = 324; n <= 328; n++)
 18002f4:	e0bff117 	ldw	r2,-60(fp)
 18002f8:	10800044 	addi	r2,r2,1
 18002fc:	e0bff115 	stw	r2,-60(fp)
 1800300:	e0bff117 	ldw	r2,-60(fp)
 1800304:	10805250 	cmplti	r2,r2,329
 1800308:	103ff61e 	bne	r2,zero,18002e4 <main+0xa8>
			write_pixel(n, 240, RETICLE_COLOR);

		counter++;
 180030c:	e0bff317 	ldw	r2,-52(fp)
 1800310:	10800044 	addi	r2,r2,1
 1800314:	e0bff315 	stw	r2,-52(fp)
		// Log color info every 10000 iterations
		if (counter > 10000) {
 1800318:	e0bff317 	ldw	r2,-52(fp)
 180031c:	1089c450 	cmplti	r2,r2,10001
 1800320:	103fe01e 	bne	r2,zero,18002a4 <main+0x68>
			volatile unsigned int redSampled = 0;
 1800324:	e03ff715 	stw	zero,-36(fp)
			volatile unsigned int greenSampled = 0;
 1800328:	e03ff815 	stw	zero,-32(fp)
			volatile unsigned int blueSampled = 0;
 180032c:	e03ff915 	stw	zero,-28(fp)
			volatile unsigned int green;
			volatile unsigned int blue;
			volatile unsigned int position;
			volatile unsigned int offset;
			volatile unsigned int val;
			int detected = 0;
 1800330:	e03ff015 	stw	zero,-64(fp)
			Sample center 5 pixels in "+" reticle shape
		   (318, 119) to (320, 119)
		   (319, 118) to (319, 120)
		   	*/
			// Across horizonally
			for (i = 318; i <= 320; i++) {
 1800334:	00804f84 	movi	r2,318
 1800338:	e0bfef15 	stw	r2,-68(fp)
 180033c:	00003f06 	br	180043c <main+0x200>
				x = i;
 1800340:	e0bfef17 	ldw	r2,-68(fp)
 1800344:	e0bfed15 	stw	r2,-76(fp)
				y = 119;
 1800348:	00801dc4 	movi	r2,119
 180034c:	e0bfec15 	stw	r2,-80(fp)
				offset = (x | (y << 10)) << 1;
 1800350:	e0bfec17 	ldw	r2,-80(fp)
 1800354:	100692ba 	slli	r3,r2,10
 1800358:	e0bfed17 	ldw	r2,-76(fp)
 180035c:	1884b03a 	or	r2,r3,r2
 1800360:	1085883a 	add	r2,r2,r2
 1800364:	e0bffe15 	stw	r2,-8(fp)
				position = base + offset;
 1800368:	e0fff617 	ldw	r3,-40(fp)
 180036c:	e0bffe17 	ldw	r2,-8(fp)
 1800370:	1885883a 	add	r2,r3,r2
 1800374:	e0bffd15 	stw	r2,-12(fp)
				val = IORD_16DIRECT(position, 0);
 1800378:	e0bffd17 	ldw	r2,-12(fp)
 180037c:	1080002b 	ldhuio	r2,0(r2)
 1800380:	e0bfff15 	stw	r2,-4(fp)
				red = (val & (0x1F << 11)) >> 11;
 1800384:	e0bfff17 	ldw	r2,-4(fp)
 1800388:	10be000c 	andi	r2,r2,63488
 180038c:	1004d2fa 	srli	r2,r2,11
 1800390:	e0bffa15 	stw	r2,-24(fp)
				red *= (255/31); // convert to 255 RGB scheme
 1800394:	e0bffa17 	ldw	r2,-24(fp)
 1800398:	100490fa 	slli	r2,r2,3
 180039c:	e0bffa15 	stw	r2,-24(fp)
				redSampled += red;
 18003a0:	e0fff717 	ldw	r3,-36(fp)
 18003a4:	e0bffa17 	ldw	r2,-24(fp)
 18003a8:	1885883a 	add	r2,r3,r2
 18003ac:	e0bff715 	stw	r2,-36(fp)
				// 0x1F is 11111
				green = (val & (0x3F << 5)) >> 5;
 18003b0:	e0bfff17 	ldw	r2,-4(fp)
 18003b4:	1081f80c 	andi	r2,r2,2016
 18003b8:	1004d17a 	srli	r2,r2,5
 18003bc:	e0bffb15 	stw	r2,-20(fp)
				green *= (255/63); // convert to 255 RGB scheme
 18003c0:	e0bffb17 	ldw	r2,-20(fp)
 18003c4:	1085883a 	add	r2,r2,r2
 18003c8:	1085883a 	add	r2,r2,r2
 18003cc:	e0bffb15 	stw	r2,-20(fp)
				greenSampled += green;
 18003d0:	e0fff817 	ldw	r3,-32(fp)
 18003d4:	e0bffb17 	ldw	r2,-20(fp)
 18003d8:	1885883a 	add	r2,r3,r2
 18003dc:	e0bff815 	stw	r2,-32(fp)
				// 0x3F = 111111
				blue = (val & 0x1F);
 18003e0:	e0bfff17 	ldw	r2,-4(fp)
 18003e4:	108007cc 	andi	r2,r2,31
 18003e8:	e0bffc15 	stw	r2,-16(fp)
				blue *= (255/31); // convert to 255 RGB scheme
 18003ec:	e0bffc17 	ldw	r2,-16(fp)
 18003f0:	100490fa 	slli	r2,r2,3
 18003f4:	e0bffc15 	stw	r2,-16(fp)
				blueSampled += blue;
 18003f8:	e0fff917 	ldw	r3,-28(fp)
 18003fc:	e0bffc17 	ldw	r2,-16(fp)
 1800400:	1885883a 	add	r2,r3,r2
 1800404:	e0bff915 	stw	r2,-28(fp)
				// 0x1F is 11111
				printf("Pixel: (%d, %d) RGB: (%d, %d, %d)\n", x, y, red, green, blue);
 1800408:	e1fffa17 	ldw	r7,-24(fp)
 180040c:	e0bffb17 	ldw	r2,-20(fp)
 1800410:	e0fffc17 	ldw	r3,-16(fp)
 1800414:	d8800015 	stw	r2,0(sp)
 1800418:	d8c00115 	stw	r3,4(sp)
 180041c:	01006074 	movhi	r4,385
 1800420:	21364a04 	addi	r4,r4,-9944
 1800424:	e17fed17 	ldw	r5,-76(fp)
 1800428:	e1bfec17 	ldw	r6,-80(fp)
 180042c:	180094c0 	call	180094c <printf>
			Sample center 5 pixels in "+" reticle shape
		   (318, 119) to (320, 119)
		   (319, 118) to (319, 120)
		   	*/
			// Across horizonally
			for (i = 318; i <= 320; i++) {
 1800430:	e0bfef17 	ldw	r2,-68(fp)
 1800434:	10800044 	addi	r2,r2,1
 1800438:	e0bfef15 	stw	r2,-68(fp)
 180043c:	e0bfef17 	ldw	r2,-68(fp)
 1800440:	10805050 	cmplti	r2,r2,321
 1800444:	103fbe1e 	bne	r2,zero,1800340 <main+0x104>
				// 0x1F is 11111
				printf("Pixel: (%d, %d) RGB: (%d, %d, %d)\n", x, y, red, green, blue);
			}

			// Down vertically
			for (j = 118; j <= 120; j++) {
 1800448:	00801d84 	movi	r2,118
 180044c:	e0bfee15 	stw	r2,-72(fp)
 1800450:	00004206 	br	180055c <main+0x320>
				// (319, 119) was covered already by previous loop
				if (j == 119)
 1800454:	e0bfee17 	ldw	r2,-72(fp)
 1800458:	10801de0 	cmpeqi	r2,r2,119
 180045c:	10003c1e 	bne	r2,zero,1800550 <main+0x314>
					continue;
				x = 319;
 1800460:	00804fc4 	movi	r2,319
 1800464:	e0bfed15 	stw	r2,-76(fp)
				y = j;
 1800468:	e0bfee17 	ldw	r2,-72(fp)
 180046c:	e0bfec15 	stw	r2,-80(fp)
				offset = (x | (y << 10)) << 1;
 1800470:	e0bfec17 	ldw	r2,-80(fp)
 1800474:	100692ba 	slli	r3,r2,10
 1800478:	e0bfed17 	ldw	r2,-76(fp)
 180047c:	1884b03a 	or	r2,r3,r2
 1800480:	1085883a 	add	r2,r2,r2
 1800484:	e0bffe15 	stw	r2,-8(fp)
				position = base + offset;
 1800488:	e0fff617 	ldw	r3,-40(fp)
 180048c:	e0bffe17 	ldw	r2,-8(fp)
 1800490:	1885883a 	add	r2,r3,r2
 1800494:	e0bffd15 	stw	r2,-12(fp)
				val = IORD_16DIRECT(position, 0);
 1800498:	e0bffd17 	ldw	r2,-12(fp)
 180049c:	1080002b 	ldhuio	r2,0(r2)
 18004a0:	e0bfff15 	stw	r2,-4(fp)
				red = (val & (0x1F << 11)) >> 11;
 18004a4:	e0bfff17 	ldw	r2,-4(fp)
 18004a8:	10be000c 	andi	r2,r2,63488
 18004ac:	1004d2fa 	srli	r2,r2,11
 18004b0:	e0bffa15 	stw	r2,-24(fp)
				red *= (255/31); // convert to 255 RGB scheme
 18004b4:	e0bffa17 	ldw	r2,-24(fp)
 18004b8:	100490fa 	slli	r2,r2,3
 18004bc:	e0bffa15 	stw	r2,-24(fp)
				redSampled += red;
 18004c0:	e0fff717 	ldw	r3,-36(fp)
 18004c4:	e0bffa17 	ldw	r2,-24(fp)
 18004c8:	1885883a 	add	r2,r3,r2
 18004cc:	e0bff715 	stw	r2,-36(fp)
				// 0x1F is 11111
				green = (val & (0x3F << 5)) >> 5;
 18004d0:	e0bfff17 	ldw	r2,-4(fp)
 18004d4:	1081f80c 	andi	r2,r2,2016
 18004d8:	1004d17a 	srli	r2,r2,5
 18004dc:	e0bffb15 	stw	r2,-20(fp)
				green *= (255/63); // convert to 255 RGB scheme
 18004e0:	e0bffb17 	ldw	r2,-20(fp)
 18004e4:	1085883a 	add	r2,r2,r2
 18004e8:	1085883a 	add	r2,r2,r2
 18004ec:	e0bffb15 	stw	r2,-20(fp)
				greenSampled += green;
 18004f0:	e0fff817 	ldw	r3,-32(fp)
 18004f4:	e0bffb17 	ldw	r2,-20(fp)
 18004f8:	1885883a 	add	r2,r3,r2
 18004fc:	e0bff815 	stw	r2,-32(fp)
				// 0x3F = 111111
				blue = (val & 0x1F);
 1800500:	e0bfff17 	ldw	r2,-4(fp)
 1800504:	108007cc 	andi	r2,r2,31
 1800508:	e0bffc15 	stw	r2,-16(fp)
				blue *= (255/31); // convert to 255 RGB scheme
 180050c:	e0bffc17 	ldw	r2,-16(fp)
 1800510:	100490fa 	slli	r2,r2,3
 1800514:	e0bffc15 	stw	r2,-16(fp)
				blueSampled += blue;
 1800518:	e0fff917 	ldw	r3,-28(fp)
 180051c:	e0bffc17 	ldw	r2,-16(fp)
 1800520:	1885883a 	add	r2,r3,r2
 1800524:	e0bff915 	stw	r2,-28(fp)
				// 0x1F is 11111
				printf("Pixel: (%d, %d) RGB: (%d, %d, %d)\n", x, y, red, green, blue);
 1800528:	e1fffa17 	ldw	r7,-24(fp)
 180052c:	e0bffb17 	ldw	r2,-20(fp)
 1800530:	e0fffc17 	ldw	r3,-16(fp)
 1800534:	d8800015 	stw	r2,0(sp)
 1800538:	d8c00115 	stw	r3,4(sp)
 180053c:	01006074 	movhi	r4,385
 1800540:	21364a04 	addi	r4,r4,-9944
 1800544:	e17fed17 	ldw	r5,-76(fp)
 1800548:	e1bfec17 	ldw	r6,-80(fp)
 180054c:	180094c0 	call	180094c <printf>
				// 0x1F is 11111
				printf("Pixel: (%d, %d) RGB: (%d, %d, %d)\n", x, y, red, green, blue);
			}

			// Down vertically
			for (j = 118; j <= 120; j++) {
 1800550:	e0bfee17 	ldw	r2,-72(fp)
 1800554:	10800044 	addi	r2,r2,1
 1800558:	e0bfee15 	stw	r2,-72(fp)
 180055c:	e0bfee17 	ldw	r2,-72(fp)
 1800560:	10801e50 	cmplti	r2,r2,121
 1800564:	103fbb1e 	bne	r2,zero,1800454 <main+0x218>
				// 0x1F is 11111
				printf("Pixel: (%d, %d) RGB: (%d, %d, %d)\n", x, y, red, green, blue);
			}

			// Take the average of the 5 RGB values sampled
			redSampled /= 5;
 1800568:	e13ff717 	ldw	r4,-36(fp)
 180056c:	01400144 	movi	r5,5
 1800570:	180093c0 	call	180093c <__udivsi3>
 1800574:	e0bff715 	stw	r2,-36(fp)
			greenSampled /= 5;
 1800578:	e13ff817 	ldw	r4,-32(fp)
 180057c:	01400144 	movi	r5,5
 1800580:	180093c0 	call	180093c <__udivsi3>
 1800584:	e0bff815 	stw	r2,-32(fp)
			blueSampled /= 5;
 1800588:	e13ff917 	ldw	r4,-28(fp)
 180058c:	01400144 	movi	r5,5
 1800590:	180093c0 	call	180093c <__udivsi3>
 1800594:	e0bff915 	stw	r2,-28(fp)

			printf("Sampled Values: Red: %d Green: %d Blue: %d\n", redSampled, greenSampled, blueSampled);
 1800598:	e17ff717 	ldw	r5,-36(fp)
 180059c:	e1bff817 	ldw	r6,-32(fp)
 18005a0:	e1fff917 	ldw	r7,-28(fp)
 18005a4:	01006074 	movhi	r4,385
 18005a8:	21365304 	addi	r4,r4,-9908
 18005ac:	180094c0 	call	180094c <printf>

			//Log the color detected (Red, Orange, Yellow, Green, Blue, Indigo, Violet, Pink)
			if (red > 155) {
 18005b0:	e0bffa17 	ldw	r2,-24(fp)
 18005b4:	10802730 	cmpltui	r2,r2,156
 18005b8:	1000301e 	bne	r2,zero,180067c <main+0x440>
				// Either red or orange or pink or yellow
				if (green < 120 && blue < 120) {
 18005bc:	e0bffb17 	ldw	r2,-20(fp)
 18005c0:	10801e28 	cmpgeui	r2,r2,120
 18005c4:	1000091e 	bne	r2,zero,18005ec <main+0x3b0>
 18005c8:	e0bffc17 	ldw	r2,-16(fp)
 18005cc:	10801e28 	cmpgeui	r2,r2,120
 18005d0:	1000061e 	bne	r2,zero,18005ec <main+0x3b0>
					color = "Red   \0";
 18005d4:	00806074 	movhi	r2,385
 18005d8:	10b65e04 	addi	r2,r2,-9864
 18005dc:	e0bfeb15 	stw	r2,-84(fp)
					detected = 1;
 18005e0:	00800044 	movi	r2,1
 18005e4:	e0bff015 	stw	r2,-64(fp)
			printf("Sampled Values: Red: %d Green: %d Blue: %d\n", redSampled, greenSampled, blueSampled);

			//Log the color detected (Red, Orange, Yellow, Green, Blue, Indigo, Violet, Pink)
			if (red > 155) {
				// Either red or orange or pink or yellow
				if (green < 120 && blue < 120) {
 18005e8:	00005906 	br	1800750 <main+0x514>
					color = "Red   \0";
					detected = 1;
				}
				else if (green > 100 && blue < 100) {
 18005ec:	e0bffb17 	ldw	r2,-20(fp)
 18005f0:	10801970 	cmpltui	r2,r2,101
 18005f4:	1000091e 	bne	r2,zero,180061c <main+0x3e0>
 18005f8:	e0bffc17 	ldw	r2,-16(fp)
 18005fc:	10801928 	cmpgeui	r2,r2,100
 1800600:	1000061e 	bne	r2,zero,180061c <main+0x3e0>
					color = "Orange\0";
 1800604:	00806074 	movhi	r2,385
 1800608:	10b66004 	addi	r2,r2,-9856
 180060c:	e0bfeb15 	stw	r2,-84(fp)
					detected = 1;
 1800610:	00800044 	movi	r2,1
 1800614:	e0bff015 	stw	r2,-64(fp)
				// Either red or orange or pink or yellow
				if (green < 120 && blue < 120) {
					color = "Red   \0";
					detected = 1;
				}
				else if (green > 100 && blue < 100) {
 1800618:	00004d06 	br	1800750 <main+0x514>
					color = "Orange\0";
					detected = 1;
				}
				else if (green < 175 && blue > 240) {
 180061c:	e0bffb17 	ldw	r2,-20(fp)
 1800620:	10802be8 	cmpgeui	r2,r2,175
 1800624:	1000091e 	bne	r2,zero,180064c <main+0x410>
 1800628:	e0bffc17 	ldw	r2,-16(fp)
 180062c:	10803c70 	cmpltui	r2,r2,241
 1800630:	1000061e 	bne	r2,zero,180064c <main+0x410>
					color = "Pink  \0";
 1800634:	00806074 	movhi	r2,385
 1800638:	10b66204 	addi	r2,r2,-9848
 180063c:	e0bfeb15 	stw	r2,-84(fp)
					detected = 1;
 1800640:	00800044 	movi	r2,1
 1800644:	e0bff015 	stw	r2,-64(fp)
				}
				else if (green > 100 && blue < 100) {
					color = "Orange\0";
					detected = 1;
				}
				else if (green < 175 && blue > 240) {
 1800648:	00004106 	br	1800750 <main+0x514>
					color = "Pink  \0";
					detected = 1;
				}
				else if (green > 240 && blue < 200) {
 180064c:	e0bffb17 	ldw	r2,-20(fp)
 1800650:	10803c70 	cmpltui	r2,r2,241
 1800654:	10003e1e 	bne	r2,zero,1800750 <main+0x514>
 1800658:	e0bffc17 	ldw	r2,-16(fp)
 180065c:	10803228 	cmpgeui	r2,r2,200
 1800660:	10003b1e 	bne	r2,zero,1800750 <main+0x514>
					color = "Yellow\0";
 1800664:	00806074 	movhi	r2,385
 1800668:	10b66404 	addi	r2,r2,-9840
 180066c:	e0bfeb15 	stw	r2,-84(fp)
					detected = 1;
 1800670:	00800044 	movi	r2,1
 1800674:	e0bff015 	stw	r2,-64(fp)
 1800678:	00003506 	br	1800750 <main+0x514>
				}
			} else if (green > 240) {
 180067c:	e0bffb17 	ldw	r2,-20(fp)
 1800680:	10803c70 	cmpltui	r2,r2,241
 1800684:	10000c1e 	bne	r2,zero,18006b8 <main+0x47c>
				// If green
				if (red < 180 && blue < 180) {
 1800688:	e0bffa17 	ldw	r2,-24(fp)
 180068c:	10802d28 	cmpgeui	r2,r2,180
 1800690:	10002f1e 	bne	r2,zero,1800750 <main+0x514>
 1800694:	e0bffc17 	ldw	r2,-16(fp)
 1800698:	10802d28 	cmpgeui	r2,r2,180
 180069c:	10002c1e 	bne	r2,zero,1800750 <main+0x514>
					color = "Green \0";
 18006a0:	00806074 	movhi	r2,385
 18006a4:	10b66604 	addi	r2,r2,-9832
 18006a8:	e0bfeb15 	stw	r2,-84(fp)
					detected = 1;
 18006ac:	00800044 	movi	r2,1
 18006b0:	e0bff015 	stw	r2,-64(fp)
 18006b4:	00002606 	br	1800750 <main+0x514>
				}
			} else if (blue > 240) {
 18006b8:	e0bffc17 	ldw	r2,-16(fp)
 18006bc:	10803c70 	cmpltui	r2,r2,241
 18006c0:	1000231e 	bne	r2,zero,1800750 <main+0x514>
				// Either indigo, violet, or blue
				if (red < 50 && green < 130) {
 18006c4:	e0bffa17 	ldw	r2,-24(fp)
 18006c8:	10800ca8 	cmpgeui	r2,r2,50
 18006cc:	1000091e 	bne	r2,zero,18006f4 <main+0x4b8>
 18006d0:	e0bffb17 	ldw	r2,-20(fp)
 18006d4:	108020a8 	cmpgeui	r2,r2,130
 18006d8:	1000061e 	bne	r2,zero,18006f4 <main+0x4b8>
					color = "Indigo\0";
 18006dc:	00806074 	movhi	r2,385
 18006e0:	10b66804 	addi	r2,r2,-9824
 18006e4:	e0bfeb15 	stw	r2,-84(fp)
					detected = 1;
 18006e8:	00800044 	movi	r2,1
 18006ec:	e0bff015 	stw	r2,-64(fp)
					color = "Green \0";
					detected = 1;
				}
			} else if (blue > 240) {
				// Either indigo, violet, or blue
				if (red < 50 && green < 130) {
 18006f0:	00001706 	br	1800750 <main+0x514>
					color = "Indigo\0";
					detected = 1;
				}
				else if (red < 130 && green < 130) {
 18006f4:	e0bffa17 	ldw	r2,-24(fp)
 18006f8:	108020a8 	cmpgeui	r2,r2,130
 18006fc:	1000091e 	bne	r2,zero,1800724 <main+0x4e8>
 1800700:	e0bffb17 	ldw	r2,-20(fp)
 1800704:	108020a8 	cmpgeui	r2,r2,130
 1800708:	1000061e 	bne	r2,zero,1800724 <main+0x4e8>
					color = "Violet\0";
 180070c:	00806074 	movhi	r2,385
 1800710:	10b66a04 	addi	r2,r2,-9816
 1800714:	e0bfeb15 	stw	r2,-84(fp)
					detected = 1;
 1800718:	00800044 	movi	r2,1
 180071c:	e0bff015 	stw	r2,-64(fp)
				// Either indigo, violet, or blue
				if (red < 50 && green < 130) {
					color = "Indigo\0";
					detected = 1;
				}
				else if (red < 130 && green < 130) {
 1800720:	00000b06 	br	1800750 <main+0x514>
					color = "Violet\0";
					detected = 1;
				}
				else if (red < 110 && green < 200) {
 1800724:	e0bffa17 	ldw	r2,-24(fp)
 1800728:	10801ba8 	cmpgeui	r2,r2,110
 180072c:	1000081e 	bne	r2,zero,1800750 <main+0x514>
 1800730:	e0bffb17 	ldw	r2,-20(fp)
 1800734:	10803228 	cmpgeui	r2,r2,200
 1800738:	1000051e 	bne	r2,zero,1800750 <main+0x514>
					color = "Blue  \0";
 180073c:	00806074 	movhi	r2,385
 1800740:	10b66c04 	addi	r2,r2,-9808
 1800744:	e0bfeb15 	stw	r2,-84(fp)
					detected = 1;
 1800748:	00800044 	movi	r2,1
 180074c:	e0bff015 	stw	r2,-64(fp)
				}
			}

			if (detected == 1) {
 1800750:	e0bff017 	ldw	r2,-64(fp)
 1800754:	10800058 	cmpnei	r2,r2,1
 1800758:	1000161e 	bne	r2,zero,18007b4 <main+0x578>
				printf("Color Detected: %s\n", color);
 180075c:	01006074 	movhi	r4,385
 1800760:	21366e04 	addi	r4,r4,-9800
 1800764:	e17feb17 	ldw	r5,-84(fp)
 1800768:	180094c0 	call	180094c <printf>
				first_row = "Color Detected:\0";
 180076c:	00806074 	movhi	r2,385
 1800770:	10b67304 	addi	r2,r2,-9780
 1800774:	e0bff415 	stw	r2,-48(fp)
				alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
 1800778:	e13ff517 	ldw	r4,-44(fp)
 180077c:	000b883a 	mov	r5,zero
 1800780:	000d883a 	mov	r6,zero
 1800784:	180bfec0 	call	180bfec <alt_up_character_lcd_set_cursor_pos>
				alt_up_character_lcd_string(char_lcd_dev, first_row);
 1800788:	e13ff517 	ldw	r4,-44(fp)
 180078c:	e17ff417 	ldw	r5,-48(fp)
 1800790:	180bf280 	call	180bf28 <alt_up_character_lcd_string>
				alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
 1800794:	e13ff517 	ldw	r4,-44(fp)
 1800798:	000b883a 	mov	r5,zero
 180079c:	01800044 	movi	r6,1
 18007a0:	180bfec0 	call	180bfec <alt_up_character_lcd_set_cursor_pos>
				alt_up_character_lcd_string(char_lcd_dev, color);
 18007a4:	e13ff517 	ldw	r4,-44(fp)
 18007a8:	e17feb17 	ldw	r5,-84(fp)
 18007ac:	180bf280 	call	180bf28 <alt_up_character_lcd_string>
 18007b0:	00001106 	br	18007f8 <main+0x5bc>
			} else {
				// Blank the LCD
				first_row = "               \0";
 18007b4:	00806074 	movhi	r2,385
 18007b8:	10b67804 	addi	r2,r2,-9760
 18007bc:	e0bff415 	stw	r2,-48(fp)
				alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
 18007c0:	e13ff517 	ldw	r4,-44(fp)
 18007c4:	000b883a 	mov	r5,zero
 18007c8:	000d883a 	mov	r6,zero
 18007cc:	180bfec0 	call	180bfec <alt_up_character_lcd_set_cursor_pos>
				alt_up_character_lcd_string(char_lcd_dev, first_row);
 18007d0:	e13ff517 	ldw	r4,-44(fp)
 18007d4:	e17ff417 	ldw	r5,-48(fp)
 18007d8:	180bf280 	call	180bf28 <alt_up_character_lcd_string>
				alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
 18007dc:	e13ff517 	ldw	r4,-44(fp)
 18007e0:	000b883a 	mov	r5,zero
 18007e4:	01800044 	movi	r6,1
 18007e8:	180bfec0 	call	180bfec <alt_up_character_lcd_set_cursor_pos>
				alt_up_character_lcd_string(char_lcd_dev, first_row);
 18007ec:	e13ff517 	ldw	r4,-44(fp)
 18007f0:	e17ff417 	ldw	r5,-48(fp)
 18007f4:	180bf280 	call	180bf28 <alt_up_character_lcd_string>
			}
			counter = 0;
 18007f8:	e03ff315 	stw	zero,-52(fp)
		}
  	}
 18007fc:	003ea906 	br	18002a4 <main+0x68>

01800800 <udivmodsi4>:
 1800800:	29001b2e 	bgeu	r5,r4,1800870 <udivmodsi4+0x70>
 1800804:	28001a16 	blt	r5,zero,1800870 <udivmodsi4+0x70>
 1800808:	00800044 	movi	r2,1
 180080c:	0007883a 	mov	r3,zero
 1800810:	01c007c4 	movi	r7,31
 1800814:	00000306 	br	1800824 <udivmodsi4+0x24>
 1800818:	19c01326 	beq	r3,r7,1800868 <udivmodsi4+0x68>
 180081c:	18c00044 	addi	r3,r3,1
 1800820:	28000416 	blt	r5,zero,1800834 <udivmodsi4+0x34>
 1800824:	294b883a 	add	r5,r5,r5
 1800828:	1085883a 	add	r2,r2,r2
 180082c:	293ffa36 	bltu	r5,r4,1800818 <udivmodsi4+0x18>
 1800830:	10000d26 	beq	r2,zero,1800868 <udivmodsi4+0x68>
 1800834:	0007883a 	mov	r3,zero
 1800838:	21400236 	bltu	r4,r5,1800844 <udivmodsi4+0x44>
 180083c:	2149c83a 	sub	r4,r4,r5
 1800840:	1886b03a 	or	r3,r3,r2
 1800844:	1004d07a 	srli	r2,r2,1
 1800848:	280ad07a 	srli	r5,r5,1
 180084c:	103ffa1e 	bne	r2,zero,1800838 <udivmodsi4+0x38>
 1800850:	30000226 	beq	r6,zero,180085c <udivmodsi4+0x5c>
 1800854:	2005883a 	mov	r2,r4
 1800858:	f800283a 	ret
 180085c:	1809883a 	mov	r4,r3
 1800860:	2005883a 	mov	r2,r4
 1800864:	f800283a 	ret
 1800868:	0007883a 	mov	r3,zero
 180086c:	003ff806 	br	1800850 <udivmodsi4+0x50>
 1800870:	00800044 	movi	r2,1
 1800874:	0007883a 	mov	r3,zero
 1800878:	003fef06 	br	1800838 <udivmodsi4+0x38>

0180087c <__divsi3>:
 180087c:	defffe04 	addi	sp,sp,-8
 1800880:	dc000015 	stw	r16,0(sp)
 1800884:	dfc00115 	stw	ra,4(sp)
 1800888:	0021883a 	mov	r16,zero
 180088c:	20000c16 	blt	r4,zero,18008c0 <__divsi3+0x44>
 1800890:	000d883a 	mov	r6,zero
 1800894:	28000e16 	blt	r5,zero,18008d0 <__divsi3+0x54>
 1800898:	18008000 	call	1800800 <udivmodsi4>
 180089c:	1007883a 	mov	r3,r2
 18008a0:	8005003a 	cmpeq	r2,r16,zero
 18008a4:	1000011e 	bne	r2,zero,18008ac <__divsi3+0x30>
 18008a8:	00c7c83a 	sub	r3,zero,r3
 18008ac:	1805883a 	mov	r2,r3
 18008b0:	dfc00117 	ldw	ra,4(sp)
 18008b4:	dc000017 	ldw	r16,0(sp)
 18008b8:	dec00204 	addi	sp,sp,8
 18008bc:	f800283a 	ret
 18008c0:	0109c83a 	sub	r4,zero,r4
 18008c4:	04000044 	movi	r16,1
 18008c8:	000d883a 	mov	r6,zero
 18008cc:	283ff20e 	bge	r5,zero,1800898 <__divsi3+0x1c>
 18008d0:	014bc83a 	sub	r5,zero,r5
 18008d4:	8021003a 	cmpeq	r16,r16,zero
 18008d8:	003fef06 	br	1800898 <__divsi3+0x1c>

018008dc <__modsi3>:
 18008dc:	deffff04 	addi	sp,sp,-4
 18008e0:	dfc00015 	stw	ra,0(sp)
 18008e4:	01800044 	movi	r6,1
 18008e8:	2807883a 	mov	r3,r5
 18008ec:	20000416 	blt	r4,zero,1800900 <__modsi3+0x24>
 18008f0:	28000c16 	blt	r5,zero,1800924 <__modsi3+0x48>
 18008f4:	dfc00017 	ldw	ra,0(sp)
 18008f8:	dec00104 	addi	sp,sp,4
 18008fc:	18008001 	jmpi	1800800 <udivmodsi4>
 1800900:	0109c83a 	sub	r4,zero,r4
 1800904:	28000b16 	blt	r5,zero,1800934 <__modsi3+0x58>
 1800908:	180b883a 	mov	r5,r3
 180090c:	01800044 	movi	r6,1
 1800910:	18008000 	call	1800800 <udivmodsi4>
 1800914:	0085c83a 	sub	r2,zero,r2
 1800918:	dfc00017 	ldw	ra,0(sp)
 180091c:	dec00104 	addi	sp,sp,4
 1800920:	f800283a 	ret
 1800924:	014bc83a 	sub	r5,zero,r5
 1800928:	dfc00017 	ldw	ra,0(sp)
 180092c:	dec00104 	addi	sp,sp,4
 1800930:	18008001 	jmpi	1800800 <udivmodsi4>
 1800934:	0147c83a 	sub	r3,zero,r5
 1800938:	003ff306 	br	1800908 <__modsi3+0x2c>

0180093c <__udivsi3>:
 180093c:	000d883a 	mov	r6,zero
 1800940:	18008001 	jmpi	1800800 <udivmodsi4>

01800944 <__umodsi3>:
 1800944:	01800044 	movi	r6,1
 1800948:	18008001 	jmpi	1800800 <udivmodsi4>

0180094c <printf>:
 180094c:	defffb04 	addi	sp,sp,-20
 1800950:	dfc00115 	stw	ra,4(sp)
 1800954:	d9400215 	stw	r5,8(sp)
 1800958:	d9800315 	stw	r6,12(sp)
 180095c:	d9c00415 	stw	r7,16(sp)
 1800960:	00806074 	movhi	r2,385
 1800964:	10be1104 	addi	r2,r2,-1980
 1800968:	10c00017 	ldw	r3,0(r2)
 180096c:	200b883a 	mov	r5,r4
 1800970:	d8800204 	addi	r2,sp,8
 1800974:	19000217 	ldw	r4,8(r3)
 1800978:	100d883a 	mov	r6,r2
 180097c:	d8800015 	stw	r2,0(sp)
 1800980:	1802a080 	call	1802a08 <__vfprintf_internal>
 1800984:	dfc00117 	ldw	ra,4(sp)
 1800988:	dec00504 	addi	sp,sp,20
 180098c:	f800283a 	ret

01800990 <_printf_r>:
 1800990:	defffc04 	addi	sp,sp,-16
 1800994:	dfc00115 	stw	ra,4(sp)
 1800998:	d9800215 	stw	r6,8(sp)
 180099c:	d9c00315 	stw	r7,12(sp)
 18009a0:	280d883a 	mov	r6,r5
 18009a4:	21400217 	ldw	r5,8(r4)
 18009a8:	d8c00204 	addi	r3,sp,8
 18009ac:	180f883a 	mov	r7,r3
 18009b0:	d8c00015 	stw	r3,0(sp)
 18009b4:	1800b440 	call	1800b44 <___vfprintf_internal_r>
 18009b8:	dfc00117 	ldw	ra,4(sp)
 18009bc:	dec00404 	addi	sp,sp,16
 18009c0:	f800283a 	ret

018009c4 <_puts_r>:
 18009c4:	defff604 	addi	sp,sp,-40
 18009c8:	dc400715 	stw	r17,28(sp)
 18009cc:	2023883a 	mov	r17,r4
 18009d0:	2809883a 	mov	r4,r5
 18009d4:	dfc00915 	stw	ra,36(sp)
 18009d8:	dcc00815 	stw	r19,32(sp)
 18009dc:	2827883a 	mov	r19,r5
 18009e0:	1800a780 	call	1800a78 <strlen>
 18009e4:	89400217 	ldw	r5,8(r17)
 18009e8:	00c06074 	movhi	r3,385
 18009ec:	18f67d04 	addi	r3,r3,-9740
 18009f0:	01c00044 	movi	r7,1
 18009f4:	12000044 	addi	r8,r2,1
 18009f8:	d8c00515 	stw	r3,20(sp)
 18009fc:	d9c00615 	stw	r7,24(sp)
 1800a00:	d8c00304 	addi	r3,sp,12
 1800a04:	01c00084 	movi	r7,2
 1800a08:	8809883a 	mov	r4,r17
 1800a0c:	d80d883a 	mov	r6,sp
 1800a10:	d8c00015 	stw	r3,0(sp)
 1800a14:	dcc00315 	stw	r19,12(sp)
 1800a18:	da000215 	stw	r8,8(sp)
 1800a1c:	d9c00115 	stw	r7,4(sp)
 1800a20:	d8800415 	stw	r2,16(sp)
 1800a24:	1804cc40 	call	1804cc4 <__sfvwrite_r>
 1800a28:	00ffffc4 	movi	r3,-1
 1800a2c:	10000626 	beq	r2,zero,1800a48 <_puts_r+0x84>
 1800a30:	1805883a 	mov	r2,r3
 1800a34:	dfc00917 	ldw	ra,36(sp)
 1800a38:	dcc00817 	ldw	r19,32(sp)
 1800a3c:	dc400717 	ldw	r17,28(sp)
 1800a40:	dec00a04 	addi	sp,sp,40
 1800a44:	f800283a 	ret
 1800a48:	00c00284 	movi	r3,10
 1800a4c:	1805883a 	mov	r2,r3
 1800a50:	dfc00917 	ldw	ra,36(sp)
 1800a54:	dcc00817 	ldw	r19,32(sp)
 1800a58:	dc400717 	ldw	r17,28(sp)
 1800a5c:	dec00a04 	addi	sp,sp,40
 1800a60:	f800283a 	ret

01800a64 <puts>:
 1800a64:	00806074 	movhi	r2,385
 1800a68:	10be1104 	addi	r2,r2,-1980
 1800a6c:	200b883a 	mov	r5,r4
 1800a70:	11000017 	ldw	r4,0(r2)
 1800a74:	18009c41 	jmpi	18009c4 <_puts_r>

01800a78 <strlen>:
 1800a78:	208000cc 	andi	r2,r4,3
 1800a7c:	2011883a 	mov	r8,r4
 1800a80:	1000161e 	bne	r2,zero,1800adc <strlen+0x64>
 1800a84:	20c00017 	ldw	r3,0(r4)
 1800a88:	017fbff4 	movhi	r5,65279
 1800a8c:	297fbfc4 	addi	r5,r5,-257
 1800a90:	01e02074 	movhi	r7,32897
 1800a94:	39e02004 	addi	r7,r7,-32640
 1800a98:	1945883a 	add	r2,r3,r5
 1800a9c:	11c4703a 	and	r2,r2,r7
 1800aa0:	00c6303a 	nor	r3,zero,r3
 1800aa4:	1886703a 	and	r3,r3,r2
 1800aa8:	18000c1e 	bne	r3,zero,1800adc <strlen+0x64>
 1800aac:	280d883a 	mov	r6,r5
 1800ab0:	380b883a 	mov	r5,r7
 1800ab4:	21000104 	addi	r4,r4,4
 1800ab8:	20800017 	ldw	r2,0(r4)
 1800abc:	1187883a 	add	r3,r2,r6
 1800ac0:	1946703a 	and	r3,r3,r5
 1800ac4:	0084303a 	nor	r2,zero,r2
 1800ac8:	10c4703a 	and	r2,r2,r3
 1800acc:	103ff926 	beq	r2,zero,1800ab4 <strlen+0x3c>
 1800ad0:	20800007 	ldb	r2,0(r4)
 1800ad4:	10000326 	beq	r2,zero,1800ae4 <strlen+0x6c>
 1800ad8:	21000044 	addi	r4,r4,1
 1800adc:	20800007 	ldb	r2,0(r4)
 1800ae0:	103ffd1e 	bne	r2,zero,1800ad8 <strlen+0x60>
 1800ae4:	2205c83a 	sub	r2,r4,r8
 1800ae8:	f800283a 	ret

01800aec <__sprint_r>:
 1800aec:	30800217 	ldw	r2,8(r6)
 1800af0:	defffe04 	addi	sp,sp,-8
 1800af4:	dc000015 	stw	r16,0(sp)
 1800af8:	dfc00115 	stw	ra,4(sp)
 1800afc:	3021883a 	mov	r16,r6
 1800b00:	0007883a 	mov	r3,zero
 1800b04:	1000061e 	bne	r2,zero,1800b20 <__sprint_r+0x34>
 1800b08:	1805883a 	mov	r2,r3
 1800b0c:	30000115 	stw	zero,4(r6)
 1800b10:	dfc00117 	ldw	ra,4(sp)
 1800b14:	dc000017 	ldw	r16,0(sp)
 1800b18:	dec00204 	addi	sp,sp,8
 1800b1c:	f800283a 	ret
 1800b20:	1804cc40 	call	1804cc4 <__sfvwrite_r>
 1800b24:	1007883a 	mov	r3,r2
 1800b28:	1805883a 	mov	r2,r3
 1800b2c:	80000115 	stw	zero,4(r16)
 1800b30:	80000215 	stw	zero,8(r16)
 1800b34:	dfc00117 	ldw	ra,4(sp)
 1800b38:	dc000017 	ldw	r16,0(sp)
 1800b3c:	dec00204 	addi	sp,sp,8
 1800b40:	f800283a 	ret

01800b44 <___vfprintf_internal_r>:
 1800b44:	defea404 	addi	sp,sp,-1392
 1800b48:	dd815815 	stw	r22,1376(sp)
 1800b4c:	dc015215 	stw	r16,1352(sp)
 1800b50:	d9c15115 	stw	r7,1348(sp)
 1800b54:	dfc15b15 	stw	ra,1388(sp)
 1800b58:	df015a15 	stw	fp,1384(sp)
 1800b5c:	ddc15915 	stw	r23,1380(sp)
 1800b60:	dd415715 	stw	r21,1372(sp)
 1800b64:	dd015615 	stw	r20,1368(sp)
 1800b68:	dcc15515 	stw	r19,1364(sp)
 1800b6c:	dc815415 	stw	r18,1360(sp)
 1800b70:	dc415315 	stw	r17,1356(sp)
 1800b74:	282d883a 	mov	r22,r5
 1800b78:	3021883a 	mov	r16,r6
 1800b7c:	d9014f15 	stw	r4,1340(sp)
 1800b80:	18052e80 	call	18052e8 <_localeconv_r>
 1800b84:	10800017 	ldw	r2,0(r2)
 1800b88:	d9c15117 	ldw	r7,1348(sp)
 1800b8c:	d8814915 	stw	r2,1316(sp)
 1800b90:	d8814f17 	ldw	r2,1340(sp)
 1800b94:	10000226 	beq	r2,zero,1800ba0 <___vfprintf_internal_r+0x5c>
 1800b98:	10800e17 	ldw	r2,56(r2)
 1800b9c:	10020d26 	beq	r2,zero,18013d4 <___vfprintf_internal_r+0x890>
 1800ba0:	b080030b 	ldhu	r2,12(r22)
 1800ba4:	1080020c 	andi	r2,r2,8
 1800ba8:	10020e26 	beq	r2,zero,18013e4 <___vfprintf_internal_r+0x8a0>
 1800bac:	b0800417 	ldw	r2,16(r22)
 1800bb0:	10020c26 	beq	r2,zero,18013e4 <___vfprintf_internal_r+0x8a0>
 1800bb4:	b200030b 	ldhu	r8,12(r22)
 1800bb8:	00800284 	movi	r2,10
 1800bbc:	40c0068c 	andi	r3,r8,26
 1800bc0:	18802f1e 	bne	r3,r2,1800c80 <___vfprintf_internal_r+0x13c>
 1800bc4:	b080038f 	ldh	r2,14(r22)
 1800bc8:	10002d16 	blt	r2,zero,1800c80 <___vfprintf_internal_r+0x13c>
 1800bcc:	b240038b 	ldhu	r9,14(r22)
 1800bd0:	b2800717 	ldw	r10,28(r22)
 1800bd4:	b2c00917 	ldw	r11,36(r22)
 1800bd8:	d9014f17 	ldw	r4,1340(sp)
 1800bdc:	dc402904 	addi	r17,sp,164
 1800be0:	d8804004 	addi	r2,sp,256
 1800be4:	00c10004 	movi	r3,1024
 1800be8:	423fff4c 	andi	r8,r8,65533
 1800bec:	800d883a 	mov	r6,r16
 1800bf0:	880b883a 	mov	r5,r17
 1800bf4:	da002c0d 	sth	r8,176(sp)
 1800bf8:	da402c8d 	sth	r9,178(sp)
 1800bfc:	da803015 	stw	r10,192(sp)
 1800c00:	dac03215 	stw	r11,200(sp)
 1800c04:	d8802d15 	stw	r2,180(sp)
 1800c08:	d8c02e15 	stw	r3,184(sp)
 1800c0c:	d8802915 	stw	r2,164(sp)
 1800c10:	d8c02b15 	stw	r3,172(sp)
 1800c14:	d8002f15 	stw	zero,188(sp)
 1800c18:	1800b440 	call	1800b44 <___vfprintf_internal_r>
 1800c1c:	d8814b15 	stw	r2,1324(sp)
 1800c20:	10000416 	blt	r2,zero,1800c34 <___vfprintf_internal_r+0xf0>
 1800c24:	d9014f17 	ldw	r4,1340(sp)
 1800c28:	880b883a 	mov	r5,r17
 1800c2c:	18043600 	call	1804360 <_fflush_r>
 1800c30:	1002321e 	bne	r2,zero,18014fc <___vfprintf_internal_r+0x9b8>
 1800c34:	d8802c0b 	ldhu	r2,176(sp)
 1800c38:	1080100c 	andi	r2,r2,64
 1800c3c:	10000326 	beq	r2,zero,1800c4c <___vfprintf_internal_r+0x108>
 1800c40:	b080030b 	ldhu	r2,12(r22)
 1800c44:	10801014 	ori	r2,r2,64
 1800c48:	b080030d 	sth	r2,12(r22)
 1800c4c:	d8814b17 	ldw	r2,1324(sp)
 1800c50:	dfc15b17 	ldw	ra,1388(sp)
 1800c54:	df015a17 	ldw	fp,1384(sp)
 1800c58:	ddc15917 	ldw	r23,1380(sp)
 1800c5c:	dd815817 	ldw	r22,1376(sp)
 1800c60:	dd415717 	ldw	r21,1372(sp)
 1800c64:	dd015617 	ldw	r20,1368(sp)
 1800c68:	dcc15517 	ldw	r19,1364(sp)
 1800c6c:	dc815417 	ldw	r18,1360(sp)
 1800c70:	dc415317 	ldw	r17,1356(sp)
 1800c74:	dc015217 	ldw	r16,1352(sp)
 1800c78:	dec15c04 	addi	sp,sp,1392
 1800c7c:	f800283a 	ret
 1800c80:	0005883a 	mov	r2,zero
 1800c84:	0007883a 	mov	r3,zero
 1800c88:	dd401904 	addi	r21,sp,100
 1800c8c:	d8814215 	stw	r2,1288(sp)
 1800c90:	802f883a 	mov	r23,r16
 1800c94:	d8c14315 	stw	r3,1292(sp)
 1800c98:	d8014b15 	stw	zero,1324(sp)
 1800c9c:	d8014815 	stw	zero,1312(sp)
 1800ca0:	d8014415 	stw	zero,1296(sp)
 1800ca4:	d8014715 	stw	zero,1308(sp)
 1800ca8:	dd400c15 	stw	r21,48(sp)
 1800cac:	d8000e15 	stw	zero,56(sp)
 1800cb0:	d8000d15 	stw	zero,52(sp)
 1800cb4:	b8800007 	ldb	r2,0(r23)
 1800cb8:	10001926 	beq	r2,zero,1800d20 <___vfprintf_internal_r+0x1dc>
 1800cbc:	00c00944 	movi	r3,37
 1800cc0:	10c01726 	beq	r2,r3,1800d20 <___vfprintf_internal_r+0x1dc>
 1800cc4:	b821883a 	mov	r16,r23
 1800cc8:	00000106 	br	1800cd0 <___vfprintf_internal_r+0x18c>
 1800ccc:	10c00326 	beq	r2,r3,1800cdc <___vfprintf_internal_r+0x198>
 1800cd0:	84000044 	addi	r16,r16,1
 1800cd4:	80800007 	ldb	r2,0(r16)
 1800cd8:	103ffc1e 	bne	r2,zero,1800ccc <___vfprintf_internal_r+0x188>
 1800cdc:	85e7c83a 	sub	r19,r16,r23
 1800ce0:	98000e26 	beq	r19,zero,1800d1c <___vfprintf_internal_r+0x1d8>
 1800ce4:	dc800e17 	ldw	r18,56(sp)
 1800ce8:	dc400d17 	ldw	r17,52(sp)
 1800cec:	008001c4 	movi	r2,7
 1800cf0:	94e5883a 	add	r18,r18,r19
 1800cf4:	8c400044 	addi	r17,r17,1
 1800cf8:	adc00015 	stw	r23,0(r21)
 1800cfc:	dc800e15 	stw	r18,56(sp)
 1800d00:	acc00115 	stw	r19,4(r21)
 1800d04:	dc400d15 	stw	r17,52(sp)
 1800d08:	14428b16 	blt	r2,r17,1801738 <___vfprintf_internal_r+0xbf4>
 1800d0c:	ad400204 	addi	r21,r21,8
 1800d10:	d9014b17 	ldw	r4,1324(sp)
 1800d14:	24c9883a 	add	r4,r4,r19
 1800d18:	d9014b15 	stw	r4,1324(sp)
 1800d1c:	802f883a 	mov	r23,r16
 1800d20:	b8800007 	ldb	r2,0(r23)
 1800d24:	10013c26 	beq	r2,zero,1801218 <___vfprintf_internal_r+0x6d4>
 1800d28:	bdc00044 	addi	r23,r23,1
 1800d2c:	d8000405 	stb	zero,16(sp)
 1800d30:	b8c00007 	ldb	r3,0(r23)
 1800d34:	04ffffc4 	movi	r19,-1
 1800d38:	d8014c15 	stw	zero,1328(sp)
 1800d3c:	d8014a15 	stw	zero,1320(sp)
 1800d40:	d8c14d15 	stw	r3,1332(sp)
 1800d44:	bdc00044 	addi	r23,r23,1
 1800d48:	d9414d17 	ldw	r5,1332(sp)
 1800d4c:	00801604 	movi	r2,88
 1800d50:	28fff804 	addi	r3,r5,-32
 1800d54:	10c06036 	bltu	r2,r3,1800ed8 <___vfprintf_internal_r+0x394>
 1800d58:	18c5883a 	add	r2,r3,r3
 1800d5c:	1085883a 	add	r2,r2,r2
 1800d60:	00c06034 	movhi	r3,384
 1800d64:	18c35d04 	addi	r3,r3,3444
 1800d68:	10c5883a 	add	r2,r2,r3
 1800d6c:	11000017 	ldw	r4,0(r2)
 1800d70:	2000683a 	jmp	r4
 1800d74:	01801ce8 	cmpgeui	r6,zero,115
 1800d78:	01800ed8 	cmpnei	r6,zero,59
 1800d7c:	01800ed8 	cmpnei	r6,zero,59
 1800d80:	01801cd4 	movui	r6,115
 1800d84:	01800ed8 	cmpnei	r6,zero,59
 1800d88:	01800ed8 	cmpnei	r6,zero,59
 1800d8c:	01800ed8 	cmpnei	r6,zero,59
 1800d90:	01800ed8 	cmpnei	r6,zero,59
 1800d94:	01800ed8 	cmpnei	r6,zero,59
 1800d98:	01800ed8 	cmpnei	r6,zero,59
 1800d9c:	01801ab4 	movhi	r6,106
 1800da0:	01801cc4 	movi	r6,115
 1800da4:	01800ed8 	cmpnei	r6,zero,59
 1800da8:	01801acc 	andi	r6,zero,107
 1800dac:	01801d6c 	andhi	r6,zero,117
 1800db0:	01800ed8 	cmpnei	r6,zero,59
 1800db4:	01801d58 	cmpnei	r6,zero,117
 1800db8:	01801d14 	movui	r6,116
 1800dbc:	01801d14 	movui	r6,116
 1800dc0:	01801d14 	movui	r6,116
 1800dc4:	01801d14 	movui	r6,116
 1800dc8:	01801d14 	movui	r6,116
 1800dcc:	01801d14 	movui	r6,116
 1800dd0:	01801d14 	movui	r6,116
 1800dd4:	01801d14 	movui	r6,116
 1800dd8:	01801d14 	movui	r6,116
 1800ddc:	01800ed8 	cmpnei	r6,zero,59
 1800de0:	01800ed8 	cmpnei	r6,zero,59
 1800de4:	01800ed8 	cmpnei	r6,zero,59
 1800de8:	01800ed8 	cmpnei	r6,zero,59
 1800dec:	01800ed8 	cmpnei	r6,zero,59
 1800df0:	01800ed8 	cmpnei	r6,zero,59
 1800df4:	01800ed8 	cmpnei	r6,zero,59
 1800df8:	01800ed8 	cmpnei	r6,zero,59
 1800dfc:	01800ed8 	cmpnei	r6,zero,59
 1800e00:	01800ed8 	cmpnei	r6,zero,59
 1800e04:	01801530 	cmpltui	r6,zero,84
 1800e08:	01801b9c 	xori	r6,zero,110
 1800e0c:	01800ed8 	cmpnei	r6,zero,59
 1800e10:	01801b9c 	xori	r6,zero,110
 1800e14:	01800ed8 	cmpnei	r6,zero,59
 1800e18:	01800ed8 	cmpnei	r6,zero,59
 1800e1c:	01800ed8 	cmpnei	r6,zero,59
 1800e20:	01800ed8 	cmpnei	r6,zero,59
 1800e24:	01801d00 	call	1801d0 <__alt_mem_Onchip_Memory-0xe83e30>
 1800e28:	01800ed8 	cmpnei	r6,zero,59
 1800e2c:	01800ed8 	cmpnei	r6,zero,59
 1800e30:	018015e4 	muli	r6,zero,87
 1800e34:	01800ed8 	cmpnei	r6,zero,59
 1800e38:	01800ed8 	cmpnei	r6,zero,59
 1800e3c:	01800ed8 	cmpnei	r6,zero,59
 1800e40:	01800ed8 	cmpnei	r6,zero,59
 1800e44:	01800ed8 	cmpnei	r6,zero,59
 1800e48:	01801630 	cmpltui	r6,zero,88
 1800e4c:	01800ed8 	cmpnei	r6,zero,59
 1800e50:	01800ed8 	cmpnei	r6,zero,59
 1800e54:	01801c50 	cmplti	r6,zero,113
 1800e58:	01800ed8 	cmpnei	r6,zero,59
 1800e5c:	01800ed8 	cmpnei	r6,zero,59
 1800e60:	01800ed8 	cmpnei	r6,zero,59
 1800e64:	01800ed8 	cmpnei	r6,zero,59
 1800e68:	01800ed8 	cmpnei	r6,zero,59
 1800e6c:	01800ed8 	cmpnei	r6,zero,59
 1800e70:	01800ed8 	cmpnei	r6,zero,59
 1800e74:	01800ed8 	cmpnei	r6,zero,59
 1800e78:	01800ed8 	cmpnei	r6,zero,59
 1800e7c:	01800ed8 	cmpnei	r6,zero,59
 1800e80:	01801c24 	muli	r6,zero,112
 1800e84:	0180153c 	xorhi	r6,zero,84
 1800e88:	01801b9c 	xori	r6,zero,110
 1800e8c:	01801b9c 	xori	r6,zero,110
 1800e90:	01801b9c 	xori	r6,zero,110
 1800e94:	01801b88 	cmpgei	r6,zero,110
 1800e98:	0180153c 	xorhi	r6,zero,84
 1800e9c:	01800ed8 	cmpnei	r6,zero,59
 1800ea0:	01800ed8 	cmpnei	r6,zero,59
 1800ea4:	01801b10 	cmplti	r6,zero,108
 1800ea8:	01800ed8 	cmpnei	r6,zero,59
 1800eac:	01801ae0 	cmpeqi	r6,zero,107
 1800eb0:	018015f0 	cmpltui	r6,zero,87
 1800eb4:	01801b40 	call	1801b4 <__alt_mem_Onchip_Memory-0xe83e4c>
 1800eb8:	01801b2c 	andhi	r6,zero,108
 1800ebc:	01800ed8 	cmpnei	r6,zero,59
 1800ec0:	01801dd4 	movui	r6,119
 1800ec4:	01800ed8 	cmpnei	r6,zero,59
 1800ec8:	0180163c 	xorhi	r6,zero,88
 1800ecc:	01800ed8 	cmpnei	r6,zero,59
 1800ed0:	01800ed8 	cmpnei	r6,zero,59
 1800ed4:	01801cb4 	movhi	r6,114
 1800ed8:	d9014d17 	ldw	r4,1332(sp)
 1800edc:	2000ce26 	beq	r4,zero,1801218 <___vfprintf_internal_r+0x6d4>
 1800ee0:	01400044 	movi	r5,1
 1800ee4:	d9800f04 	addi	r6,sp,60
 1800ee8:	d9c14015 	stw	r7,1280(sp)
 1800eec:	d9414515 	stw	r5,1300(sp)
 1800ef0:	d9814115 	stw	r6,1284(sp)
 1800ef4:	280f883a 	mov	r7,r5
 1800ef8:	d9000f05 	stb	r4,60(sp)
 1800efc:	d8000405 	stb	zero,16(sp)
 1800f00:	d8014615 	stw	zero,1304(sp)
 1800f04:	d8c14c17 	ldw	r3,1328(sp)
 1800f08:	1880008c 	andi	r2,r3,2
 1800f0c:	1005003a 	cmpeq	r2,r2,zero
 1800f10:	d8815015 	stw	r2,1344(sp)
 1800f14:	1000031e 	bne	r2,zero,1800f24 <___vfprintf_internal_r+0x3e0>
 1800f18:	d9014517 	ldw	r4,1300(sp)
 1800f1c:	21000084 	addi	r4,r4,2
 1800f20:	d9014515 	stw	r4,1300(sp)
 1800f24:	d9414c17 	ldw	r5,1328(sp)
 1800f28:	2940210c 	andi	r5,r5,132
 1800f2c:	d9414e15 	stw	r5,1336(sp)
 1800f30:	28002d1e 	bne	r5,zero,1800fe8 <___vfprintf_internal_r+0x4a4>
 1800f34:	d9814a17 	ldw	r6,1320(sp)
 1800f38:	d8814517 	ldw	r2,1300(sp)
 1800f3c:	30a1c83a 	sub	r16,r6,r2
 1800f40:	0400290e 	bge	zero,r16,1800fe8 <___vfprintf_internal_r+0x4a4>
 1800f44:	00800404 	movi	r2,16
 1800f48:	14045e0e 	bge	r2,r16,18020c4 <___vfprintf_internal_r+0x1580>
 1800f4c:	dc800e17 	ldw	r18,56(sp)
 1800f50:	dc400d17 	ldw	r17,52(sp)
 1800f54:	1027883a 	mov	r19,r2
 1800f58:	07006074 	movhi	fp,385
 1800f5c:	e7369984 	addi	fp,fp,-9626
 1800f60:	050001c4 	movi	r20,7
 1800f64:	00000306 	br	1800f74 <___vfprintf_internal_r+0x430>
 1800f68:	843ffc04 	addi	r16,r16,-16
 1800f6c:	ad400204 	addi	r21,r21,8
 1800f70:	9c00130e 	bge	r19,r16,1800fc0 <___vfprintf_internal_r+0x47c>
 1800f74:	94800404 	addi	r18,r18,16
 1800f78:	8c400044 	addi	r17,r17,1
 1800f7c:	af000015 	stw	fp,0(r21)
 1800f80:	acc00115 	stw	r19,4(r21)
 1800f84:	dc800e15 	stw	r18,56(sp)
 1800f88:	dc400d15 	stw	r17,52(sp)
 1800f8c:	a47ff60e 	bge	r20,r17,1800f68 <___vfprintf_internal_r+0x424>
 1800f90:	d9014f17 	ldw	r4,1340(sp)
 1800f94:	b00b883a 	mov	r5,r22
 1800f98:	d9800c04 	addi	r6,sp,48
 1800f9c:	d9c15115 	stw	r7,1348(sp)
 1800fa0:	1800aec0 	call	1800aec <__sprint_r>
 1800fa4:	d9c15117 	ldw	r7,1348(sp)
 1800fa8:	10009e1e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1800fac:	843ffc04 	addi	r16,r16,-16
 1800fb0:	dc800e17 	ldw	r18,56(sp)
 1800fb4:	dc400d17 	ldw	r17,52(sp)
 1800fb8:	dd401904 	addi	r21,sp,100
 1800fbc:	9c3fed16 	blt	r19,r16,1800f74 <___vfprintf_internal_r+0x430>
 1800fc0:	9425883a 	add	r18,r18,r16
 1800fc4:	8c400044 	addi	r17,r17,1
 1800fc8:	008001c4 	movi	r2,7
 1800fcc:	af000015 	stw	fp,0(r21)
 1800fd0:	ac000115 	stw	r16,4(r21)
 1800fd4:	dc800e15 	stw	r18,56(sp)
 1800fd8:	dc400d15 	stw	r17,52(sp)
 1800fdc:	1441f516 	blt	r2,r17,18017b4 <___vfprintf_internal_r+0xc70>
 1800fe0:	ad400204 	addi	r21,r21,8
 1800fe4:	00000206 	br	1800ff0 <___vfprintf_internal_r+0x4ac>
 1800fe8:	dc800e17 	ldw	r18,56(sp)
 1800fec:	dc400d17 	ldw	r17,52(sp)
 1800ff0:	d8800407 	ldb	r2,16(sp)
 1800ff4:	10000b26 	beq	r2,zero,1801024 <___vfprintf_internal_r+0x4e0>
 1800ff8:	00800044 	movi	r2,1
 1800ffc:	94800044 	addi	r18,r18,1
 1801000:	8c400044 	addi	r17,r17,1
 1801004:	a8800115 	stw	r2,4(r21)
 1801008:	d8c00404 	addi	r3,sp,16
 180100c:	008001c4 	movi	r2,7
 1801010:	a8c00015 	stw	r3,0(r21)
 1801014:	dc800e15 	stw	r18,56(sp)
 1801018:	dc400d15 	stw	r17,52(sp)
 180101c:	1441da16 	blt	r2,r17,1801788 <___vfprintf_internal_r+0xc44>
 1801020:	ad400204 	addi	r21,r21,8
 1801024:	d9015017 	ldw	r4,1344(sp)
 1801028:	20000b1e 	bne	r4,zero,1801058 <___vfprintf_internal_r+0x514>
 180102c:	d8800444 	addi	r2,sp,17
 1801030:	94800084 	addi	r18,r18,2
 1801034:	8c400044 	addi	r17,r17,1
 1801038:	a8800015 	stw	r2,0(r21)
 180103c:	00c00084 	movi	r3,2
 1801040:	008001c4 	movi	r2,7
 1801044:	a8c00115 	stw	r3,4(r21)
 1801048:	dc800e15 	stw	r18,56(sp)
 180104c:	dc400d15 	stw	r17,52(sp)
 1801050:	1441c216 	blt	r2,r17,180175c <___vfprintf_internal_r+0xc18>
 1801054:	ad400204 	addi	r21,r21,8
 1801058:	d9414e17 	ldw	r5,1336(sp)
 180105c:	00802004 	movi	r2,128
 1801060:	2880b126 	beq	r5,r2,1801328 <___vfprintf_internal_r+0x7e4>
 1801064:	d8c14617 	ldw	r3,1304(sp)
 1801068:	19e1c83a 	sub	r16,r3,r7
 180106c:	0400260e 	bge	zero,r16,1801108 <___vfprintf_internal_r+0x5c4>
 1801070:	00800404 	movi	r2,16
 1801074:	1403cf0e 	bge	r2,r16,1801fb4 <___vfprintf_internal_r+0x1470>
 1801078:	1027883a 	mov	r19,r2
 180107c:	07006074 	movhi	fp,385
 1801080:	e7369584 	addi	fp,fp,-9642
 1801084:	050001c4 	movi	r20,7
 1801088:	00000306 	br	1801098 <___vfprintf_internal_r+0x554>
 180108c:	843ffc04 	addi	r16,r16,-16
 1801090:	ad400204 	addi	r21,r21,8
 1801094:	9c00130e 	bge	r19,r16,18010e4 <___vfprintf_internal_r+0x5a0>
 1801098:	94800404 	addi	r18,r18,16
 180109c:	8c400044 	addi	r17,r17,1
 18010a0:	af000015 	stw	fp,0(r21)
 18010a4:	acc00115 	stw	r19,4(r21)
 18010a8:	dc800e15 	stw	r18,56(sp)
 18010ac:	dc400d15 	stw	r17,52(sp)
 18010b0:	a47ff60e 	bge	r20,r17,180108c <___vfprintf_internal_r+0x548>
 18010b4:	d9014f17 	ldw	r4,1340(sp)
 18010b8:	b00b883a 	mov	r5,r22
 18010bc:	d9800c04 	addi	r6,sp,48
 18010c0:	d9c15115 	stw	r7,1348(sp)
 18010c4:	1800aec0 	call	1800aec <__sprint_r>
 18010c8:	d9c15117 	ldw	r7,1348(sp)
 18010cc:	1000551e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 18010d0:	843ffc04 	addi	r16,r16,-16
 18010d4:	dc800e17 	ldw	r18,56(sp)
 18010d8:	dc400d17 	ldw	r17,52(sp)
 18010dc:	dd401904 	addi	r21,sp,100
 18010e0:	9c3fed16 	blt	r19,r16,1801098 <___vfprintf_internal_r+0x554>
 18010e4:	9425883a 	add	r18,r18,r16
 18010e8:	8c400044 	addi	r17,r17,1
 18010ec:	008001c4 	movi	r2,7
 18010f0:	af000015 	stw	fp,0(r21)
 18010f4:	ac000115 	stw	r16,4(r21)
 18010f8:	dc800e15 	stw	r18,56(sp)
 18010fc:	dc400d15 	stw	r17,52(sp)
 1801100:	14418216 	blt	r2,r17,180170c <___vfprintf_internal_r+0xbc8>
 1801104:	ad400204 	addi	r21,r21,8
 1801108:	d9014c17 	ldw	r4,1328(sp)
 180110c:	2080400c 	andi	r2,r4,256
 1801110:	10004a1e 	bne	r2,zero,180123c <___vfprintf_internal_r+0x6f8>
 1801114:	d9414117 	ldw	r5,1284(sp)
 1801118:	91e5883a 	add	r18,r18,r7
 180111c:	8c400044 	addi	r17,r17,1
 1801120:	008001c4 	movi	r2,7
 1801124:	a9400015 	stw	r5,0(r21)
 1801128:	a9c00115 	stw	r7,4(r21)
 180112c:	dc800e15 	stw	r18,56(sp)
 1801130:	dc400d15 	stw	r17,52(sp)
 1801134:	14416716 	blt	r2,r17,18016d4 <___vfprintf_internal_r+0xb90>
 1801138:	a8c00204 	addi	r3,r21,8
 180113c:	d9814c17 	ldw	r6,1328(sp)
 1801140:	3080010c 	andi	r2,r6,4
 1801144:	10002826 	beq	r2,zero,18011e8 <___vfprintf_internal_r+0x6a4>
 1801148:	d8814a17 	ldw	r2,1320(sp)
 180114c:	d9014517 	ldw	r4,1300(sp)
 1801150:	1121c83a 	sub	r16,r2,r4
 1801154:	0400240e 	bge	zero,r16,18011e8 <___vfprintf_internal_r+0x6a4>
 1801158:	00800404 	movi	r2,16
 180115c:	1404550e 	bge	r2,r16,18022b4 <___vfprintf_internal_r+0x1770>
 1801160:	dc400d17 	ldw	r17,52(sp)
 1801164:	1027883a 	mov	r19,r2
 1801168:	07006074 	movhi	fp,385
 180116c:	e7369984 	addi	fp,fp,-9626
 1801170:	050001c4 	movi	r20,7
 1801174:	00000306 	br	1801184 <___vfprintf_internal_r+0x640>
 1801178:	843ffc04 	addi	r16,r16,-16
 180117c:	18c00204 	addi	r3,r3,8
 1801180:	9c00110e 	bge	r19,r16,18011c8 <___vfprintf_internal_r+0x684>
 1801184:	94800404 	addi	r18,r18,16
 1801188:	8c400044 	addi	r17,r17,1
 180118c:	1f000015 	stw	fp,0(r3)
 1801190:	1cc00115 	stw	r19,4(r3)
 1801194:	dc800e15 	stw	r18,56(sp)
 1801198:	dc400d15 	stw	r17,52(sp)
 180119c:	a47ff60e 	bge	r20,r17,1801178 <___vfprintf_internal_r+0x634>
 18011a0:	d9014f17 	ldw	r4,1340(sp)
 18011a4:	b00b883a 	mov	r5,r22
 18011a8:	d9800c04 	addi	r6,sp,48
 18011ac:	1800aec0 	call	1800aec <__sprint_r>
 18011b0:	10001c1e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 18011b4:	843ffc04 	addi	r16,r16,-16
 18011b8:	dc800e17 	ldw	r18,56(sp)
 18011bc:	dc400d17 	ldw	r17,52(sp)
 18011c0:	d8c01904 	addi	r3,sp,100
 18011c4:	9c3fef16 	blt	r19,r16,1801184 <___vfprintf_internal_r+0x640>
 18011c8:	9425883a 	add	r18,r18,r16
 18011cc:	8c400044 	addi	r17,r17,1
 18011d0:	008001c4 	movi	r2,7
 18011d4:	1f000015 	stw	fp,0(r3)
 18011d8:	1c000115 	stw	r16,4(r3)
 18011dc:	dc800e15 	stw	r18,56(sp)
 18011e0:	dc400d15 	stw	r17,52(sp)
 18011e4:	1440cb16 	blt	r2,r17,1801514 <___vfprintf_internal_r+0x9d0>
 18011e8:	d8814a17 	ldw	r2,1320(sp)
 18011ec:	d9414517 	ldw	r5,1300(sp)
 18011f0:	1140010e 	bge	r2,r5,18011f8 <___vfprintf_internal_r+0x6b4>
 18011f4:	2805883a 	mov	r2,r5
 18011f8:	d9814b17 	ldw	r6,1324(sp)
 18011fc:	308d883a 	add	r6,r6,r2
 1801200:	d9814b15 	stw	r6,1324(sp)
 1801204:	90013b1e 	bne	r18,zero,18016f4 <___vfprintf_internal_r+0xbb0>
 1801208:	d9c14017 	ldw	r7,1280(sp)
 180120c:	dd401904 	addi	r21,sp,100
 1801210:	d8000d15 	stw	zero,52(sp)
 1801214:	003ea706 	br	1800cb4 <___vfprintf_internal_r+0x170>
 1801218:	d8800e17 	ldw	r2,56(sp)
 180121c:	1005451e 	bne	r2,zero,1802734 <___vfprintf_internal_r+0x1bf0>
 1801220:	d8000d15 	stw	zero,52(sp)
 1801224:	b080030b 	ldhu	r2,12(r22)
 1801228:	1080100c 	andi	r2,r2,64
 180122c:	103e8726 	beq	r2,zero,1800c4c <___vfprintf_internal_r+0x108>
 1801230:	00bfffc4 	movi	r2,-1
 1801234:	d8814b15 	stw	r2,1324(sp)
 1801238:	003e8406 	br	1800c4c <___vfprintf_internal_r+0x108>
 180123c:	d9814d17 	ldw	r6,1332(sp)
 1801240:	00801944 	movi	r2,101
 1801244:	11806e16 	blt	r2,r6,1801400 <___vfprintf_internal_r+0x8bc>
 1801248:	d9414717 	ldw	r5,1308(sp)
 180124c:	00c00044 	movi	r3,1
 1801250:	1943490e 	bge	r3,r5,1801f78 <___vfprintf_internal_r+0x1434>
 1801254:	d8814117 	ldw	r2,1284(sp)
 1801258:	94800044 	addi	r18,r18,1
 180125c:	8c400044 	addi	r17,r17,1
 1801260:	a8800015 	stw	r2,0(r21)
 1801264:	008001c4 	movi	r2,7
 1801268:	a8c00115 	stw	r3,4(r21)
 180126c:	dc800e15 	stw	r18,56(sp)
 1801270:	dc400d15 	stw	r17,52(sp)
 1801274:	1441ca16 	blt	r2,r17,18019a0 <___vfprintf_internal_r+0xe5c>
 1801278:	a8c00204 	addi	r3,r21,8
 180127c:	d9014917 	ldw	r4,1316(sp)
 1801280:	00800044 	movi	r2,1
 1801284:	94800044 	addi	r18,r18,1
 1801288:	8c400044 	addi	r17,r17,1
 180128c:	18800115 	stw	r2,4(r3)
 1801290:	008001c4 	movi	r2,7
 1801294:	19000015 	stw	r4,0(r3)
 1801298:	dc800e15 	stw	r18,56(sp)
 180129c:	dc400d15 	stw	r17,52(sp)
 18012a0:	1441b616 	blt	r2,r17,180197c <___vfprintf_internal_r+0xe38>
 18012a4:	1cc00204 	addi	r19,r3,8
 18012a8:	d9014217 	ldw	r4,1288(sp)
 18012ac:	d9414317 	ldw	r5,1292(sp)
 18012b0:	000d883a 	mov	r6,zero
 18012b4:	000f883a 	mov	r7,zero
 18012b8:	18095f80 	call	18095f8 <__nedf2>
 18012bc:	10017426 	beq	r2,zero,1801890 <___vfprintf_internal_r+0xd4c>
 18012c0:	d9414717 	ldw	r5,1308(sp)
 18012c4:	d9814117 	ldw	r6,1284(sp)
 18012c8:	8c400044 	addi	r17,r17,1
 18012cc:	2c85883a 	add	r2,r5,r18
 18012d0:	14bfffc4 	addi	r18,r2,-1
 18012d4:	28bfffc4 	addi	r2,r5,-1
 18012d8:	30c00044 	addi	r3,r6,1
 18012dc:	98800115 	stw	r2,4(r19)
 18012e0:	008001c4 	movi	r2,7
 18012e4:	98c00015 	stw	r3,0(r19)
 18012e8:	dc800e15 	stw	r18,56(sp)
 18012ec:	dc400d15 	stw	r17,52(sp)
 18012f0:	14418e16 	blt	r2,r17,180192c <___vfprintf_internal_r+0xde8>
 18012f4:	9cc00204 	addi	r19,r19,8
 18012f8:	d9414817 	ldw	r5,1312(sp)
 18012fc:	d8800804 	addi	r2,sp,32
 1801300:	8c400044 	addi	r17,r17,1
 1801304:	9165883a 	add	r18,r18,r5
 1801308:	98800015 	stw	r2,0(r19)
 180130c:	008001c4 	movi	r2,7
 1801310:	99400115 	stw	r5,4(r19)
 1801314:	dc800e15 	stw	r18,56(sp)
 1801318:	dc400d15 	stw	r17,52(sp)
 180131c:	1440ed16 	blt	r2,r17,18016d4 <___vfprintf_internal_r+0xb90>
 1801320:	98c00204 	addi	r3,r19,8
 1801324:	003f8506 	br	180113c <___vfprintf_internal_r+0x5f8>
 1801328:	d9814a17 	ldw	r6,1320(sp)
 180132c:	d8814517 	ldw	r2,1300(sp)
 1801330:	30a1c83a 	sub	r16,r6,r2
 1801334:	043f4b0e 	bge	zero,r16,1801064 <___vfprintf_internal_r+0x520>
 1801338:	00800404 	movi	r2,16
 180133c:	14043a0e 	bge	r2,r16,1802428 <___vfprintf_internal_r+0x18e4>
 1801340:	1027883a 	mov	r19,r2
 1801344:	07006074 	movhi	fp,385
 1801348:	e7369584 	addi	fp,fp,-9642
 180134c:	050001c4 	movi	r20,7
 1801350:	00000306 	br	1801360 <___vfprintf_internal_r+0x81c>
 1801354:	843ffc04 	addi	r16,r16,-16
 1801358:	ad400204 	addi	r21,r21,8
 180135c:	9c00130e 	bge	r19,r16,18013ac <___vfprintf_internal_r+0x868>
 1801360:	94800404 	addi	r18,r18,16
 1801364:	8c400044 	addi	r17,r17,1
 1801368:	af000015 	stw	fp,0(r21)
 180136c:	acc00115 	stw	r19,4(r21)
 1801370:	dc800e15 	stw	r18,56(sp)
 1801374:	dc400d15 	stw	r17,52(sp)
 1801378:	a47ff60e 	bge	r20,r17,1801354 <___vfprintf_internal_r+0x810>
 180137c:	d9014f17 	ldw	r4,1340(sp)
 1801380:	b00b883a 	mov	r5,r22
 1801384:	d9800c04 	addi	r6,sp,48
 1801388:	d9c15115 	stw	r7,1348(sp)
 180138c:	1800aec0 	call	1800aec <__sprint_r>
 1801390:	d9c15117 	ldw	r7,1348(sp)
 1801394:	103fa31e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1801398:	843ffc04 	addi	r16,r16,-16
 180139c:	dc800e17 	ldw	r18,56(sp)
 18013a0:	dc400d17 	ldw	r17,52(sp)
 18013a4:	dd401904 	addi	r21,sp,100
 18013a8:	9c3fed16 	blt	r19,r16,1801360 <___vfprintf_internal_r+0x81c>
 18013ac:	9425883a 	add	r18,r18,r16
 18013b0:	8c400044 	addi	r17,r17,1
 18013b4:	008001c4 	movi	r2,7
 18013b8:	af000015 	stw	fp,0(r21)
 18013bc:	ac000115 	stw	r16,4(r21)
 18013c0:	dc800e15 	stw	r18,56(sp)
 18013c4:	dc400d15 	stw	r17,52(sp)
 18013c8:	14416116 	blt	r2,r17,1801950 <___vfprintf_internal_r+0xe0c>
 18013cc:	ad400204 	addi	r21,r21,8
 18013d0:	003f2406 	br	1801064 <___vfprintf_internal_r+0x520>
 18013d4:	d9014f17 	ldw	r4,1340(sp)
 18013d8:	18045f80 	call	18045f8 <__sinit>
 18013dc:	d9c15117 	ldw	r7,1348(sp)
 18013e0:	003def06 	br	1800ba0 <___vfprintf_internal_r+0x5c>
 18013e4:	d9014f17 	ldw	r4,1340(sp)
 18013e8:	b00b883a 	mov	r5,r22
 18013ec:	d9c15115 	stw	r7,1348(sp)
 18013f0:	1802a2c0 	call	1802a2c <__swsetup_r>
 18013f4:	d9c15117 	ldw	r7,1348(sp)
 18013f8:	103dee26 	beq	r2,zero,1800bb4 <___vfprintf_internal_r+0x70>
 18013fc:	003f8c06 	br	1801230 <___vfprintf_internal_r+0x6ec>
 1801400:	d9014217 	ldw	r4,1288(sp)
 1801404:	d9414317 	ldw	r5,1292(sp)
 1801408:	000d883a 	mov	r6,zero
 180140c:	000f883a 	mov	r7,zero
 1801410:	18095700 	call	1809570 <__eqdf2>
 1801414:	1000f21e 	bne	r2,zero,18017e0 <___vfprintf_internal_r+0xc9c>
 1801418:	00806074 	movhi	r2,385
 180141c:	10b69504 	addi	r2,r2,-9644
 1801420:	94800044 	addi	r18,r18,1
 1801424:	8c400044 	addi	r17,r17,1
 1801428:	a8800015 	stw	r2,0(r21)
 180142c:	00c00044 	movi	r3,1
 1801430:	008001c4 	movi	r2,7
 1801434:	a8c00115 	stw	r3,4(r21)
 1801438:	dc800e15 	stw	r18,56(sp)
 180143c:	dc400d15 	stw	r17,52(sp)
 1801440:	14430016 	blt	r2,r17,1802044 <___vfprintf_internal_r+0x1500>
 1801444:	a8c00204 	addi	r3,r21,8
 1801448:	d8800517 	ldw	r2,20(sp)
 180144c:	d9014717 	ldw	r4,1308(sp)
 1801450:	11015c0e 	bge	r2,r4,18019c4 <___vfprintf_internal_r+0xe80>
 1801454:	dc400d17 	ldw	r17,52(sp)
 1801458:	d9814917 	ldw	r6,1316(sp)
 180145c:	00800044 	movi	r2,1
 1801460:	94800044 	addi	r18,r18,1
 1801464:	8c400044 	addi	r17,r17,1
 1801468:	18800115 	stw	r2,4(r3)
 180146c:	008001c4 	movi	r2,7
 1801470:	19800015 	stw	r6,0(r3)
 1801474:	dc800e15 	stw	r18,56(sp)
 1801478:	dc400d15 	stw	r17,52(sp)
 180147c:	14431616 	blt	r2,r17,18020d8 <___vfprintf_internal_r+0x1594>
 1801480:	18c00204 	addi	r3,r3,8
 1801484:	d8814717 	ldw	r2,1308(sp)
 1801488:	143fffc4 	addi	r16,r2,-1
 180148c:	043f2b0e 	bge	zero,r16,180113c <___vfprintf_internal_r+0x5f8>
 1801490:	00800404 	movi	r2,16
 1801494:	1402a80e 	bge	r2,r16,1801f38 <___vfprintf_internal_r+0x13f4>
 1801498:	dc400d17 	ldw	r17,52(sp)
 180149c:	1027883a 	mov	r19,r2
 18014a0:	07006074 	movhi	fp,385
 18014a4:	e7369584 	addi	fp,fp,-9642
 18014a8:	050001c4 	movi	r20,7
 18014ac:	00000306 	br	18014bc <___vfprintf_internal_r+0x978>
 18014b0:	18c00204 	addi	r3,r3,8
 18014b4:	843ffc04 	addi	r16,r16,-16
 18014b8:	9c02a20e 	bge	r19,r16,1801f44 <___vfprintf_internal_r+0x1400>
 18014bc:	94800404 	addi	r18,r18,16
 18014c0:	8c400044 	addi	r17,r17,1
 18014c4:	1f000015 	stw	fp,0(r3)
 18014c8:	1cc00115 	stw	r19,4(r3)
 18014cc:	dc800e15 	stw	r18,56(sp)
 18014d0:	dc400d15 	stw	r17,52(sp)
 18014d4:	a47ff60e 	bge	r20,r17,18014b0 <___vfprintf_internal_r+0x96c>
 18014d8:	d9014f17 	ldw	r4,1340(sp)
 18014dc:	b00b883a 	mov	r5,r22
 18014e0:	d9800c04 	addi	r6,sp,48
 18014e4:	1800aec0 	call	1800aec <__sprint_r>
 18014e8:	103f4e1e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 18014ec:	dc800e17 	ldw	r18,56(sp)
 18014f0:	dc400d17 	ldw	r17,52(sp)
 18014f4:	d8c01904 	addi	r3,sp,100
 18014f8:	003fee06 	br	18014b4 <___vfprintf_internal_r+0x970>
 18014fc:	d8802c0b 	ldhu	r2,176(sp)
 1801500:	00ffffc4 	movi	r3,-1
 1801504:	d8c14b15 	stw	r3,1324(sp)
 1801508:	1080100c 	andi	r2,r2,64
 180150c:	103dcc1e 	bne	r2,zero,1800c40 <___vfprintf_internal_r+0xfc>
 1801510:	003dce06 	br	1800c4c <___vfprintf_internal_r+0x108>
 1801514:	d9014f17 	ldw	r4,1340(sp)
 1801518:	b00b883a 	mov	r5,r22
 180151c:	d9800c04 	addi	r6,sp,48
 1801520:	1800aec0 	call	1800aec <__sprint_r>
 1801524:	103f3f1e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1801528:	dc800e17 	ldw	r18,56(sp)
 180152c:	003f2e06 	br	18011e8 <___vfprintf_internal_r+0x6a4>
 1801530:	d9414c17 	ldw	r5,1328(sp)
 1801534:	29400414 	ori	r5,r5,16
 1801538:	d9414c15 	stw	r5,1328(sp)
 180153c:	d9814c17 	ldw	r6,1328(sp)
 1801540:	3080080c 	andi	r2,r6,32
 1801544:	10014f1e 	bne	r2,zero,1801a84 <___vfprintf_internal_r+0xf40>
 1801548:	d8c14c17 	ldw	r3,1328(sp)
 180154c:	1880040c 	andi	r2,r3,16
 1801550:	1002f01e 	bne	r2,zero,1802114 <___vfprintf_internal_r+0x15d0>
 1801554:	d9014c17 	ldw	r4,1328(sp)
 1801558:	2080100c 	andi	r2,r4,64
 180155c:	1002ed26 	beq	r2,zero,1802114 <___vfprintf_internal_r+0x15d0>
 1801560:	3880000f 	ldh	r2,0(r7)
 1801564:	39c00104 	addi	r7,r7,4
 1801568:	d9c14015 	stw	r7,1280(sp)
 180156c:	1023d7fa 	srai	r17,r2,31
 1801570:	1021883a 	mov	r16,r2
 1801574:	88037816 	blt	r17,zero,1802358 <___vfprintf_internal_r+0x1814>
 1801578:	01000044 	movi	r4,1
 180157c:	98000416 	blt	r19,zero,1801590 <___vfprintf_internal_r+0xa4c>
 1801580:	d8c14c17 	ldw	r3,1328(sp)
 1801584:	00bfdfc4 	movi	r2,-129
 1801588:	1886703a 	and	r3,r3,r2
 180158c:	d8c14c15 	stw	r3,1328(sp)
 1801590:	8444b03a 	or	r2,r16,r17
 1801594:	10022c1e 	bne	r2,zero,1801e48 <___vfprintf_internal_r+0x1304>
 1801598:	98022b1e 	bne	r19,zero,1801e48 <___vfprintf_internal_r+0x1304>
 180159c:	20803fcc 	andi	r2,r4,255
 18015a0:	1002a126 	beq	r2,zero,1802028 <___vfprintf_internal_r+0x14e4>
 18015a4:	d8c01904 	addi	r3,sp,100
 18015a8:	dd000f04 	addi	r20,sp,60
 18015ac:	d8c14115 	stw	r3,1284(sp)
 18015b0:	d8c14117 	ldw	r3,1284(sp)
 18015b4:	dcc14515 	stw	r19,1300(sp)
 18015b8:	a0c5c83a 	sub	r2,r20,r3
 18015bc:	11c00a04 	addi	r7,r2,40
 18015c0:	99c0010e 	bge	r19,r7,18015c8 <___vfprintf_internal_r+0xa84>
 18015c4:	d9c14515 	stw	r7,1300(sp)
 18015c8:	dcc14615 	stw	r19,1304(sp)
 18015cc:	d8800407 	ldb	r2,16(sp)
 18015d0:	103e4c26 	beq	r2,zero,1800f04 <___vfprintf_internal_r+0x3c0>
 18015d4:	d8814517 	ldw	r2,1300(sp)
 18015d8:	10800044 	addi	r2,r2,1
 18015dc:	d8814515 	stw	r2,1300(sp)
 18015e0:	003e4806 	br	1800f04 <___vfprintf_internal_r+0x3c0>
 18015e4:	d9814c17 	ldw	r6,1328(sp)
 18015e8:	31800414 	ori	r6,r6,16
 18015ec:	d9814c15 	stw	r6,1328(sp)
 18015f0:	d8c14c17 	ldw	r3,1328(sp)
 18015f4:	1880080c 	andi	r2,r3,32
 18015f8:	1001271e 	bne	r2,zero,1801a98 <___vfprintf_internal_r+0xf54>
 18015fc:	d9414c17 	ldw	r5,1328(sp)
 1801600:	2880040c 	andi	r2,r5,16
 1801604:	1002bc1e 	bne	r2,zero,18020f8 <___vfprintf_internal_r+0x15b4>
 1801608:	d9814c17 	ldw	r6,1328(sp)
 180160c:	3080100c 	andi	r2,r6,64
 1801610:	1002b926 	beq	r2,zero,18020f8 <___vfprintf_internal_r+0x15b4>
 1801614:	3c00000b 	ldhu	r16,0(r7)
 1801618:	0009883a 	mov	r4,zero
 180161c:	39c00104 	addi	r7,r7,4
 1801620:	0023883a 	mov	r17,zero
 1801624:	d9c14015 	stw	r7,1280(sp)
 1801628:	d8000405 	stb	zero,16(sp)
 180162c:	003fd306 	br	180157c <___vfprintf_internal_r+0xa38>
 1801630:	d9014c17 	ldw	r4,1328(sp)
 1801634:	21000414 	ori	r4,r4,16
 1801638:	d9014c15 	stw	r4,1328(sp)
 180163c:	d9414c17 	ldw	r5,1328(sp)
 1801640:	2880080c 	andi	r2,r5,32
 1801644:	1001081e 	bne	r2,zero,1801a68 <___vfprintf_internal_r+0xf24>
 1801648:	d8c14c17 	ldw	r3,1328(sp)
 180164c:	1880040c 	andi	r2,r3,16
 1801650:	1002b61e 	bne	r2,zero,180212c <___vfprintf_internal_r+0x15e8>
 1801654:	d9014c17 	ldw	r4,1328(sp)
 1801658:	2080100c 	andi	r2,r4,64
 180165c:	1002b326 	beq	r2,zero,180212c <___vfprintf_internal_r+0x15e8>
 1801660:	3c00000b 	ldhu	r16,0(r7)
 1801664:	01000044 	movi	r4,1
 1801668:	39c00104 	addi	r7,r7,4
 180166c:	0023883a 	mov	r17,zero
 1801670:	d9c14015 	stw	r7,1280(sp)
 1801674:	d8000405 	stb	zero,16(sp)
 1801678:	003fc006 	br	180157c <___vfprintf_internal_r+0xa38>
 180167c:	d9014f17 	ldw	r4,1340(sp)
 1801680:	b00b883a 	mov	r5,r22
 1801684:	d9800c04 	addi	r6,sp,48
 1801688:	1800aec0 	call	1800aec <__sprint_r>
 180168c:	103ee51e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1801690:	dc800e17 	ldw	r18,56(sp)
 1801694:	d8c01904 	addi	r3,sp,100
 1801698:	d9814c17 	ldw	r6,1328(sp)
 180169c:	3080004c 	andi	r2,r6,1
 18016a0:	1005003a 	cmpeq	r2,r2,zero
 18016a4:	103ea51e 	bne	r2,zero,180113c <___vfprintf_internal_r+0x5f8>
 18016a8:	00800044 	movi	r2,1
 18016ac:	dc400d17 	ldw	r17,52(sp)
 18016b0:	18800115 	stw	r2,4(r3)
 18016b4:	d8814917 	ldw	r2,1316(sp)
 18016b8:	94800044 	addi	r18,r18,1
 18016bc:	8c400044 	addi	r17,r17,1
 18016c0:	18800015 	stw	r2,0(r3)
 18016c4:	008001c4 	movi	r2,7
 18016c8:	dc800e15 	stw	r18,56(sp)
 18016cc:	dc400d15 	stw	r17,52(sp)
 18016d0:	1442240e 	bge	r2,r17,1801f64 <___vfprintf_internal_r+0x1420>
 18016d4:	d9014f17 	ldw	r4,1340(sp)
 18016d8:	b00b883a 	mov	r5,r22
 18016dc:	d9800c04 	addi	r6,sp,48
 18016e0:	1800aec0 	call	1800aec <__sprint_r>
 18016e4:	103ecf1e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 18016e8:	dc800e17 	ldw	r18,56(sp)
 18016ec:	d8c01904 	addi	r3,sp,100
 18016f0:	003e9206 	br	180113c <___vfprintf_internal_r+0x5f8>
 18016f4:	d9014f17 	ldw	r4,1340(sp)
 18016f8:	b00b883a 	mov	r5,r22
 18016fc:	d9800c04 	addi	r6,sp,48
 1801700:	1800aec0 	call	1800aec <__sprint_r>
 1801704:	103ec026 	beq	r2,zero,1801208 <___vfprintf_internal_r+0x6c4>
 1801708:	003ec606 	br	1801224 <___vfprintf_internal_r+0x6e0>
 180170c:	d9014f17 	ldw	r4,1340(sp)
 1801710:	b00b883a 	mov	r5,r22
 1801714:	d9800c04 	addi	r6,sp,48
 1801718:	d9c15115 	stw	r7,1348(sp)
 180171c:	1800aec0 	call	1800aec <__sprint_r>
 1801720:	d9c15117 	ldw	r7,1348(sp)
 1801724:	103ebf1e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1801728:	dc800e17 	ldw	r18,56(sp)
 180172c:	dc400d17 	ldw	r17,52(sp)
 1801730:	dd401904 	addi	r21,sp,100
 1801734:	003e7406 	br	1801108 <___vfprintf_internal_r+0x5c4>
 1801738:	d9014f17 	ldw	r4,1340(sp)
 180173c:	b00b883a 	mov	r5,r22
 1801740:	d9800c04 	addi	r6,sp,48
 1801744:	d9c15115 	stw	r7,1348(sp)
 1801748:	1800aec0 	call	1800aec <__sprint_r>
 180174c:	d9c15117 	ldw	r7,1348(sp)
 1801750:	103eb41e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1801754:	dd401904 	addi	r21,sp,100
 1801758:	003d6d06 	br	1800d10 <___vfprintf_internal_r+0x1cc>
 180175c:	d9014f17 	ldw	r4,1340(sp)
 1801760:	b00b883a 	mov	r5,r22
 1801764:	d9800c04 	addi	r6,sp,48
 1801768:	d9c15115 	stw	r7,1348(sp)
 180176c:	1800aec0 	call	1800aec <__sprint_r>
 1801770:	d9c15117 	ldw	r7,1348(sp)
 1801774:	103eab1e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1801778:	dc800e17 	ldw	r18,56(sp)
 180177c:	dc400d17 	ldw	r17,52(sp)
 1801780:	dd401904 	addi	r21,sp,100
 1801784:	003e3406 	br	1801058 <___vfprintf_internal_r+0x514>
 1801788:	d9014f17 	ldw	r4,1340(sp)
 180178c:	b00b883a 	mov	r5,r22
 1801790:	d9800c04 	addi	r6,sp,48
 1801794:	d9c15115 	stw	r7,1348(sp)
 1801798:	1800aec0 	call	1800aec <__sprint_r>
 180179c:	d9c15117 	ldw	r7,1348(sp)
 18017a0:	103ea01e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 18017a4:	dc800e17 	ldw	r18,56(sp)
 18017a8:	dc400d17 	ldw	r17,52(sp)
 18017ac:	dd401904 	addi	r21,sp,100
 18017b0:	003e1c06 	br	1801024 <___vfprintf_internal_r+0x4e0>
 18017b4:	d9014f17 	ldw	r4,1340(sp)
 18017b8:	b00b883a 	mov	r5,r22
 18017bc:	d9800c04 	addi	r6,sp,48
 18017c0:	d9c15115 	stw	r7,1348(sp)
 18017c4:	1800aec0 	call	1800aec <__sprint_r>
 18017c8:	d9c15117 	ldw	r7,1348(sp)
 18017cc:	103e951e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 18017d0:	dc800e17 	ldw	r18,56(sp)
 18017d4:	dc400d17 	ldw	r17,52(sp)
 18017d8:	dd401904 	addi	r21,sp,100
 18017dc:	003e0406 	br	1800ff0 <___vfprintf_internal_r+0x4ac>
 18017e0:	d9000517 	ldw	r4,20(sp)
 18017e4:	0102580e 	bge	zero,r4,1802148 <___vfprintf_internal_r+0x1604>
 18017e8:	d9814717 	ldw	r6,1308(sp)
 18017ec:	21807a16 	blt	r4,r6,18019d8 <___vfprintf_internal_r+0xe94>
 18017f0:	d8814117 	ldw	r2,1284(sp)
 18017f4:	91a5883a 	add	r18,r18,r6
 18017f8:	8c400044 	addi	r17,r17,1
 18017fc:	a8800015 	stw	r2,0(r21)
 1801800:	008001c4 	movi	r2,7
 1801804:	a9800115 	stw	r6,4(r21)
 1801808:	dc800e15 	stw	r18,56(sp)
 180180c:	dc400d15 	stw	r17,52(sp)
 1801810:	1442fc16 	blt	r2,r17,1802404 <___vfprintf_internal_r+0x18c0>
 1801814:	a8c00204 	addi	r3,r21,8
 1801818:	d9414717 	ldw	r5,1308(sp)
 180181c:	2161c83a 	sub	r16,r4,r5
 1801820:	043f9d0e 	bge	zero,r16,1801698 <___vfprintf_internal_r+0xb54>
 1801824:	00800404 	movi	r2,16
 1801828:	1402190e 	bge	r2,r16,1802090 <___vfprintf_internal_r+0x154c>
 180182c:	dc400d17 	ldw	r17,52(sp)
 1801830:	1027883a 	mov	r19,r2
 1801834:	07006074 	movhi	fp,385
 1801838:	e7369584 	addi	fp,fp,-9642
 180183c:	050001c4 	movi	r20,7
 1801840:	00000306 	br	1801850 <___vfprintf_internal_r+0xd0c>
 1801844:	18c00204 	addi	r3,r3,8
 1801848:	843ffc04 	addi	r16,r16,-16
 180184c:	9c02130e 	bge	r19,r16,180209c <___vfprintf_internal_r+0x1558>
 1801850:	94800404 	addi	r18,r18,16
 1801854:	8c400044 	addi	r17,r17,1
 1801858:	1f000015 	stw	fp,0(r3)
 180185c:	1cc00115 	stw	r19,4(r3)
 1801860:	dc800e15 	stw	r18,56(sp)
 1801864:	dc400d15 	stw	r17,52(sp)
 1801868:	a47ff60e 	bge	r20,r17,1801844 <___vfprintf_internal_r+0xd00>
 180186c:	d9014f17 	ldw	r4,1340(sp)
 1801870:	b00b883a 	mov	r5,r22
 1801874:	d9800c04 	addi	r6,sp,48
 1801878:	1800aec0 	call	1800aec <__sprint_r>
 180187c:	103e691e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1801880:	dc800e17 	ldw	r18,56(sp)
 1801884:	dc400d17 	ldw	r17,52(sp)
 1801888:	d8c01904 	addi	r3,sp,100
 180188c:	003fee06 	br	1801848 <___vfprintf_internal_r+0xd04>
 1801890:	d8814717 	ldw	r2,1308(sp)
 1801894:	143fffc4 	addi	r16,r2,-1
 1801898:	043e970e 	bge	zero,r16,18012f8 <___vfprintf_internal_r+0x7b4>
 180189c:	00800404 	movi	r2,16
 18018a0:	1400180e 	bge	r2,r16,1801904 <___vfprintf_internal_r+0xdc0>
 18018a4:	1029883a 	mov	r20,r2
 18018a8:	07006074 	movhi	fp,385
 18018ac:	e7369584 	addi	fp,fp,-9642
 18018b0:	054001c4 	movi	r21,7
 18018b4:	00000306 	br	18018c4 <___vfprintf_internal_r+0xd80>
 18018b8:	9cc00204 	addi	r19,r19,8
 18018bc:	843ffc04 	addi	r16,r16,-16
 18018c0:	a400120e 	bge	r20,r16,180190c <___vfprintf_internal_r+0xdc8>
 18018c4:	94800404 	addi	r18,r18,16
 18018c8:	8c400044 	addi	r17,r17,1
 18018cc:	9f000015 	stw	fp,0(r19)
 18018d0:	9d000115 	stw	r20,4(r19)
 18018d4:	dc800e15 	stw	r18,56(sp)
 18018d8:	dc400d15 	stw	r17,52(sp)
 18018dc:	ac7ff60e 	bge	r21,r17,18018b8 <___vfprintf_internal_r+0xd74>
 18018e0:	d9014f17 	ldw	r4,1340(sp)
 18018e4:	b00b883a 	mov	r5,r22
 18018e8:	d9800c04 	addi	r6,sp,48
 18018ec:	1800aec0 	call	1800aec <__sprint_r>
 18018f0:	103e4c1e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 18018f4:	dc800e17 	ldw	r18,56(sp)
 18018f8:	dc400d17 	ldw	r17,52(sp)
 18018fc:	dcc01904 	addi	r19,sp,100
 1801900:	003fee06 	br	18018bc <___vfprintf_internal_r+0xd78>
 1801904:	07006074 	movhi	fp,385
 1801908:	e7369584 	addi	fp,fp,-9642
 180190c:	9425883a 	add	r18,r18,r16
 1801910:	8c400044 	addi	r17,r17,1
 1801914:	008001c4 	movi	r2,7
 1801918:	9f000015 	stw	fp,0(r19)
 180191c:	9c000115 	stw	r16,4(r19)
 1801920:	dc800e15 	stw	r18,56(sp)
 1801924:	dc400d15 	stw	r17,52(sp)
 1801928:	147e720e 	bge	r2,r17,18012f4 <___vfprintf_internal_r+0x7b0>
 180192c:	d9014f17 	ldw	r4,1340(sp)
 1801930:	b00b883a 	mov	r5,r22
 1801934:	d9800c04 	addi	r6,sp,48
 1801938:	1800aec0 	call	1800aec <__sprint_r>
 180193c:	103e391e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1801940:	dc800e17 	ldw	r18,56(sp)
 1801944:	dc400d17 	ldw	r17,52(sp)
 1801948:	dcc01904 	addi	r19,sp,100
 180194c:	003e6a06 	br	18012f8 <___vfprintf_internal_r+0x7b4>
 1801950:	d9014f17 	ldw	r4,1340(sp)
 1801954:	b00b883a 	mov	r5,r22
 1801958:	d9800c04 	addi	r6,sp,48
 180195c:	d9c15115 	stw	r7,1348(sp)
 1801960:	1800aec0 	call	1800aec <__sprint_r>
 1801964:	d9c15117 	ldw	r7,1348(sp)
 1801968:	103e2e1e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 180196c:	dc800e17 	ldw	r18,56(sp)
 1801970:	dc400d17 	ldw	r17,52(sp)
 1801974:	dd401904 	addi	r21,sp,100
 1801978:	003dba06 	br	1801064 <___vfprintf_internal_r+0x520>
 180197c:	d9014f17 	ldw	r4,1340(sp)
 1801980:	b00b883a 	mov	r5,r22
 1801984:	d9800c04 	addi	r6,sp,48
 1801988:	1800aec0 	call	1800aec <__sprint_r>
 180198c:	103e251e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1801990:	dc800e17 	ldw	r18,56(sp)
 1801994:	dc400d17 	ldw	r17,52(sp)
 1801998:	dcc01904 	addi	r19,sp,100
 180199c:	003e4206 	br	18012a8 <___vfprintf_internal_r+0x764>
 18019a0:	d9014f17 	ldw	r4,1340(sp)
 18019a4:	b00b883a 	mov	r5,r22
 18019a8:	d9800c04 	addi	r6,sp,48
 18019ac:	1800aec0 	call	1800aec <__sprint_r>
 18019b0:	103e1c1e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 18019b4:	dc800e17 	ldw	r18,56(sp)
 18019b8:	dc400d17 	ldw	r17,52(sp)
 18019bc:	d8c01904 	addi	r3,sp,100
 18019c0:	003e2e06 	br	180127c <___vfprintf_internal_r+0x738>
 18019c4:	d9414c17 	ldw	r5,1328(sp)
 18019c8:	2880004c 	andi	r2,r5,1
 18019cc:	1005003a 	cmpeq	r2,r2,zero
 18019d0:	103dda1e 	bne	r2,zero,180113c <___vfprintf_internal_r+0x5f8>
 18019d4:	003e9f06 	br	1801454 <___vfprintf_internal_r+0x910>
 18019d8:	d8c14117 	ldw	r3,1284(sp)
 18019dc:	9125883a 	add	r18,r18,r4
 18019e0:	8c400044 	addi	r17,r17,1
 18019e4:	008001c4 	movi	r2,7
 18019e8:	a8c00015 	stw	r3,0(r21)
 18019ec:	a9000115 	stw	r4,4(r21)
 18019f0:	dc800e15 	stw	r18,56(sp)
 18019f4:	dc400d15 	stw	r17,52(sp)
 18019f8:	14426c16 	blt	r2,r17,18023ac <___vfprintf_internal_r+0x1868>
 18019fc:	a8c00204 	addi	r3,r21,8
 1801a00:	d9414917 	ldw	r5,1316(sp)
 1801a04:	00800044 	movi	r2,1
 1801a08:	94800044 	addi	r18,r18,1
 1801a0c:	8c400044 	addi	r17,r17,1
 1801a10:	18800115 	stw	r2,4(r3)
 1801a14:	008001c4 	movi	r2,7
 1801a18:	19400015 	stw	r5,0(r3)
 1801a1c:	dc800e15 	stw	r18,56(sp)
 1801a20:	dc400d15 	stw	r17,52(sp)
 1801a24:	2021883a 	mov	r16,r4
 1801a28:	14425616 	blt	r2,r17,1802384 <___vfprintf_internal_r+0x1840>
 1801a2c:	19400204 	addi	r5,r3,8
 1801a30:	d9814717 	ldw	r6,1308(sp)
 1801a34:	8c400044 	addi	r17,r17,1
 1801a38:	dc400d15 	stw	r17,52(sp)
 1801a3c:	3107c83a 	sub	r3,r6,r4
 1801a40:	d9014117 	ldw	r4,1284(sp)
 1801a44:	90e5883a 	add	r18,r18,r3
 1801a48:	28c00115 	stw	r3,4(r5)
 1801a4c:	8105883a 	add	r2,r16,r4
 1801a50:	28800015 	stw	r2,0(r5)
 1801a54:	008001c4 	movi	r2,7
 1801a58:	dc800e15 	stw	r18,56(sp)
 1801a5c:	147f1d16 	blt	r2,r17,18016d4 <___vfprintf_internal_r+0xb90>
 1801a60:	28c00204 	addi	r3,r5,8
 1801a64:	003db506 	br	180113c <___vfprintf_internal_r+0x5f8>
 1801a68:	3c000017 	ldw	r16,0(r7)
 1801a6c:	3c400117 	ldw	r17,4(r7)
 1801a70:	39800204 	addi	r6,r7,8
 1801a74:	01000044 	movi	r4,1
 1801a78:	d9814015 	stw	r6,1280(sp)
 1801a7c:	d8000405 	stb	zero,16(sp)
 1801a80:	003ebe06 	br	180157c <___vfprintf_internal_r+0xa38>
 1801a84:	3c000017 	ldw	r16,0(r7)
 1801a88:	3c400117 	ldw	r17,4(r7)
 1801a8c:	38800204 	addi	r2,r7,8
 1801a90:	d8814015 	stw	r2,1280(sp)
 1801a94:	003eb706 	br	1801574 <___vfprintf_internal_r+0xa30>
 1801a98:	3c000017 	ldw	r16,0(r7)
 1801a9c:	3c400117 	ldw	r17,4(r7)
 1801aa0:	39000204 	addi	r4,r7,8
 1801aa4:	d9014015 	stw	r4,1280(sp)
 1801aa8:	0009883a 	mov	r4,zero
 1801aac:	d8000405 	stb	zero,16(sp)
 1801ab0:	003eb206 	br	180157c <___vfprintf_internal_r+0xa38>
 1801ab4:	38c00017 	ldw	r3,0(r7)
 1801ab8:	39c00104 	addi	r7,r7,4
 1801abc:	d8c14a15 	stw	r3,1320(sp)
 1801ac0:	1800d70e 	bge	r3,zero,1801e20 <___vfprintf_internal_r+0x12dc>
 1801ac4:	00c7c83a 	sub	r3,zero,r3
 1801ac8:	d8c14a15 	stw	r3,1320(sp)
 1801acc:	d9014c17 	ldw	r4,1328(sp)
 1801ad0:	b8c00007 	ldb	r3,0(r23)
 1801ad4:	21000114 	ori	r4,r4,4
 1801ad8:	d9014c15 	stw	r4,1328(sp)
 1801adc:	003c9806 	br	1800d40 <___vfprintf_internal_r+0x1fc>
 1801ae0:	d9814c17 	ldw	r6,1328(sp)
 1801ae4:	3080080c 	andi	r2,r6,32
 1801ae8:	1001f626 	beq	r2,zero,18022c4 <___vfprintf_internal_r+0x1780>
 1801aec:	d9014b17 	ldw	r4,1324(sp)
 1801af0:	38800017 	ldw	r2,0(r7)
 1801af4:	39c00104 	addi	r7,r7,4
 1801af8:	d9c14015 	stw	r7,1280(sp)
 1801afc:	2007d7fa 	srai	r3,r4,31
 1801b00:	d9c14017 	ldw	r7,1280(sp)
 1801b04:	11000015 	stw	r4,0(r2)
 1801b08:	10c00115 	stw	r3,4(r2)
 1801b0c:	003c6906 	br	1800cb4 <___vfprintf_internal_r+0x170>
 1801b10:	b8c00007 	ldb	r3,0(r23)
 1801b14:	00801b04 	movi	r2,108
 1801b18:	18825526 	beq	r3,r2,1802470 <___vfprintf_internal_r+0x192c>
 1801b1c:	d9414c17 	ldw	r5,1328(sp)
 1801b20:	29400414 	ori	r5,r5,16
 1801b24:	d9414c15 	stw	r5,1328(sp)
 1801b28:	003c8506 	br	1800d40 <___vfprintf_internal_r+0x1fc>
 1801b2c:	d9814c17 	ldw	r6,1328(sp)
 1801b30:	b8c00007 	ldb	r3,0(r23)
 1801b34:	31800814 	ori	r6,r6,32
 1801b38:	d9814c15 	stw	r6,1328(sp)
 1801b3c:	003c8006 	br	1800d40 <___vfprintf_internal_r+0x1fc>
 1801b40:	d8814c17 	ldw	r2,1328(sp)
 1801b44:	3c000017 	ldw	r16,0(r7)
 1801b48:	00c01e04 	movi	r3,120
 1801b4c:	10800094 	ori	r2,r2,2
 1801b50:	d8814c15 	stw	r2,1328(sp)
 1801b54:	39c00104 	addi	r7,r7,4
 1801b58:	01406074 	movhi	r5,385
 1801b5c:	29767e04 	addi	r5,r5,-9736
 1801b60:	00800c04 	movi	r2,48
 1801b64:	0023883a 	mov	r17,zero
 1801b68:	01000084 	movi	r4,2
 1801b6c:	d9c14015 	stw	r7,1280(sp)
 1801b70:	d8c14d15 	stw	r3,1332(sp)
 1801b74:	d9414415 	stw	r5,1296(sp)
 1801b78:	d8800445 	stb	r2,17(sp)
 1801b7c:	d8c00485 	stb	r3,18(sp)
 1801b80:	d8000405 	stb	zero,16(sp)
 1801b84:	003e7d06 	br	180157c <___vfprintf_internal_r+0xa38>
 1801b88:	d8814c17 	ldw	r2,1328(sp)
 1801b8c:	b8c00007 	ldb	r3,0(r23)
 1801b90:	10801014 	ori	r2,r2,64
 1801b94:	d8814c15 	stw	r2,1328(sp)
 1801b98:	003c6906 	br	1800d40 <___vfprintf_internal_r+0x1fc>
 1801b9c:	d9414c17 	ldw	r5,1328(sp)
 1801ba0:	2880020c 	andi	r2,r5,8
 1801ba4:	1001e526 	beq	r2,zero,180233c <___vfprintf_internal_r+0x17f8>
 1801ba8:	39800017 	ldw	r6,0(r7)
 1801bac:	38800204 	addi	r2,r7,8
 1801bb0:	d8814015 	stw	r2,1280(sp)
 1801bb4:	d9814215 	stw	r6,1288(sp)
 1801bb8:	39c00117 	ldw	r7,4(r7)
 1801bbc:	d9c14315 	stw	r7,1292(sp)
 1801bc0:	d9014217 	ldw	r4,1288(sp)
 1801bc4:	d9414317 	ldw	r5,1292(sp)
 1801bc8:	18075f40 	call	18075f4 <__isinfd>
 1801bcc:	10021d26 	beq	r2,zero,1802444 <___vfprintf_internal_r+0x1900>
 1801bd0:	d9014217 	ldw	r4,1288(sp)
 1801bd4:	d9414317 	ldw	r5,1292(sp)
 1801bd8:	000d883a 	mov	r6,zero
 1801bdc:	000f883a 	mov	r7,zero
 1801be0:	18097900 	call	1809790 <__ltdf2>
 1801be4:	1002d016 	blt	r2,zero,1802728 <___vfprintf_internal_r+0x1be4>
 1801be8:	d9414d17 	ldw	r5,1332(sp)
 1801bec:	008011c4 	movi	r2,71
 1801bf0:	11421016 	blt	r2,r5,1802434 <___vfprintf_internal_r+0x18f0>
 1801bf4:	01806074 	movhi	r6,385
 1801bf8:	31b68304 	addi	r6,r6,-9716
 1801bfc:	d9814115 	stw	r6,1284(sp)
 1801c00:	d9014c17 	ldw	r4,1328(sp)
 1801c04:	00c000c4 	movi	r3,3
 1801c08:	00bfdfc4 	movi	r2,-129
 1801c0c:	2088703a 	and	r4,r4,r2
 1801c10:	180f883a 	mov	r7,r3
 1801c14:	d8c14515 	stw	r3,1300(sp)
 1801c18:	d9014c15 	stw	r4,1328(sp)
 1801c1c:	d8014615 	stw	zero,1304(sp)
 1801c20:	003e6a06 	br	18015cc <___vfprintf_internal_r+0xa88>
 1801c24:	38800017 	ldw	r2,0(r7)
 1801c28:	00c00044 	movi	r3,1
 1801c2c:	39c00104 	addi	r7,r7,4
 1801c30:	d9c14015 	stw	r7,1280(sp)
 1801c34:	d9000f04 	addi	r4,sp,60
 1801c38:	180f883a 	mov	r7,r3
 1801c3c:	d8c14515 	stw	r3,1300(sp)
 1801c40:	d9014115 	stw	r4,1284(sp)
 1801c44:	d8800f05 	stb	r2,60(sp)
 1801c48:	d8000405 	stb	zero,16(sp)
 1801c4c:	003cac06 	br	1800f00 <___vfprintf_internal_r+0x3bc>
 1801c50:	01406074 	movhi	r5,385
 1801c54:	29768904 	addi	r5,r5,-9692
 1801c58:	d9414415 	stw	r5,1296(sp)
 1801c5c:	d9814c17 	ldw	r6,1328(sp)
 1801c60:	3080080c 	andi	r2,r6,32
 1801c64:	1000ff26 	beq	r2,zero,1802064 <___vfprintf_internal_r+0x1520>
 1801c68:	3c000017 	ldw	r16,0(r7)
 1801c6c:	3c400117 	ldw	r17,4(r7)
 1801c70:	38800204 	addi	r2,r7,8
 1801c74:	d8814015 	stw	r2,1280(sp)
 1801c78:	d9414c17 	ldw	r5,1328(sp)
 1801c7c:	2880004c 	andi	r2,r5,1
 1801c80:	1005003a 	cmpeq	r2,r2,zero
 1801c84:	1000b91e 	bne	r2,zero,1801f6c <___vfprintf_internal_r+0x1428>
 1801c88:	8444b03a 	or	r2,r16,r17
 1801c8c:	1000b726 	beq	r2,zero,1801f6c <___vfprintf_internal_r+0x1428>
 1801c90:	d9814d17 	ldw	r6,1332(sp)
 1801c94:	29400094 	ori	r5,r5,2
 1801c98:	00800c04 	movi	r2,48
 1801c9c:	01000084 	movi	r4,2
 1801ca0:	d9414c15 	stw	r5,1328(sp)
 1801ca4:	d8800445 	stb	r2,17(sp)
 1801ca8:	d9800485 	stb	r6,18(sp)
 1801cac:	d8000405 	stb	zero,16(sp)
 1801cb0:	003e3206 	br	180157c <___vfprintf_internal_r+0xa38>
 1801cb4:	01806074 	movhi	r6,385
 1801cb8:	31b67e04 	addi	r6,r6,-9736
 1801cbc:	d9814415 	stw	r6,1296(sp)
 1801cc0:	003fe606 	br	1801c5c <___vfprintf_internal_r+0x1118>
 1801cc4:	00800ac4 	movi	r2,43
 1801cc8:	d8800405 	stb	r2,16(sp)
 1801ccc:	b8c00007 	ldb	r3,0(r23)
 1801cd0:	003c1b06 	br	1800d40 <___vfprintf_internal_r+0x1fc>
 1801cd4:	d8814c17 	ldw	r2,1328(sp)
 1801cd8:	b8c00007 	ldb	r3,0(r23)
 1801cdc:	10800054 	ori	r2,r2,1
 1801ce0:	d8814c15 	stw	r2,1328(sp)
 1801ce4:	003c1606 	br	1800d40 <___vfprintf_internal_r+0x1fc>
 1801ce8:	d8800407 	ldb	r2,16(sp)
 1801cec:	10004c1e 	bne	r2,zero,1801e20 <___vfprintf_internal_r+0x12dc>
 1801cf0:	00800804 	movi	r2,32
 1801cf4:	d8800405 	stb	r2,16(sp)
 1801cf8:	b8c00007 	ldb	r3,0(r23)
 1801cfc:	003c1006 	br	1800d40 <___vfprintf_internal_r+0x1fc>
 1801d00:	d9814c17 	ldw	r6,1328(sp)
 1801d04:	b8c00007 	ldb	r3,0(r23)
 1801d08:	31800214 	ori	r6,r6,8
 1801d0c:	d9814c15 	stw	r6,1328(sp)
 1801d10:	003c0b06 	br	1800d40 <___vfprintf_internal_r+0x1fc>
 1801d14:	0009883a 	mov	r4,zero
 1801d18:	04000244 	movi	r16,9
 1801d1c:	01400284 	movi	r5,10
 1801d20:	d9c15115 	stw	r7,1348(sp)
 1801d24:	1809b7c0 	call	1809b7c <__mulsi3>
 1801d28:	b9000007 	ldb	r4,0(r23)
 1801d2c:	d8c14d17 	ldw	r3,1332(sp)
 1801d30:	bdc00044 	addi	r23,r23,1
 1801d34:	d9014d15 	stw	r4,1332(sp)
 1801d38:	d9414d17 	ldw	r5,1332(sp)
 1801d3c:	1885883a 	add	r2,r3,r2
 1801d40:	113ff404 	addi	r4,r2,-48
 1801d44:	28bff404 	addi	r2,r5,-48
 1801d48:	d9c15117 	ldw	r7,1348(sp)
 1801d4c:	80bff32e 	bgeu	r16,r2,1801d1c <___vfprintf_internal_r+0x11d8>
 1801d50:	d9014a15 	stw	r4,1320(sp)
 1801d54:	003bfc06 	br	1800d48 <___vfprintf_internal_r+0x204>
 1801d58:	d8814c17 	ldw	r2,1328(sp)
 1801d5c:	b8c00007 	ldb	r3,0(r23)
 1801d60:	10802014 	ori	r2,r2,128
 1801d64:	d8814c15 	stw	r2,1328(sp)
 1801d68:	003bf506 	br	1800d40 <___vfprintf_internal_r+0x1fc>
 1801d6c:	b8c00007 	ldb	r3,0(r23)
 1801d70:	00800a84 	movi	r2,42
 1801d74:	bdc00044 	addi	r23,r23,1
 1801d78:	18831826 	beq	r3,r2,18029dc <___vfprintf_internal_r+0x1e98>
 1801d7c:	d8c14d15 	stw	r3,1332(sp)
 1801d80:	18bff404 	addi	r2,r3,-48
 1801d84:	00c00244 	movi	r3,9
 1801d88:	18827b36 	bltu	r3,r2,1802778 <___vfprintf_internal_r+0x1c34>
 1801d8c:	1821883a 	mov	r16,r3
 1801d90:	0009883a 	mov	r4,zero
 1801d94:	01400284 	movi	r5,10
 1801d98:	d9c15115 	stw	r7,1348(sp)
 1801d9c:	1809b7c0 	call	1809b7c <__mulsi3>
 1801da0:	d9414d17 	ldw	r5,1332(sp)
 1801da4:	b9800007 	ldb	r6,0(r23)
 1801da8:	d9c15117 	ldw	r7,1348(sp)
 1801dac:	1145883a 	add	r2,r2,r5
 1801db0:	113ff404 	addi	r4,r2,-48
 1801db4:	30bff404 	addi	r2,r6,-48
 1801db8:	d9814d15 	stw	r6,1332(sp)
 1801dbc:	bdc00044 	addi	r23,r23,1
 1801dc0:	80bff42e 	bgeu	r16,r2,1801d94 <___vfprintf_internal_r+0x1250>
 1801dc4:	2027883a 	mov	r19,r4
 1801dc8:	203bdf0e 	bge	r4,zero,1800d48 <___vfprintf_internal_r+0x204>
 1801dcc:	04ffffc4 	movi	r19,-1
 1801dd0:	003bdd06 	br	1800d48 <___vfprintf_internal_r+0x204>
 1801dd4:	d8000405 	stb	zero,16(sp)
 1801dd8:	39800017 	ldw	r6,0(r7)
 1801ddc:	39c00104 	addi	r7,r7,4
 1801de0:	d9c14015 	stw	r7,1280(sp)
 1801de4:	d9814115 	stw	r6,1284(sp)
 1801de8:	3001c926 	beq	r6,zero,1802510 <___vfprintf_internal_r+0x19cc>
 1801dec:	98000e16 	blt	r19,zero,1801e28 <___vfprintf_internal_r+0x12e4>
 1801df0:	d9014117 	ldw	r4,1284(sp)
 1801df4:	000b883a 	mov	r5,zero
 1801df8:	980d883a 	mov	r6,r19
 1801dfc:	1805c780 	call	1805c78 <memchr>
 1801e00:	10025926 	beq	r2,zero,1802768 <___vfprintf_internal_r+0x1c24>
 1801e04:	d8c14117 	ldw	r3,1284(sp)
 1801e08:	10cfc83a 	sub	r7,r2,r3
 1801e0c:	99c19e16 	blt	r19,r7,1802488 <___vfprintf_internal_r+0x1944>
 1801e10:	d9c14515 	stw	r7,1300(sp)
 1801e14:	38000916 	blt	r7,zero,1801e3c <___vfprintf_internal_r+0x12f8>
 1801e18:	d8014615 	stw	zero,1304(sp)
 1801e1c:	003deb06 	br	18015cc <___vfprintf_internal_r+0xa88>
 1801e20:	b8c00007 	ldb	r3,0(r23)
 1801e24:	003bc606 	br	1800d40 <___vfprintf_internal_r+0x1fc>
 1801e28:	d9014117 	ldw	r4,1284(sp)
 1801e2c:	1800a780 	call	1800a78 <strlen>
 1801e30:	d8814515 	stw	r2,1300(sp)
 1801e34:	100f883a 	mov	r7,r2
 1801e38:	103ff70e 	bge	r2,zero,1801e18 <___vfprintf_internal_r+0x12d4>
 1801e3c:	d8014515 	stw	zero,1300(sp)
 1801e40:	d8014615 	stw	zero,1304(sp)
 1801e44:	003de106 	br	18015cc <___vfprintf_internal_r+0xa88>
 1801e48:	20c03fcc 	andi	r3,r4,255
 1801e4c:	00800044 	movi	r2,1
 1801e50:	18802d26 	beq	r3,r2,1801f08 <___vfprintf_internal_r+0x13c4>
 1801e54:	18800e36 	bltu	r3,r2,1801e90 <___vfprintf_internal_r+0x134c>
 1801e58:	00800084 	movi	r2,2
 1801e5c:	1880fa26 	beq	r3,r2,1802248 <___vfprintf_internal_r+0x1704>
 1801e60:	01006074 	movhi	r4,385
 1801e64:	21368e04 	addi	r4,r4,-9672
 1801e68:	1800a780 	call	1800a78 <strlen>
 1801e6c:	100f883a 	mov	r7,r2
 1801e70:	dcc14515 	stw	r19,1300(sp)
 1801e74:	9880010e 	bge	r19,r2,1801e7c <___vfprintf_internal_r+0x1338>
 1801e78:	d8814515 	stw	r2,1300(sp)
 1801e7c:	00806074 	movhi	r2,385
 1801e80:	10b68e04 	addi	r2,r2,-9672
 1801e84:	dcc14615 	stw	r19,1304(sp)
 1801e88:	d8814115 	stw	r2,1284(sp)
 1801e8c:	003dcf06 	br	18015cc <___vfprintf_internal_r+0xa88>
 1801e90:	d9401904 	addi	r5,sp,100
 1801e94:	dd000f04 	addi	r20,sp,60
 1801e98:	d9414115 	stw	r5,1284(sp)
 1801e9c:	880a977a 	slli	r5,r17,29
 1801ea0:	d9814117 	ldw	r6,1284(sp)
 1801ea4:	8004d0fa 	srli	r2,r16,3
 1801ea8:	8806d0fa 	srli	r3,r17,3
 1801eac:	810001cc 	andi	r4,r16,7
 1801eb0:	2884b03a 	or	r2,r5,r2
 1801eb4:	31bfffc4 	addi	r6,r6,-1
 1801eb8:	21000c04 	addi	r4,r4,48
 1801ebc:	d9814115 	stw	r6,1284(sp)
 1801ec0:	10cab03a 	or	r5,r2,r3
 1801ec4:	31000005 	stb	r4,0(r6)
 1801ec8:	1021883a 	mov	r16,r2
 1801ecc:	1823883a 	mov	r17,r3
 1801ed0:	283ff21e 	bne	r5,zero,1801e9c <___vfprintf_internal_r+0x1358>
 1801ed4:	d8c14c17 	ldw	r3,1328(sp)
 1801ed8:	1880004c 	andi	r2,r3,1
 1801edc:	1005003a 	cmpeq	r2,r2,zero
 1801ee0:	103db31e 	bne	r2,zero,18015b0 <___vfprintf_internal_r+0xa6c>
 1801ee4:	20803fcc 	andi	r2,r4,255
 1801ee8:	1080201c 	xori	r2,r2,128
 1801eec:	10bfe004 	addi	r2,r2,-128
 1801ef0:	00c00c04 	movi	r3,48
 1801ef4:	10fdae26 	beq	r2,r3,18015b0 <___vfprintf_internal_r+0xa6c>
 1801ef8:	31bfffc4 	addi	r6,r6,-1
 1801efc:	d9814115 	stw	r6,1284(sp)
 1801f00:	30c00005 	stb	r3,0(r6)
 1801f04:	003daa06 	br	18015b0 <___vfprintf_internal_r+0xa6c>
 1801f08:	88800068 	cmpgeui	r2,r17,1
 1801f0c:	10002c1e 	bne	r2,zero,1801fc0 <___vfprintf_internal_r+0x147c>
 1801f10:	8800021e 	bne	r17,zero,1801f1c <___vfprintf_internal_r+0x13d8>
 1801f14:	00800244 	movi	r2,9
 1801f18:	14002936 	bltu	r2,r16,1801fc0 <___vfprintf_internal_r+0x147c>
 1801f1c:	d90018c4 	addi	r4,sp,99
 1801f20:	dd000f04 	addi	r20,sp,60
 1801f24:	d9014115 	stw	r4,1284(sp)
 1801f28:	d9014117 	ldw	r4,1284(sp)
 1801f2c:	80800c04 	addi	r2,r16,48
 1801f30:	20800005 	stb	r2,0(r4)
 1801f34:	003d9e06 	br	18015b0 <___vfprintf_internal_r+0xa6c>
 1801f38:	dc400d17 	ldw	r17,52(sp)
 1801f3c:	07006074 	movhi	fp,385
 1801f40:	e7369584 	addi	fp,fp,-9642
 1801f44:	9425883a 	add	r18,r18,r16
 1801f48:	8c400044 	addi	r17,r17,1
 1801f4c:	008001c4 	movi	r2,7
 1801f50:	1f000015 	stw	fp,0(r3)
 1801f54:	1c000115 	stw	r16,4(r3)
 1801f58:	dc800e15 	stw	r18,56(sp)
 1801f5c:	dc400d15 	stw	r17,52(sp)
 1801f60:	147ddc16 	blt	r2,r17,18016d4 <___vfprintf_internal_r+0xb90>
 1801f64:	18c00204 	addi	r3,r3,8
 1801f68:	003c7406 	br	180113c <___vfprintf_internal_r+0x5f8>
 1801f6c:	01000084 	movi	r4,2
 1801f70:	d8000405 	stb	zero,16(sp)
 1801f74:	003d8106 	br	180157c <___vfprintf_internal_r+0xa38>
 1801f78:	d9814c17 	ldw	r6,1328(sp)
 1801f7c:	30c4703a 	and	r2,r6,r3
 1801f80:	1005003a 	cmpeq	r2,r2,zero
 1801f84:	103cb326 	beq	r2,zero,1801254 <___vfprintf_internal_r+0x710>
 1801f88:	d9014117 	ldw	r4,1284(sp)
 1801f8c:	94800044 	addi	r18,r18,1
 1801f90:	8c400044 	addi	r17,r17,1
 1801f94:	008001c4 	movi	r2,7
 1801f98:	a9000015 	stw	r4,0(r21)
 1801f9c:	a8c00115 	stw	r3,4(r21)
 1801fa0:	dc800e15 	stw	r18,56(sp)
 1801fa4:	dc400d15 	stw	r17,52(sp)
 1801fa8:	147e6016 	blt	r2,r17,180192c <___vfprintf_internal_r+0xde8>
 1801fac:	acc00204 	addi	r19,r21,8
 1801fb0:	003cd106 	br	18012f8 <___vfprintf_internal_r+0x7b4>
 1801fb4:	07006074 	movhi	fp,385
 1801fb8:	e7369584 	addi	fp,fp,-9642
 1801fbc:	003c4906 	br	18010e4 <___vfprintf_internal_r+0x5a0>
 1801fc0:	dd000f04 	addi	r20,sp,60
 1801fc4:	dc801904 	addi	r18,sp,100
 1801fc8:	8009883a 	mov	r4,r16
 1801fcc:	880b883a 	mov	r5,r17
 1801fd0:	01800284 	movi	r6,10
 1801fd4:	000f883a 	mov	r7,zero
 1801fd8:	18083f00 	call	18083f0 <__umoddi3>
 1801fdc:	12000c04 	addi	r8,r2,48
 1801fe0:	94bfffc4 	addi	r18,r18,-1
 1801fe4:	8009883a 	mov	r4,r16
 1801fe8:	880b883a 	mov	r5,r17
 1801fec:	01800284 	movi	r6,10
 1801ff0:	000f883a 	mov	r7,zero
 1801ff4:	92000005 	stb	r8,0(r18)
 1801ff8:	1807d840 	call	1807d84 <__udivdi3>
 1801ffc:	1009883a 	mov	r4,r2
 1802000:	1021883a 	mov	r16,r2
 1802004:	18800068 	cmpgeui	r2,r3,1
 1802008:	1823883a 	mov	r17,r3
 180200c:	103fee1e 	bne	r2,zero,1801fc8 <___vfprintf_internal_r+0x1484>
 1802010:	1800021e 	bne	r3,zero,180201c <___vfprintf_internal_r+0x14d8>
 1802014:	00800244 	movi	r2,9
 1802018:	113feb36 	bltu	r2,r4,1801fc8 <___vfprintf_internal_r+0x1484>
 180201c:	94bfffc4 	addi	r18,r18,-1
 1802020:	dc814115 	stw	r18,1284(sp)
 1802024:	003fc006 	br	1801f28 <___vfprintf_internal_r+0x13e4>
 1802028:	d9014c17 	ldw	r4,1328(sp)
 180202c:	2080004c 	andi	r2,r4,1
 1802030:	10009a1e 	bne	r2,zero,180229c <___vfprintf_internal_r+0x1758>
 1802034:	d9401904 	addi	r5,sp,100
 1802038:	dd000f04 	addi	r20,sp,60
 180203c:	d9414115 	stw	r5,1284(sp)
 1802040:	003d5b06 	br	18015b0 <___vfprintf_internal_r+0xa6c>
 1802044:	d9014f17 	ldw	r4,1340(sp)
 1802048:	b00b883a 	mov	r5,r22
 180204c:	d9800c04 	addi	r6,sp,48
 1802050:	1800aec0 	call	1800aec <__sprint_r>
 1802054:	103c731e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1802058:	dc800e17 	ldw	r18,56(sp)
 180205c:	d8c01904 	addi	r3,sp,100
 1802060:	003cf906 	br	1801448 <___vfprintf_internal_r+0x904>
 1802064:	d8c14c17 	ldw	r3,1328(sp)
 1802068:	1880040c 	andi	r2,r3,16
 180206c:	1000711e 	bne	r2,zero,1802234 <___vfprintf_internal_r+0x16f0>
 1802070:	d9014c17 	ldw	r4,1328(sp)
 1802074:	2080100c 	andi	r2,r4,64
 1802078:	10006e26 	beq	r2,zero,1802234 <___vfprintf_internal_r+0x16f0>
 180207c:	3c00000b 	ldhu	r16,0(r7)
 1802080:	0023883a 	mov	r17,zero
 1802084:	39c00104 	addi	r7,r7,4
 1802088:	d9c14015 	stw	r7,1280(sp)
 180208c:	003efa06 	br	1801c78 <___vfprintf_internal_r+0x1134>
 1802090:	dc400d17 	ldw	r17,52(sp)
 1802094:	07006074 	movhi	fp,385
 1802098:	e7369584 	addi	fp,fp,-9642
 180209c:	9425883a 	add	r18,r18,r16
 18020a0:	8c400044 	addi	r17,r17,1
 18020a4:	008001c4 	movi	r2,7
 18020a8:	1f000015 	stw	fp,0(r3)
 18020ac:	1c000115 	stw	r16,4(r3)
 18020b0:	dc800e15 	stw	r18,56(sp)
 18020b4:	dc400d15 	stw	r17,52(sp)
 18020b8:	147d7016 	blt	r2,r17,180167c <___vfprintf_internal_r+0xb38>
 18020bc:	18c00204 	addi	r3,r3,8
 18020c0:	003d7506 	br	1801698 <___vfprintf_internal_r+0xb54>
 18020c4:	dc800e17 	ldw	r18,56(sp)
 18020c8:	dc400d17 	ldw	r17,52(sp)
 18020cc:	07006074 	movhi	fp,385
 18020d0:	e7369984 	addi	fp,fp,-9626
 18020d4:	003bba06 	br	1800fc0 <___vfprintf_internal_r+0x47c>
 18020d8:	d9014f17 	ldw	r4,1340(sp)
 18020dc:	b00b883a 	mov	r5,r22
 18020e0:	d9800c04 	addi	r6,sp,48
 18020e4:	1800aec0 	call	1800aec <__sprint_r>
 18020e8:	103c4e1e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 18020ec:	dc800e17 	ldw	r18,56(sp)
 18020f0:	d8c01904 	addi	r3,sp,100
 18020f4:	003ce306 	br	1801484 <___vfprintf_internal_r+0x940>
 18020f8:	3c000017 	ldw	r16,0(r7)
 18020fc:	0009883a 	mov	r4,zero
 1802100:	39c00104 	addi	r7,r7,4
 1802104:	0023883a 	mov	r17,zero
 1802108:	d9c14015 	stw	r7,1280(sp)
 180210c:	d8000405 	stb	zero,16(sp)
 1802110:	003d1a06 	br	180157c <___vfprintf_internal_r+0xa38>
 1802114:	38800017 	ldw	r2,0(r7)
 1802118:	39c00104 	addi	r7,r7,4
 180211c:	d9c14015 	stw	r7,1280(sp)
 1802120:	1023d7fa 	srai	r17,r2,31
 1802124:	1021883a 	mov	r16,r2
 1802128:	003d1206 	br	1801574 <___vfprintf_internal_r+0xa30>
 180212c:	3c000017 	ldw	r16,0(r7)
 1802130:	01000044 	movi	r4,1
 1802134:	39c00104 	addi	r7,r7,4
 1802138:	0023883a 	mov	r17,zero
 180213c:	d9c14015 	stw	r7,1280(sp)
 1802140:	d8000405 	stb	zero,16(sp)
 1802144:	003d0d06 	br	180157c <___vfprintf_internal_r+0xa38>
 1802148:	00806074 	movhi	r2,385
 180214c:	10b69504 	addi	r2,r2,-9644
 1802150:	94800044 	addi	r18,r18,1
 1802154:	8c400044 	addi	r17,r17,1
 1802158:	a8800015 	stw	r2,0(r21)
 180215c:	00c00044 	movi	r3,1
 1802160:	008001c4 	movi	r2,7
 1802164:	a8c00115 	stw	r3,4(r21)
 1802168:	dc800e15 	stw	r18,56(sp)
 180216c:	dc400d15 	stw	r17,52(sp)
 1802170:	1440ca16 	blt	r2,r17,180249c <___vfprintf_internal_r+0x1958>
 1802174:	a8c00204 	addi	r3,r21,8
 1802178:	2000061e 	bne	r4,zero,1802194 <___vfprintf_internal_r+0x1650>
 180217c:	d9414717 	ldw	r5,1308(sp)
 1802180:	2800041e 	bne	r5,zero,1802194 <___vfprintf_internal_r+0x1650>
 1802184:	d9814c17 	ldw	r6,1328(sp)
 1802188:	3080004c 	andi	r2,r6,1
 180218c:	1005003a 	cmpeq	r2,r2,zero
 1802190:	103bea1e 	bne	r2,zero,180113c <___vfprintf_internal_r+0x5f8>
 1802194:	00800044 	movi	r2,1
 1802198:	dc400d17 	ldw	r17,52(sp)
 180219c:	18800115 	stw	r2,4(r3)
 18021a0:	d8814917 	ldw	r2,1316(sp)
 18021a4:	94800044 	addi	r18,r18,1
 18021a8:	8c400044 	addi	r17,r17,1
 18021ac:	18800015 	stw	r2,0(r3)
 18021b0:	008001c4 	movi	r2,7
 18021b4:	dc800e15 	stw	r18,56(sp)
 18021b8:	dc400d15 	stw	r17,52(sp)
 18021bc:	1440ca16 	blt	r2,r17,18024e8 <___vfprintf_internal_r+0x19a4>
 18021c0:	18c00204 	addi	r3,r3,8
 18021c4:	0121c83a 	sub	r16,zero,r4
 18021c8:	0400500e 	bge	zero,r16,180230c <___vfprintf_internal_r+0x17c8>
 18021cc:	00800404 	movi	r2,16
 18021d0:	1400800e 	bge	r2,r16,18023d4 <___vfprintf_internal_r+0x1890>
 18021d4:	1027883a 	mov	r19,r2
 18021d8:	07006074 	movhi	fp,385
 18021dc:	e7369584 	addi	fp,fp,-9642
 18021e0:	050001c4 	movi	r20,7
 18021e4:	00000306 	br	18021f4 <___vfprintf_internal_r+0x16b0>
 18021e8:	18c00204 	addi	r3,r3,8
 18021ec:	843ffc04 	addi	r16,r16,-16
 18021f0:	9c007a0e 	bge	r19,r16,18023dc <___vfprintf_internal_r+0x1898>
 18021f4:	94800404 	addi	r18,r18,16
 18021f8:	8c400044 	addi	r17,r17,1
 18021fc:	1f000015 	stw	fp,0(r3)
 1802200:	1cc00115 	stw	r19,4(r3)
 1802204:	dc800e15 	stw	r18,56(sp)
 1802208:	dc400d15 	stw	r17,52(sp)
 180220c:	a47ff60e 	bge	r20,r17,18021e8 <___vfprintf_internal_r+0x16a4>
 1802210:	d9014f17 	ldw	r4,1340(sp)
 1802214:	b00b883a 	mov	r5,r22
 1802218:	d9800c04 	addi	r6,sp,48
 180221c:	1800aec0 	call	1800aec <__sprint_r>
 1802220:	103c001e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1802224:	dc800e17 	ldw	r18,56(sp)
 1802228:	dc400d17 	ldw	r17,52(sp)
 180222c:	d8c01904 	addi	r3,sp,100
 1802230:	003fee06 	br	18021ec <___vfprintf_internal_r+0x16a8>
 1802234:	3c000017 	ldw	r16,0(r7)
 1802238:	0023883a 	mov	r17,zero
 180223c:	39c00104 	addi	r7,r7,4
 1802240:	d9c14015 	stw	r7,1280(sp)
 1802244:	003e8c06 	br	1801c78 <___vfprintf_internal_r+0x1134>
 1802248:	d9401904 	addi	r5,sp,100
 180224c:	dd000f04 	addi	r20,sp,60
 1802250:	d9414115 	stw	r5,1284(sp)
 1802254:	d9814417 	ldw	r6,1296(sp)
 1802258:	880a973a 	slli	r5,r17,28
 180225c:	8004d13a 	srli	r2,r16,4
 1802260:	810003cc 	andi	r4,r16,15
 1802264:	3109883a 	add	r4,r6,r4
 1802268:	2884b03a 	or	r2,r5,r2
 180226c:	21400003 	ldbu	r5,0(r4)
 1802270:	d9014117 	ldw	r4,1284(sp)
 1802274:	8806d13a 	srli	r3,r17,4
 1802278:	1021883a 	mov	r16,r2
 180227c:	213fffc4 	addi	r4,r4,-1
 1802280:	d9014115 	stw	r4,1284(sp)
 1802284:	d9814117 	ldw	r6,1284(sp)
 1802288:	10c8b03a 	or	r4,r2,r3
 180228c:	1823883a 	mov	r17,r3
 1802290:	31400005 	stb	r5,0(r6)
 1802294:	203fef1e 	bne	r4,zero,1802254 <___vfprintf_internal_r+0x1710>
 1802298:	003cc506 	br	18015b0 <___vfprintf_internal_r+0xa6c>
 180229c:	00800c04 	movi	r2,48
 18022a0:	d98018c4 	addi	r6,sp,99
 18022a4:	dd000f04 	addi	r20,sp,60
 18022a8:	d88018c5 	stb	r2,99(sp)
 18022ac:	d9814115 	stw	r6,1284(sp)
 18022b0:	003cbf06 	br	18015b0 <___vfprintf_internal_r+0xa6c>
 18022b4:	dc400d17 	ldw	r17,52(sp)
 18022b8:	07006074 	movhi	fp,385
 18022bc:	e7369984 	addi	fp,fp,-9626
 18022c0:	003bc106 	br	18011c8 <___vfprintf_internal_r+0x684>
 18022c4:	d9414c17 	ldw	r5,1328(sp)
 18022c8:	2880040c 	andi	r2,r5,16
 18022cc:	10007c26 	beq	r2,zero,18024c0 <___vfprintf_internal_r+0x197c>
 18022d0:	38800017 	ldw	r2,0(r7)
 18022d4:	39c00104 	addi	r7,r7,4
 18022d8:	d9c14015 	stw	r7,1280(sp)
 18022dc:	d9814b17 	ldw	r6,1324(sp)
 18022e0:	d9c14017 	ldw	r7,1280(sp)
 18022e4:	11800015 	stw	r6,0(r2)
 18022e8:	003a7206 	br	1800cb4 <___vfprintf_internal_r+0x170>
 18022ec:	d9014f17 	ldw	r4,1340(sp)
 18022f0:	b00b883a 	mov	r5,r22
 18022f4:	d9800c04 	addi	r6,sp,48
 18022f8:	1800aec0 	call	1800aec <__sprint_r>
 18022fc:	103bc91e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1802300:	dc800e17 	ldw	r18,56(sp)
 1802304:	dc400d17 	ldw	r17,52(sp)
 1802308:	d8c01904 	addi	r3,sp,100
 180230c:	d9014717 	ldw	r4,1308(sp)
 1802310:	d9414117 	ldw	r5,1284(sp)
 1802314:	8c400044 	addi	r17,r17,1
 1802318:	9125883a 	add	r18,r18,r4
 180231c:	008001c4 	movi	r2,7
 1802320:	19400015 	stw	r5,0(r3)
 1802324:	19000115 	stw	r4,4(r3)
 1802328:	dc800e15 	stw	r18,56(sp)
 180232c:	dc400d15 	stw	r17,52(sp)
 1802330:	147ce816 	blt	r2,r17,18016d4 <___vfprintf_internal_r+0xb90>
 1802334:	18c00204 	addi	r3,r3,8
 1802338:	003b8006 	br	180113c <___vfprintf_internal_r+0x5f8>
 180233c:	38c00017 	ldw	r3,0(r7)
 1802340:	39000204 	addi	r4,r7,8
 1802344:	d9014015 	stw	r4,1280(sp)
 1802348:	d8c14215 	stw	r3,1288(sp)
 180234c:	39c00117 	ldw	r7,4(r7)
 1802350:	d9c14315 	stw	r7,1292(sp)
 1802354:	003e1a06 	br	1801bc0 <___vfprintf_internal_r+0x107c>
 1802358:	0005883a 	mov	r2,zero
 180235c:	1409c83a 	sub	r4,r2,r16
 1802360:	1105803a 	cmpltu	r2,r2,r4
 1802364:	044bc83a 	sub	r5,zero,r17
 1802368:	2885c83a 	sub	r2,r5,r2
 180236c:	2021883a 	mov	r16,r4
 1802370:	1023883a 	mov	r17,r2
 1802374:	01000044 	movi	r4,1
 1802378:	00800b44 	movi	r2,45
 180237c:	d8800405 	stb	r2,16(sp)
 1802380:	003c7e06 	br	180157c <___vfprintf_internal_r+0xa38>
 1802384:	d9014f17 	ldw	r4,1340(sp)
 1802388:	b00b883a 	mov	r5,r22
 180238c:	d9800c04 	addi	r6,sp,48
 1802390:	1800aec0 	call	1800aec <__sprint_r>
 1802394:	103ba31e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1802398:	dc800e17 	ldw	r18,56(sp)
 180239c:	dc400d17 	ldw	r17,52(sp)
 18023a0:	d9000517 	ldw	r4,20(sp)
 18023a4:	d9401904 	addi	r5,sp,100
 18023a8:	003da106 	br	1801a30 <___vfprintf_internal_r+0xeec>
 18023ac:	d9014f17 	ldw	r4,1340(sp)
 18023b0:	b00b883a 	mov	r5,r22
 18023b4:	d9800c04 	addi	r6,sp,48
 18023b8:	1800aec0 	call	1800aec <__sprint_r>
 18023bc:	103b991e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 18023c0:	dc800e17 	ldw	r18,56(sp)
 18023c4:	dc400d17 	ldw	r17,52(sp)
 18023c8:	d9000517 	ldw	r4,20(sp)
 18023cc:	d8c01904 	addi	r3,sp,100
 18023d0:	003d8b06 	br	1801a00 <___vfprintf_internal_r+0xebc>
 18023d4:	07006074 	movhi	fp,385
 18023d8:	e7369584 	addi	fp,fp,-9642
 18023dc:	9425883a 	add	r18,r18,r16
 18023e0:	8c400044 	addi	r17,r17,1
 18023e4:	008001c4 	movi	r2,7
 18023e8:	1f000015 	stw	fp,0(r3)
 18023ec:	1c000115 	stw	r16,4(r3)
 18023f0:	dc800e15 	stw	r18,56(sp)
 18023f4:	dc400d15 	stw	r17,52(sp)
 18023f8:	147fbc16 	blt	r2,r17,18022ec <___vfprintf_internal_r+0x17a8>
 18023fc:	18c00204 	addi	r3,r3,8
 1802400:	003fc206 	br	180230c <___vfprintf_internal_r+0x17c8>
 1802404:	d9014f17 	ldw	r4,1340(sp)
 1802408:	b00b883a 	mov	r5,r22
 180240c:	d9800c04 	addi	r6,sp,48
 1802410:	1800aec0 	call	1800aec <__sprint_r>
 1802414:	103b831e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1802418:	dc800e17 	ldw	r18,56(sp)
 180241c:	d9000517 	ldw	r4,20(sp)
 1802420:	d8c01904 	addi	r3,sp,100
 1802424:	003cfc06 	br	1801818 <___vfprintf_internal_r+0xcd4>
 1802428:	07006074 	movhi	fp,385
 180242c:	e7369584 	addi	fp,fp,-9642
 1802430:	003bde06 	br	18013ac <___vfprintf_internal_r+0x868>
 1802434:	00806074 	movhi	r2,385
 1802438:	10b68404 	addi	r2,r2,-9712
 180243c:	d8814115 	stw	r2,1284(sp)
 1802440:	003def06 	br	1801c00 <___vfprintf_internal_r+0x10bc>
 1802444:	d9014217 	ldw	r4,1288(sp)
 1802448:	d9414317 	ldw	r5,1292(sp)
 180244c:	18076340 	call	1807634 <__isnand>
 1802450:	10003926 	beq	r2,zero,1802538 <___vfprintf_internal_r+0x19f4>
 1802454:	d9414d17 	ldw	r5,1332(sp)
 1802458:	008011c4 	movi	r2,71
 180245c:	1140ce16 	blt	r2,r5,1802798 <___vfprintf_internal_r+0x1c54>
 1802460:	01806074 	movhi	r6,385
 1802464:	31b68504 	addi	r6,r6,-9708
 1802468:	d9814115 	stw	r6,1284(sp)
 180246c:	003de406 	br	1801c00 <___vfprintf_internal_r+0x10bc>
 1802470:	d9014c17 	ldw	r4,1328(sp)
 1802474:	bdc00044 	addi	r23,r23,1
 1802478:	b8c00007 	ldb	r3,0(r23)
 180247c:	21000814 	ori	r4,r4,32
 1802480:	d9014c15 	stw	r4,1328(sp)
 1802484:	003a2e06 	br	1800d40 <___vfprintf_internal_r+0x1fc>
 1802488:	dcc14515 	stw	r19,1300(sp)
 180248c:	98011016 	blt	r19,zero,18028d0 <___vfprintf_internal_r+0x1d8c>
 1802490:	980f883a 	mov	r7,r19
 1802494:	d8014615 	stw	zero,1304(sp)
 1802498:	003c4c06 	br	18015cc <___vfprintf_internal_r+0xa88>
 180249c:	d9014f17 	ldw	r4,1340(sp)
 18024a0:	b00b883a 	mov	r5,r22
 18024a4:	d9800c04 	addi	r6,sp,48
 18024a8:	1800aec0 	call	1800aec <__sprint_r>
 18024ac:	103b5d1e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 18024b0:	dc800e17 	ldw	r18,56(sp)
 18024b4:	d9000517 	ldw	r4,20(sp)
 18024b8:	d8c01904 	addi	r3,sp,100
 18024bc:	003f2e06 	br	1802178 <___vfprintf_internal_r+0x1634>
 18024c0:	d8c14c17 	ldw	r3,1328(sp)
 18024c4:	1880100c 	andi	r2,r3,64
 18024c8:	1000a026 	beq	r2,zero,180274c <___vfprintf_internal_r+0x1c08>
 18024cc:	38800017 	ldw	r2,0(r7)
 18024d0:	39c00104 	addi	r7,r7,4
 18024d4:	d9c14015 	stw	r7,1280(sp)
 18024d8:	d9014b17 	ldw	r4,1324(sp)
 18024dc:	d9c14017 	ldw	r7,1280(sp)
 18024e0:	1100000d 	sth	r4,0(r2)
 18024e4:	0039f306 	br	1800cb4 <___vfprintf_internal_r+0x170>
 18024e8:	d9014f17 	ldw	r4,1340(sp)
 18024ec:	b00b883a 	mov	r5,r22
 18024f0:	d9800c04 	addi	r6,sp,48
 18024f4:	1800aec0 	call	1800aec <__sprint_r>
 18024f8:	103b4a1e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 18024fc:	dc800e17 	ldw	r18,56(sp)
 1802500:	dc400d17 	ldw	r17,52(sp)
 1802504:	d9000517 	ldw	r4,20(sp)
 1802508:	d8c01904 	addi	r3,sp,100
 180250c:	003f2d06 	br	18021c4 <___vfprintf_internal_r+0x1680>
 1802510:	00800184 	movi	r2,6
 1802514:	14c09a36 	bltu	r2,r19,1802780 <___vfprintf_internal_r+0x1c3c>
 1802518:	dcc14515 	stw	r19,1300(sp)
 180251c:	9800010e 	bge	r19,zero,1802524 <___vfprintf_internal_r+0x19e0>
 1802520:	d8014515 	stw	zero,1300(sp)
 1802524:	00806074 	movhi	r2,385
 1802528:	10b68704 	addi	r2,r2,-9700
 180252c:	980f883a 	mov	r7,r19
 1802530:	d8814115 	stw	r2,1284(sp)
 1802534:	003a7206 	br	1800f00 <___vfprintf_internal_r+0x3bc>
 1802538:	00bfffc4 	movi	r2,-1
 180253c:	9880e226 	beq	r19,r2,18028c8 <___vfprintf_internal_r+0x1d84>
 1802540:	d9414d17 	ldw	r5,1332(sp)
 1802544:	008019c4 	movi	r2,103
 1802548:	2880dc26 	beq	r5,r2,18028bc <___vfprintf_internal_r+0x1d78>
 180254c:	008011c4 	movi	r2,71
 1802550:	2880da26 	beq	r5,r2,18028bc <___vfprintf_internal_r+0x1d78>
 1802554:	d9414c17 	ldw	r5,1328(sp)
 1802558:	d9014317 	ldw	r4,1292(sp)
 180255c:	d9814217 	ldw	r6,1288(sp)
 1802560:	29404014 	ori	r5,r5,256
 1802564:	d9414c15 	stw	r5,1328(sp)
 1802568:	2000cc16 	blt	r4,zero,180289c <___vfprintf_internal_r+0x1d58>
 180256c:	3021883a 	mov	r16,r6
 1802570:	2023883a 	mov	r17,r4
 1802574:	0039883a 	mov	fp,zero
 1802578:	d9414d17 	ldw	r5,1332(sp)
 180257c:	00801984 	movi	r2,102
 1802580:	2880b726 	beq	r5,r2,1802860 <___vfprintf_internal_r+0x1d1c>
 1802584:	00801184 	movi	r2,70
 1802588:	2880b526 	beq	r5,r2,1802860 <___vfprintf_internal_r+0x1d1c>
 180258c:	00801944 	movi	r2,101
 1802590:	2880c826 	beq	r5,r2,18028b4 <___vfprintf_internal_r+0x1d70>
 1802594:	00801144 	movi	r2,69
 1802598:	2880c626 	beq	r5,r2,18028b4 <___vfprintf_internal_r+0x1d70>
 180259c:	9829883a 	mov	r20,r19
 18025a0:	d9014f17 	ldw	r4,1340(sp)
 18025a4:	d8800504 	addi	r2,sp,20
 18025a8:	880d883a 	mov	r6,r17
 18025ac:	d8800115 	stw	r2,4(sp)
 18025b0:	d8c00604 	addi	r3,sp,24
 18025b4:	d8800704 	addi	r2,sp,28
 18025b8:	800b883a 	mov	r5,r16
 18025bc:	01c00084 	movi	r7,2
 18025c0:	d8c00215 	stw	r3,8(sp)
 18025c4:	d8800315 	stw	r2,12(sp)
 18025c8:	dd000015 	stw	r20,0(sp)
 18025cc:	1802dac0 	call	1802dac <_dtoa_r>
 18025d0:	d9814d17 	ldw	r6,1332(sp)
 18025d4:	d8814115 	stw	r2,1284(sp)
 18025d8:	008019c4 	movi	r2,103
 18025dc:	30809526 	beq	r6,r2,1802834 <___vfprintf_internal_r+0x1cf0>
 18025e0:	d8c14d17 	ldw	r3,1332(sp)
 18025e4:	008011c4 	movi	r2,71
 18025e8:	18809226 	beq	r3,r2,1802834 <___vfprintf_internal_r+0x1cf0>
 18025ec:	d9414117 	ldw	r5,1284(sp)
 18025f0:	d9814d17 	ldw	r6,1332(sp)
 18025f4:	00801984 	movi	r2,102
 18025f8:	2d25883a 	add	r18,r5,r20
 18025fc:	30808626 	beq	r6,r2,1802818 <___vfprintf_internal_r+0x1cd4>
 1802600:	00801184 	movi	r2,70
 1802604:	30808426 	beq	r6,r2,1802818 <___vfprintf_internal_r+0x1cd4>
 1802608:	000d883a 	mov	r6,zero
 180260c:	000f883a 	mov	r7,zero
 1802610:	880b883a 	mov	r5,r17
 1802614:	8009883a 	mov	r4,r16
 1802618:	18095700 	call	1809570 <__eqdf2>
 180261c:	1000751e 	bne	r2,zero,18027f4 <___vfprintf_internal_r+0x1cb0>
 1802620:	9005883a 	mov	r2,r18
 1802624:	dc800715 	stw	r18,28(sp)
 1802628:	d9014117 	ldw	r4,1284(sp)
 180262c:	d9414d17 	ldw	r5,1332(sp)
 1802630:	00c019c4 	movi	r3,103
 1802634:	1125c83a 	sub	r18,r2,r4
 1802638:	28c06826 	beq	r5,r3,18027dc <___vfprintf_internal_r+0x1c98>
 180263c:	008011c4 	movi	r2,71
 1802640:	28806626 	beq	r5,r2,18027dc <___vfprintf_internal_r+0x1c98>
 1802644:	d9000517 	ldw	r4,20(sp)
 1802648:	d8c14d17 	ldw	r3,1332(sp)
 180264c:	00801944 	movi	r2,101
 1802650:	10c05516 	blt	r2,r3,18027a8 <___vfprintf_internal_r+0x1c64>
 1802654:	213fffc4 	addi	r4,r4,-1
 1802658:	d9000515 	stw	r4,20(sp)
 180265c:	d8c00805 	stb	r3,32(sp)
 1802660:	2021883a 	mov	r16,r4
 1802664:	2000c116 	blt	r4,zero,180296c <___vfprintf_internal_r+0x1e28>
 1802668:	00800ac4 	movi	r2,43
 180266c:	d8800845 	stb	r2,33(sp)
 1802670:	00800244 	movi	r2,9
 1802674:	1400af0e 	bge	r2,r16,1802934 <___vfprintf_internal_r+0x1df0>
 1802678:	1027883a 	mov	r19,r2
 180267c:	dc400b84 	addi	r17,sp,46
 1802680:	8009883a 	mov	r4,r16
 1802684:	01400284 	movi	r5,10
 1802688:	18008dc0 	call	18008dc <__modsi3>
 180268c:	10800c04 	addi	r2,r2,48
 1802690:	8c7fffc4 	addi	r17,r17,-1
 1802694:	8009883a 	mov	r4,r16
 1802698:	01400284 	movi	r5,10
 180269c:	88800005 	stb	r2,0(r17)
 18026a0:	180087c0 	call	180087c <__divsi3>
 18026a4:	1021883a 	mov	r16,r2
 18026a8:	98bff516 	blt	r19,r2,1802680 <___vfprintf_internal_r+0x1b3c>
 18026ac:	10c00c04 	addi	r3,r2,48
 18026b0:	d88009c4 	addi	r2,sp,39
 18026b4:	108001c4 	addi	r2,r2,7
 18026b8:	897fffc4 	addi	r5,r17,-1
 18026bc:	88ffffc5 	stb	r3,-1(r17)
 18026c0:	2880a72e 	bgeu	r5,r2,1802960 <___vfprintf_internal_r+0x1e1c>
 18026c4:	1009883a 	mov	r4,r2
 18026c8:	d9800804 	addi	r6,sp,32
 18026cc:	d8c00884 	addi	r3,sp,34
 18026d0:	28800003 	ldbu	r2,0(r5)
 18026d4:	29400044 	addi	r5,r5,1
 18026d8:	18800005 	stb	r2,0(r3)
 18026dc:	18c00044 	addi	r3,r3,1
 18026e0:	293ffb36 	bltu	r5,r4,18026d0 <___vfprintf_internal_r+0x1b8c>
 18026e4:	1987c83a 	sub	r3,r3,r6
 18026e8:	00800044 	movi	r2,1
 18026ec:	d8c14815 	stw	r3,1312(sp)
 18026f0:	90cf883a 	add	r7,r18,r3
 18026f4:	1480960e 	bge	r2,r18,1802950 <___vfprintf_internal_r+0x1e0c>
 18026f8:	39c00044 	addi	r7,r7,1
 18026fc:	d9c14515 	stw	r7,1300(sp)
 1802700:	38003416 	blt	r7,zero,18027d4 <___vfprintf_internal_r+0x1c90>
 1802704:	e0803fcc 	andi	r2,fp,255
 1802708:	1080201c 	xori	r2,r2,128
 180270c:	10bfe004 	addi	r2,r2,-128
 1802710:	10004e26 	beq	r2,zero,180284c <___vfprintf_internal_r+0x1d08>
 1802714:	00800b44 	movi	r2,45
 1802718:	dc814715 	stw	r18,1308(sp)
 180271c:	d8014615 	stw	zero,1304(sp)
 1802720:	d8800405 	stb	r2,16(sp)
 1802724:	003bab06 	br	18015d4 <___vfprintf_internal_r+0xa90>
 1802728:	00800b44 	movi	r2,45
 180272c:	d8800405 	stb	r2,16(sp)
 1802730:	003d2d06 	br	1801be8 <___vfprintf_internal_r+0x10a4>
 1802734:	d9014f17 	ldw	r4,1340(sp)
 1802738:	b00b883a 	mov	r5,r22
 180273c:	d9800c04 	addi	r6,sp,48
 1802740:	1800aec0 	call	1800aec <__sprint_r>
 1802744:	103ab71e 	bne	r2,zero,1801224 <___vfprintf_internal_r+0x6e0>
 1802748:	003ab506 	br	1801220 <___vfprintf_internal_r+0x6dc>
 180274c:	38800017 	ldw	r2,0(r7)
 1802750:	39c00104 	addi	r7,r7,4
 1802754:	d9c14015 	stw	r7,1280(sp)
 1802758:	d9414b17 	ldw	r5,1324(sp)
 180275c:	d9c14017 	ldw	r7,1280(sp)
 1802760:	11400015 	stw	r5,0(r2)
 1802764:	00395306 	br	1800cb4 <___vfprintf_internal_r+0x170>
 1802768:	980f883a 	mov	r7,r19
 180276c:	dcc14515 	stw	r19,1300(sp)
 1802770:	d8014615 	stw	zero,1304(sp)
 1802774:	003b9506 	br	18015cc <___vfprintf_internal_r+0xa88>
 1802778:	0027883a 	mov	r19,zero
 180277c:	00397206 	br	1800d48 <___vfprintf_internal_r+0x204>
 1802780:	00c06074 	movhi	r3,385
 1802784:	18f68704 	addi	r3,r3,-9700
 1802788:	100f883a 	mov	r7,r2
 180278c:	d8814515 	stw	r2,1300(sp)
 1802790:	d8c14115 	stw	r3,1284(sp)
 1802794:	0039da06 	br	1800f00 <___vfprintf_internal_r+0x3bc>
 1802798:	00806074 	movhi	r2,385
 180279c:	10b68604 	addi	r2,r2,-9704
 18027a0:	d8814115 	stw	r2,1284(sp)
 18027a4:	003d1606 	br	1801c00 <___vfprintf_internal_r+0x10bc>
 18027a8:	d9414d17 	ldw	r5,1332(sp)
 18027ac:	00801984 	movi	r2,102
 18027b0:	28804926 	beq	r5,r2,18028d8 <___vfprintf_internal_r+0x1d94>
 18027b4:	200f883a 	mov	r7,r4
 18027b8:	24805716 	blt	r4,r18,1802918 <___vfprintf_internal_r+0x1dd4>
 18027bc:	d9414c17 	ldw	r5,1328(sp)
 18027c0:	2880004c 	andi	r2,r5,1
 18027c4:	10000126 	beq	r2,zero,18027cc <___vfprintf_internal_r+0x1c88>
 18027c8:	21c00044 	addi	r7,r4,1
 18027cc:	d9c14515 	stw	r7,1300(sp)
 18027d0:	383fcc0e 	bge	r7,zero,1802704 <___vfprintf_internal_r+0x1bc0>
 18027d4:	d8014515 	stw	zero,1300(sp)
 18027d8:	003fca06 	br	1802704 <___vfprintf_internal_r+0x1bc0>
 18027dc:	d9000517 	ldw	r4,20(sp)
 18027e0:	00bfff04 	movi	r2,-4
 18027e4:	1100480e 	bge	r2,r4,1802908 <___vfprintf_internal_r+0x1dc4>
 18027e8:	99004716 	blt	r19,r4,1802908 <___vfprintf_internal_r+0x1dc4>
 18027ec:	d8c14d15 	stw	r3,1332(sp)
 18027f0:	003ff006 	br	18027b4 <___vfprintf_internal_r+0x1c70>
 18027f4:	d8800717 	ldw	r2,28(sp)
 18027f8:	14bf8b2e 	bgeu	r2,r18,1802628 <___vfprintf_internal_r+0x1ae4>
 18027fc:	9007883a 	mov	r3,r18
 1802800:	01000c04 	movi	r4,48
 1802804:	11000005 	stb	r4,0(r2)
 1802808:	10800044 	addi	r2,r2,1
 180280c:	d8800715 	stw	r2,28(sp)
 1802810:	18bffc1e 	bne	r3,r2,1802804 <___vfprintf_internal_r+0x1cc0>
 1802814:	003f8406 	br	1802628 <___vfprintf_internal_r+0x1ae4>
 1802818:	d8814117 	ldw	r2,1284(sp)
 180281c:	10c00007 	ldb	r3,0(r2)
 1802820:	00800c04 	movi	r2,48
 1802824:	18805b26 	beq	r3,r2,1802994 <___vfprintf_internal_r+0x1e50>
 1802828:	d9000517 	ldw	r4,20(sp)
 180282c:	9125883a 	add	r18,r18,r4
 1802830:	003f7506 	br	1802608 <___vfprintf_internal_r+0x1ac4>
 1802834:	d9014c17 	ldw	r4,1328(sp)
 1802838:	2080004c 	andi	r2,r4,1
 180283c:	1005003a 	cmpeq	r2,r2,zero
 1802840:	103f6a26 	beq	r2,zero,18025ec <___vfprintf_internal_r+0x1aa8>
 1802844:	d8800717 	ldw	r2,28(sp)
 1802848:	003f7706 	br	1802628 <___vfprintf_internal_r+0x1ae4>
 180284c:	d9c14515 	stw	r7,1300(sp)
 1802850:	38004d16 	blt	r7,zero,1802988 <___vfprintf_internal_r+0x1e44>
 1802854:	dc814715 	stw	r18,1308(sp)
 1802858:	d8014615 	stw	zero,1304(sp)
 180285c:	003b5b06 	br	18015cc <___vfprintf_internal_r+0xa88>
 1802860:	d9014f17 	ldw	r4,1340(sp)
 1802864:	d8800504 	addi	r2,sp,20
 1802868:	d8800115 	stw	r2,4(sp)
 180286c:	d8c00604 	addi	r3,sp,24
 1802870:	d8800704 	addi	r2,sp,28
 1802874:	800b883a 	mov	r5,r16
 1802878:	880d883a 	mov	r6,r17
 180287c:	01c000c4 	movi	r7,3
 1802880:	d8c00215 	stw	r3,8(sp)
 1802884:	d8800315 	stw	r2,12(sp)
 1802888:	dcc00015 	stw	r19,0(sp)
 180288c:	9829883a 	mov	r20,r19
 1802890:	1802dac0 	call	1802dac <_dtoa_r>
 1802894:	d8814115 	stw	r2,1284(sp)
 1802898:	003f5106 	br	18025e0 <___vfprintf_internal_r+0x1a9c>
 180289c:	d8c14217 	ldw	r3,1288(sp)
 18028a0:	d9014317 	ldw	r4,1292(sp)
 18028a4:	07000b44 	movi	fp,45
 18028a8:	1821883a 	mov	r16,r3
 18028ac:	2460003c 	xorhi	r17,r4,32768
 18028b0:	003f3106 	br	1802578 <___vfprintf_internal_r+0x1a34>
 18028b4:	9d000044 	addi	r20,r19,1
 18028b8:	003f3906 	br	18025a0 <___vfprintf_internal_r+0x1a5c>
 18028bc:	983f251e 	bne	r19,zero,1802554 <___vfprintf_internal_r+0x1a10>
 18028c0:	04c00044 	movi	r19,1
 18028c4:	003f2306 	br	1802554 <___vfprintf_internal_r+0x1a10>
 18028c8:	04c00184 	movi	r19,6
 18028cc:	003f2106 	br	1802554 <___vfprintf_internal_r+0x1a10>
 18028d0:	d8014515 	stw	zero,1300(sp)
 18028d4:	003eee06 	br	1802490 <___vfprintf_internal_r+0x194c>
 18028d8:	200f883a 	mov	r7,r4
 18028dc:	0100370e 	bge	zero,r4,18029bc <___vfprintf_internal_r+0x1e78>
 18028e0:	9800031e 	bne	r19,zero,18028f0 <___vfprintf_internal_r+0x1dac>
 18028e4:	d9814c17 	ldw	r6,1328(sp)
 18028e8:	3080004c 	andi	r2,r6,1
 18028ec:	103fb726 	beq	r2,zero,18027cc <___vfprintf_internal_r+0x1c88>
 18028f0:	20800044 	addi	r2,r4,1
 18028f4:	98a7883a 	add	r19,r19,r2
 18028f8:	dcc14515 	stw	r19,1300(sp)
 18028fc:	980f883a 	mov	r7,r19
 1802900:	983f800e 	bge	r19,zero,1802704 <___vfprintf_internal_r+0x1bc0>
 1802904:	003fb306 	br	18027d4 <___vfprintf_internal_r+0x1c90>
 1802908:	d9814d17 	ldw	r6,1332(sp)
 180290c:	31bfff84 	addi	r6,r6,-2
 1802910:	d9814d15 	stw	r6,1332(sp)
 1802914:	003f4c06 	br	1802648 <___vfprintf_internal_r+0x1b04>
 1802918:	0100180e 	bge	zero,r4,180297c <___vfprintf_internal_r+0x1e38>
 180291c:	00800044 	movi	r2,1
 1802920:	1485883a 	add	r2,r2,r18
 1802924:	d8814515 	stw	r2,1300(sp)
 1802928:	100f883a 	mov	r7,r2
 180292c:	103f750e 	bge	r2,zero,1802704 <___vfprintf_internal_r+0x1bc0>
 1802930:	003fa806 	br	18027d4 <___vfprintf_internal_r+0x1c90>
 1802934:	80c00c04 	addi	r3,r16,48
 1802938:	00800c04 	movi	r2,48
 180293c:	d8c008c5 	stb	r3,35(sp)
 1802940:	d9800804 	addi	r6,sp,32
 1802944:	d8c00904 	addi	r3,sp,36
 1802948:	d8800885 	stb	r2,34(sp)
 180294c:	003f6506 	br	18026e4 <___vfprintf_internal_r+0x1ba0>
 1802950:	d9014c17 	ldw	r4,1328(sp)
 1802954:	2084703a 	and	r2,r4,r2
 1802958:	103f9c26 	beq	r2,zero,18027cc <___vfprintf_internal_r+0x1c88>
 180295c:	003f6606 	br	18026f8 <___vfprintf_internal_r+0x1bb4>
 1802960:	d9800804 	addi	r6,sp,32
 1802964:	d8c00884 	addi	r3,sp,34
 1802968:	003f5e06 	br	18026e4 <___vfprintf_internal_r+0x1ba0>
 180296c:	00800b44 	movi	r2,45
 1802970:	0121c83a 	sub	r16,zero,r4
 1802974:	d8800845 	stb	r2,33(sp)
 1802978:	003f3d06 	br	1802670 <___vfprintf_internal_r+0x1b2c>
 180297c:	00800084 	movi	r2,2
 1802980:	1105c83a 	sub	r2,r2,r4
 1802984:	003fe606 	br	1802920 <___vfprintf_internal_r+0x1ddc>
 1802988:	d8014515 	stw	zero,1300(sp)
 180298c:	dc814715 	stw	r18,1308(sp)
 1802990:	003fb106 	br	1802858 <___vfprintf_internal_r+0x1d14>
 1802994:	000d883a 	mov	r6,zero
 1802998:	000f883a 	mov	r7,zero
 180299c:	8009883a 	mov	r4,r16
 18029a0:	880b883a 	mov	r5,r17
 18029a4:	18095f80 	call	18095f8 <__nedf2>
 18029a8:	103f9f26 	beq	r2,zero,1802828 <___vfprintf_internal_r+0x1ce4>
 18029ac:	00800044 	movi	r2,1
 18029b0:	1509c83a 	sub	r4,r2,r20
 18029b4:	d9000515 	stw	r4,20(sp)
 18029b8:	003f9b06 	br	1802828 <___vfprintf_internal_r+0x1ce4>
 18029bc:	98000d1e 	bne	r19,zero,18029f4 <___vfprintf_internal_r+0x1eb0>
 18029c0:	d8c14c17 	ldw	r3,1328(sp)
 18029c4:	1880004c 	andi	r2,r3,1
 18029c8:	10000a1e 	bne	r2,zero,18029f4 <___vfprintf_internal_r+0x1eb0>
 18029cc:	01000044 	movi	r4,1
 18029d0:	200f883a 	mov	r7,r4
 18029d4:	d9014515 	stw	r4,1300(sp)
 18029d8:	003f4a06 	br	1802704 <___vfprintf_internal_r+0x1bc0>
 18029dc:	3cc00017 	ldw	r19,0(r7)
 18029e0:	39c00104 	addi	r7,r7,4
 18029e4:	983d0e0e 	bge	r19,zero,1801e20 <___vfprintf_internal_r+0x12dc>
 18029e8:	b8c00007 	ldb	r3,0(r23)
 18029ec:	04ffffc4 	movi	r19,-1
 18029f0:	0038d306 	br	1800d40 <___vfprintf_internal_r+0x1fc>
 18029f4:	9cc00084 	addi	r19,r19,2
 18029f8:	dcc14515 	stw	r19,1300(sp)
 18029fc:	980f883a 	mov	r7,r19
 1802a00:	983f400e 	bge	r19,zero,1802704 <___vfprintf_internal_r+0x1bc0>
 1802a04:	003f7306 	br	18027d4 <___vfprintf_internal_r+0x1c90>

01802a08 <__vfprintf_internal>:
 1802a08:	00806074 	movhi	r2,385
 1802a0c:	10be1104 	addi	r2,r2,-1980
 1802a10:	2013883a 	mov	r9,r4
 1802a14:	11000017 	ldw	r4,0(r2)
 1802a18:	2805883a 	mov	r2,r5
 1802a1c:	300f883a 	mov	r7,r6
 1802a20:	480b883a 	mov	r5,r9
 1802a24:	100d883a 	mov	r6,r2
 1802a28:	1800b441 	jmpi	1800b44 <___vfprintf_internal_r>

01802a2c <__swsetup_r>:
 1802a2c:	00806074 	movhi	r2,385
 1802a30:	10be1104 	addi	r2,r2,-1980
 1802a34:	10c00017 	ldw	r3,0(r2)
 1802a38:	defffd04 	addi	sp,sp,-12
 1802a3c:	dc400115 	stw	r17,4(sp)
 1802a40:	dc000015 	stw	r16,0(sp)
 1802a44:	dfc00215 	stw	ra,8(sp)
 1802a48:	2023883a 	mov	r17,r4
 1802a4c:	2821883a 	mov	r16,r5
 1802a50:	18000226 	beq	r3,zero,1802a5c <__swsetup_r+0x30>
 1802a54:	18800e17 	ldw	r2,56(r3)
 1802a58:	10001f26 	beq	r2,zero,1802ad8 <__swsetup_r+0xac>
 1802a5c:	8100030b 	ldhu	r4,12(r16)
 1802a60:	2080020c 	andi	r2,r4,8
 1802a64:	10002826 	beq	r2,zero,1802b08 <__swsetup_r+0xdc>
 1802a68:	81400417 	ldw	r5,16(r16)
 1802a6c:	28001d26 	beq	r5,zero,1802ae4 <__swsetup_r+0xb8>
 1802a70:	2080004c 	andi	r2,r4,1
 1802a74:	1005003a 	cmpeq	r2,r2,zero
 1802a78:	10000b26 	beq	r2,zero,1802aa8 <__swsetup_r+0x7c>
 1802a7c:	2080008c 	andi	r2,r4,2
 1802a80:	10001226 	beq	r2,zero,1802acc <__swsetup_r+0xa0>
 1802a84:	0005883a 	mov	r2,zero
 1802a88:	80800215 	stw	r2,8(r16)
 1802a8c:	28000b26 	beq	r5,zero,1802abc <__swsetup_r+0x90>
 1802a90:	0005883a 	mov	r2,zero
 1802a94:	dfc00217 	ldw	ra,8(sp)
 1802a98:	dc400117 	ldw	r17,4(sp)
 1802a9c:	dc000017 	ldw	r16,0(sp)
 1802aa0:	dec00304 	addi	sp,sp,12
 1802aa4:	f800283a 	ret
 1802aa8:	80800517 	ldw	r2,20(r16)
 1802aac:	80000215 	stw	zero,8(r16)
 1802ab0:	0085c83a 	sub	r2,zero,r2
 1802ab4:	80800615 	stw	r2,24(r16)
 1802ab8:	283ff51e 	bne	r5,zero,1802a90 <__swsetup_r+0x64>
 1802abc:	2080200c 	andi	r2,r4,128
 1802ac0:	103ff326 	beq	r2,zero,1802a90 <__swsetup_r+0x64>
 1802ac4:	00bfffc4 	movi	r2,-1
 1802ac8:	003ff206 	br	1802a94 <__swsetup_r+0x68>
 1802acc:	80800517 	ldw	r2,20(r16)
 1802ad0:	80800215 	stw	r2,8(r16)
 1802ad4:	003fed06 	br	1802a8c <__swsetup_r+0x60>
 1802ad8:	1809883a 	mov	r4,r3
 1802adc:	18045f80 	call	18045f8 <__sinit>
 1802ae0:	003fde06 	br	1802a5c <__swsetup_r+0x30>
 1802ae4:	20c0a00c 	andi	r3,r4,640
 1802ae8:	00808004 	movi	r2,512
 1802aec:	18bfe026 	beq	r3,r2,1802a70 <__swsetup_r+0x44>
 1802af0:	8809883a 	mov	r4,r17
 1802af4:	800b883a 	mov	r5,r16
 1802af8:	18053a40 	call	18053a4 <__smakebuf_r>
 1802afc:	8100030b 	ldhu	r4,12(r16)
 1802b00:	81400417 	ldw	r5,16(r16)
 1802b04:	003fda06 	br	1802a70 <__swsetup_r+0x44>
 1802b08:	2080040c 	andi	r2,r4,16
 1802b0c:	103fed26 	beq	r2,zero,1802ac4 <__swsetup_r+0x98>
 1802b10:	2080010c 	andi	r2,r4,4
 1802b14:	10001226 	beq	r2,zero,1802b60 <__swsetup_r+0x134>
 1802b18:	81400c17 	ldw	r5,48(r16)
 1802b1c:	28000526 	beq	r5,zero,1802b34 <__swsetup_r+0x108>
 1802b20:	80801004 	addi	r2,r16,64
 1802b24:	28800226 	beq	r5,r2,1802b30 <__swsetup_r+0x104>
 1802b28:	8809883a 	mov	r4,r17
 1802b2c:	18049b00 	call	18049b0 <_free_r>
 1802b30:	80000c15 	stw	zero,48(r16)
 1802b34:	8080030b 	ldhu	r2,12(r16)
 1802b38:	81400417 	ldw	r5,16(r16)
 1802b3c:	80000115 	stw	zero,4(r16)
 1802b40:	10bff6cc 	andi	r2,r2,65499
 1802b44:	8080030d 	sth	r2,12(r16)
 1802b48:	81400015 	stw	r5,0(r16)
 1802b4c:	8080030b 	ldhu	r2,12(r16)
 1802b50:	10800214 	ori	r2,r2,8
 1802b54:	113fffcc 	andi	r4,r2,65535
 1802b58:	8080030d 	sth	r2,12(r16)
 1802b5c:	003fc306 	br	1802a6c <__swsetup_r+0x40>
 1802b60:	81400417 	ldw	r5,16(r16)
 1802b64:	003ff906 	br	1802b4c <__swsetup_r+0x120>

01802b68 <quorem>:
 1802b68:	28c00417 	ldw	r3,16(r5)
 1802b6c:	20800417 	ldw	r2,16(r4)
 1802b70:	defff104 	addi	sp,sp,-60
 1802b74:	dfc00e15 	stw	ra,56(sp)
 1802b78:	df000d15 	stw	fp,52(sp)
 1802b7c:	ddc00c15 	stw	r23,48(sp)
 1802b80:	dd800b15 	stw	r22,44(sp)
 1802b84:	dd400a15 	stw	r21,40(sp)
 1802b88:	dd000915 	stw	r20,36(sp)
 1802b8c:	dcc00815 	stw	r19,32(sp)
 1802b90:	dc800715 	stw	r18,28(sp)
 1802b94:	dc400615 	stw	r17,24(sp)
 1802b98:	dc000515 	stw	r16,20(sp)
 1802b9c:	d9000315 	stw	r4,12(sp)
 1802ba0:	d9400415 	stw	r5,16(sp)
 1802ba4:	10c07f16 	blt	r2,r3,1802da4 <quorem+0x23c>
 1802ba8:	1d3fffc4 	addi	r20,r3,-1
 1802bac:	d8c00417 	ldw	r3,16(sp)
 1802bb0:	d9000317 	ldw	r4,12(sp)
 1802bb4:	a505883a 	add	r2,r20,r20
 1802bb8:	1085883a 	add	r2,r2,r2
 1802bbc:	1cc00504 	addi	r19,r3,20
 1802bc0:	25c00504 	addi	r23,r4,20
 1802bc4:	98ad883a 	add	r22,r19,r2
 1802bc8:	15c7883a 	add	r3,r2,r23
 1802bcc:	b1400017 	ldw	r5,0(r22)
 1802bd0:	19000017 	ldw	r4,0(r3)
 1802bd4:	d8c00015 	stw	r3,0(sp)
 1802bd8:	29400044 	addi	r5,r5,1
 1802bdc:	d9000215 	stw	r4,8(sp)
 1802be0:	180093c0 	call	180093c <__udivsi3>
 1802be4:	1039883a 	mov	fp,r2
 1802be8:	10003d1e 	bne	r2,zero,1802ce0 <quorem+0x178>
 1802bec:	d9400417 	ldw	r5,16(sp)
 1802bf0:	d9000317 	ldw	r4,12(sp)
 1802bf4:	18060d00 	call	18060d0 <__mcmp>
 1802bf8:	10002c16 	blt	r2,zero,1802cac <quorem+0x144>
 1802bfc:	e7000044 	addi	fp,fp,1
 1802c00:	b80f883a 	mov	r7,r23
 1802c04:	0011883a 	mov	r8,zero
 1802c08:	0009883a 	mov	r4,zero
 1802c0c:	99400017 	ldw	r5,0(r19)
 1802c10:	38c00017 	ldw	r3,0(r7)
 1802c14:	9cc00104 	addi	r19,r19,4
 1802c18:	28bfffcc 	andi	r2,r5,65535
 1802c1c:	2085883a 	add	r2,r4,r2
 1802c20:	11bfffcc 	andi	r6,r2,65535
 1802c24:	193fffcc 	andi	r4,r3,65535
 1802c28:	1004d43a 	srli	r2,r2,16
 1802c2c:	280ad43a 	srli	r5,r5,16
 1802c30:	2189c83a 	sub	r4,r4,r6
 1802c34:	2209883a 	add	r4,r4,r8
 1802c38:	1806d43a 	srli	r3,r3,16
 1802c3c:	288b883a 	add	r5,r5,r2
 1802c40:	200dd43a 	srai	r6,r4,16
 1802c44:	28bfffcc 	andi	r2,r5,65535
 1802c48:	1887c83a 	sub	r3,r3,r2
 1802c4c:	1987883a 	add	r3,r3,r6
 1802c50:	3900000d 	sth	r4,0(r7)
 1802c54:	38c0008d 	sth	r3,2(r7)
 1802c58:	2808d43a 	srli	r4,r5,16
 1802c5c:	39c00104 	addi	r7,r7,4
 1802c60:	1811d43a 	srai	r8,r3,16
 1802c64:	b4ffe92e 	bgeu	r22,r19,1802c0c <quorem+0xa4>
 1802c68:	a505883a 	add	r2,r20,r20
 1802c6c:	1085883a 	add	r2,r2,r2
 1802c70:	b885883a 	add	r2,r23,r2
 1802c74:	10c00017 	ldw	r3,0(r2)
 1802c78:	18000c1e 	bne	r3,zero,1802cac <quorem+0x144>
 1802c7c:	113fff04 	addi	r4,r2,-4
 1802c80:	b900082e 	bgeu	r23,r4,1802ca4 <quorem+0x13c>
 1802c84:	10bfff17 	ldw	r2,-4(r2)
 1802c88:	10000326 	beq	r2,zero,1802c98 <quorem+0x130>
 1802c8c:	00000506 	br	1802ca4 <quorem+0x13c>
 1802c90:	20800017 	ldw	r2,0(r4)
 1802c94:	1000031e 	bne	r2,zero,1802ca4 <quorem+0x13c>
 1802c98:	213fff04 	addi	r4,r4,-4
 1802c9c:	a53fffc4 	addi	r20,r20,-1
 1802ca0:	b93ffb36 	bltu	r23,r4,1802c90 <quorem+0x128>
 1802ca4:	d9000317 	ldw	r4,12(sp)
 1802ca8:	25000415 	stw	r20,16(r4)
 1802cac:	e005883a 	mov	r2,fp
 1802cb0:	dfc00e17 	ldw	ra,56(sp)
 1802cb4:	df000d17 	ldw	fp,52(sp)
 1802cb8:	ddc00c17 	ldw	r23,48(sp)
 1802cbc:	dd800b17 	ldw	r22,44(sp)
 1802cc0:	dd400a17 	ldw	r21,40(sp)
 1802cc4:	dd000917 	ldw	r20,36(sp)
 1802cc8:	dcc00817 	ldw	r19,32(sp)
 1802ccc:	dc800717 	ldw	r18,28(sp)
 1802cd0:	dc400617 	ldw	r17,24(sp)
 1802cd4:	dc000517 	ldw	r16,20(sp)
 1802cd8:	dec00f04 	addi	sp,sp,60
 1802cdc:	f800283a 	ret
 1802ce0:	b823883a 	mov	r17,r23
 1802ce4:	9825883a 	mov	r18,r19
 1802ce8:	d8000115 	stw	zero,4(sp)
 1802cec:	002b883a 	mov	r21,zero
 1802cf0:	94000017 	ldw	r16,0(r18)
 1802cf4:	e009883a 	mov	r4,fp
 1802cf8:	94800104 	addi	r18,r18,4
 1802cfc:	817fffcc 	andi	r5,r16,65535
 1802d00:	1809b7c0 	call	1809b7c <__mulsi3>
 1802d04:	800ad43a 	srli	r5,r16,16
 1802d08:	e009883a 	mov	r4,fp
 1802d0c:	a8a1883a 	add	r16,r21,r2
 1802d10:	1809b7c0 	call	1809b7c <__mulsi3>
 1802d14:	89000017 	ldw	r4,0(r17)
 1802d18:	80ffffcc 	andi	r3,r16,65535
 1802d1c:	8020d43a 	srli	r16,r16,16
 1802d20:	217fffcc 	andi	r5,r4,65535
 1802d24:	28cbc83a 	sub	r5,r5,r3
 1802d28:	d8c00117 	ldw	r3,4(sp)
 1802d2c:	2008d43a 	srli	r4,r4,16
 1802d30:	1405883a 	add	r2,r2,r16
 1802d34:	28cb883a 	add	r5,r5,r3
 1802d38:	280dd43a 	srai	r6,r5,16
 1802d3c:	10ffffcc 	andi	r3,r2,65535
 1802d40:	20c9c83a 	sub	r4,r4,r3
 1802d44:	2189883a 	add	r4,r4,r6
 1802d48:	8900008d 	sth	r4,2(r17)
 1802d4c:	2009d43a 	srai	r4,r4,16
 1802d50:	8940000d 	sth	r5,0(r17)
 1802d54:	102ad43a 	srli	r21,r2,16
 1802d58:	8c400104 	addi	r17,r17,4
 1802d5c:	d9000115 	stw	r4,4(sp)
 1802d60:	b4bfe32e 	bgeu	r22,r18,1802cf0 <quorem+0x188>
 1802d64:	d9000217 	ldw	r4,8(sp)
 1802d68:	203fa01e 	bne	r4,zero,1802bec <quorem+0x84>
 1802d6c:	d8800017 	ldw	r2,0(sp)
 1802d70:	10ffff04 	addi	r3,r2,-4
 1802d74:	b8c0082e 	bgeu	r23,r3,1802d98 <quorem+0x230>
 1802d78:	10bfff17 	ldw	r2,-4(r2)
 1802d7c:	10000326 	beq	r2,zero,1802d8c <quorem+0x224>
 1802d80:	00000506 	br	1802d98 <quorem+0x230>
 1802d84:	18800017 	ldw	r2,0(r3)
 1802d88:	1000031e 	bne	r2,zero,1802d98 <quorem+0x230>
 1802d8c:	18ffff04 	addi	r3,r3,-4
 1802d90:	a53fffc4 	addi	r20,r20,-1
 1802d94:	b8fffb36 	bltu	r23,r3,1802d84 <quorem+0x21c>
 1802d98:	d8c00317 	ldw	r3,12(sp)
 1802d9c:	1d000415 	stw	r20,16(r3)
 1802da0:	003f9206 	br	1802bec <quorem+0x84>
 1802da4:	0005883a 	mov	r2,zero
 1802da8:	003fc106 	br	1802cb0 <quorem+0x148>

01802dac <_dtoa_r>:
 1802dac:	22001017 	ldw	r8,64(r4)
 1802db0:	deffda04 	addi	sp,sp,-152
 1802db4:	dd402115 	stw	r21,132(sp)
 1802db8:	dd002015 	stw	r20,128(sp)
 1802dbc:	dc801e15 	stw	r18,120(sp)
 1802dc0:	dc401d15 	stw	r17,116(sp)
 1802dc4:	dfc02515 	stw	ra,148(sp)
 1802dc8:	df002415 	stw	fp,144(sp)
 1802dcc:	ddc02315 	stw	r23,140(sp)
 1802dd0:	dd802215 	stw	r22,136(sp)
 1802dd4:	dcc01f15 	stw	r19,124(sp)
 1802dd8:	dc001c15 	stw	r16,112(sp)
 1802ddc:	d9001615 	stw	r4,88(sp)
 1802de0:	3023883a 	mov	r17,r6
 1802de4:	2829883a 	mov	r20,r5
 1802de8:	d9c01715 	stw	r7,92(sp)
 1802dec:	dc802817 	ldw	r18,160(sp)
 1802df0:	302b883a 	mov	r21,r6
 1802df4:	40000a26 	beq	r8,zero,1802e20 <_dtoa_r+0x74>
 1802df8:	20801117 	ldw	r2,68(r4)
 1802dfc:	400b883a 	mov	r5,r8
 1802e00:	40800115 	stw	r2,4(r8)
 1802e04:	20c01117 	ldw	r3,68(r4)
 1802e08:	00800044 	movi	r2,1
 1802e0c:	10c4983a 	sll	r2,r2,r3
 1802e10:	40800215 	stw	r2,8(r8)
 1802e14:	1805f740 	call	1805f74 <_Bfree>
 1802e18:	d8c01617 	ldw	r3,88(sp)
 1802e1c:	18001015 	stw	zero,64(r3)
 1802e20:	8800a316 	blt	r17,zero,18030b0 <_dtoa_r+0x304>
 1802e24:	90000015 	stw	zero,0(r18)
 1802e28:	a8dffc2c 	andhi	r3,r21,32752
 1802e2c:	009ffc34 	movhi	r2,32752
 1802e30:	18809126 	beq	r3,r2,1803078 <_dtoa_r+0x2cc>
 1802e34:	000d883a 	mov	r6,zero
 1802e38:	000f883a 	mov	r7,zero
 1802e3c:	a009883a 	mov	r4,r20
 1802e40:	a80b883a 	mov	r5,r21
 1802e44:	dd001215 	stw	r20,72(sp)
 1802e48:	dd401315 	stw	r21,76(sp)
 1802e4c:	18095f80 	call	18095f8 <__nedf2>
 1802e50:	1000171e 	bne	r2,zero,1802eb0 <_dtoa_r+0x104>
 1802e54:	d9802717 	ldw	r6,156(sp)
 1802e58:	00800044 	movi	r2,1
 1802e5c:	30800015 	stw	r2,0(r6)
 1802e60:	d8802917 	ldw	r2,164(sp)
 1802e64:	10029b26 	beq	r2,zero,18038d4 <_dtoa_r+0xb28>
 1802e68:	d9002917 	ldw	r4,164(sp)
 1802e6c:	00806074 	movhi	r2,385
 1802e70:	10b69544 	addi	r2,r2,-9643
 1802e74:	10ffffc4 	addi	r3,r2,-1
 1802e78:	20800015 	stw	r2,0(r4)
 1802e7c:	1805883a 	mov	r2,r3
 1802e80:	dfc02517 	ldw	ra,148(sp)
 1802e84:	df002417 	ldw	fp,144(sp)
 1802e88:	ddc02317 	ldw	r23,140(sp)
 1802e8c:	dd802217 	ldw	r22,136(sp)
 1802e90:	dd402117 	ldw	r21,132(sp)
 1802e94:	dd002017 	ldw	r20,128(sp)
 1802e98:	dcc01f17 	ldw	r19,124(sp)
 1802e9c:	dc801e17 	ldw	r18,120(sp)
 1802ea0:	dc401d17 	ldw	r17,116(sp)
 1802ea4:	dc001c17 	ldw	r16,112(sp)
 1802ea8:	dec02604 	addi	sp,sp,152
 1802eac:	f800283a 	ret
 1802eb0:	d9001617 	ldw	r4,88(sp)
 1802eb4:	d9401217 	ldw	r5,72(sp)
 1802eb8:	d8800104 	addi	r2,sp,4
 1802ebc:	a80d883a 	mov	r6,r21
 1802ec0:	d9c00204 	addi	r7,sp,8
 1802ec4:	d8800015 	stw	r2,0(sp)
 1802ec8:	18065b00 	call	18065b0 <__d2b>
 1802ecc:	d8800715 	stw	r2,28(sp)
 1802ed0:	a804d53a 	srli	r2,r21,20
 1802ed4:	1101ffcc 	andi	r4,r2,2047
 1802ed8:	20008626 	beq	r4,zero,18030f4 <_dtoa_r+0x348>
 1802edc:	d8c01217 	ldw	r3,72(sp)
 1802ee0:	00800434 	movhi	r2,16
 1802ee4:	10bfffc4 	addi	r2,r2,-1
 1802ee8:	ddc00117 	ldw	r23,4(sp)
 1802eec:	a884703a 	and	r2,r21,r2
 1802ef0:	1811883a 	mov	r8,r3
 1802ef4:	124ffc34 	orhi	r9,r2,16368
 1802ef8:	25bf0044 	addi	r22,r4,-1023
 1802efc:	d8000815 	stw	zero,32(sp)
 1802f00:	0005883a 	mov	r2,zero
 1802f04:	00cffe34 	movhi	r3,16376
 1802f08:	480b883a 	mov	r5,r9
 1802f0c:	4009883a 	mov	r4,r8
 1802f10:	180f883a 	mov	r7,r3
 1802f14:	100d883a 	mov	r6,r2
 1802f18:	1808e600 	call	1808e60 <__subdf3>
 1802f1c:	0218dbf4 	movhi	r8,25455
 1802f20:	4210d844 	addi	r8,r8,17249
 1802f24:	024ff4f4 	movhi	r9,16339
 1802f28:	4a61e9c4 	addi	r9,r9,-30809
 1802f2c:	480f883a 	mov	r7,r9
 1802f30:	400d883a 	mov	r6,r8
 1802f34:	180b883a 	mov	r5,r3
 1802f38:	1009883a 	mov	r4,r2
 1802f3c:	1808f540 	call	1808f54 <__muldf3>
 1802f40:	0222d874 	movhi	r8,35681
 1802f44:	42322cc4 	addi	r8,r8,-14157
 1802f48:	024ff1f4 	movhi	r9,16327
 1802f4c:	4a628a04 	addi	r9,r9,-30168
 1802f50:	480f883a 	mov	r7,r9
 1802f54:	400d883a 	mov	r6,r8
 1802f58:	180b883a 	mov	r5,r3
 1802f5c:	1009883a 	mov	r4,r2
 1802f60:	1808ee00 	call	1808ee0 <__adddf3>
 1802f64:	b009883a 	mov	r4,r22
 1802f68:	1021883a 	mov	r16,r2
 1802f6c:	1823883a 	mov	r17,r3
 1802f70:	18098180 	call	1809818 <__floatsidf>
 1802f74:	021427f4 	movhi	r8,20639
 1802f78:	421e7ec4 	addi	r8,r8,31227
 1802f7c:	024ff4f4 	movhi	r9,16339
 1802f80:	4a5104c4 	addi	r9,r9,17427
 1802f84:	480f883a 	mov	r7,r9
 1802f88:	400d883a 	mov	r6,r8
 1802f8c:	180b883a 	mov	r5,r3
 1802f90:	1009883a 	mov	r4,r2
 1802f94:	1808f540 	call	1808f54 <__muldf3>
 1802f98:	180f883a 	mov	r7,r3
 1802f9c:	880b883a 	mov	r5,r17
 1802fa0:	100d883a 	mov	r6,r2
 1802fa4:	8009883a 	mov	r4,r16
 1802fa8:	1808ee00 	call	1808ee0 <__adddf3>
 1802fac:	1009883a 	mov	r4,r2
 1802fb0:	180b883a 	mov	r5,r3
 1802fb4:	1021883a 	mov	r16,r2
 1802fb8:	1823883a 	mov	r17,r3
 1802fbc:	18099100 	call	1809910 <__fixdfsi>
 1802fc0:	000d883a 	mov	r6,zero
 1802fc4:	000f883a 	mov	r7,zero
 1802fc8:	8009883a 	mov	r4,r16
 1802fcc:	880b883a 	mov	r5,r17
 1802fd0:	d8800d15 	stw	r2,52(sp)
 1802fd4:	18097900 	call	1809790 <__ltdf2>
 1802fd8:	10031716 	blt	r2,zero,1803c38 <_dtoa_r+0xe8c>
 1802fdc:	d8c00d17 	ldw	r3,52(sp)
 1802fe0:	00800584 	movi	r2,22
 1802fe4:	10c1482e 	bgeu	r2,r3,1803508 <_dtoa_r+0x75c>
 1802fe8:	01000044 	movi	r4,1
 1802fec:	d9000c15 	stw	r4,48(sp)
 1802ff0:	bd85c83a 	sub	r2,r23,r22
 1802ff4:	11bfffc4 	addi	r6,r2,-1
 1802ff8:	30030b16 	blt	r6,zero,1803c28 <_dtoa_r+0xe7c>
 1802ffc:	d9800a15 	stw	r6,40(sp)
 1803000:	d8001115 	stw	zero,68(sp)
 1803004:	d8c00d17 	ldw	r3,52(sp)
 1803008:	1802ff16 	blt	r3,zero,1803c08 <_dtoa_r+0xe5c>
 180300c:	d9000a17 	ldw	r4,40(sp)
 1803010:	d8c00915 	stw	r3,36(sp)
 1803014:	d8001015 	stw	zero,64(sp)
 1803018:	20c9883a 	add	r4,r4,r3
 180301c:	d9000a15 	stw	r4,40(sp)
 1803020:	d9001717 	ldw	r4,92(sp)
 1803024:	00800244 	movi	r2,9
 1803028:	11004636 	bltu	r2,r4,1803144 <_dtoa_r+0x398>
 180302c:	00800144 	movi	r2,5
 1803030:	11020416 	blt	r2,r4,1803844 <_dtoa_r+0xa98>
 1803034:	04400044 	movi	r17,1
 1803038:	d8c01717 	ldw	r3,92(sp)
 180303c:	00800144 	movi	r2,5
 1803040:	10c1ed36 	bltu	r2,r3,18037f8 <_dtoa_r+0xa4c>
 1803044:	18c5883a 	add	r2,r3,r3
 1803048:	1085883a 	add	r2,r2,r2
 180304c:	00c06034 	movhi	r3,384
 1803050:	18cc1804 	addi	r3,r3,12384
 1803054:	10c5883a 	add	r2,r2,r3
 1803058:	11000017 	ldw	r4,0(r2)
 180305c:	2000683a 	jmp	r4
 1803060:	0180314c 	andi	r6,zero,197
 1803064:	0180314c 	andi	r6,zero,197
 1803068:	01803b4c 	andi	r6,zero,237
 180306c:	01803b24 	muli	r6,zero,236
 1803070:	01803b68 	cmpgeui	r6,zero,237
 1803074:	01803b74 	movhi	r6,237
 1803078:	d9002717 	ldw	r4,156(sp)
 180307c:	0089c3c4 	movi	r2,9999
 1803080:	20800015 	stw	r2,0(r4)
 1803084:	a0001026 	beq	r20,zero,18030c8 <_dtoa_r+0x31c>
 1803088:	00c06074 	movhi	r3,385
 180308c:	18f6a104 	addi	r3,r3,-9596
 1803090:	d9802917 	ldw	r6,164(sp)
 1803094:	303f7926 	beq	r6,zero,1802e7c <_dtoa_r+0xd0>
 1803098:	188000c7 	ldb	r2,3(r3)
 180309c:	190000c4 	addi	r4,r3,3
 18030a0:	1000101e 	bne	r2,zero,18030e4 <_dtoa_r+0x338>
 18030a4:	d8802917 	ldw	r2,164(sp)
 18030a8:	11000015 	stw	r4,0(r2)
 18030ac:	003f7306 	br	1802e7c <_dtoa_r+0xd0>
 18030b0:	00a00034 	movhi	r2,32768
 18030b4:	10bfffc4 	addi	r2,r2,-1
 18030b8:	00c00044 	movi	r3,1
 18030bc:	88aa703a 	and	r21,r17,r2
 18030c0:	90c00015 	stw	r3,0(r18)
 18030c4:	003f5806 	br	1802e28 <_dtoa_r+0x7c>
 18030c8:	00800434 	movhi	r2,16
 18030cc:	10bfffc4 	addi	r2,r2,-1
 18030d0:	a884703a 	and	r2,r21,r2
 18030d4:	103fec1e 	bne	r2,zero,1803088 <_dtoa_r+0x2dc>
 18030d8:	00c06074 	movhi	r3,385
 18030dc:	18f69e04 	addi	r3,r3,-9608
 18030e0:	003feb06 	br	1803090 <_dtoa_r+0x2e4>
 18030e4:	d8802917 	ldw	r2,164(sp)
 18030e8:	19000204 	addi	r4,r3,8
 18030ec:	11000015 	stw	r4,0(r2)
 18030f0:	003f6206 	br	1802e7c <_dtoa_r+0xd0>
 18030f4:	ddc00117 	ldw	r23,4(sp)
 18030f8:	d8800217 	ldw	r2,8(sp)
 18030fc:	01000804 	movi	r4,32
 1803100:	b8c10c84 	addi	r3,r23,1074
 1803104:	18a3883a 	add	r17,r3,r2
 1803108:	2441b80e 	bge	r4,r17,18037ec <_dtoa_r+0xa40>
 180310c:	00c01004 	movi	r3,64
 1803110:	1c47c83a 	sub	r3,r3,r17
 1803114:	88bff804 	addi	r2,r17,-32
 1803118:	a8c6983a 	sll	r3,r21,r3
 180311c:	a084d83a 	srl	r2,r20,r2
 1803120:	1888b03a 	or	r4,r3,r2
 1803124:	18099e80 	call	18099e8 <__floatunsidf>
 1803128:	1011883a 	mov	r8,r2
 180312c:	00bf8434 	movhi	r2,65040
 1803130:	01000044 	movi	r4,1
 1803134:	10d3883a 	add	r9,r2,r3
 1803138:	8dbef344 	addi	r22,r17,-1075
 180313c:	d9000815 	stw	r4,32(sp)
 1803140:	003f6f06 	br	1802f00 <_dtoa_r+0x154>
 1803144:	d8001715 	stw	zero,92(sp)
 1803148:	04400044 	movi	r17,1
 180314c:	00bfffc4 	movi	r2,-1
 1803150:	00c00044 	movi	r3,1
 1803154:	d8800e15 	stw	r2,56(sp)
 1803158:	d8002615 	stw	zero,152(sp)
 180315c:	d8800f15 	stw	r2,60(sp)
 1803160:	d8c00b15 	stw	r3,44(sp)
 1803164:	1021883a 	mov	r16,r2
 1803168:	d8801617 	ldw	r2,88(sp)
 180316c:	10001115 	stw	zero,68(r2)
 1803170:	d8801617 	ldw	r2,88(sp)
 1803174:	11401117 	ldw	r5,68(r2)
 1803178:	1009883a 	mov	r4,r2
 180317c:	18064f40 	call	18064f4 <_Balloc>
 1803180:	d8c01617 	ldw	r3,88(sp)
 1803184:	d8800515 	stw	r2,20(sp)
 1803188:	18801015 	stw	r2,64(r3)
 180318c:	00800384 	movi	r2,14
 1803190:	14006836 	bltu	r2,r16,1803334 <_dtoa_r+0x588>
 1803194:	8805003a 	cmpeq	r2,r17,zero
 1803198:	1000661e 	bne	r2,zero,1803334 <_dtoa_r+0x588>
 180319c:	d9000d17 	ldw	r4,52(sp)
 18031a0:	0102300e 	bge	zero,r4,1803a64 <_dtoa_r+0xcb8>
 18031a4:	208003cc 	andi	r2,r4,15
 18031a8:	100490fa 	slli	r2,r2,3
 18031ac:	2025d13a 	srai	r18,r4,4
 18031b0:	00c06074 	movhi	r3,385
 18031b4:	18f6b304 	addi	r3,r3,-9524
 18031b8:	10c5883a 	add	r2,r2,r3
 18031bc:	90c0040c 	andi	r3,r18,16
 18031c0:	14000017 	ldw	r16,0(r2)
 18031c4:	14400117 	ldw	r17,4(r2)
 18031c8:	18036a1e 	bne	r3,zero,1803f74 <_dtoa_r+0x11c8>
 18031cc:	05800084 	movi	r22,2
 18031d0:	90001026 	beq	r18,zero,1803214 <_dtoa_r+0x468>
 18031d4:	04c06074 	movhi	r19,385
 18031d8:	9cf6e504 	addi	r19,r19,-9324
 18031dc:	9080004c 	andi	r2,r18,1
 18031e0:	1005003a 	cmpeq	r2,r2,zero
 18031e4:	1000081e 	bne	r2,zero,1803208 <_dtoa_r+0x45c>
 18031e8:	99800017 	ldw	r6,0(r19)
 18031ec:	99c00117 	ldw	r7,4(r19)
 18031f0:	880b883a 	mov	r5,r17
 18031f4:	8009883a 	mov	r4,r16
 18031f8:	1808f540 	call	1808f54 <__muldf3>
 18031fc:	1021883a 	mov	r16,r2
 1803200:	b5800044 	addi	r22,r22,1
 1803204:	1823883a 	mov	r17,r3
 1803208:	9025d07a 	srai	r18,r18,1
 180320c:	9cc00204 	addi	r19,r19,8
 1803210:	903ff21e 	bne	r18,zero,18031dc <_dtoa_r+0x430>
 1803214:	a80b883a 	mov	r5,r21
 1803218:	a009883a 	mov	r4,r20
 180321c:	880f883a 	mov	r7,r17
 1803220:	800d883a 	mov	r6,r16
 1803224:	18093180 	call	1809318 <__divdf3>
 1803228:	1029883a 	mov	r20,r2
 180322c:	182b883a 	mov	r21,r3
 1803230:	d8c00c17 	ldw	r3,48(sp)
 1803234:	1805003a 	cmpeq	r2,r3,zero
 1803238:	1000081e 	bne	r2,zero,180325c <_dtoa_r+0x4b0>
 180323c:	0005883a 	mov	r2,zero
 1803240:	00cffc34 	movhi	r3,16368
 1803244:	180f883a 	mov	r7,r3
 1803248:	a009883a 	mov	r4,r20
 180324c:	a80b883a 	mov	r5,r21
 1803250:	100d883a 	mov	r6,r2
 1803254:	18097900 	call	1809790 <__ltdf2>
 1803258:	1003fe16 	blt	r2,zero,1804254 <_dtoa_r+0x14a8>
 180325c:	b009883a 	mov	r4,r22
 1803260:	18098180 	call	1809818 <__floatsidf>
 1803264:	180b883a 	mov	r5,r3
 1803268:	1009883a 	mov	r4,r2
 180326c:	a00d883a 	mov	r6,r20
 1803270:	a80f883a 	mov	r7,r21
 1803274:	1808f540 	call	1808f54 <__muldf3>
 1803278:	0011883a 	mov	r8,zero
 180327c:	02500734 	movhi	r9,16412
 1803280:	1009883a 	mov	r4,r2
 1803284:	180b883a 	mov	r5,r3
 1803288:	480f883a 	mov	r7,r9
 180328c:	400d883a 	mov	r6,r8
 1803290:	1808ee00 	call	1808ee0 <__adddf3>
 1803294:	d9000f17 	ldw	r4,60(sp)
 1803298:	102d883a 	mov	r22,r2
 180329c:	00bf3034 	movhi	r2,64704
 18032a0:	18b9883a 	add	fp,r3,r2
 18032a4:	e02f883a 	mov	r23,fp
 18032a8:	20028f1e 	bne	r4,zero,1803ce8 <_dtoa_r+0xf3c>
 18032ac:	0005883a 	mov	r2,zero
 18032b0:	00d00534 	movhi	r3,16404
 18032b4:	a009883a 	mov	r4,r20
 18032b8:	a80b883a 	mov	r5,r21
 18032bc:	180f883a 	mov	r7,r3
 18032c0:	100d883a 	mov	r6,r2
 18032c4:	1808e600 	call	1808e60 <__subdf3>
 18032c8:	1009883a 	mov	r4,r2
 18032cc:	e00f883a 	mov	r7,fp
 18032d0:	180b883a 	mov	r5,r3
 18032d4:	b00d883a 	mov	r6,r22
 18032d8:	1025883a 	mov	r18,r2
 18032dc:	1827883a 	mov	r19,r3
 18032e0:	18096800 	call	1809680 <__gtdf2>
 18032e4:	00834f16 	blt	zero,r2,1804024 <_dtoa_r+0x1278>
 18032e8:	e0e0003c 	xorhi	r3,fp,32768
 18032ec:	9009883a 	mov	r4,r18
 18032f0:	980b883a 	mov	r5,r19
 18032f4:	180f883a 	mov	r7,r3
 18032f8:	b00d883a 	mov	r6,r22
 18032fc:	18097900 	call	1809790 <__ltdf2>
 1803300:	1000080e 	bge	r2,zero,1803324 <_dtoa_r+0x578>
 1803304:	0027883a 	mov	r19,zero
 1803308:	0025883a 	mov	r18,zero
 180330c:	d8802617 	ldw	r2,152(sp)
 1803310:	df000517 	ldw	fp,20(sp)
 1803314:	d8000615 	stw	zero,24(sp)
 1803318:	0084303a 	nor	r2,zero,r2
 180331c:	d8800d15 	stw	r2,52(sp)
 1803320:	00019b06 	br	1803990 <_dtoa_r+0xbe4>
 1803324:	d9801217 	ldw	r6,72(sp)
 1803328:	d8801317 	ldw	r2,76(sp)
 180332c:	3029883a 	mov	r20,r6
 1803330:	102b883a 	mov	r21,r2
 1803334:	d8c00217 	ldw	r3,8(sp)
 1803338:	18008516 	blt	r3,zero,1803550 <_dtoa_r+0x7a4>
 180333c:	d9000d17 	ldw	r4,52(sp)
 1803340:	00800384 	movi	r2,14
 1803344:	11008216 	blt	r2,r4,1803550 <_dtoa_r+0x7a4>
 1803348:	200490fa 	slli	r2,r4,3
 180334c:	d9802617 	ldw	r6,152(sp)
 1803350:	00c06074 	movhi	r3,385
 1803354:	18f6b304 	addi	r3,r3,-9524
 1803358:	10c5883a 	add	r2,r2,r3
 180335c:	14800017 	ldw	r18,0(r2)
 1803360:	14c00117 	ldw	r19,4(r2)
 1803364:	30031e16 	blt	r6,zero,1803fe0 <_dtoa_r+0x1234>
 1803368:	d9000517 	ldw	r4,20(sp)
 180336c:	d8c00f17 	ldw	r3,60(sp)
 1803370:	a823883a 	mov	r17,r21
 1803374:	a021883a 	mov	r16,r20
 1803378:	192b883a 	add	r21,r3,r4
 180337c:	2039883a 	mov	fp,r4
 1803380:	00000f06 	br	18033c0 <_dtoa_r+0x614>
 1803384:	0005883a 	mov	r2,zero
 1803388:	00d00934 	movhi	r3,16420
 180338c:	5009883a 	mov	r4,r10
 1803390:	580b883a 	mov	r5,r11
 1803394:	180f883a 	mov	r7,r3
 1803398:	100d883a 	mov	r6,r2
 180339c:	1808f540 	call	1808f54 <__muldf3>
 18033a0:	180b883a 	mov	r5,r3
 18033a4:	000d883a 	mov	r6,zero
 18033a8:	000f883a 	mov	r7,zero
 18033ac:	1009883a 	mov	r4,r2
 18033b0:	1021883a 	mov	r16,r2
 18033b4:	1823883a 	mov	r17,r3
 18033b8:	18095f80 	call	18095f8 <__nedf2>
 18033bc:	10004526 	beq	r2,zero,18034d4 <_dtoa_r+0x728>
 18033c0:	900d883a 	mov	r6,r18
 18033c4:	980f883a 	mov	r7,r19
 18033c8:	8009883a 	mov	r4,r16
 18033cc:	880b883a 	mov	r5,r17
 18033d0:	18093180 	call	1809318 <__divdf3>
 18033d4:	180b883a 	mov	r5,r3
 18033d8:	1009883a 	mov	r4,r2
 18033dc:	18099100 	call	1809910 <__fixdfsi>
 18033e0:	1009883a 	mov	r4,r2
 18033e4:	1029883a 	mov	r20,r2
 18033e8:	18098180 	call	1809818 <__floatsidf>
 18033ec:	180f883a 	mov	r7,r3
 18033f0:	9009883a 	mov	r4,r18
 18033f4:	980b883a 	mov	r5,r19
 18033f8:	100d883a 	mov	r6,r2
 18033fc:	1808f540 	call	1808f54 <__muldf3>
 1803400:	180f883a 	mov	r7,r3
 1803404:	880b883a 	mov	r5,r17
 1803408:	8009883a 	mov	r4,r16
 180340c:	100d883a 	mov	r6,r2
 1803410:	1808e600 	call	1808e60 <__subdf3>
 1803414:	1015883a 	mov	r10,r2
 1803418:	a0800c04 	addi	r2,r20,48
 180341c:	e0800005 	stb	r2,0(fp)
 1803420:	e7000044 	addi	fp,fp,1
 1803424:	1817883a 	mov	r11,r3
 1803428:	e57fd61e 	bne	fp,r21,1803384 <_dtoa_r+0x5d8>
 180342c:	500d883a 	mov	r6,r10
 1803430:	180f883a 	mov	r7,r3
 1803434:	5009883a 	mov	r4,r10
 1803438:	180b883a 	mov	r5,r3
 180343c:	1808ee00 	call	1808ee0 <__adddf3>
 1803440:	100d883a 	mov	r6,r2
 1803444:	9009883a 	mov	r4,r18
 1803448:	980b883a 	mov	r5,r19
 180344c:	180f883a 	mov	r7,r3
 1803450:	1021883a 	mov	r16,r2
 1803454:	1823883a 	mov	r17,r3
 1803458:	18097900 	call	1809790 <__ltdf2>
 180345c:	10000816 	blt	r2,zero,1803480 <_dtoa_r+0x6d4>
 1803460:	980b883a 	mov	r5,r19
 1803464:	800d883a 	mov	r6,r16
 1803468:	880f883a 	mov	r7,r17
 180346c:	9009883a 	mov	r4,r18
 1803470:	18095700 	call	1809570 <__eqdf2>
 1803474:	1000171e 	bne	r2,zero,18034d4 <_dtoa_r+0x728>
 1803478:	a080004c 	andi	r2,r20,1
 180347c:	10001526 	beq	r2,zero,18034d4 <_dtoa_r+0x728>
 1803480:	d8800d17 	ldw	r2,52(sp)
 1803484:	d8800415 	stw	r2,16(sp)
 1803488:	e009883a 	mov	r4,fp
 180348c:	213fffc4 	addi	r4,r4,-1
 1803490:	20c00007 	ldb	r3,0(r4)
 1803494:	00800e44 	movi	r2,57
 1803498:	1880081e 	bne	r3,r2,18034bc <_dtoa_r+0x710>
 180349c:	d8800517 	ldw	r2,20(sp)
 18034a0:	113ffa1e 	bne	r2,r4,180348c <_dtoa_r+0x6e0>
 18034a4:	d8c00417 	ldw	r3,16(sp)
 18034a8:	d9800517 	ldw	r6,20(sp)
 18034ac:	00800c04 	movi	r2,48
 18034b0:	18c00044 	addi	r3,r3,1
 18034b4:	d8c00415 	stw	r3,16(sp)
 18034b8:	30800005 	stb	r2,0(r6)
 18034bc:	20800003 	ldbu	r2,0(r4)
 18034c0:	d8c00417 	ldw	r3,16(sp)
 18034c4:	27000044 	addi	fp,r4,1
 18034c8:	10800044 	addi	r2,r2,1
 18034cc:	d8c00d15 	stw	r3,52(sp)
 18034d0:	20800005 	stb	r2,0(r4)
 18034d4:	d9001617 	ldw	r4,88(sp)
 18034d8:	d9400717 	ldw	r5,28(sp)
 18034dc:	1805f740 	call	1805f74 <_Bfree>
 18034e0:	e0000005 	stb	zero,0(fp)
 18034e4:	d9800d17 	ldw	r6,52(sp)
 18034e8:	d8c02717 	ldw	r3,156(sp)
 18034ec:	d9002917 	ldw	r4,164(sp)
 18034f0:	30800044 	addi	r2,r6,1
 18034f4:	18800015 	stw	r2,0(r3)
 18034f8:	20029c26 	beq	r4,zero,1803f6c <_dtoa_r+0x11c0>
 18034fc:	d8c00517 	ldw	r3,20(sp)
 1803500:	27000015 	stw	fp,0(r4)
 1803504:	003e5d06 	br	1802e7c <_dtoa_r+0xd0>
 1803508:	d9800d17 	ldw	r6,52(sp)
 180350c:	00c06074 	movhi	r3,385
 1803510:	18f6b304 	addi	r3,r3,-9524
 1803514:	d9001217 	ldw	r4,72(sp)
 1803518:	300490fa 	slli	r2,r6,3
 180351c:	d9401317 	ldw	r5,76(sp)
 1803520:	10c5883a 	add	r2,r2,r3
 1803524:	12000017 	ldw	r8,0(r2)
 1803528:	12400117 	ldw	r9,4(r2)
 180352c:	400d883a 	mov	r6,r8
 1803530:	480f883a 	mov	r7,r9
 1803534:	18097900 	call	1809790 <__ltdf2>
 1803538:	1000030e 	bge	r2,zero,1803548 <_dtoa_r+0x79c>
 180353c:	d8800d17 	ldw	r2,52(sp)
 1803540:	10bfffc4 	addi	r2,r2,-1
 1803544:	d8800d15 	stw	r2,52(sp)
 1803548:	d8000c15 	stw	zero,48(sp)
 180354c:	003ea806 	br	1802ff0 <_dtoa_r+0x244>
 1803550:	d9000b17 	ldw	r4,44(sp)
 1803554:	202cc03a 	cmpne	r22,r4,zero
 1803558:	b000c71e 	bne	r22,zero,1803878 <_dtoa_r+0xacc>
 180355c:	dc001117 	ldw	r16,68(sp)
 1803560:	dc801017 	ldw	r18,64(sp)
 1803564:	0027883a 	mov	r19,zero
 1803568:	04000b0e 	bge	zero,r16,1803598 <_dtoa_r+0x7ec>
 180356c:	d8c00a17 	ldw	r3,40(sp)
 1803570:	00c0090e 	bge	zero,r3,1803598 <_dtoa_r+0x7ec>
 1803574:	8005883a 	mov	r2,r16
 1803578:	1c011316 	blt	r3,r16,18039c8 <_dtoa_r+0xc1c>
 180357c:	d9000a17 	ldw	r4,40(sp)
 1803580:	d9801117 	ldw	r6,68(sp)
 1803584:	80a1c83a 	sub	r16,r16,r2
 1803588:	2089c83a 	sub	r4,r4,r2
 180358c:	308dc83a 	sub	r6,r6,r2
 1803590:	d9000a15 	stw	r4,40(sp)
 1803594:	d9801115 	stw	r6,68(sp)
 1803598:	d8801017 	ldw	r2,64(sp)
 180359c:	0080150e 	bge	zero,r2,18035f4 <_dtoa_r+0x848>
 18035a0:	d8c00b17 	ldw	r3,44(sp)
 18035a4:	1805003a 	cmpeq	r2,r3,zero
 18035a8:	1001c91e 	bne	r2,zero,1803cd0 <_dtoa_r+0xf24>
 18035ac:	04800e0e 	bge	zero,r18,18035e8 <_dtoa_r+0x83c>
 18035b0:	d9001617 	ldw	r4,88(sp)
 18035b4:	980b883a 	mov	r5,r19
 18035b8:	900d883a 	mov	r6,r18
 18035bc:	1806dc00 	call	1806dc0 <__pow5mult>
 18035c0:	d9001617 	ldw	r4,88(sp)
 18035c4:	d9800717 	ldw	r6,28(sp)
 18035c8:	100b883a 	mov	r5,r2
 18035cc:	1027883a 	mov	r19,r2
 18035d0:	1806a040 	call	1806a04 <__multiply>
 18035d4:	d9001617 	ldw	r4,88(sp)
 18035d8:	d9400717 	ldw	r5,28(sp)
 18035dc:	1023883a 	mov	r17,r2
 18035e0:	1805f740 	call	1805f74 <_Bfree>
 18035e4:	dc400715 	stw	r17,28(sp)
 18035e8:	d9001017 	ldw	r4,64(sp)
 18035ec:	248dc83a 	sub	r6,r4,r18
 18035f0:	30010e1e 	bne	r6,zero,1803a2c <_dtoa_r+0xc80>
 18035f4:	d9001617 	ldw	r4,88(sp)
 18035f8:	04400044 	movi	r17,1
 18035fc:	880b883a 	mov	r5,r17
 1803600:	1806c580 	call	1806c58 <__i2b>
 1803604:	d9800917 	ldw	r6,36(sp)
 1803608:	1025883a 	mov	r18,r2
 180360c:	0180040e 	bge	zero,r6,1803620 <_dtoa_r+0x874>
 1803610:	d9001617 	ldw	r4,88(sp)
 1803614:	100b883a 	mov	r5,r2
 1803618:	1806dc00 	call	1806dc0 <__pow5mult>
 180361c:	1025883a 	mov	r18,r2
 1803620:	d8801717 	ldw	r2,92(sp)
 1803624:	8880f30e 	bge	r17,r2,18039f4 <_dtoa_r+0xc48>
 1803628:	0023883a 	mov	r17,zero
 180362c:	d9800917 	ldw	r6,36(sp)
 1803630:	30019e1e 	bne	r6,zero,1803cac <_dtoa_r+0xf00>
 1803634:	00c00044 	movi	r3,1
 1803638:	d9000a17 	ldw	r4,40(sp)
 180363c:	20c5883a 	add	r2,r4,r3
 1803640:	10c007cc 	andi	r3,r2,31
 1803644:	1800841e 	bne	r3,zero,1803858 <_dtoa_r+0xaac>
 1803648:	00800704 	movi	r2,28
 180364c:	d9000a17 	ldw	r4,40(sp)
 1803650:	d9801117 	ldw	r6,68(sp)
 1803654:	80a1883a 	add	r16,r16,r2
 1803658:	2089883a 	add	r4,r4,r2
 180365c:	308d883a 	add	r6,r6,r2
 1803660:	d9000a15 	stw	r4,40(sp)
 1803664:	d9801115 	stw	r6,68(sp)
 1803668:	d8801117 	ldw	r2,68(sp)
 180366c:	0080050e 	bge	zero,r2,1803684 <_dtoa_r+0x8d8>
 1803670:	d9400717 	ldw	r5,28(sp)
 1803674:	d9001617 	ldw	r4,88(sp)
 1803678:	100d883a 	mov	r6,r2
 180367c:	18068b80 	call	18068b8 <__lshift>
 1803680:	d8800715 	stw	r2,28(sp)
 1803684:	d8c00a17 	ldw	r3,40(sp)
 1803688:	00c0050e 	bge	zero,r3,18036a0 <_dtoa_r+0x8f4>
 180368c:	d9001617 	ldw	r4,88(sp)
 1803690:	900b883a 	mov	r5,r18
 1803694:	180d883a 	mov	r6,r3
 1803698:	18068b80 	call	18068b8 <__lshift>
 180369c:	1025883a 	mov	r18,r2
 18036a0:	d9000c17 	ldw	r4,48(sp)
 18036a4:	2005003a 	cmpeq	r2,r4,zero
 18036a8:	10016f26 	beq	r2,zero,1803c68 <_dtoa_r+0xebc>
 18036ac:	d9000f17 	ldw	r4,60(sp)
 18036b0:	0102170e 	bge	zero,r4,1803f10 <_dtoa_r+0x1164>
 18036b4:	d9800b17 	ldw	r6,44(sp)
 18036b8:	3005003a 	cmpeq	r2,r6,zero
 18036bc:	1000881e 	bne	r2,zero,18038e0 <_dtoa_r+0xb34>
 18036c0:	0400050e 	bge	zero,r16,18036d8 <_dtoa_r+0x92c>
 18036c4:	d9001617 	ldw	r4,88(sp)
 18036c8:	980b883a 	mov	r5,r19
 18036cc:	800d883a 	mov	r6,r16
 18036d0:	18068b80 	call	18068b8 <__lshift>
 18036d4:	1027883a 	mov	r19,r2
 18036d8:	8804c03a 	cmpne	r2,r17,zero
 18036dc:	1002541e 	bne	r2,zero,1804030 <_dtoa_r+0x1284>
 18036e0:	980b883a 	mov	r5,r19
 18036e4:	dd800517 	ldw	r22,20(sp)
 18036e8:	dcc00615 	stw	r19,24(sp)
 18036ec:	a700004c 	andi	fp,r20,1
 18036f0:	2827883a 	mov	r19,r5
 18036f4:	d9000717 	ldw	r4,28(sp)
 18036f8:	900b883a 	mov	r5,r18
 18036fc:	1802b680 	call	1802b68 <quorem>
 1803700:	d9000717 	ldw	r4,28(sp)
 1803704:	d9400617 	ldw	r5,24(sp)
 1803708:	1023883a 	mov	r17,r2
 180370c:	8dc00c04 	addi	r23,r17,48
 1803710:	18060d00 	call	18060d0 <__mcmp>
 1803714:	d9001617 	ldw	r4,88(sp)
 1803718:	900b883a 	mov	r5,r18
 180371c:	980d883a 	mov	r6,r19
 1803720:	1029883a 	mov	r20,r2
 1803724:	180672c0 	call	180672c <__mdiff>
 1803728:	102b883a 	mov	r21,r2
 180372c:	10800317 	ldw	r2,12(r2)
 1803730:	1001281e 	bne	r2,zero,1803bd4 <_dtoa_r+0xe28>
 1803734:	d9000717 	ldw	r4,28(sp)
 1803738:	a80b883a 	mov	r5,r21
 180373c:	18060d00 	call	18060d0 <__mcmp>
 1803740:	d9001617 	ldw	r4,88(sp)
 1803744:	1021883a 	mov	r16,r2
 1803748:	a80b883a 	mov	r5,r21
 180374c:	1805f740 	call	1805f74 <_Bfree>
 1803750:	8000041e 	bne	r16,zero,1803764 <_dtoa_r+0x9b8>
 1803754:	d8801717 	ldw	r2,92(sp)
 1803758:	1000021e 	bne	r2,zero,1803764 <_dtoa_r+0x9b8>
 180375c:	e004c03a 	cmpne	r2,fp,zero
 1803760:	10011726 	beq	r2,zero,1803bc0 <_dtoa_r+0xe14>
 1803764:	a0010616 	blt	r20,zero,1803b80 <_dtoa_r+0xdd4>
 1803768:	a000041e 	bne	r20,zero,180377c <_dtoa_r+0x9d0>
 180376c:	d8c01717 	ldw	r3,92(sp)
 1803770:	1800021e 	bne	r3,zero,180377c <_dtoa_r+0x9d0>
 1803774:	e004c03a 	cmpne	r2,fp,zero
 1803778:	10010126 	beq	r2,zero,1803b80 <_dtoa_r+0xdd4>
 180377c:	04023d16 	blt	zero,r16,1804074 <_dtoa_r+0x12c8>
 1803780:	b5c00005 	stb	r23,0(r22)
 1803784:	d9800517 	ldw	r6,20(sp)
 1803788:	d9000f17 	ldw	r4,60(sp)
 180378c:	b5800044 	addi	r22,r22,1
 1803790:	3105883a 	add	r2,r6,r4
 1803794:	b0806526 	beq	r22,r2,180392c <_dtoa_r+0xb80>
 1803798:	d9400717 	ldw	r5,28(sp)
 180379c:	d9001617 	ldw	r4,88(sp)
 18037a0:	01800284 	movi	r6,10
 18037a4:	000f883a 	mov	r7,zero
 18037a8:	1806c940 	call	1806c94 <__multadd>
 18037ac:	d8800715 	stw	r2,28(sp)
 18037b0:	d8800617 	ldw	r2,24(sp)
 18037b4:	14c10c26 	beq	r2,r19,1803be8 <_dtoa_r+0xe3c>
 18037b8:	d9400617 	ldw	r5,24(sp)
 18037bc:	d9001617 	ldw	r4,88(sp)
 18037c0:	01800284 	movi	r6,10
 18037c4:	000f883a 	mov	r7,zero
 18037c8:	1806c940 	call	1806c94 <__multadd>
 18037cc:	d9001617 	ldw	r4,88(sp)
 18037d0:	980b883a 	mov	r5,r19
 18037d4:	01800284 	movi	r6,10
 18037d8:	000f883a 	mov	r7,zero
 18037dc:	d8800615 	stw	r2,24(sp)
 18037e0:	1806c940 	call	1806c94 <__multadd>
 18037e4:	1027883a 	mov	r19,r2
 18037e8:	003fc206 	br	18036f4 <_dtoa_r+0x948>
 18037ec:	2445c83a 	sub	r2,r4,r17
 18037f0:	a088983a 	sll	r4,r20,r2
 18037f4:	003e4b06 	br	1803124 <_dtoa_r+0x378>
 18037f8:	01bfffc4 	movi	r6,-1
 18037fc:	00800044 	movi	r2,1
 1803800:	d9800e15 	stw	r6,56(sp)
 1803804:	d9800f15 	stw	r6,60(sp)
 1803808:	d8800b15 	stw	r2,44(sp)
 180380c:	d8c01617 	ldw	r3,88(sp)
 1803810:	008005c4 	movi	r2,23
 1803814:	18001115 	stw	zero,68(r3)
 1803818:	1580082e 	bgeu	r2,r22,180383c <_dtoa_r+0xa90>
 180381c:	00c00104 	movi	r3,4
 1803820:	0009883a 	mov	r4,zero
 1803824:	18c7883a 	add	r3,r3,r3
 1803828:	18800504 	addi	r2,r3,20
 180382c:	21000044 	addi	r4,r4,1
 1803830:	b0bffc2e 	bgeu	r22,r2,1803824 <_dtoa_r+0xa78>
 1803834:	d9801617 	ldw	r6,88(sp)
 1803838:	31001115 	stw	r4,68(r6)
 180383c:	dc000f17 	ldw	r16,60(sp)
 1803840:	003e4b06 	br	1803170 <_dtoa_r+0x3c4>
 1803844:	d9801717 	ldw	r6,92(sp)
 1803848:	0023883a 	mov	r17,zero
 180384c:	31bfff04 	addi	r6,r6,-4
 1803850:	d9801715 	stw	r6,92(sp)
 1803854:	003df806 	br	1803038 <_dtoa_r+0x28c>
 1803858:	00800804 	movi	r2,32
 180385c:	10c9c83a 	sub	r4,r2,r3
 1803860:	00c00104 	movi	r3,4
 1803864:	19005a16 	blt	r3,r4,18039d0 <_dtoa_r+0xc24>
 1803868:	008000c4 	movi	r2,3
 180386c:	113f7e16 	blt	r2,r4,1803668 <_dtoa_r+0x8bc>
 1803870:	20800704 	addi	r2,r4,28
 1803874:	003f7506 	br	180364c <_dtoa_r+0x8a0>
 1803878:	d9801717 	ldw	r6,92(sp)
 180387c:	00800044 	movi	r2,1
 1803880:	1180a10e 	bge	r2,r6,1803b08 <_dtoa_r+0xd5c>
 1803884:	d9800f17 	ldw	r6,60(sp)
 1803888:	d8c01017 	ldw	r3,64(sp)
 180388c:	30bfffc4 	addi	r2,r6,-1
 1803890:	1881c616 	blt	r3,r2,1803fac <_dtoa_r+0x1200>
 1803894:	18a5c83a 	sub	r18,r3,r2
 1803898:	d8800f17 	ldw	r2,60(sp)
 180389c:	10026216 	blt	r2,zero,1804228 <_dtoa_r+0x147c>
 18038a0:	dc001117 	ldw	r16,68(sp)
 18038a4:	1007883a 	mov	r3,r2
 18038a8:	d9800a17 	ldw	r6,40(sp)
 18038ac:	d8801117 	ldw	r2,68(sp)
 18038b0:	d9001617 	ldw	r4,88(sp)
 18038b4:	30cd883a 	add	r6,r6,r3
 18038b8:	10c5883a 	add	r2,r2,r3
 18038bc:	01400044 	movi	r5,1
 18038c0:	d9800a15 	stw	r6,40(sp)
 18038c4:	d8801115 	stw	r2,68(sp)
 18038c8:	1806c580 	call	1806c58 <__i2b>
 18038cc:	1027883a 	mov	r19,r2
 18038d0:	003f2506 	br	1803568 <_dtoa_r+0x7bc>
 18038d4:	00c06074 	movhi	r3,385
 18038d8:	18f69504 	addi	r3,r3,-9644
 18038dc:	003d6706 	br	1802e7c <_dtoa_r+0xd0>
 18038e0:	dd800517 	ldw	r22,20(sp)
 18038e4:	04000044 	movi	r16,1
 18038e8:	00000706 	br	1803908 <_dtoa_r+0xb5c>
 18038ec:	d9400717 	ldw	r5,28(sp)
 18038f0:	d9001617 	ldw	r4,88(sp)
 18038f4:	01800284 	movi	r6,10
 18038f8:	000f883a 	mov	r7,zero
 18038fc:	1806c940 	call	1806c94 <__multadd>
 1803900:	d8800715 	stw	r2,28(sp)
 1803904:	84000044 	addi	r16,r16,1
 1803908:	d9000717 	ldw	r4,28(sp)
 180390c:	900b883a 	mov	r5,r18
 1803910:	1802b680 	call	1802b68 <quorem>
 1803914:	15c00c04 	addi	r23,r2,48
 1803918:	b5c00005 	stb	r23,0(r22)
 180391c:	d8c00f17 	ldw	r3,60(sp)
 1803920:	b5800044 	addi	r22,r22,1
 1803924:	80fff116 	blt	r16,r3,18038ec <_dtoa_r+0xb40>
 1803928:	d8000615 	stw	zero,24(sp)
 180392c:	d9400717 	ldw	r5,28(sp)
 1803930:	d9001617 	ldw	r4,88(sp)
 1803934:	01800044 	movi	r6,1
 1803938:	18068b80 	call	18068b8 <__lshift>
 180393c:	1009883a 	mov	r4,r2
 1803940:	900b883a 	mov	r5,r18
 1803944:	d8800715 	stw	r2,28(sp)
 1803948:	18060d00 	call	18060d0 <__mcmp>
 180394c:	00803c0e 	bge	zero,r2,1803a40 <_dtoa_r+0xc94>
 1803950:	b009883a 	mov	r4,r22
 1803954:	213fffc4 	addi	r4,r4,-1
 1803958:	21400003 	ldbu	r5,0(r4)
 180395c:	00800e44 	movi	r2,57
 1803960:	28c03fcc 	andi	r3,r5,255
 1803964:	18c0201c 	xori	r3,r3,128
 1803968:	18ffe004 	addi	r3,r3,-128
 180396c:	1881981e 	bne	r3,r2,1803fd0 <_dtoa_r+0x1224>
 1803970:	d9800517 	ldw	r6,20(sp)
 1803974:	21bff71e 	bne	r4,r6,1803954 <_dtoa_r+0xba8>
 1803978:	d8800d17 	ldw	r2,52(sp)
 180397c:	37000044 	addi	fp,r6,1
 1803980:	10800044 	addi	r2,r2,1
 1803984:	d8800d15 	stw	r2,52(sp)
 1803988:	00800c44 	movi	r2,49
 180398c:	30800005 	stb	r2,0(r6)
 1803990:	d9001617 	ldw	r4,88(sp)
 1803994:	900b883a 	mov	r5,r18
 1803998:	1805f740 	call	1805f74 <_Bfree>
 180399c:	983ecd26 	beq	r19,zero,18034d4 <_dtoa_r+0x728>
 18039a0:	d8c00617 	ldw	r3,24(sp)
 18039a4:	18000426 	beq	r3,zero,18039b8 <_dtoa_r+0xc0c>
 18039a8:	1cc00326 	beq	r3,r19,18039b8 <_dtoa_r+0xc0c>
 18039ac:	d9001617 	ldw	r4,88(sp)
 18039b0:	180b883a 	mov	r5,r3
 18039b4:	1805f740 	call	1805f74 <_Bfree>
 18039b8:	d9001617 	ldw	r4,88(sp)
 18039bc:	980b883a 	mov	r5,r19
 18039c0:	1805f740 	call	1805f74 <_Bfree>
 18039c4:	003ec306 	br	18034d4 <_dtoa_r+0x728>
 18039c8:	1805883a 	mov	r2,r3
 18039cc:	003eeb06 	br	180357c <_dtoa_r+0x7d0>
 18039d0:	d9800a17 	ldw	r6,40(sp)
 18039d4:	d8c01117 	ldw	r3,68(sp)
 18039d8:	20bfff04 	addi	r2,r4,-4
 18039dc:	308d883a 	add	r6,r6,r2
 18039e0:	1887883a 	add	r3,r3,r2
 18039e4:	80a1883a 	add	r16,r16,r2
 18039e8:	d9800a15 	stw	r6,40(sp)
 18039ec:	d8c01115 	stw	r3,68(sp)
 18039f0:	003f1d06 	br	1803668 <_dtoa_r+0x8bc>
 18039f4:	a03f0c1e 	bne	r20,zero,1803628 <_dtoa_r+0x87c>
 18039f8:	00800434 	movhi	r2,16
 18039fc:	10bfffc4 	addi	r2,r2,-1
 1803a00:	a884703a 	and	r2,r21,r2
 1803a04:	103f081e 	bne	r2,zero,1803628 <_dtoa_r+0x87c>
 1803a08:	a89ffc2c 	andhi	r2,r21,32752
 1803a0c:	103f0626 	beq	r2,zero,1803628 <_dtoa_r+0x87c>
 1803a10:	d8c01117 	ldw	r3,68(sp)
 1803a14:	d9000a17 	ldw	r4,40(sp)
 1803a18:	18c00044 	addi	r3,r3,1
 1803a1c:	21000044 	addi	r4,r4,1
 1803a20:	d8c01115 	stw	r3,68(sp)
 1803a24:	d9000a15 	stw	r4,40(sp)
 1803a28:	003f0006 	br	180362c <_dtoa_r+0x880>
 1803a2c:	d9400717 	ldw	r5,28(sp)
 1803a30:	d9001617 	ldw	r4,88(sp)
 1803a34:	1806dc00 	call	1806dc0 <__pow5mult>
 1803a38:	d8800715 	stw	r2,28(sp)
 1803a3c:	003eed06 	br	18035f4 <_dtoa_r+0x848>
 1803a40:	1000021e 	bne	r2,zero,1803a4c <_dtoa_r+0xca0>
 1803a44:	b880004c 	andi	r2,r23,1
 1803a48:	103fc11e 	bne	r2,zero,1803950 <_dtoa_r+0xba4>
 1803a4c:	b5bfffc4 	addi	r22,r22,-1
 1803a50:	b0c00007 	ldb	r3,0(r22)
 1803a54:	00800c04 	movi	r2,48
 1803a58:	18bffc26 	beq	r3,r2,1803a4c <_dtoa_r+0xca0>
 1803a5c:	b7000044 	addi	fp,r22,1
 1803a60:	003fcb06 	br	1803990 <_dtoa_r+0xbe4>
 1803a64:	d9800d17 	ldw	r6,52(sp)
 1803a68:	018fc83a 	sub	r7,zero,r6
 1803a6c:	3801f726 	beq	r7,zero,180424c <_dtoa_r+0x14a0>
 1803a70:	398003cc 	andi	r6,r7,15
 1803a74:	300c90fa 	slli	r6,r6,3
 1803a78:	01406074 	movhi	r5,385
 1803a7c:	2976b304 	addi	r5,r5,-9524
 1803a80:	d9001217 	ldw	r4,72(sp)
 1803a84:	314d883a 	add	r6,r6,r5
 1803a88:	30c00117 	ldw	r3,4(r6)
 1803a8c:	30800017 	ldw	r2,0(r6)
 1803a90:	d9401317 	ldw	r5,76(sp)
 1803a94:	3821d13a 	srai	r16,r7,4
 1803a98:	100d883a 	mov	r6,r2
 1803a9c:	180f883a 	mov	r7,r3
 1803aa0:	1808f540 	call	1808f54 <__muldf3>
 1803aa4:	1011883a 	mov	r8,r2
 1803aa8:	1813883a 	mov	r9,r3
 1803aac:	1029883a 	mov	r20,r2
 1803ab0:	182b883a 	mov	r21,r3
 1803ab4:	8001e526 	beq	r16,zero,180424c <_dtoa_r+0x14a0>
 1803ab8:	05800084 	movi	r22,2
 1803abc:	04406074 	movhi	r17,385
 1803ac0:	8c76e504 	addi	r17,r17,-9324
 1803ac4:	8080004c 	andi	r2,r16,1
 1803ac8:	1005003a 	cmpeq	r2,r2,zero
 1803acc:	1000081e 	bne	r2,zero,1803af0 <_dtoa_r+0xd44>
 1803ad0:	89800017 	ldw	r6,0(r17)
 1803ad4:	89c00117 	ldw	r7,4(r17)
 1803ad8:	480b883a 	mov	r5,r9
 1803adc:	4009883a 	mov	r4,r8
 1803ae0:	1808f540 	call	1808f54 <__muldf3>
 1803ae4:	1011883a 	mov	r8,r2
 1803ae8:	b5800044 	addi	r22,r22,1
 1803aec:	1813883a 	mov	r9,r3
 1803af0:	8021d07a 	srai	r16,r16,1
 1803af4:	8c400204 	addi	r17,r17,8
 1803af8:	803ff21e 	bne	r16,zero,1803ac4 <_dtoa_r+0xd18>
 1803afc:	4029883a 	mov	r20,r8
 1803b00:	482b883a 	mov	r21,r9
 1803b04:	003dca06 	br	1803230 <_dtoa_r+0x484>
 1803b08:	d9000817 	ldw	r4,32(sp)
 1803b0c:	2005003a 	cmpeq	r2,r4,zero
 1803b10:	1001f61e 	bne	r2,zero,18042ec <_dtoa_r+0x1540>
 1803b14:	dc001117 	ldw	r16,68(sp)
 1803b18:	dc801017 	ldw	r18,64(sp)
 1803b1c:	18c10cc4 	addi	r3,r3,1075
 1803b20:	003f6106 	br	18038a8 <_dtoa_r+0xafc>
 1803b24:	d8000b15 	stw	zero,44(sp)
 1803b28:	d9802617 	ldw	r6,152(sp)
 1803b2c:	d8c00d17 	ldw	r3,52(sp)
 1803b30:	30800044 	addi	r2,r6,1
 1803b34:	18ad883a 	add	r22,r3,r2
 1803b38:	b13fffc4 	addi	r4,r22,-1
 1803b3c:	d9000e15 	stw	r4,56(sp)
 1803b40:	0581f60e 	bge	zero,r22,180431c <_dtoa_r+0x1570>
 1803b44:	dd800f15 	stw	r22,60(sp)
 1803b48:	003f3006 	br	180380c <_dtoa_r+0xa60>
 1803b4c:	d8000b15 	stw	zero,44(sp)
 1803b50:	d9002617 	ldw	r4,152(sp)
 1803b54:	0101eb0e 	bge	zero,r4,1804304 <_dtoa_r+0x1558>
 1803b58:	202d883a 	mov	r22,r4
 1803b5c:	d9000e15 	stw	r4,56(sp)
 1803b60:	d9000f15 	stw	r4,60(sp)
 1803b64:	003f2906 	br	180380c <_dtoa_r+0xa60>
 1803b68:	01800044 	movi	r6,1
 1803b6c:	d9800b15 	stw	r6,44(sp)
 1803b70:	003ff706 	br	1803b50 <_dtoa_r+0xda4>
 1803b74:	01000044 	movi	r4,1
 1803b78:	d9000b15 	stw	r4,44(sp)
 1803b7c:	003fea06 	br	1803b28 <_dtoa_r+0xd7c>
 1803b80:	04000c0e 	bge	zero,r16,1803bb4 <_dtoa_r+0xe08>
 1803b84:	d9400717 	ldw	r5,28(sp)
 1803b88:	d9001617 	ldw	r4,88(sp)
 1803b8c:	01800044 	movi	r6,1
 1803b90:	18068b80 	call	18068b8 <__lshift>
 1803b94:	1009883a 	mov	r4,r2
 1803b98:	900b883a 	mov	r5,r18
 1803b9c:	d8800715 	stw	r2,28(sp)
 1803ba0:	18060d00 	call	18060d0 <__mcmp>
 1803ba4:	0081e00e 	bge	zero,r2,1804328 <_dtoa_r+0x157c>
 1803ba8:	bdc00044 	addi	r23,r23,1
 1803bac:	00800e84 	movi	r2,58
 1803bb0:	b881a226 	beq	r23,r2,180423c <_dtoa_r+0x1490>
 1803bb4:	b7000044 	addi	fp,r22,1
 1803bb8:	b5c00005 	stb	r23,0(r22)
 1803bbc:	003f7406 	br	1803990 <_dtoa_r+0xbe4>
 1803bc0:	00800e44 	movi	r2,57
 1803bc4:	b8819d26 	beq	r23,r2,180423c <_dtoa_r+0x1490>
 1803bc8:	053ffa0e 	bge	zero,r20,1803bb4 <_dtoa_r+0xe08>
 1803bcc:	8dc00c44 	addi	r23,r17,49
 1803bd0:	003ff806 	br	1803bb4 <_dtoa_r+0xe08>
 1803bd4:	d9001617 	ldw	r4,88(sp)
 1803bd8:	a80b883a 	mov	r5,r21
 1803bdc:	04000044 	movi	r16,1
 1803be0:	1805f740 	call	1805f74 <_Bfree>
 1803be4:	003edf06 	br	1803764 <_dtoa_r+0x9b8>
 1803be8:	d9001617 	ldw	r4,88(sp)
 1803bec:	980b883a 	mov	r5,r19
 1803bf0:	01800284 	movi	r6,10
 1803bf4:	000f883a 	mov	r7,zero
 1803bf8:	1806c940 	call	1806c94 <__multadd>
 1803bfc:	1027883a 	mov	r19,r2
 1803c00:	d8800615 	stw	r2,24(sp)
 1803c04:	003ebb06 	br	18036f4 <_dtoa_r+0x948>
 1803c08:	d9801117 	ldw	r6,68(sp)
 1803c0c:	d8800d17 	ldw	r2,52(sp)
 1803c10:	d8000915 	stw	zero,36(sp)
 1803c14:	308dc83a 	sub	r6,r6,r2
 1803c18:	0087c83a 	sub	r3,zero,r2
 1803c1c:	d9801115 	stw	r6,68(sp)
 1803c20:	d8c01015 	stw	r3,64(sp)
 1803c24:	003cfe06 	br	1803020 <_dtoa_r+0x274>
 1803c28:	018dc83a 	sub	r6,zero,r6
 1803c2c:	d9801115 	stw	r6,68(sp)
 1803c30:	d8000a15 	stw	zero,40(sp)
 1803c34:	003cf306 	br	1803004 <_dtoa_r+0x258>
 1803c38:	d9000d17 	ldw	r4,52(sp)
 1803c3c:	18098180 	call	1809818 <__floatsidf>
 1803c40:	880b883a 	mov	r5,r17
 1803c44:	8009883a 	mov	r4,r16
 1803c48:	180f883a 	mov	r7,r3
 1803c4c:	100d883a 	mov	r6,r2
 1803c50:	18095f80 	call	18095f8 <__nedf2>
 1803c54:	103ce126 	beq	r2,zero,1802fdc <_dtoa_r+0x230>
 1803c58:	d9800d17 	ldw	r6,52(sp)
 1803c5c:	31bfffc4 	addi	r6,r6,-1
 1803c60:	d9800d15 	stw	r6,52(sp)
 1803c64:	003cdd06 	br	1802fdc <_dtoa_r+0x230>
 1803c68:	d9000717 	ldw	r4,28(sp)
 1803c6c:	900b883a 	mov	r5,r18
 1803c70:	18060d00 	call	18060d0 <__mcmp>
 1803c74:	103e8d0e 	bge	r2,zero,18036ac <_dtoa_r+0x900>
 1803c78:	d9400717 	ldw	r5,28(sp)
 1803c7c:	d9001617 	ldw	r4,88(sp)
 1803c80:	01800284 	movi	r6,10
 1803c84:	000f883a 	mov	r7,zero
 1803c88:	1806c940 	call	1806c94 <__multadd>
 1803c8c:	d9800d17 	ldw	r6,52(sp)
 1803c90:	d8800715 	stw	r2,28(sp)
 1803c94:	31bfffc4 	addi	r6,r6,-1
 1803c98:	d9800d15 	stw	r6,52(sp)
 1803c9c:	b001a71e 	bne	r22,zero,180433c <_dtoa_r+0x1590>
 1803ca0:	d8800e17 	ldw	r2,56(sp)
 1803ca4:	d8800f15 	stw	r2,60(sp)
 1803ca8:	003e8006 	br	18036ac <_dtoa_r+0x900>
 1803cac:	90800417 	ldw	r2,16(r18)
 1803cb0:	1085883a 	add	r2,r2,r2
 1803cb4:	1085883a 	add	r2,r2,r2
 1803cb8:	1485883a 	add	r2,r2,r18
 1803cbc:	11000417 	ldw	r4,16(r2)
 1803cc0:	1805f9c0 	call	1805f9c <__hi0bits>
 1803cc4:	00c00804 	movi	r3,32
 1803cc8:	1887c83a 	sub	r3,r3,r2
 1803ccc:	003e5a06 	br	1803638 <_dtoa_r+0x88c>
 1803cd0:	d9400717 	ldw	r5,28(sp)
 1803cd4:	d9801017 	ldw	r6,64(sp)
 1803cd8:	d9001617 	ldw	r4,88(sp)
 1803cdc:	1806dc00 	call	1806dc0 <__pow5mult>
 1803ce0:	d8800715 	stw	r2,28(sp)
 1803ce4:	003e4306 	br	18035f4 <_dtoa_r+0x848>
 1803ce8:	d9800f17 	ldw	r6,60(sp)
 1803cec:	d8800d17 	ldw	r2,52(sp)
 1803cf0:	d9800315 	stw	r6,12(sp)
 1803cf4:	d8800415 	stw	r2,16(sp)
 1803cf8:	d8c00b17 	ldw	r3,44(sp)
 1803cfc:	1805003a 	cmpeq	r2,r3,zero
 1803d00:	1000e21e 	bne	r2,zero,180408c <_dtoa_r+0x12e0>
 1803d04:	d9000317 	ldw	r4,12(sp)
 1803d08:	0005883a 	mov	r2,zero
 1803d0c:	00cff834 	movhi	r3,16352
 1803d10:	200c90fa 	slli	r6,r4,3
 1803d14:	01006074 	movhi	r4,385
 1803d18:	2136b304 	addi	r4,r4,-9524
 1803d1c:	180b883a 	mov	r5,r3
 1803d20:	310d883a 	add	r6,r6,r4
 1803d24:	327fff17 	ldw	r9,-4(r6)
 1803d28:	323ffe17 	ldw	r8,-8(r6)
 1803d2c:	1009883a 	mov	r4,r2
 1803d30:	480f883a 	mov	r7,r9
 1803d34:	400d883a 	mov	r6,r8
 1803d38:	18093180 	call	1809318 <__divdf3>
 1803d3c:	180b883a 	mov	r5,r3
 1803d40:	b00d883a 	mov	r6,r22
 1803d44:	b80f883a 	mov	r7,r23
 1803d48:	1009883a 	mov	r4,r2
 1803d4c:	1808e600 	call	1808e60 <__subdf3>
 1803d50:	a80b883a 	mov	r5,r21
 1803d54:	a009883a 	mov	r4,r20
 1803d58:	d8c01915 	stw	r3,100(sp)
 1803d5c:	d8801815 	stw	r2,96(sp)
 1803d60:	18099100 	call	1809910 <__fixdfsi>
 1803d64:	1009883a 	mov	r4,r2
 1803d68:	1027883a 	mov	r19,r2
 1803d6c:	18098180 	call	1809818 <__floatsidf>
 1803d70:	a80b883a 	mov	r5,r21
 1803d74:	a009883a 	mov	r4,r20
 1803d78:	180f883a 	mov	r7,r3
 1803d7c:	100d883a 	mov	r6,r2
 1803d80:	1808e600 	call	1808e60 <__subdf3>
 1803d84:	d9801817 	ldw	r6,96(sp)
 1803d88:	1823883a 	mov	r17,r3
 1803d8c:	d8801415 	stw	r2,80(sp)
 1803d90:	302d883a 	mov	r22,r6
 1803d94:	d9800517 	ldw	r6,20(sp)
 1803d98:	9cc00c04 	addi	r19,r19,48
 1803d9c:	dc401515 	stw	r17,84(sp)
 1803da0:	d8c01917 	ldw	r3,100(sp)
 1803da4:	34c00005 	stb	r19,0(r6)
 1803da8:	d8800517 	ldw	r2,20(sp)
 1803dac:	d9401917 	ldw	r5,100(sp)
 1803db0:	d9801417 	ldw	r6,80(sp)
 1803db4:	b009883a 	mov	r4,r22
 1803db8:	880f883a 	mov	r7,r17
 1803dbc:	182f883a 	mov	r23,r3
 1803dc0:	17000044 	addi	fp,r2,1
 1803dc4:	18096800 	call	1809680 <__gtdf2>
 1803dc8:	00804e16 	blt	zero,r2,1803f04 <_dtoa_r+0x1158>
 1803dcc:	d9801417 	ldw	r6,80(sp)
 1803dd0:	0005883a 	mov	r2,zero
 1803dd4:	00cffc34 	movhi	r3,16368
 1803dd8:	180b883a 	mov	r5,r3
 1803ddc:	880f883a 	mov	r7,r17
 1803de0:	1009883a 	mov	r4,r2
 1803de4:	1808e600 	call	1808e60 <__subdf3>
 1803de8:	d9401917 	ldw	r5,100(sp)
 1803dec:	180f883a 	mov	r7,r3
 1803df0:	b009883a 	mov	r4,r22
 1803df4:	100d883a 	mov	r6,r2
 1803df8:	18096800 	call	1809680 <__gtdf2>
 1803dfc:	00bda216 	blt	zero,r2,1803488 <_dtoa_r+0x6dc>
 1803e00:	d8c00317 	ldw	r3,12(sp)
 1803e04:	00800044 	movi	r2,1
 1803e08:	10c01216 	blt	r2,r3,1803e54 <_dtoa_r+0x10a8>
 1803e0c:	003d4506 	br	1803324 <_dtoa_r+0x578>
 1803e10:	d9801417 	ldw	r6,80(sp)
 1803e14:	0005883a 	mov	r2,zero
 1803e18:	00cffc34 	movhi	r3,16368
 1803e1c:	180b883a 	mov	r5,r3
 1803e20:	880f883a 	mov	r7,r17
 1803e24:	1009883a 	mov	r4,r2
 1803e28:	1808e600 	call	1808e60 <__subdf3>
 1803e2c:	d9c01b17 	ldw	r7,108(sp)
 1803e30:	180b883a 	mov	r5,r3
 1803e34:	1009883a 	mov	r4,r2
 1803e38:	b00d883a 	mov	r6,r22
 1803e3c:	18097900 	call	1809790 <__ltdf2>
 1803e40:	103d9116 	blt	r2,zero,1803488 <_dtoa_r+0x6dc>
 1803e44:	d9800517 	ldw	r6,20(sp)
 1803e48:	d9000317 	ldw	r4,12(sp)
 1803e4c:	3105883a 	add	r2,r6,r4
 1803e50:	e0bd3426 	beq	fp,r2,1803324 <_dtoa_r+0x578>
 1803e54:	04500934 	movhi	r17,16420
 1803e58:	0021883a 	mov	r16,zero
 1803e5c:	b80b883a 	mov	r5,r23
 1803e60:	b009883a 	mov	r4,r22
 1803e64:	800d883a 	mov	r6,r16
 1803e68:	880f883a 	mov	r7,r17
 1803e6c:	1808f540 	call	1808f54 <__muldf3>
 1803e70:	d9401517 	ldw	r5,84(sp)
 1803e74:	d9001417 	ldw	r4,80(sp)
 1803e78:	880f883a 	mov	r7,r17
 1803e7c:	000d883a 	mov	r6,zero
 1803e80:	d8801a15 	stw	r2,104(sp)
 1803e84:	d8c01b15 	stw	r3,108(sp)
 1803e88:	1808f540 	call	1808f54 <__muldf3>
 1803e8c:	180b883a 	mov	r5,r3
 1803e90:	1009883a 	mov	r4,r2
 1803e94:	1823883a 	mov	r17,r3
 1803e98:	1021883a 	mov	r16,r2
 1803e9c:	18099100 	call	1809910 <__fixdfsi>
 1803ea0:	1009883a 	mov	r4,r2
 1803ea4:	102b883a 	mov	r21,r2
 1803ea8:	18098180 	call	1809818 <__floatsidf>
 1803eac:	880b883a 	mov	r5,r17
 1803eb0:	8009883a 	mov	r4,r16
 1803eb4:	180f883a 	mov	r7,r3
 1803eb8:	100d883a 	mov	r6,r2
 1803ebc:	1808e600 	call	1808e60 <__subdf3>
 1803ec0:	1021883a 	mov	r16,r2
 1803ec4:	d9001b17 	ldw	r4,108(sp)
 1803ec8:	1823883a 	mov	r17,r3
 1803ecc:	dc001415 	stw	r16,80(sp)
 1803ed0:	ad400c04 	addi	r21,r21,48
 1803ed4:	dc401515 	stw	r17,84(sp)
 1803ed8:	d8801a17 	ldw	r2,104(sp)
 1803edc:	e5400005 	stb	r21,0(fp)
 1803ee0:	202f883a 	mov	r23,r4
 1803ee4:	d9c01b17 	ldw	r7,108(sp)
 1803ee8:	d9001417 	ldw	r4,80(sp)
 1803eec:	880b883a 	mov	r5,r17
 1803ef0:	100d883a 	mov	r6,r2
 1803ef4:	102d883a 	mov	r22,r2
 1803ef8:	e7000044 	addi	fp,fp,1
 1803efc:	18097900 	call	1809790 <__ltdf2>
 1803f00:	103fc30e 	bge	r2,zero,1803e10 <_dtoa_r+0x1064>
 1803f04:	d9000417 	ldw	r4,16(sp)
 1803f08:	d9000d15 	stw	r4,52(sp)
 1803f0c:	003d7106 	br	18034d4 <_dtoa_r+0x728>
 1803f10:	d9801717 	ldw	r6,92(sp)
 1803f14:	00800084 	movi	r2,2
 1803f18:	11bde60e 	bge	r2,r6,18036b4 <_dtoa_r+0x908>
 1803f1c:	203cfb1e 	bne	r4,zero,180330c <_dtoa_r+0x560>
 1803f20:	d9001617 	ldw	r4,88(sp)
 1803f24:	900b883a 	mov	r5,r18
 1803f28:	01800144 	movi	r6,5
 1803f2c:	000f883a 	mov	r7,zero
 1803f30:	1806c940 	call	1806c94 <__multadd>
 1803f34:	d9000717 	ldw	r4,28(sp)
 1803f38:	100b883a 	mov	r5,r2
 1803f3c:	1025883a 	mov	r18,r2
 1803f40:	18060d00 	call	18060d0 <__mcmp>
 1803f44:	00bcf10e 	bge	zero,r2,180330c <_dtoa_r+0x560>
 1803f48:	d8c00d17 	ldw	r3,52(sp)
 1803f4c:	d9000517 	ldw	r4,20(sp)
 1803f50:	d8000615 	stw	zero,24(sp)
 1803f54:	18c00044 	addi	r3,r3,1
 1803f58:	d8c00d15 	stw	r3,52(sp)
 1803f5c:	00800c44 	movi	r2,49
 1803f60:	27000044 	addi	fp,r4,1
 1803f64:	20800005 	stb	r2,0(r4)
 1803f68:	003e8906 	br	1803990 <_dtoa_r+0xbe4>
 1803f6c:	d8c00517 	ldw	r3,20(sp)
 1803f70:	003bc206 	br	1802e7c <_dtoa_r+0xd0>
 1803f74:	01806074 	movhi	r6,385
 1803f78:	31b6e504 	addi	r6,r6,-9324
 1803f7c:	30c00917 	ldw	r3,36(r6)
 1803f80:	30800817 	ldw	r2,32(r6)
 1803f84:	d9001217 	ldw	r4,72(sp)
 1803f88:	d9401317 	ldw	r5,76(sp)
 1803f8c:	180f883a 	mov	r7,r3
 1803f90:	100d883a 	mov	r6,r2
 1803f94:	18093180 	call	1809318 <__divdf3>
 1803f98:	948003cc 	andi	r18,r18,15
 1803f9c:	058000c4 	movi	r22,3
 1803fa0:	1029883a 	mov	r20,r2
 1803fa4:	182b883a 	mov	r21,r3
 1803fa8:	003c8906 	br	18031d0 <_dtoa_r+0x424>
 1803fac:	d9001017 	ldw	r4,64(sp)
 1803fb0:	d9800917 	ldw	r6,36(sp)
 1803fb4:	0025883a 	mov	r18,zero
 1803fb8:	1105c83a 	sub	r2,r2,r4
 1803fbc:	2089883a 	add	r4,r4,r2
 1803fc0:	308d883a 	add	r6,r6,r2
 1803fc4:	d9001015 	stw	r4,64(sp)
 1803fc8:	d9800915 	stw	r6,36(sp)
 1803fcc:	003e3206 	br	1803898 <_dtoa_r+0xaec>
 1803fd0:	28800044 	addi	r2,r5,1
 1803fd4:	27000044 	addi	fp,r4,1
 1803fd8:	20800005 	stb	r2,0(r4)
 1803fdc:	003e6c06 	br	1803990 <_dtoa_r+0xbe4>
 1803fe0:	d8800f17 	ldw	r2,60(sp)
 1803fe4:	00bce016 	blt	zero,r2,1803368 <_dtoa_r+0x5bc>
 1803fe8:	d9800f17 	ldw	r6,60(sp)
 1803fec:	303cc51e 	bne	r6,zero,1803304 <_dtoa_r+0x558>
 1803ff0:	0005883a 	mov	r2,zero
 1803ff4:	00d00534 	movhi	r3,16404
 1803ff8:	980b883a 	mov	r5,r19
 1803ffc:	180f883a 	mov	r7,r3
 1804000:	9009883a 	mov	r4,r18
 1804004:	100d883a 	mov	r6,r2
 1804008:	1808f540 	call	1808f54 <__muldf3>
 180400c:	180b883a 	mov	r5,r3
 1804010:	a80f883a 	mov	r7,r21
 1804014:	1009883a 	mov	r4,r2
 1804018:	a00d883a 	mov	r6,r20
 180401c:	18097080 	call	1809708 <__gedf2>
 1804020:	103cb80e 	bge	r2,zero,1803304 <_dtoa_r+0x558>
 1804024:	0027883a 	mov	r19,zero
 1804028:	0025883a 	mov	r18,zero
 180402c:	003fc606 	br	1803f48 <_dtoa_r+0x119c>
 1804030:	99400117 	ldw	r5,4(r19)
 1804034:	d9001617 	ldw	r4,88(sp)
 1804038:	18064f40 	call	18064f4 <_Balloc>
 180403c:	99800417 	ldw	r6,16(r19)
 1804040:	11000304 	addi	r4,r2,12
 1804044:	99400304 	addi	r5,r19,12
 1804048:	318d883a 	add	r6,r6,r6
 180404c:	318d883a 	add	r6,r6,r6
 1804050:	31800204 	addi	r6,r6,8
 1804054:	1023883a 	mov	r17,r2
 1804058:	1805d5c0 	call	1805d5c <memcpy>
 180405c:	d9001617 	ldw	r4,88(sp)
 1804060:	880b883a 	mov	r5,r17
 1804064:	01800044 	movi	r6,1
 1804068:	18068b80 	call	18068b8 <__lshift>
 180406c:	100b883a 	mov	r5,r2
 1804070:	003d9c06 	br	18036e4 <_dtoa_r+0x938>
 1804074:	00800e44 	movi	r2,57
 1804078:	b8807026 	beq	r23,r2,180423c <_dtoa_r+0x1490>
 180407c:	b8800044 	addi	r2,r23,1
 1804080:	b7000044 	addi	fp,r22,1
 1804084:	b0800005 	stb	r2,0(r22)
 1804088:	003e4106 	br	1803990 <_dtoa_r+0xbe4>
 180408c:	d8800317 	ldw	r2,12(sp)
 1804090:	01806074 	movhi	r6,385
 1804094:	31b6b304 	addi	r6,r6,-9524
 1804098:	b009883a 	mov	r4,r22
 180409c:	100e90fa 	slli	r7,r2,3
 18040a0:	b80b883a 	mov	r5,r23
 18040a4:	398f883a 	add	r7,r7,r6
 18040a8:	38bffe17 	ldw	r2,-8(r7)
 18040ac:	d9800517 	ldw	r6,20(sp)
 18040b0:	38ffff17 	ldw	r3,-4(r7)
 18040b4:	37000044 	addi	fp,r6,1
 18040b8:	180f883a 	mov	r7,r3
 18040bc:	100d883a 	mov	r6,r2
 18040c0:	1808f540 	call	1808f54 <__muldf3>
 18040c4:	a80b883a 	mov	r5,r21
 18040c8:	a009883a 	mov	r4,r20
 18040cc:	182f883a 	mov	r23,r3
 18040d0:	102d883a 	mov	r22,r2
 18040d4:	18099100 	call	1809910 <__fixdfsi>
 18040d8:	1009883a 	mov	r4,r2
 18040dc:	1027883a 	mov	r19,r2
 18040e0:	18098180 	call	1809818 <__floatsidf>
 18040e4:	a80b883a 	mov	r5,r21
 18040e8:	a009883a 	mov	r4,r20
 18040ec:	180f883a 	mov	r7,r3
 18040f0:	100d883a 	mov	r6,r2
 18040f4:	1808e600 	call	1808e60 <__subdf3>
 18040f8:	180b883a 	mov	r5,r3
 18040fc:	d8c00517 	ldw	r3,20(sp)
 1804100:	9cc00c04 	addi	r19,r19,48
 1804104:	1009883a 	mov	r4,r2
 1804108:	1cc00005 	stb	r19,0(r3)
 180410c:	2021883a 	mov	r16,r4
 1804110:	d9000317 	ldw	r4,12(sp)
 1804114:	00800044 	movi	r2,1
 1804118:	2823883a 	mov	r17,r5
 180411c:	20802226 	beq	r4,r2,18041a8 <_dtoa_r+0x13fc>
 1804120:	1029883a 	mov	r20,r2
 1804124:	0005883a 	mov	r2,zero
 1804128:	00d00934 	movhi	r3,16420
 180412c:	180f883a 	mov	r7,r3
 1804130:	100d883a 	mov	r6,r2
 1804134:	880b883a 	mov	r5,r17
 1804138:	8009883a 	mov	r4,r16
 180413c:	1808f540 	call	1808f54 <__muldf3>
 1804140:	180b883a 	mov	r5,r3
 1804144:	1009883a 	mov	r4,r2
 1804148:	1823883a 	mov	r17,r3
 180414c:	1021883a 	mov	r16,r2
 1804150:	18099100 	call	1809910 <__fixdfsi>
 1804154:	1009883a 	mov	r4,r2
 1804158:	102b883a 	mov	r21,r2
 180415c:	18098180 	call	1809818 <__floatsidf>
 1804160:	880b883a 	mov	r5,r17
 1804164:	8009883a 	mov	r4,r16
 1804168:	180f883a 	mov	r7,r3
 180416c:	100d883a 	mov	r6,r2
 1804170:	1808e600 	call	1808e60 <__subdf3>
 1804174:	180b883a 	mov	r5,r3
 1804178:	d8c00517 	ldw	r3,20(sp)
 180417c:	1009883a 	mov	r4,r2
 1804180:	ad400c04 	addi	r21,r21,48
 1804184:	1d05883a 	add	r2,r3,r20
 1804188:	15400005 	stb	r21,0(r2)
 180418c:	2021883a 	mov	r16,r4
 1804190:	d9000317 	ldw	r4,12(sp)
 1804194:	a5000044 	addi	r20,r20,1
 1804198:	2823883a 	mov	r17,r5
 180419c:	a13fe11e 	bne	r20,r4,1804124 <_dtoa_r+0x1378>
 18041a0:	e505883a 	add	r2,fp,r20
 18041a4:	173fffc4 	addi	fp,r2,-1
 18041a8:	0025883a 	mov	r18,zero
 18041ac:	04cff834 	movhi	r19,16352
 18041b0:	b009883a 	mov	r4,r22
 18041b4:	b80b883a 	mov	r5,r23
 18041b8:	900d883a 	mov	r6,r18
 18041bc:	980f883a 	mov	r7,r19
 18041c0:	1808ee00 	call	1808ee0 <__adddf3>
 18041c4:	180b883a 	mov	r5,r3
 18041c8:	1009883a 	mov	r4,r2
 18041cc:	800d883a 	mov	r6,r16
 18041d0:	880f883a 	mov	r7,r17
 18041d4:	18097900 	call	1809790 <__ltdf2>
 18041d8:	103cab16 	blt	r2,zero,1803488 <_dtoa_r+0x6dc>
 18041dc:	0009883a 	mov	r4,zero
 18041e0:	980b883a 	mov	r5,r19
 18041e4:	b80f883a 	mov	r7,r23
 18041e8:	b00d883a 	mov	r6,r22
 18041ec:	1808e600 	call	1808e60 <__subdf3>
 18041f0:	180b883a 	mov	r5,r3
 18041f4:	880f883a 	mov	r7,r17
 18041f8:	1009883a 	mov	r4,r2
 18041fc:	800d883a 	mov	r6,r16
 1804200:	18096800 	call	1809680 <__gtdf2>
 1804204:	00bc470e 	bge	zero,r2,1803324 <_dtoa_r+0x578>
 1804208:	00c00c04 	movi	r3,48
 180420c:	e73fffc4 	addi	fp,fp,-1
 1804210:	e0800007 	ldb	r2,0(fp)
 1804214:	10fffd26 	beq	r2,r3,180420c <_dtoa_r+0x1460>
 1804218:	d9800417 	ldw	r6,16(sp)
 180421c:	e7000044 	addi	fp,fp,1
 1804220:	d9800d15 	stw	r6,52(sp)
 1804224:	003cab06 	br	18034d4 <_dtoa_r+0x728>
 1804228:	d8c00f17 	ldw	r3,60(sp)
 180422c:	d9001117 	ldw	r4,68(sp)
 1804230:	20e1c83a 	sub	r16,r4,r3
 1804234:	0007883a 	mov	r3,zero
 1804238:	003d9b06 	br	18038a8 <_dtoa_r+0xafc>
 180423c:	00800e44 	movi	r2,57
 1804240:	b0800005 	stb	r2,0(r22)
 1804244:	b5800044 	addi	r22,r22,1
 1804248:	003dc106 	br	1803950 <_dtoa_r+0xba4>
 180424c:	05800084 	movi	r22,2
 1804250:	003bf706 	br	1803230 <_dtoa_r+0x484>
 1804254:	d9000f17 	ldw	r4,60(sp)
 1804258:	013c000e 	bge	zero,r4,180325c <_dtoa_r+0x4b0>
 180425c:	d9800e17 	ldw	r6,56(sp)
 1804260:	01bc300e 	bge	zero,r6,1803324 <_dtoa_r+0x578>
 1804264:	0005883a 	mov	r2,zero
 1804268:	00d00934 	movhi	r3,16420
 180426c:	a80b883a 	mov	r5,r21
 1804270:	180f883a 	mov	r7,r3
 1804274:	a009883a 	mov	r4,r20
 1804278:	100d883a 	mov	r6,r2
 180427c:	1808f540 	call	1808f54 <__muldf3>
 1804280:	b1000044 	addi	r4,r22,1
 1804284:	1021883a 	mov	r16,r2
 1804288:	1823883a 	mov	r17,r3
 180428c:	18098180 	call	1809818 <__floatsidf>
 1804290:	880b883a 	mov	r5,r17
 1804294:	8009883a 	mov	r4,r16
 1804298:	180f883a 	mov	r7,r3
 180429c:	100d883a 	mov	r6,r2
 18042a0:	1808f540 	call	1808f54 <__muldf3>
 18042a4:	0011883a 	mov	r8,zero
 18042a8:	02500734 	movhi	r9,16412
 18042ac:	180b883a 	mov	r5,r3
 18042b0:	480f883a 	mov	r7,r9
 18042b4:	1009883a 	mov	r4,r2
 18042b8:	400d883a 	mov	r6,r8
 18042bc:	1808ee00 	call	1808ee0 <__adddf3>
 18042c0:	102d883a 	mov	r22,r2
 18042c4:	00bf3034 	movhi	r2,64704
 18042c8:	10ef883a 	add	r23,r2,r3
 18042cc:	d8800d17 	ldw	r2,52(sp)
 18042d0:	d8c00e17 	ldw	r3,56(sp)
 18042d4:	8029883a 	mov	r20,r16
 18042d8:	10bfffc4 	addi	r2,r2,-1
 18042dc:	882b883a 	mov	r21,r17
 18042e0:	d8800415 	stw	r2,16(sp)
 18042e4:	d8c00315 	stw	r3,12(sp)
 18042e8:	003e8306 	br	1803cf8 <_dtoa_r+0xf4c>
 18042ec:	d8800117 	ldw	r2,4(sp)
 18042f0:	dc001117 	ldw	r16,68(sp)
 18042f4:	dc801017 	ldw	r18,64(sp)
 18042f8:	00c00d84 	movi	r3,54
 18042fc:	1887c83a 	sub	r3,r3,r2
 1804300:	003d6906 	br	18038a8 <_dtoa_r+0xafc>
 1804304:	01800044 	movi	r6,1
 1804308:	3021883a 	mov	r16,r6
 180430c:	d9800f15 	stw	r6,60(sp)
 1804310:	d9802615 	stw	r6,152(sp)
 1804314:	d9800e15 	stw	r6,56(sp)
 1804318:	003b9306 	br	1803168 <_dtoa_r+0x3bc>
 180431c:	b021883a 	mov	r16,r22
 1804320:	dd800f15 	stw	r22,60(sp)
 1804324:	003b9006 	br	1803168 <_dtoa_r+0x3bc>
 1804328:	103e221e 	bne	r2,zero,1803bb4 <_dtoa_r+0xe08>
 180432c:	b880004c 	andi	r2,r23,1
 1804330:	1005003a 	cmpeq	r2,r2,zero
 1804334:	103e1f1e 	bne	r2,zero,1803bb4 <_dtoa_r+0xe08>
 1804338:	003e1b06 	br	1803ba8 <_dtoa_r+0xdfc>
 180433c:	d9001617 	ldw	r4,88(sp)
 1804340:	980b883a 	mov	r5,r19
 1804344:	01800284 	movi	r6,10
 1804348:	000f883a 	mov	r7,zero
 180434c:	1806c940 	call	1806c94 <__multadd>
 1804350:	d8c00e17 	ldw	r3,56(sp)
 1804354:	1027883a 	mov	r19,r2
 1804358:	d8c00f15 	stw	r3,60(sp)
 180435c:	003cd306 	br	18036ac <_dtoa_r+0x900>

01804360 <_fflush_r>:
 1804360:	defffb04 	addi	sp,sp,-20
 1804364:	dcc00315 	stw	r19,12(sp)
 1804368:	dc800215 	stw	r18,8(sp)
 180436c:	dfc00415 	stw	ra,16(sp)
 1804370:	dc400115 	stw	r17,4(sp)
 1804374:	dc000015 	stw	r16,0(sp)
 1804378:	2027883a 	mov	r19,r4
 180437c:	2825883a 	mov	r18,r5
 1804380:	20000226 	beq	r4,zero,180438c <_fflush_r+0x2c>
 1804384:	20800e17 	ldw	r2,56(r4)
 1804388:	10005626 	beq	r2,zero,18044e4 <_fflush_r+0x184>
 180438c:	9100030b 	ldhu	r4,12(r18)
 1804390:	20ffffcc 	andi	r3,r4,65535
 1804394:	18e0001c 	xori	r3,r3,32768
 1804398:	18e00004 	addi	r3,r3,-32768
 180439c:	1880020c 	andi	r2,r3,8
 18043a0:	1000261e 	bne	r2,zero,180443c <_fflush_r+0xdc>
 18043a4:	90c00117 	ldw	r3,4(r18)
 18043a8:	20820014 	ori	r2,r4,2048
 18043ac:	9080030d 	sth	r2,12(r18)
 18043b0:	1009883a 	mov	r4,r2
 18043b4:	00c0400e 	bge	zero,r3,18044b8 <_fflush_r+0x158>
 18043b8:	92000a17 	ldw	r8,40(r18)
 18043bc:	40004026 	beq	r8,zero,18044c0 <_fflush_r+0x160>
 18043c0:	2084000c 	andi	r2,r4,4096
 18043c4:	10005326 	beq	r2,zero,1804514 <_fflush_r+0x1b4>
 18043c8:	94001417 	ldw	r16,80(r18)
 18043cc:	9080030b 	ldhu	r2,12(r18)
 18043d0:	1080010c 	andi	r2,r2,4
 18043d4:	1000481e 	bne	r2,zero,18044f8 <_fflush_r+0x198>
 18043d8:	91400717 	ldw	r5,28(r18)
 18043dc:	9809883a 	mov	r4,r19
 18043e0:	800d883a 	mov	r6,r16
 18043e4:	000f883a 	mov	r7,zero
 18043e8:	403ee83a 	callr	r8
 18043ec:	8080261e 	bne	r16,r2,1804488 <_fflush_r+0x128>
 18043f0:	9080030b 	ldhu	r2,12(r18)
 18043f4:	91000417 	ldw	r4,16(r18)
 18043f8:	90000115 	stw	zero,4(r18)
 18043fc:	10bdffcc 	andi	r2,r2,63487
 1804400:	10ffffcc 	andi	r3,r2,65535
 1804404:	18c4000c 	andi	r3,r3,4096
 1804408:	9080030d 	sth	r2,12(r18)
 180440c:	91000015 	stw	r4,0(r18)
 1804410:	18002b26 	beq	r3,zero,18044c0 <_fflush_r+0x160>
 1804414:	0007883a 	mov	r3,zero
 1804418:	1805883a 	mov	r2,r3
 180441c:	94001415 	stw	r16,80(r18)
 1804420:	dfc00417 	ldw	ra,16(sp)
 1804424:	dcc00317 	ldw	r19,12(sp)
 1804428:	dc800217 	ldw	r18,8(sp)
 180442c:	dc400117 	ldw	r17,4(sp)
 1804430:	dc000017 	ldw	r16,0(sp)
 1804434:	dec00504 	addi	sp,sp,20
 1804438:	f800283a 	ret
 180443c:	94400417 	ldw	r17,16(r18)
 1804440:	88001f26 	beq	r17,zero,18044c0 <_fflush_r+0x160>
 1804444:	90800017 	ldw	r2,0(r18)
 1804448:	18c000cc 	andi	r3,r3,3
 180444c:	94400015 	stw	r17,0(r18)
 1804450:	1461c83a 	sub	r16,r2,r17
 1804454:	18002526 	beq	r3,zero,18044ec <_fflush_r+0x18c>
 1804458:	0005883a 	mov	r2,zero
 180445c:	90800215 	stw	r2,8(r18)
 1804460:	0400170e 	bge	zero,r16,18044c0 <_fflush_r+0x160>
 1804464:	90c00917 	ldw	r3,36(r18)
 1804468:	91400717 	ldw	r5,28(r18)
 180446c:	880d883a 	mov	r6,r17
 1804470:	800f883a 	mov	r7,r16
 1804474:	9809883a 	mov	r4,r19
 1804478:	183ee83a 	callr	r3
 180447c:	88a3883a 	add	r17,r17,r2
 1804480:	80a1c83a 	sub	r16,r16,r2
 1804484:	00bff616 	blt	zero,r2,1804460 <_fflush_r+0x100>
 1804488:	9080030b 	ldhu	r2,12(r18)
 180448c:	00ffffc4 	movi	r3,-1
 1804490:	10801014 	ori	r2,r2,64
 1804494:	9080030d 	sth	r2,12(r18)
 1804498:	1805883a 	mov	r2,r3
 180449c:	dfc00417 	ldw	ra,16(sp)
 18044a0:	dcc00317 	ldw	r19,12(sp)
 18044a4:	dc800217 	ldw	r18,8(sp)
 18044a8:	dc400117 	ldw	r17,4(sp)
 18044ac:	dc000017 	ldw	r16,0(sp)
 18044b0:	dec00504 	addi	sp,sp,20
 18044b4:	f800283a 	ret
 18044b8:	90800f17 	ldw	r2,60(r18)
 18044bc:	00bfbe16 	blt	zero,r2,18043b8 <_fflush_r+0x58>
 18044c0:	0007883a 	mov	r3,zero
 18044c4:	1805883a 	mov	r2,r3
 18044c8:	dfc00417 	ldw	ra,16(sp)
 18044cc:	dcc00317 	ldw	r19,12(sp)
 18044d0:	dc800217 	ldw	r18,8(sp)
 18044d4:	dc400117 	ldw	r17,4(sp)
 18044d8:	dc000017 	ldw	r16,0(sp)
 18044dc:	dec00504 	addi	sp,sp,20
 18044e0:	f800283a 	ret
 18044e4:	18045f80 	call	18045f8 <__sinit>
 18044e8:	003fa806 	br	180438c <_fflush_r+0x2c>
 18044ec:	90800517 	ldw	r2,20(r18)
 18044f0:	90800215 	stw	r2,8(r18)
 18044f4:	003fda06 	br	1804460 <_fflush_r+0x100>
 18044f8:	90800117 	ldw	r2,4(r18)
 18044fc:	90c00c17 	ldw	r3,48(r18)
 1804500:	80a1c83a 	sub	r16,r16,r2
 1804504:	183fb426 	beq	r3,zero,18043d8 <_fflush_r+0x78>
 1804508:	90800f17 	ldw	r2,60(r18)
 180450c:	80a1c83a 	sub	r16,r16,r2
 1804510:	003fb106 	br	18043d8 <_fflush_r+0x78>
 1804514:	91400717 	ldw	r5,28(r18)
 1804518:	9809883a 	mov	r4,r19
 180451c:	000d883a 	mov	r6,zero
 1804520:	01c00044 	movi	r7,1
 1804524:	403ee83a 	callr	r8
 1804528:	1021883a 	mov	r16,r2
 180452c:	00bfffc4 	movi	r2,-1
 1804530:	80800226 	beq	r16,r2,180453c <_fflush_r+0x1dc>
 1804534:	92000a17 	ldw	r8,40(r18)
 1804538:	003fa406 	br	18043cc <_fflush_r+0x6c>
 180453c:	98c00017 	ldw	r3,0(r19)
 1804540:	00800744 	movi	r2,29
 1804544:	18bfde26 	beq	r3,r2,18044c0 <_fflush_r+0x160>
 1804548:	9080030b 	ldhu	r2,12(r18)
 180454c:	8007883a 	mov	r3,r16
 1804550:	10801014 	ori	r2,r2,64
 1804554:	9080030d 	sth	r2,12(r18)
 1804558:	003fcf06 	br	1804498 <_fflush_r+0x138>

0180455c <fflush>:
 180455c:	01406034 	movhi	r5,384
 1804560:	2950d804 	addi	r5,r5,17248
 1804564:	2007883a 	mov	r3,r4
 1804568:	20000526 	beq	r4,zero,1804580 <fflush+0x24>
 180456c:	00806074 	movhi	r2,385
 1804570:	10be1104 	addi	r2,r2,-1980
 1804574:	11000017 	ldw	r4,0(r2)
 1804578:	180b883a 	mov	r5,r3
 180457c:	18043601 	jmpi	1804360 <_fflush_r>
 1804580:	00806074 	movhi	r2,385
 1804584:	10be1204 	addi	r2,r2,-1976
 1804588:	11000017 	ldw	r4,0(r2)
 180458c:	18051601 	jmpi	1805160 <_fwalk_reent>

01804590 <std>:
 1804590:	00806034 	movhi	r2,384
 1804594:	109db504 	addi	r2,r2,30420
 1804598:	20800b15 	stw	r2,44(r4)
 180459c:	00806034 	movhi	r2,384
 18045a0:	109df004 	addi	r2,r2,30656
 18045a4:	20800815 	stw	r2,32(r4)
 18045a8:	00c06034 	movhi	r3,384
 18045ac:	18ddd104 	addi	r3,r3,30532
 18045b0:	00806034 	movhi	r2,384
 18045b4:	109db704 	addi	r2,r2,30428
 18045b8:	2140030d 	sth	r5,12(r4)
 18045bc:	2180038d 	sth	r6,14(r4)
 18045c0:	20c00915 	stw	r3,36(r4)
 18045c4:	20800a15 	stw	r2,40(r4)
 18045c8:	20000015 	stw	zero,0(r4)
 18045cc:	20000115 	stw	zero,4(r4)
 18045d0:	20000215 	stw	zero,8(r4)
 18045d4:	20000415 	stw	zero,16(r4)
 18045d8:	20000515 	stw	zero,20(r4)
 18045dc:	20000615 	stw	zero,24(r4)
 18045e0:	21000715 	stw	r4,28(r4)
 18045e4:	f800283a 	ret

018045e8 <__sfp_lock_acquire>:
 18045e8:	f800283a 	ret

018045ec <__sfp_lock_release>:
 18045ec:	f800283a 	ret

018045f0 <__sinit_lock_acquire>:
 18045f0:	f800283a 	ret

018045f4 <__sinit_lock_release>:
 18045f4:	f800283a 	ret

018045f8 <__sinit>:
 18045f8:	20800e17 	ldw	r2,56(r4)
 18045fc:	defffd04 	addi	sp,sp,-12
 1804600:	dc400115 	stw	r17,4(sp)
 1804604:	dc000015 	stw	r16,0(sp)
 1804608:	dfc00215 	stw	ra,8(sp)
 180460c:	04400044 	movi	r17,1
 1804610:	01400104 	movi	r5,4
 1804614:	000d883a 	mov	r6,zero
 1804618:	2021883a 	mov	r16,r4
 180461c:	2200bb04 	addi	r8,r4,748
 1804620:	200f883a 	mov	r7,r4
 1804624:	10000526 	beq	r2,zero,180463c <__sinit+0x44>
 1804628:	dfc00217 	ldw	ra,8(sp)
 180462c:	dc400117 	ldw	r17,4(sp)
 1804630:	dc000017 	ldw	r16,0(sp)
 1804634:	dec00304 	addi	sp,sp,12
 1804638:	f800283a 	ret
 180463c:	21000117 	ldw	r4,4(r4)
 1804640:	00806034 	movhi	r2,384
 1804644:	1091b704 	addi	r2,r2,18140
 1804648:	00c000c4 	movi	r3,3
 180464c:	80800f15 	stw	r2,60(r16)
 1804650:	80c0b915 	stw	r3,740(r16)
 1804654:	8200ba15 	stw	r8,744(r16)
 1804658:	84400e15 	stw	r17,56(r16)
 180465c:	8000b815 	stw	zero,736(r16)
 1804660:	18045900 	call	1804590 <std>
 1804664:	81000217 	ldw	r4,8(r16)
 1804668:	880d883a 	mov	r6,r17
 180466c:	800f883a 	mov	r7,r16
 1804670:	01400284 	movi	r5,10
 1804674:	18045900 	call	1804590 <std>
 1804678:	81000317 	ldw	r4,12(r16)
 180467c:	800f883a 	mov	r7,r16
 1804680:	01400484 	movi	r5,18
 1804684:	01800084 	movi	r6,2
 1804688:	dfc00217 	ldw	ra,8(sp)
 180468c:	dc400117 	ldw	r17,4(sp)
 1804690:	dc000017 	ldw	r16,0(sp)
 1804694:	dec00304 	addi	sp,sp,12
 1804698:	18045901 	jmpi	1804590 <std>

0180469c <__fp_lock>:
 180469c:	0005883a 	mov	r2,zero
 18046a0:	f800283a 	ret

018046a4 <__fp_unlock>:
 18046a4:	0005883a 	mov	r2,zero
 18046a8:	f800283a 	ret

018046ac <__fp_unlock_all>:
 18046ac:	00806074 	movhi	r2,385
 18046b0:	10be1104 	addi	r2,r2,-1980
 18046b4:	11000017 	ldw	r4,0(r2)
 18046b8:	01406034 	movhi	r5,384
 18046bc:	2951a904 	addi	r5,r5,18084
 18046c0:	18052281 	jmpi	1805228 <_fwalk>

018046c4 <__fp_lock_all>:
 18046c4:	00806074 	movhi	r2,385
 18046c8:	10be1104 	addi	r2,r2,-1980
 18046cc:	11000017 	ldw	r4,0(r2)
 18046d0:	01406034 	movhi	r5,384
 18046d4:	2951a704 	addi	r5,r5,18076
 18046d8:	18052281 	jmpi	1805228 <_fwalk>

018046dc <_cleanup_r>:
 18046dc:	01406034 	movhi	r5,384
 18046e0:	295ee704 	addi	r5,r5,31644
 18046e4:	18052281 	jmpi	1805228 <_fwalk>

018046e8 <_cleanup>:
 18046e8:	00806074 	movhi	r2,385
 18046ec:	10be1204 	addi	r2,r2,-1976
 18046f0:	11000017 	ldw	r4,0(r2)
 18046f4:	18046dc1 	jmpi	18046dc <_cleanup_r>

018046f8 <__sfmoreglue>:
 18046f8:	defffc04 	addi	sp,sp,-16
 18046fc:	dc000015 	stw	r16,0(sp)
 1804700:	2821883a 	mov	r16,r5
 1804704:	dc400115 	stw	r17,4(sp)
 1804708:	01401704 	movi	r5,92
 180470c:	2023883a 	mov	r17,r4
 1804710:	8009883a 	mov	r4,r16
 1804714:	dfc00315 	stw	ra,12(sp)
 1804718:	dcc00215 	stw	r19,8(sp)
 180471c:	1809b7c0 	call	1809b7c <__mulsi3>
 1804720:	11400304 	addi	r5,r2,12
 1804724:	8809883a 	mov	r4,r17
 1804728:	1027883a 	mov	r19,r2
 180472c:	18055380 	call	1805538 <_malloc_r>
 1804730:	10c00304 	addi	r3,r2,12
 1804734:	1023883a 	mov	r17,r2
 1804738:	1809883a 	mov	r4,r3
 180473c:	980d883a 	mov	r6,r19
 1804740:	000b883a 	mov	r5,zero
 1804744:	10000b26 	beq	r2,zero,1804774 <__sfmoreglue+0x7c>
 1804748:	14000115 	stw	r16,4(r2)
 180474c:	10c00215 	stw	r3,8(r2)
 1804750:	10000015 	stw	zero,0(r2)
 1804754:	1805edc0 	call	1805edc <memset>
 1804758:	8805883a 	mov	r2,r17
 180475c:	dfc00317 	ldw	ra,12(sp)
 1804760:	dcc00217 	ldw	r19,8(sp)
 1804764:	dc400117 	ldw	r17,4(sp)
 1804768:	dc000017 	ldw	r16,0(sp)
 180476c:	dec00404 	addi	sp,sp,16
 1804770:	f800283a 	ret
 1804774:	0023883a 	mov	r17,zero
 1804778:	8805883a 	mov	r2,r17
 180477c:	dfc00317 	ldw	ra,12(sp)
 1804780:	dcc00217 	ldw	r19,8(sp)
 1804784:	dc400117 	ldw	r17,4(sp)
 1804788:	dc000017 	ldw	r16,0(sp)
 180478c:	dec00404 	addi	sp,sp,16
 1804790:	f800283a 	ret

01804794 <__sfp>:
 1804794:	defffd04 	addi	sp,sp,-12
 1804798:	00806074 	movhi	r2,385
 180479c:	10be1204 	addi	r2,r2,-1976
 18047a0:	dc000015 	stw	r16,0(sp)
 18047a4:	14000017 	ldw	r16,0(r2)
 18047a8:	dc400115 	stw	r17,4(sp)
 18047ac:	dfc00215 	stw	ra,8(sp)
 18047b0:	80800e17 	ldw	r2,56(r16)
 18047b4:	2023883a 	mov	r17,r4
 18047b8:	10002626 	beq	r2,zero,1804854 <__sfp+0xc0>
 18047bc:	8400b804 	addi	r16,r16,736
 18047c0:	80800117 	ldw	r2,4(r16)
 18047c4:	81000217 	ldw	r4,8(r16)
 18047c8:	10ffffc4 	addi	r3,r2,-1
 18047cc:	18000916 	blt	r3,zero,18047f4 <__sfp+0x60>
 18047d0:	2080030f 	ldh	r2,12(r4)
 18047d4:	10000b26 	beq	r2,zero,1804804 <__sfp+0x70>
 18047d8:	017fffc4 	movi	r5,-1
 18047dc:	00000206 	br	18047e8 <__sfp+0x54>
 18047e0:	2080030f 	ldh	r2,12(r4)
 18047e4:	10000726 	beq	r2,zero,1804804 <__sfp+0x70>
 18047e8:	18ffffc4 	addi	r3,r3,-1
 18047ec:	21001704 	addi	r4,r4,92
 18047f0:	197ffb1e 	bne	r3,r5,18047e0 <__sfp+0x4c>
 18047f4:	80800017 	ldw	r2,0(r16)
 18047f8:	10001926 	beq	r2,zero,1804860 <__sfp+0xcc>
 18047fc:	1021883a 	mov	r16,r2
 1804800:	003fef06 	br	18047c0 <__sfp+0x2c>
 1804804:	00bfffc4 	movi	r2,-1
 1804808:	00c00044 	movi	r3,1
 180480c:	2080038d 	sth	r2,14(r4)
 1804810:	20c0030d 	sth	r3,12(r4)
 1804814:	20000015 	stw	zero,0(r4)
 1804818:	20000215 	stw	zero,8(r4)
 180481c:	20000115 	stw	zero,4(r4)
 1804820:	20000415 	stw	zero,16(r4)
 1804824:	20000515 	stw	zero,20(r4)
 1804828:	20000615 	stw	zero,24(r4)
 180482c:	20000c15 	stw	zero,48(r4)
 1804830:	20000d15 	stw	zero,52(r4)
 1804834:	20001115 	stw	zero,68(r4)
 1804838:	20001215 	stw	zero,72(r4)
 180483c:	2005883a 	mov	r2,r4
 1804840:	dfc00217 	ldw	ra,8(sp)
 1804844:	dc400117 	ldw	r17,4(sp)
 1804848:	dc000017 	ldw	r16,0(sp)
 180484c:	dec00304 	addi	sp,sp,12
 1804850:	f800283a 	ret
 1804854:	8009883a 	mov	r4,r16
 1804858:	18045f80 	call	18045f8 <__sinit>
 180485c:	003fd706 	br	18047bc <__sfp+0x28>
 1804860:	8809883a 	mov	r4,r17
 1804864:	01400104 	movi	r5,4
 1804868:	18046f80 	call	18046f8 <__sfmoreglue>
 180486c:	80800015 	stw	r2,0(r16)
 1804870:	103fe21e 	bne	r2,zero,18047fc <__sfp+0x68>
 1804874:	00800304 	movi	r2,12
 1804878:	0009883a 	mov	r4,zero
 180487c:	88800015 	stw	r2,0(r17)
 1804880:	003fee06 	br	180483c <__sfp+0xa8>

01804884 <_malloc_trim_r>:
 1804884:	defffb04 	addi	sp,sp,-20
 1804888:	dcc00315 	stw	r19,12(sp)
 180488c:	04c06074 	movhi	r19,385
 1804890:	9cf86104 	addi	r19,r19,-7804
 1804894:	dc800215 	stw	r18,8(sp)
 1804898:	dc400115 	stw	r17,4(sp)
 180489c:	dc000015 	stw	r16,0(sp)
 18048a0:	2823883a 	mov	r17,r5
 18048a4:	2025883a 	mov	r18,r4
 18048a8:	dfc00415 	stw	ra,16(sp)
 18048ac:	180a9000 	call	180a900 <__malloc_lock>
 18048b0:	98800217 	ldw	r2,8(r19)
 18048b4:	9009883a 	mov	r4,r18
 18048b8:	000b883a 	mov	r5,zero
 18048bc:	10c00117 	ldw	r3,4(r2)
 18048c0:	00bfff04 	movi	r2,-4
 18048c4:	18a0703a 	and	r16,r3,r2
 18048c8:	8463c83a 	sub	r17,r16,r17
 18048cc:	8c43fbc4 	addi	r17,r17,4079
 18048d0:	8822d33a 	srli	r17,r17,12
 18048d4:	0083ffc4 	movi	r2,4095
 18048d8:	8c7fffc4 	addi	r17,r17,-1
 18048dc:	8822933a 	slli	r17,r17,12
 18048e0:	1440060e 	bge	r2,r17,18048fc <_malloc_trim_r+0x78>
 18048e4:	18076640 	call	1807664 <_sbrk_r>
 18048e8:	98c00217 	ldw	r3,8(r19)
 18048ec:	9009883a 	mov	r4,r18
 18048f0:	044bc83a 	sub	r5,zero,r17
 18048f4:	80c7883a 	add	r3,r16,r3
 18048f8:	10c00926 	beq	r2,r3,1804920 <_malloc_trim_r+0x9c>
 18048fc:	180a9200 	call	180a920 <__malloc_unlock>
 1804900:	0005883a 	mov	r2,zero
 1804904:	dfc00417 	ldw	ra,16(sp)
 1804908:	dcc00317 	ldw	r19,12(sp)
 180490c:	dc800217 	ldw	r18,8(sp)
 1804910:	dc400117 	ldw	r17,4(sp)
 1804914:	dc000017 	ldw	r16,0(sp)
 1804918:	dec00504 	addi	sp,sp,20
 180491c:	f800283a 	ret
 1804920:	9009883a 	mov	r4,r18
 1804924:	18076640 	call	1807664 <_sbrk_r>
 1804928:	844dc83a 	sub	r6,r16,r17
 180492c:	00ffffc4 	movi	r3,-1
 1804930:	9009883a 	mov	r4,r18
 1804934:	000b883a 	mov	r5,zero
 1804938:	01c06074 	movhi	r7,385
 180493c:	39c4f104 	addi	r7,r7,5060
 1804940:	31800054 	ori	r6,r6,1
 1804944:	10c00926 	beq	r2,r3,180496c <_malloc_trim_r+0xe8>
 1804948:	38800017 	ldw	r2,0(r7)
 180494c:	98c00217 	ldw	r3,8(r19)
 1804950:	9009883a 	mov	r4,r18
 1804954:	1445c83a 	sub	r2,r2,r17
 1804958:	38800015 	stw	r2,0(r7)
 180495c:	19800115 	stw	r6,4(r3)
 1804960:	180a9200 	call	180a920 <__malloc_unlock>
 1804964:	00800044 	movi	r2,1
 1804968:	003fe606 	br	1804904 <_malloc_trim_r+0x80>
 180496c:	18076640 	call	1807664 <_sbrk_r>
 1804970:	99800217 	ldw	r6,8(r19)
 1804974:	100f883a 	mov	r7,r2
 1804978:	9009883a 	mov	r4,r18
 180497c:	1187c83a 	sub	r3,r2,r6
 1804980:	008003c4 	movi	r2,15
 1804984:	19400054 	ori	r5,r3,1
 1804988:	10ffdc0e 	bge	r2,r3,18048fc <_malloc_trim_r+0x78>
 180498c:	00806074 	movhi	r2,385
 1804990:	10be1604 	addi	r2,r2,-1960
 1804994:	10c00017 	ldw	r3,0(r2)
 1804998:	00806074 	movhi	r2,385
 180499c:	1084f104 	addi	r2,r2,5060
 18049a0:	31400115 	stw	r5,4(r6)
 18049a4:	38c7c83a 	sub	r3,r7,r3
 18049a8:	10c00015 	stw	r3,0(r2)
 18049ac:	003fd306 	br	18048fc <_malloc_trim_r+0x78>

018049b0 <_free_r>:
 18049b0:	defffd04 	addi	sp,sp,-12
 18049b4:	dc400115 	stw	r17,4(sp)
 18049b8:	dc000015 	stw	r16,0(sp)
 18049bc:	dfc00215 	stw	ra,8(sp)
 18049c0:	2821883a 	mov	r16,r5
 18049c4:	2023883a 	mov	r17,r4
 18049c8:	28005a26 	beq	r5,zero,1804b34 <_free_r+0x184>
 18049cc:	180a9000 	call	180a900 <__malloc_lock>
 18049d0:	823ffe04 	addi	r8,r16,-8
 18049d4:	41400117 	ldw	r5,4(r8)
 18049d8:	00bfff84 	movi	r2,-2
 18049dc:	02806074 	movhi	r10,385
 18049e0:	52b86104 	addi	r10,r10,-7804
 18049e4:	288e703a 	and	r7,r5,r2
 18049e8:	41cd883a 	add	r6,r8,r7
 18049ec:	30c00117 	ldw	r3,4(r6)
 18049f0:	51000217 	ldw	r4,8(r10)
 18049f4:	00bfff04 	movi	r2,-4
 18049f8:	1892703a 	and	r9,r3,r2
 18049fc:	5017883a 	mov	r11,r10
 1804a00:	31006726 	beq	r6,r4,1804ba0 <_free_r+0x1f0>
 1804a04:	2880004c 	andi	r2,r5,1
 1804a08:	1005003a 	cmpeq	r2,r2,zero
 1804a0c:	32400115 	stw	r9,4(r6)
 1804a10:	10001a1e 	bne	r2,zero,1804a7c <_free_r+0xcc>
 1804a14:	000b883a 	mov	r5,zero
 1804a18:	3247883a 	add	r3,r6,r9
 1804a1c:	18800117 	ldw	r2,4(r3)
 1804a20:	1080004c 	andi	r2,r2,1
 1804a24:	1000231e 	bne	r2,zero,1804ab4 <_free_r+0x104>
 1804a28:	280ac03a 	cmpne	r5,r5,zero
 1804a2c:	3a4f883a 	add	r7,r7,r9
 1804a30:	2800451e 	bne	r5,zero,1804b48 <_free_r+0x198>
 1804a34:	31000217 	ldw	r4,8(r6)
 1804a38:	00806074 	movhi	r2,385
 1804a3c:	10b86304 	addi	r2,r2,-7796
 1804a40:	20807b26 	beq	r4,r2,1804c30 <_free_r+0x280>
 1804a44:	30800317 	ldw	r2,12(r6)
 1804a48:	3a07883a 	add	r3,r7,r8
 1804a4c:	19c00015 	stw	r7,0(r3)
 1804a50:	11000215 	stw	r4,8(r2)
 1804a54:	20800315 	stw	r2,12(r4)
 1804a58:	38800054 	ori	r2,r7,1
 1804a5c:	40800115 	stw	r2,4(r8)
 1804a60:	28001a26 	beq	r5,zero,1804acc <_free_r+0x11c>
 1804a64:	8809883a 	mov	r4,r17
 1804a68:	dfc00217 	ldw	ra,8(sp)
 1804a6c:	dc400117 	ldw	r17,4(sp)
 1804a70:	dc000017 	ldw	r16,0(sp)
 1804a74:	dec00304 	addi	sp,sp,12
 1804a78:	180a9201 	jmpi	180a920 <__malloc_unlock>
 1804a7c:	80bffe17 	ldw	r2,-8(r16)
 1804a80:	50c00204 	addi	r3,r10,8
 1804a84:	4091c83a 	sub	r8,r8,r2
 1804a88:	41000217 	ldw	r4,8(r8)
 1804a8c:	388f883a 	add	r7,r7,r2
 1804a90:	20c06126 	beq	r4,r3,1804c18 <_free_r+0x268>
 1804a94:	40800317 	ldw	r2,12(r8)
 1804a98:	3247883a 	add	r3,r6,r9
 1804a9c:	000b883a 	mov	r5,zero
 1804aa0:	11000215 	stw	r4,8(r2)
 1804aa4:	20800315 	stw	r2,12(r4)
 1804aa8:	18800117 	ldw	r2,4(r3)
 1804aac:	1080004c 	andi	r2,r2,1
 1804ab0:	103fdd26 	beq	r2,zero,1804a28 <_free_r+0x78>
 1804ab4:	38800054 	ori	r2,r7,1
 1804ab8:	3a07883a 	add	r3,r7,r8
 1804abc:	280ac03a 	cmpne	r5,r5,zero
 1804ac0:	40800115 	stw	r2,4(r8)
 1804ac4:	19c00015 	stw	r7,0(r3)
 1804ac8:	283fe61e 	bne	r5,zero,1804a64 <_free_r+0xb4>
 1804acc:	00807fc4 	movi	r2,511
 1804ad0:	11c01f2e 	bgeu	r2,r7,1804b50 <_free_r+0x1a0>
 1804ad4:	3806d27a 	srli	r3,r7,9
 1804ad8:	1800481e 	bne	r3,zero,1804bfc <_free_r+0x24c>
 1804adc:	3804d0fa 	srli	r2,r7,3
 1804ae0:	100690fa 	slli	r3,r2,3
 1804ae4:	1acd883a 	add	r6,r3,r11
 1804ae8:	31400217 	ldw	r5,8(r6)
 1804aec:	31405926 	beq	r6,r5,1804c54 <_free_r+0x2a4>
 1804af0:	28800117 	ldw	r2,4(r5)
 1804af4:	00ffff04 	movi	r3,-4
 1804af8:	10c4703a 	and	r2,r2,r3
 1804afc:	3880022e 	bgeu	r7,r2,1804b08 <_free_r+0x158>
 1804b00:	29400217 	ldw	r5,8(r5)
 1804b04:	317ffa1e 	bne	r6,r5,1804af0 <_free_r+0x140>
 1804b08:	29800317 	ldw	r6,12(r5)
 1804b0c:	41800315 	stw	r6,12(r8)
 1804b10:	41400215 	stw	r5,8(r8)
 1804b14:	8809883a 	mov	r4,r17
 1804b18:	2a000315 	stw	r8,12(r5)
 1804b1c:	32000215 	stw	r8,8(r6)
 1804b20:	dfc00217 	ldw	ra,8(sp)
 1804b24:	dc400117 	ldw	r17,4(sp)
 1804b28:	dc000017 	ldw	r16,0(sp)
 1804b2c:	dec00304 	addi	sp,sp,12
 1804b30:	180a9201 	jmpi	180a920 <__malloc_unlock>
 1804b34:	dfc00217 	ldw	ra,8(sp)
 1804b38:	dc400117 	ldw	r17,4(sp)
 1804b3c:	dc000017 	ldw	r16,0(sp)
 1804b40:	dec00304 	addi	sp,sp,12
 1804b44:	f800283a 	ret
 1804b48:	31000217 	ldw	r4,8(r6)
 1804b4c:	003fbd06 	br	1804a44 <_free_r+0x94>
 1804b50:	3806d0fa 	srli	r3,r7,3
 1804b54:	00800044 	movi	r2,1
 1804b58:	51400117 	ldw	r5,4(r10)
 1804b5c:	180890fa 	slli	r4,r3,3
 1804b60:	1807d0ba 	srai	r3,r3,2
 1804b64:	22c9883a 	add	r4,r4,r11
 1804b68:	21800217 	ldw	r6,8(r4)
 1804b6c:	10c4983a 	sll	r2,r2,r3
 1804b70:	41000315 	stw	r4,12(r8)
 1804b74:	41800215 	stw	r6,8(r8)
 1804b78:	288ab03a 	or	r5,r5,r2
 1804b7c:	22000215 	stw	r8,8(r4)
 1804b80:	8809883a 	mov	r4,r17
 1804b84:	51400115 	stw	r5,4(r10)
 1804b88:	32000315 	stw	r8,12(r6)
 1804b8c:	dfc00217 	ldw	ra,8(sp)
 1804b90:	dc400117 	ldw	r17,4(sp)
 1804b94:	dc000017 	ldw	r16,0(sp)
 1804b98:	dec00304 	addi	sp,sp,12
 1804b9c:	180a9201 	jmpi	180a920 <__malloc_unlock>
 1804ba0:	2880004c 	andi	r2,r5,1
 1804ba4:	3a4d883a 	add	r6,r7,r9
 1804ba8:	1000071e 	bne	r2,zero,1804bc8 <_free_r+0x218>
 1804bac:	80bffe17 	ldw	r2,-8(r16)
 1804bb0:	4091c83a 	sub	r8,r8,r2
 1804bb4:	41000317 	ldw	r4,12(r8)
 1804bb8:	40c00217 	ldw	r3,8(r8)
 1804bbc:	308d883a 	add	r6,r6,r2
 1804bc0:	20c00215 	stw	r3,8(r4)
 1804bc4:	19000315 	stw	r4,12(r3)
 1804bc8:	00806074 	movhi	r2,385
 1804bcc:	10be1504 	addi	r2,r2,-1964
 1804bd0:	11000017 	ldw	r4,0(r2)
 1804bd4:	30c00054 	ori	r3,r6,1
 1804bd8:	52000215 	stw	r8,8(r10)
 1804bdc:	40c00115 	stw	r3,4(r8)
 1804be0:	313fa036 	bltu	r6,r4,1804a64 <_free_r+0xb4>
 1804be4:	00806074 	movhi	r2,385
 1804be8:	1084e704 	addi	r2,r2,5020
 1804bec:	11400017 	ldw	r5,0(r2)
 1804bf0:	8809883a 	mov	r4,r17
 1804bf4:	18048840 	call	1804884 <_malloc_trim_r>
 1804bf8:	003f9a06 	br	1804a64 <_free_r+0xb4>
 1804bfc:	00800104 	movi	r2,4
 1804c00:	10c0072e 	bgeu	r2,r3,1804c20 <_free_r+0x270>
 1804c04:	00800504 	movi	r2,20
 1804c08:	10c01936 	bltu	r2,r3,1804c70 <_free_r+0x2c0>
 1804c0c:	188016c4 	addi	r2,r3,91
 1804c10:	100690fa 	slli	r3,r2,3
 1804c14:	003fb306 	br	1804ae4 <_free_r+0x134>
 1804c18:	01400044 	movi	r5,1
 1804c1c:	003f7e06 	br	1804a18 <_free_r+0x68>
 1804c20:	3804d1ba 	srli	r2,r7,6
 1804c24:	10800e04 	addi	r2,r2,56
 1804c28:	100690fa 	slli	r3,r2,3
 1804c2c:	003fad06 	br	1804ae4 <_free_r+0x134>
 1804c30:	22000315 	stw	r8,12(r4)
 1804c34:	22000215 	stw	r8,8(r4)
 1804c38:	3a05883a 	add	r2,r7,r8
 1804c3c:	38c00054 	ori	r3,r7,1
 1804c40:	11c00015 	stw	r7,0(r2)
 1804c44:	41000215 	stw	r4,8(r8)
 1804c48:	40c00115 	stw	r3,4(r8)
 1804c4c:	41000315 	stw	r4,12(r8)
 1804c50:	003f8406 	br	1804a64 <_free_r+0xb4>
 1804c54:	1005d0ba 	srai	r2,r2,2
 1804c58:	00c00044 	movi	r3,1
 1804c5c:	51000117 	ldw	r4,4(r10)
 1804c60:	1886983a 	sll	r3,r3,r2
 1804c64:	20c8b03a 	or	r4,r4,r3
 1804c68:	51000115 	stw	r4,4(r10)
 1804c6c:	003fa706 	br	1804b0c <_free_r+0x15c>
 1804c70:	00801504 	movi	r2,84
 1804c74:	10c00436 	bltu	r2,r3,1804c88 <_free_r+0x2d8>
 1804c78:	3804d33a 	srli	r2,r7,12
 1804c7c:	10801b84 	addi	r2,r2,110
 1804c80:	100690fa 	slli	r3,r2,3
 1804c84:	003f9706 	br	1804ae4 <_free_r+0x134>
 1804c88:	00805504 	movi	r2,340
 1804c8c:	10c00436 	bltu	r2,r3,1804ca0 <_free_r+0x2f0>
 1804c90:	3804d3fa 	srli	r2,r7,15
 1804c94:	10801dc4 	addi	r2,r2,119
 1804c98:	100690fa 	slli	r3,r2,3
 1804c9c:	003f9106 	br	1804ae4 <_free_r+0x134>
 1804ca0:	00815504 	movi	r2,1364
 1804ca4:	10c0032e 	bgeu	r2,r3,1804cb4 <_free_r+0x304>
 1804ca8:	00801f84 	movi	r2,126
 1804cac:	00c0fc04 	movi	r3,1008
 1804cb0:	003f8c06 	br	1804ae4 <_free_r+0x134>
 1804cb4:	3804d4ba 	srli	r2,r7,18
 1804cb8:	10801f04 	addi	r2,r2,124
 1804cbc:	100690fa 	slli	r3,r2,3
 1804cc0:	003f8806 	br	1804ae4 <_free_r+0x134>

01804cc4 <__sfvwrite_r>:
 1804cc4:	30800217 	ldw	r2,8(r6)
 1804cc8:	defff504 	addi	sp,sp,-44
 1804ccc:	df000915 	stw	fp,36(sp)
 1804cd0:	dd800715 	stw	r22,28(sp)
 1804cd4:	dc800315 	stw	r18,12(sp)
 1804cd8:	dfc00a15 	stw	ra,40(sp)
 1804cdc:	ddc00815 	stw	r23,32(sp)
 1804ce0:	dd400615 	stw	r21,24(sp)
 1804ce4:	dd000515 	stw	r20,20(sp)
 1804ce8:	dcc00415 	stw	r19,16(sp)
 1804cec:	dc400215 	stw	r17,8(sp)
 1804cf0:	dc000115 	stw	r16,4(sp)
 1804cf4:	302d883a 	mov	r22,r6
 1804cf8:	2039883a 	mov	fp,r4
 1804cfc:	2825883a 	mov	r18,r5
 1804d00:	10001c26 	beq	r2,zero,1804d74 <__sfvwrite_r+0xb0>
 1804d04:	29c0030b 	ldhu	r7,12(r5)
 1804d08:	3880020c 	andi	r2,r7,8
 1804d0c:	10002726 	beq	r2,zero,1804dac <__sfvwrite_r+0xe8>
 1804d10:	28800417 	ldw	r2,16(r5)
 1804d14:	10002526 	beq	r2,zero,1804dac <__sfvwrite_r+0xe8>
 1804d18:	3880008c 	andi	r2,r7,2
 1804d1c:	b5400017 	ldw	r21,0(r22)
 1804d20:	10002826 	beq	r2,zero,1804dc4 <__sfvwrite_r+0x100>
 1804d24:	0021883a 	mov	r16,zero
 1804d28:	0023883a 	mov	r17,zero
 1804d2c:	880d883a 	mov	r6,r17
 1804d30:	e009883a 	mov	r4,fp
 1804d34:	00810004 	movi	r2,1024
 1804d38:	80006e26 	beq	r16,zero,1804ef4 <__sfvwrite_r+0x230>
 1804d3c:	800f883a 	mov	r7,r16
 1804d40:	91400717 	ldw	r5,28(r18)
 1804d44:	1400012e 	bgeu	r2,r16,1804d4c <__sfvwrite_r+0x88>
 1804d48:	100f883a 	mov	r7,r2
 1804d4c:	90c00917 	ldw	r3,36(r18)
 1804d50:	183ee83a 	callr	r3
 1804d54:	1007883a 	mov	r3,r2
 1804d58:	80a1c83a 	sub	r16,r16,r2
 1804d5c:	88a3883a 	add	r17,r17,r2
 1804d60:	00806d0e 	bge	zero,r2,1804f18 <__sfvwrite_r+0x254>
 1804d64:	b0800217 	ldw	r2,8(r22)
 1804d68:	10c5c83a 	sub	r2,r2,r3
 1804d6c:	b0800215 	stw	r2,8(r22)
 1804d70:	103fee1e 	bne	r2,zero,1804d2c <__sfvwrite_r+0x68>
 1804d74:	0009883a 	mov	r4,zero
 1804d78:	2005883a 	mov	r2,r4
 1804d7c:	dfc00a17 	ldw	ra,40(sp)
 1804d80:	df000917 	ldw	fp,36(sp)
 1804d84:	ddc00817 	ldw	r23,32(sp)
 1804d88:	dd800717 	ldw	r22,28(sp)
 1804d8c:	dd400617 	ldw	r21,24(sp)
 1804d90:	dd000517 	ldw	r20,20(sp)
 1804d94:	dcc00417 	ldw	r19,16(sp)
 1804d98:	dc800317 	ldw	r18,12(sp)
 1804d9c:	dc400217 	ldw	r17,8(sp)
 1804da0:	dc000117 	ldw	r16,4(sp)
 1804da4:	dec00b04 	addi	sp,sp,44
 1804da8:	f800283a 	ret
 1804dac:	1802a2c0 	call	1802a2c <__swsetup_r>
 1804db0:	1000e41e 	bne	r2,zero,1805144 <__sfvwrite_r+0x480>
 1804db4:	91c0030b 	ldhu	r7,12(r18)
 1804db8:	b5400017 	ldw	r21,0(r22)
 1804dbc:	3880008c 	andi	r2,r7,2
 1804dc0:	103fd81e 	bne	r2,zero,1804d24 <__sfvwrite_r+0x60>
 1804dc4:	3880004c 	andi	r2,r7,1
 1804dc8:	1005003a 	cmpeq	r2,r2,zero
 1804dcc:	10005726 	beq	r2,zero,1804f2c <__sfvwrite_r+0x268>
 1804dd0:	0029883a 	mov	r20,zero
 1804dd4:	002f883a 	mov	r23,zero
 1804dd8:	a0004226 	beq	r20,zero,1804ee4 <__sfvwrite_r+0x220>
 1804ddc:	3880800c 	andi	r2,r7,512
 1804de0:	94000217 	ldw	r16,8(r18)
 1804de4:	10008b26 	beq	r2,zero,1805014 <__sfvwrite_r+0x350>
 1804de8:	800d883a 	mov	r6,r16
 1804dec:	a400a536 	bltu	r20,r16,1805084 <__sfvwrite_r+0x3c0>
 1804df0:	3881200c 	andi	r2,r7,1152
 1804df4:	10002726 	beq	r2,zero,1804e94 <__sfvwrite_r+0x1d0>
 1804df8:	90800517 	ldw	r2,20(r18)
 1804dfc:	92000417 	ldw	r8,16(r18)
 1804e00:	91400017 	ldw	r5,0(r18)
 1804e04:	1087883a 	add	r3,r2,r2
 1804e08:	1887883a 	add	r3,r3,r2
 1804e0c:	1808d7fa 	srli	r4,r3,31
 1804e10:	2a21c83a 	sub	r16,r5,r8
 1804e14:	80800044 	addi	r2,r16,1
 1804e18:	20c9883a 	add	r4,r4,r3
 1804e1c:	2027d07a 	srai	r19,r4,1
 1804e20:	a085883a 	add	r2,r20,r2
 1804e24:	980d883a 	mov	r6,r19
 1804e28:	9880022e 	bgeu	r19,r2,1804e34 <__sfvwrite_r+0x170>
 1804e2c:	1027883a 	mov	r19,r2
 1804e30:	100d883a 	mov	r6,r2
 1804e34:	3881000c 	andi	r2,r7,1024
 1804e38:	1000b826 	beq	r2,zero,180511c <__sfvwrite_r+0x458>
 1804e3c:	300b883a 	mov	r5,r6
 1804e40:	e009883a 	mov	r4,fp
 1804e44:	18055380 	call	1805538 <_malloc_r>
 1804e48:	10003126 	beq	r2,zero,1804f10 <__sfvwrite_r+0x24c>
 1804e4c:	91400417 	ldw	r5,16(r18)
 1804e50:	1009883a 	mov	r4,r2
 1804e54:	800d883a 	mov	r6,r16
 1804e58:	1023883a 	mov	r17,r2
 1804e5c:	1805d5c0 	call	1805d5c <memcpy>
 1804e60:	90c0030b 	ldhu	r3,12(r18)
 1804e64:	00beffc4 	movi	r2,-1025
 1804e68:	1886703a 	and	r3,r3,r2
 1804e6c:	18c02014 	ori	r3,r3,128
 1804e70:	90c0030d 	sth	r3,12(r18)
 1804e74:	9c07c83a 	sub	r3,r19,r16
 1804e78:	8c05883a 	add	r2,r17,r16
 1804e7c:	a00d883a 	mov	r6,r20
 1804e80:	a021883a 	mov	r16,r20
 1804e84:	90800015 	stw	r2,0(r18)
 1804e88:	90c00215 	stw	r3,8(r18)
 1804e8c:	94400415 	stw	r17,16(r18)
 1804e90:	94c00515 	stw	r19,20(r18)
 1804e94:	91000017 	ldw	r4,0(r18)
 1804e98:	b80b883a 	mov	r5,r23
 1804e9c:	a023883a 	mov	r17,r20
 1804ea0:	1805dfc0 	call	1805dfc <memmove>
 1804ea4:	90c00217 	ldw	r3,8(r18)
 1804ea8:	90800017 	ldw	r2,0(r18)
 1804eac:	a027883a 	mov	r19,r20
 1804eb0:	1c07c83a 	sub	r3,r3,r16
 1804eb4:	1405883a 	add	r2,r2,r16
 1804eb8:	90c00215 	stw	r3,8(r18)
 1804ebc:	a021883a 	mov	r16,r20
 1804ec0:	90800015 	stw	r2,0(r18)
 1804ec4:	b0800217 	ldw	r2,8(r22)
 1804ec8:	1405c83a 	sub	r2,r2,r16
 1804ecc:	b0800215 	stw	r2,8(r22)
 1804ed0:	103fa826 	beq	r2,zero,1804d74 <__sfvwrite_r+0xb0>
 1804ed4:	a469c83a 	sub	r20,r20,r17
 1804ed8:	91c0030b 	ldhu	r7,12(r18)
 1804edc:	bcef883a 	add	r23,r23,r19
 1804ee0:	a03fbe1e 	bne	r20,zero,1804ddc <__sfvwrite_r+0x118>
 1804ee4:	adc00017 	ldw	r23,0(r21)
 1804ee8:	ad000117 	ldw	r20,4(r21)
 1804eec:	ad400204 	addi	r21,r21,8
 1804ef0:	003fb906 	br	1804dd8 <__sfvwrite_r+0x114>
 1804ef4:	ac400017 	ldw	r17,0(r21)
 1804ef8:	ac000117 	ldw	r16,4(r21)
 1804efc:	ad400204 	addi	r21,r21,8
 1804f00:	003f8a06 	br	1804d2c <__sfvwrite_r+0x68>
 1804f04:	91400417 	ldw	r5,16(r18)
 1804f08:	e009883a 	mov	r4,fp
 1804f0c:	18049b00 	call	18049b0 <_free_r>
 1804f10:	00800304 	movi	r2,12
 1804f14:	e0800015 	stw	r2,0(fp)
 1804f18:	9080030b 	ldhu	r2,12(r18)
 1804f1c:	013fffc4 	movi	r4,-1
 1804f20:	10801014 	ori	r2,r2,64
 1804f24:	9080030d 	sth	r2,12(r18)
 1804f28:	003f9306 	br	1804d78 <__sfvwrite_r+0xb4>
 1804f2c:	0027883a 	mov	r19,zero
 1804f30:	002f883a 	mov	r23,zero
 1804f34:	d8000015 	stw	zero,0(sp)
 1804f38:	0029883a 	mov	r20,zero
 1804f3c:	98001e26 	beq	r19,zero,1804fb8 <__sfvwrite_r+0x2f4>
 1804f40:	d8c00017 	ldw	r3,0(sp)
 1804f44:	1804c03a 	cmpne	r2,r3,zero
 1804f48:	10005e26 	beq	r2,zero,18050c4 <__sfvwrite_r+0x400>
 1804f4c:	9821883a 	mov	r16,r19
 1804f50:	a4c0012e 	bgeu	r20,r19,1804f58 <__sfvwrite_r+0x294>
 1804f54:	a021883a 	mov	r16,r20
 1804f58:	91000017 	ldw	r4,0(r18)
 1804f5c:	90800417 	ldw	r2,16(r18)
 1804f60:	91800217 	ldw	r6,8(r18)
 1804f64:	91c00517 	ldw	r7,20(r18)
 1804f68:	1100022e 	bgeu	r2,r4,1804f74 <__sfvwrite_r+0x2b0>
 1804f6c:	31e3883a 	add	r17,r6,r7
 1804f70:	8c001616 	blt	r17,r16,1804fcc <__sfvwrite_r+0x308>
 1804f74:	81c03816 	blt	r16,r7,1805058 <__sfvwrite_r+0x394>
 1804f78:	90c00917 	ldw	r3,36(r18)
 1804f7c:	91400717 	ldw	r5,28(r18)
 1804f80:	e009883a 	mov	r4,fp
 1804f84:	b80d883a 	mov	r6,r23
 1804f88:	183ee83a 	callr	r3
 1804f8c:	1023883a 	mov	r17,r2
 1804f90:	00bfe10e 	bge	zero,r2,1804f18 <__sfvwrite_r+0x254>
 1804f94:	a469c83a 	sub	r20,r20,r17
 1804f98:	a0001826 	beq	r20,zero,1804ffc <__sfvwrite_r+0x338>
 1804f9c:	b0800217 	ldw	r2,8(r22)
 1804fa0:	1445c83a 	sub	r2,r2,r17
 1804fa4:	b0800215 	stw	r2,8(r22)
 1804fa8:	103f7226 	beq	r2,zero,1804d74 <__sfvwrite_r+0xb0>
 1804fac:	9c67c83a 	sub	r19,r19,r17
 1804fb0:	bc6f883a 	add	r23,r23,r17
 1804fb4:	983fe21e 	bne	r19,zero,1804f40 <__sfvwrite_r+0x27c>
 1804fb8:	adc00017 	ldw	r23,0(r21)
 1804fbc:	acc00117 	ldw	r19,4(r21)
 1804fc0:	ad400204 	addi	r21,r21,8
 1804fc4:	d8000015 	stw	zero,0(sp)
 1804fc8:	003fdc06 	br	1804f3c <__sfvwrite_r+0x278>
 1804fcc:	b80b883a 	mov	r5,r23
 1804fd0:	880d883a 	mov	r6,r17
 1804fd4:	1805dfc0 	call	1805dfc <memmove>
 1804fd8:	90c00017 	ldw	r3,0(r18)
 1804fdc:	e009883a 	mov	r4,fp
 1804fe0:	900b883a 	mov	r5,r18
 1804fe4:	1c47883a 	add	r3,r3,r17
 1804fe8:	90c00015 	stw	r3,0(r18)
 1804fec:	18043600 	call	1804360 <_fflush_r>
 1804ff0:	103fc91e 	bne	r2,zero,1804f18 <__sfvwrite_r+0x254>
 1804ff4:	a469c83a 	sub	r20,r20,r17
 1804ff8:	a03fe81e 	bne	r20,zero,1804f9c <__sfvwrite_r+0x2d8>
 1804ffc:	e009883a 	mov	r4,fp
 1805000:	900b883a 	mov	r5,r18
 1805004:	18043600 	call	1804360 <_fflush_r>
 1805008:	103fc31e 	bne	r2,zero,1804f18 <__sfvwrite_r+0x254>
 180500c:	d8000015 	stw	zero,0(sp)
 1805010:	003fe206 	br	1804f9c <__sfvwrite_r+0x2d8>
 1805014:	91000017 	ldw	r4,0(r18)
 1805018:	90800417 	ldw	r2,16(r18)
 180501c:	1100022e 	bgeu	r2,r4,1805028 <__sfvwrite_r+0x364>
 1805020:	8023883a 	mov	r17,r16
 1805024:	85003136 	bltu	r16,r20,18050ec <__sfvwrite_r+0x428>
 1805028:	91c00517 	ldw	r7,20(r18)
 180502c:	a1c01836 	bltu	r20,r7,1805090 <__sfvwrite_r+0x3cc>
 1805030:	90c00917 	ldw	r3,36(r18)
 1805034:	91400717 	ldw	r5,28(r18)
 1805038:	e009883a 	mov	r4,fp
 180503c:	b80d883a 	mov	r6,r23
 1805040:	183ee83a 	callr	r3
 1805044:	1021883a 	mov	r16,r2
 1805048:	00bfb30e 	bge	zero,r2,1804f18 <__sfvwrite_r+0x254>
 180504c:	1023883a 	mov	r17,r2
 1805050:	1027883a 	mov	r19,r2
 1805054:	003f9b06 	br	1804ec4 <__sfvwrite_r+0x200>
 1805058:	b80b883a 	mov	r5,r23
 180505c:	800d883a 	mov	r6,r16
 1805060:	1805dfc0 	call	1805dfc <memmove>
 1805064:	90c00217 	ldw	r3,8(r18)
 1805068:	90800017 	ldw	r2,0(r18)
 180506c:	8023883a 	mov	r17,r16
 1805070:	1c07c83a 	sub	r3,r3,r16
 1805074:	1405883a 	add	r2,r2,r16
 1805078:	90c00215 	stw	r3,8(r18)
 180507c:	90800015 	stw	r2,0(r18)
 1805080:	003fc406 	br	1804f94 <__sfvwrite_r+0x2d0>
 1805084:	a00d883a 	mov	r6,r20
 1805088:	a021883a 	mov	r16,r20
 180508c:	003f8106 	br	1804e94 <__sfvwrite_r+0x1d0>
 1805090:	b80b883a 	mov	r5,r23
 1805094:	a00d883a 	mov	r6,r20
 1805098:	1805dfc0 	call	1805dfc <memmove>
 180509c:	90c00217 	ldw	r3,8(r18)
 18050a0:	90800017 	ldw	r2,0(r18)
 18050a4:	a021883a 	mov	r16,r20
 18050a8:	1d07c83a 	sub	r3,r3,r20
 18050ac:	1505883a 	add	r2,r2,r20
 18050b0:	a023883a 	mov	r17,r20
 18050b4:	a027883a 	mov	r19,r20
 18050b8:	90c00215 	stw	r3,8(r18)
 18050bc:	90800015 	stw	r2,0(r18)
 18050c0:	003f8006 	br	1804ec4 <__sfvwrite_r+0x200>
 18050c4:	b809883a 	mov	r4,r23
 18050c8:	01400284 	movi	r5,10
 18050cc:	980d883a 	mov	r6,r19
 18050d0:	1805c780 	call	1805c78 <memchr>
 18050d4:	10001726 	beq	r2,zero,1805134 <__sfvwrite_r+0x470>
 18050d8:	15c5c83a 	sub	r2,r2,r23
 18050dc:	15000044 	addi	r20,r2,1
 18050e0:	00800044 	movi	r2,1
 18050e4:	d8800015 	stw	r2,0(sp)
 18050e8:	003f9806 	br	1804f4c <__sfvwrite_r+0x288>
 18050ec:	b80b883a 	mov	r5,r23
 18050f0:	800d883a 	mov	r6,r16
 18050f4:	1805dfc0 	call	1805dfc <memmove>
 18050f8:	90c00017 	ldw	r3,0(r18)
 18050fc:	e009883a 	mov	r4,fp
 1805100:	900b883a 	mov	r5,r18
 1805104:	1c07883a 	add	r3,r3,r16
 1805108:	90c00015 	stw	r3,0(r18)
 180510c:	8027883a 	mov	r19,r16
 1805110:	18043600 	call	1804360 <_fflush_r>
 1805114:	103f6b26 	beq	r2,zero,1804ec4 <__sfvwrite_r+0x200>
 1805118:	003f7f06 	br	1804f18 <__sfvwrite_r+0x254>
 180511c:	400b883a 	mov	r5,r8
 1805120:	e009883a 	mov	r4,fp
 1805124:	18070000 	call	1807000 <_realloc_r>
 1805128:	103f7626 	beq	r2,zero,1804f04 <__sfvwrite_r+0x240>
 180512c:	1023883a 	mov	r17,r2
 1805130:	003f5006 	br	1804e74 <__sfvwrite_r+0x1b0>
 1805134:	00c00044 	movi	r3,1
 1805138:	9d000044 	addi	r20,r19,1
 180513c:	d8c00015 	stw	r3,0(sp)
 1805140:	003f8206 	br	1804f4c <__sfvwrite_r+0x288>
 1805144:	9080030b 	ldhu	r2,12(r18)
 1805148:	00c00244 	movi	r3,9
 180514c:	013fffc4 	movi	r4,-1
 1805150:	10801014 	ori	r2,r2,64
 1805154:	9080030d 	sth	r2,12(r18)
 1805158:	e0c00015 	stw	r3,0(fp)
 180515c:	003f0606 	br	1804d78 <__sfvwrite_r+0xb4>

01805160 <_fwalk_reent>:
 1805160:	defff704 	addi	sp,sp,-36
 1805164:	dcc00315 	stw	r19,12(sp)
 1805168:	24c0b804 	addi	r19,r4,736
 180516c:	dd800615 	stw	r22,24(sp)
 1805170:	dd400515 	stw	r21,20(sp)
 1805174:	dfc00815 	stw	ra,32(sp)
 1805178:	ddc00715 	stw	r23,28(sp)
 180517c:	dd000415 	stw	r20,16(sp)
 1805180:	dc800215 	stw	r18,8(sp)
 1805184:	dc400115 	stw	r17,4(sp)
 1805188:	dc000015 	stw	r16,0(sp)
 180518c:	202b883a 	mov	r21,r4
 1805190:	282d883a 	mov	r22,r5
 1805194:	18045e80 	call	18045e8 <__sfp_lock_acquire>
 1805198:	98002126 	beq	r19,zero,1805220 <_fwalk_reent+0xc0>
 180519c:	002f883a 	mov	r23,zero
 18051a0:	9c800117 	ldw	r18,4(r19)
 18051a4:	9c000217 	ldw	r16,8(r19)
 18051a8:	90bfffc4 	addi	r2,r18,-1
 18051ac:	10000d16 	blt	r2,zero,18051e4 <_fwalk_reent+0x84>
 18051b0:	0023883a 	mov	r17,zero
 18051b4:	053fffc4 	movi	r20,-1
 18051b8:	8080030f 	ldh	r2,12(r16)
 18051bc:	8c400044 	addi	r17,r17,1
 18051c0:	10000626 	beq	r2,zero,18051dc <_fwalk_reent+0x7c>
 18051c4:	8080038f 	ldh	r2,14(r16)
 18051c8:	800b883a 	mov	r5,r16
 18051cc:	a809883a 	mov	r4,r21
 18051d0:	15000226 	beq	r2,r20,18051dc <_fwalk_reent+0x7c>
 18051d4:	b03ee83a 	callr	r22
 18051d8:	b8aeb03a 	or	r23,r23,r2
 18051dc:	84001704 	addi	r16,r16,92
 18051e0:	947ff51e 	bne	r18,r17,18051b8 <_fwalk_reent+0x58>
 18051e4:	9cc00017 	ldw	r19,0(r19)
 18051e8:	983fed1e 	bne	r19,zero,18051a0 <_fwalk_reent+0x40>
 18051ec:	18045ec0 	call	18045ec <__sfp_lock_release>
 18051f0:	b805883a 	mov	r2,r23
 18051f4:	dfc00817 	ldw	ra,32(sp)
 18051f8:	ddc00717 	ldw	r23,28(sp)
 18051fc:	dd800617 	ldw	r22,24(sp)
 1805200:	dd400517 	ldw	r21,20(sp)
 1805204:	dd000417 	ldw	r20,16(sp)
 1805208:	dcc00317 	ldw	r19,12(sp)
 180520c:	dc800217 	ldw	r18,8(sp)
 1805210:	dc400117 	ldw	r17,4(sp)
 1805214:	dc000017 	ldw	r16,0(sp)
 1805218:	dec00904 	addi	sp,sp,36
 180521c:	f800283a 	ret
 1805220:	002f883a 	mov	r23,zero
 1805224:	003ff106 	br	18051ec <_fwalk_reent+0x8c>

01805228 <_fwalk>:
 1805228:	defff804 	addi	sp,sp,-32
 180522c:	dcc00315 	stw	r19,12(sp)
 1805230:	24c0b804 	addi	r19,r4,736
 1805234:	dd400515 	stw	r21,20(sp)
 1805238:	dfc00715 	stw	ra,28(sp)
 180523c:	dd800615 	stw	r22,24(sp)
 1805240:	dd000415 	stw	r20,16(sp)
 1805244:	dc800215 	stw	r18,8(sp)
 1805248:	dc400115 	stw	r17,4(sp)
 180524c:	dc000015 	stw	r16,0(sp)
 1805250:	282b883a 	mov	r21,r5
 1805254:	18045e80 	call	18045e8 <__sfp_lock_acquire>
 1805258:	98001f26 	beq	r19,zero,18052d8 <_fwalk+0xb0>
 180525c:	002d883a 	mov	r22,zero
 1805260:	9c800117 	ldw	r18,4(r19)
 1805264:	9c000217 	ldw	r16,8(r19)
 1805268:	90bfffc4 	addi	r2,r18,-1
 180526c:	10000c16 	blt	r2,zero,18052a0 <_fwalk+0x78>
 1805270:	0023883a 	mov	r17,zero
 1805274:	053fffc4 	movi	r20,-1
 1805278:	8080030f 	ldh	r2,12(r16)
 180527c:	8c400044 	addi	r17,r17,1
 1805280:	10000526 	beq	r2,zero,1805298 <_fwalk+0x70>
 1805284:	8080038f 	ldh	r2,14(r16)
 1805288:	8009883a 	mov	r4,r16
 180528c:	15000226 	beq	r2,r20,1805298 <_fwalk+0x70>
 1805290:	a83ee83a 	callr	r21
 1805294:	b0acb03a 	or	r22,r22,r2
 1805298:	84001704 	addi	r16,r16,92
 180529c:	947ff61e 	bne	r18,r17,1805278 <_fwalk+0x50>
 18052a0:	9cc00017 	ldw	r19,0(r19)
 18052a4:	983fee1e 	bne	r19,zero,1805260 <_fwalk+0x38>
 18052a8:	18045ec0 	call	18045ec <__sfp_lock_release>
 18052ac:	b005883a 	mov	r2,r22
 18052b0:	dfc00717 	ldw	ra,28(sp)
 18052b4:	dd800617 	ldw	r22,24(sp)
 18052b8:	dd400517 	ldw	r21,20(sp)
 18052bc:	dd000417 	ldw	r20,16(sp)
 18052c0:	dcc00317 	ldw	r19,12(sp)
 18052c4:	dc800217 	ldw	r18,8(sp)
 18052c8:	dc400117 	ldw	r17,4(sp)
 18052cc:	dc000017 	ldw	r16,0(sp)
 18052d0:	dec00804 	addi	sp,sp,32
 18052d4:	f800283a 	ret
 18052d8:	002d883a 	mov	r22,zero
 18052dc:	003ff206 	br	18052a8 <_fwalk+0x80>

018052e0 <__locale_charset>:
 18052e0:	d0a00317 	ldw	r2,-32756(gp)
 18052e4:	f800283a 	ret

018052e8 <_localeconv_r>:
 18052e8:	00806074 	movhi	r2,385
 18052ec:	10b6a704 	addi	r2,r2,-9572
 18052f0:	f800283a 	ret

018052f4 <localeconv>:
 18052f4:	00806074 	movhi	r2,385
 18052f8:	10be1104 	addi	r2,r2,-1980
 18052fc:	11000017 	ldw	r4,0(r2)
 1805300:	18052e81 	jmpi	18052e8 <_localeconv_r>

01805304 <_setlocale_r>:
 1805304:	defffc04 	addi	sp,sp,-16
 1805308:	00c06074 	movhi	r3,385
 180530c:	18f6a204 	addi	r3,r3,-9592
 1805310:	dc800215 	stw	r18,8(sp)
 1805314:	dc400115 	stw	r17,4(sp)
 1805318:	dc000015 	stw	r16,0(sp)
 180531c:	2023883a 	mov	r17,r4
 1805320:	2825883a 	mov	r18,r5
 1805324:	dfc00315 	stw	ra,12(sp)
 1805328:	3021883a 	mov	r16,r6
 180532c:	3009883a 	mov	r4,r6
 1805330:	180b883a 	mov	r5,r3
 1805334:	30000926 	beq	r6,zero,180535c <_setlocale_r+0x58>
 1805338:	18078200 	call	1807820 <strcmp>
 180533c:	8009883a 	mov	r4,r16
 1805340:	01406074 	movhi	r5,385
 1805344:	29768d04 	addi	r5,r5,-9676
 1805348:	10000b1e 	bne	r2,zero,1805378 <_setlocale_r+0x74>
 180534c:	8c000d15 	stw	r16,52(r17)
 1805350:	8c800c15 	stw	r18,48(r17)
 1805354:	00c06074 	movhi	r3,385
 1805358:	18f6a204 	addi	r3,r3,-9592
 180535c:	1805883a 	mov	r2,r3
 1805360:	dfc00317 	ldw	ra,12(sp)
 1805364:	dc800217 	ldw	r18,8(sp)
 1805368:	dc400117 	ldw	r17,4(sp)
 180536c:	dc000017 	ldw	r16,0(sp)
 1805370:	dec00404 	addi	sp,sp,16
 1805374:	f800283a 	ret
 1805378:	18078200 	call	1807820 <strcmp>
 180537c:	0007883a 	mov	r3,zero
 1805380:	103ff226 	beq	r2,zero,180534c <_setlocale_r+0x48>
 1805384:	003ff506 	br	180535c <_setlocale_r+0x58>

01805388 <setlocale>:
 1805388:	01806074 	movhi	r6,385
 180538c:	31be1104 	addi	r6,r6,-1980
 1805390:	2007883a 	mov	r3,r4
 1805394:	31000017 	ldw	r4,0(r6)
 1805398:	280d883a 	mov	r6,r5
 180539c:	180b883a 	mov	r5,r3
 18053a0:	18053041 	jmpi	1805304 <_setlocale_r>

018053a4 <__smakebuf_r>:
 18053a4:	2880030b 	ldhu	r2,12(r5)
 18053a8:	deffed04 	addi	sp,sp,-76
 18053ac:	dc401015 	stw	r17,64(sp)
 18053b0:	1080008c 	andi	r2,r2,2
 18053b4:	dc000f15 	stw	r16,60(sp)
 18053b8:	dfc01215 	stw	ra,72(sp)
 18053bc:	dc801115 	stw	r18,68(sp)
 18053c0:	2821883a 	mov	r16,r5
 18053c4:	2023883a 	mov	r17,r4
 18053c8:	10000b26 	beq	r2,zero,18053f8 <__smakebuf_r+0x54>
 18053cc:	28c010c4 	addi	r3,r5,67
 18053d0:	00800044 	movi	r2,1
 18053d4:	28800515 	stw	r2,20(r5)
 18053d8:	28c00415 	stw	r3,16(r5)
 18053dc:	28c00015 	stw	r3,0(r5)
 18053e0:	dfc01217 	ldw	ra,72(sp)
 18053e4:	dc801117 	ldw	r18,68(sp)
 18053e8:	dc401017 	ldw	r17,64(sp)
 18053ec:	dc000f17 	ldw	r16,60(sp)
 18053f0:	dec01304 	addi	sp,sp,76
 18053f4:	f800283a 	ret
 18053f8:	2940038f 	ldh	r5,14(r5)
 18053fc:	28002116 	blt	r5,zero,1805484 <__smakebuf_r+0xe0>
 1805400:	d80d883a 	mov	r6,sp
 1805404:	1807bb00 	call	1807bb0 <_fstat_r>
 1805408:	10001e16 	blt	r2,zero,1805484 <__smakebuf_r+0xe0>
 180540c:	d8800117 	ldw	r2,4(sp)
 1805410:	00e00014 	movui	r3,32768
 1805414:	113c000c 	andi	r4,r2,61440
 1805418:	20c03126 	beq	r4,r3,18054e0 <__smakebuf_r+0x13c>
 180541c:	8080030b 	ldhu	r2,12(r16)
 1805420:	00c80004 	movi	r3,8192
 1805424:	10820014 	ori	r2,r2,2048
 1805428:	8080030d 	sth	r2,12(r16)
 180542c:	20c01e26 	beq	r4,r3,18054a8 <__smakebuf_r+0x104>
 1805430:	04810004 	movi	r18,1024
 1805434:	8809883a 	mov	r4,r17
 1805438:	900b883a 	mov	r5,r18
 180543c:	18055380 	call	1805538 <_malloc_r>
 1805440:	1009883a 	mov	r4,r2
 1805444:	10003126 	beq	r2,zero,180550c <__smakebuf_r+0x168>
 1805448:	80c0030b 	ldhu	r3,12(r16)
 180544c:	00806034 	movhi	r2,384
 1805450:	1091b704 	addi	r2,r2,18140
 1805454:	88800f15 	stw	r2,60(r17)
 1805458:	18c02014 	ori	r3,r3,128
 180545c:	84800515 	stw	r18,20(r16)
 1805460:	80c0030d 	sth	r3,12(r16)
 1805464:	81000415 	stw	r4,16(r16)
 1805468:	81000015 	stw	r4,0(r16)
 180546c:	dfc01217 	ldw	ra,72(sp)
 1805470:	dc801117 	ldw	r18,68(sp)
 1805474:	dc401017 	ldw	r17,64(sp)
 1805478:	dc000f17 	ldw	r16,60(sp)
 180547c:	dec01304 	addi	sp,sp,76
 1805480:	f800283a 	ret
 1805484:	80c0030b 	ldhu	r3,12(r16)
 1805488:	1880200c 	andi	r2,r3,128
 180548c:	10000426 	beq	r2,zero,18054a0 <__smakebuf_r+0xfc>
 1805490:	04801004 	movi	r18,64
 1805494:	18820014 	ori	r2,r3,2048
 1805498:	8080030d 	sth	r2,12(r16)
 180549c:	003fe506 	br	1805434 <__smakebuf_r+0x90>
 18054a0:	04810004 	movi	r18,1024
 18054a4:	003ffb06 	br	1805494 <__smakebuf_r+0xf0>
 18054a8:	8140038f 	ldh	r5,14(r16)
 18054ac:	8809883a 	mov	r4,r17
 18054b0:	1807c240 	call	1807c24 <_isatty_r>
 18054b4:	103fde26 	beq	r2,zero,1805430 <__smakebuf_r+0x8c>
 18054b8:	8080030b 	ldhu	r2,12(r16)
 18054bc:	80c010c4 	addi	r3,r16,67
 18054c0:	04810004 	movi	r18,1024
 18054c4:	10800054 	ori	r2,r2,1
 18054c8:	8080030d 	sth	r2,12(r16)
 18054cc:	00800044 	movi	r2,1
 18054d0:	80c00415 	stw	r3,16(r16)
 18054d4:	80800515 	stw	r2,20(r16)
 18054d8:	80c00015 	stw	r3,0(r16)
 18054dc:	003fd506 	br	1805434 <__smakebuf_r+0x90>
 18054e0:	80c00a17 	ldw	r3,40(r16)
 18054e4:	00806034 	movhi	r2,384
 18054e8:	109db704 	addi	r2,r2,30428
 18054ec:	18bfcb1e 	bne	r3,r2,180541c <__smakebuf_r+0x78>
 18054f0:	8080030b 	ldhu	r2,12(r16)
 18054f4:	00c10004 	movi	r3,1024
 18054f8:	1825883a 	mov	r18,r3
 18054fc:	10c4b03a 	or	r2,r2,r3
 1805500:	8080030d 	sth	r2,12(r16)
 1805504:	80c01315 	stw	r3,76(r16)
 1805508:	003fca06 	br	1805434 <__smakebuf_r+0x90>
 180550c:	8100030b 	ldhu	r4,12(r16)
 1805510:	2080800c 	andi	r2,r4,512
 1805514:	103fb21e 	bne	r2,zero,18053e0 <__smakebuf_r+0x3c>
 1805518:	80c010c4 	addi	r3,r16,67
 180551c:	21000094 	ori	r4,r4,2
 1805520:	00800044 	movi	r2,1
 1805524:	80800515 	stw	r2,20(r16)
 1805528:	8100030d 	sth	r4,12(r16)
 180552c:	80c00415 	stw	r3,16(r16)
 1805530:	80c00015 	stw	r3,0(r16)
 1805534:	003faa06 	br	18053e0 <__smakebuf_r+0x3c>

01805538 <_malloc_r>:
 1805538:	defff604 	addi	sp,sp,-40
 180553c:	28c002c4 	addi	r3,r5,11
 1805540:	00800584 	movi	r2,22
 1805544:	dc800215 	stw	r18,8(sp)
 1805548:	dfc00915 	stw	ra,36(sp)
 180554c:	df000815 	stw	fp,32(sp)
 1805550:	ddc00715 	stw	r23,28(sp)
 1805554:	dd800615 	stw	r22,24(sp)
 1805558:	dd400515 	stw	r21,20(sp)
 180555c:	dd000415 	stw	r20,16(sp)
 1805560:	dcc00315 	stw	r19,12(sp)
 1805564:	dc400115 	stw	r17,4(sp)
 1805568:	dc000015 	stw	r16,0(sp)
 180556c:	2025883a 	mov	r18,r4
 1805570:	10c01236 	bltu	r2,r3,18055bc <_malloc_r+0x84>
 1805574:	04400404 	movi	r17,16
 1805578:	8940142e 	bgeu	r17,r5,18055cc <_malloc_r+0x94>
 180557c:	00800304 	movi	r2,12
 1805580:	0007883a 	mov	r3,zero
 1805584:	90800015 	stw	r2,0(r18)
 1805588:	1805883a 	mov	r2,r3
 180558c:	dfc00917 	ldw	ra,36(sp)
 1805590:	df000817 	ldw	fp,32(sp)
 1805594:	ddc00717 	ldw	r23,28(sp)
 1805598:	dd800617 	ldw	r22,24(sp)
 180559c:	dd400517 	ldw	r21,20(sp)
 18055a0:	dd000417 	ldw	r20,16(sp)
 18055a4:	dcc00317 	ldw	r19,12(sp)
 18055a8:	dc800217 	ldw	r18,8(sp)
 18055ac:	dc400117 	ldw	r17,4(sp)
 18055b0:	dc000017 	ldw	r16,0(sp)
 18055b4:	dec00a04 	addi	sp,sp,40
 18055b8:	f800283a 	ret
 18055bc:	00bffe04 	movi	r2,-8
 18055c0:	18a2703a 	and	r17,r3,r2
 18055c4:	883fed16 	blt	r17,zero,180557c <_malloc_r+0x44>
 18055c8:	897fec36 	bltu	r17,r5,180557c <_malloc_r+0x44>
 18055cc:	9009883a 	mov	r4,r18
 18055d0:	180a9000 	call	180a900 <__malloc_lock>
 18055d4:	00807dc4 	movi	r2,503
 18055d8:	14402b2e 	bgeu	r2,r17,1805688 <_malloc_r+0x150>
 18055dc:	8806d27a 	srli	r3,r17,9
 18055e0:	18003f1e 	bne	r3,zero,18056e0 <_malloc_r+0x1a8>
 18055e4:	880cd0fa 	srli	r6,r17,3
 18055e8:	300490fa 	slli	r2,r6,3
 18055ec:	02c06074 	movhi	r11,385
 18055f0:	5af86104 	addi	r11,r11,-7804
 18055f4:	12cb883a 	add	r5,r2,r11
 18055f8:	2c000317 	ldw	r16,12(r5)
 18055fc:	580f883a 	mov	r7,r11
 1805600:	2c00041e 	bne	r5,r16,1805614 <_malloc_r+0xdc>
 1805604:	00000a06 	br	1805630 <_malloc_r+0xf8>
 1805608:	1800860e 	bge	r3,zero,1805824 <_malloc_r+0x2ec>
 180560c:	84000317 	ldw	r16,12(r16)
 1805610:	2c000726 	beq	r5,r16,1805630 <_malloc_r+0xf8>
 1805614:	80800117 	ldw	r2,4(r16)
 1805618:	00ffff04 	movi	r3,-4
 180561c:	10c8703a 	and	r4,r2,r3
 1805620:	2447c83a 	sub	r3,r4,r17
 1805624:	008003c4 	movi	r2,15
 1805628:	10fff70e 	bge	r2,r3,1805608 <_malloc_r+0xd0>
 180562c:	31bfffc4 	addi	r6,r6,-1
 1805630:	32400044 	addi	r9,r6,1
 1805634:	02806074 	movhi	r10,385
 1805638:	52b86304 	addi	r10,r10,-7796
 180563c:	54000217 	ldw	r16,8(r10)
 1805640:	8280a026 	beq	r16,r10,18058c4 <_malloc_r+0x38c>
 1805644:	80800117 	ldw	r2,4(r16)
 1805648:	00ffff04 	movi	r3,-4
 180564c:	10ca703a 	and	r5,r2,r3
 1805650:	2c4dc83a 	sub	r6,r5,r17
 1805654:	008003c4 	movi	r2,15
 1805658:	11808316 	blt	r2,r6,1805868 <_malloc_r+0x330>
 180565c:	52800315 	stw	r10,12(r10)
 1805660:	52800215 	stw	r10,8(r10)
 1805664:	30002916 	blt	r6,zero,180570c <_malloc_r+0x1d4>
 1805668:	8147883a 	add	r3,r16,r5
 180566c:	18800117 	ldw	r2,4(r3)
 1805670:	9009883a 	mov	r4,r18
 1805674:	10800054 	ori	r2,r2,1
 1805678:	18800115 	stw	r2,4(r3)
 180567c:	180a9200 	call	180a920 <__malloc_unlock>
 1805680:	80c00204 	addi	r3,r16,8
 1805684:	003fc006 	br	1805588 <_malloc_r+0x50>
 1805688:	02c06074 	movhi	r11,385
 180568c:	5af86104 	addi	r11,r11,-7804
 1805690:	8ac5883a 	add	r2,r17,r11
 1805694:	14000317 	ldw	r16,12(r2)
 1805698:	580f883a 	mov	r7,r11
 180569c:	8806d0fa 	srli	r3,r17,3
 18056a0:	14006c26 	beq	r2,r16,1805854 <_malloc_r+0x31c>
 18056a4:	80c00117 	ldw	r3,4(r16)
 18056a8:	00bfff04 	movi	r2,-4
 18056ac:	81800317 	ldw	r6,12(r16)
 18056b0:	1886703a 	and	r3,r3,r2
 18056b4:	80c7883a 	add	r3,r16,r3
 18056b8:	18800117 	ldw	r2,4(r3)
 18056bc:	81400217 	ldw	r5,8(r16)
 18056c0:	9009883a 	mov	r4,r18
 18056c4:	10800054 	ori	r2,r2,1
 18056c8:	18800115 	stw	r2,4(r3)
 18056cc:	31400215 	stw	r5,8(r6)
 18056d0:	29800315 	stw	r6,12(r5)
 18056d4:	180a9200 	call	180a920 <__malloc_unlock>
 18056d8:	80c00204 	addi	r3,r16,8
 18056dc:	003faa06 	br	1805588 <_malloc_r+0x50>
 18056e0:	00800104 	movi	r2,4
 18056e4:	10c0052e 	bgeu	r2,r3,18056fc <_malloc_r+0x1c4>
 18056e8:	00800504 	movi	r2,20
 18056ec:	10c07836 	bltu	r2,r3,18058d0 <_malloc_r+0x398>
 18056f0:	198016c4 	addi	r6,r3,91
 18056f4:	300490fa 	slli	r2,r6,3
 18056f8:	003fbc06 	br	18055ec <_malloc_r+0xb4>
 18056fc:	8804d1ba 	srli	r2,r17,6
 1805700:	11800e04 	addi	r6,r2,56
 1805704:	300490fa 	slli	r2,r6,3
 1805708:	003fb806 	br	18055ec <_malloc_r+0xb4>
 180570c:	00807fc4 	movi	r2,511
 1805710:	1140bb36 	bltu	r2,r5,1805a00 <_malloc_r+0x4c8>
 1805714:	2806d0fa 	srli	r3,r5,3
 1805718:	573ffe04 	addi	fp,r10,-8
 180571c:	00800044 	movi	r2,1
 1805720:	180890fa 	slli	r4,r3,3
 1805724:	1807d0ba 	srai	r3,r3,2
 1805728:	e1c00117 	ldw	r7,4(fp)
 180572c:	5909883a 	add	r4,r11,r4
 1805730:	21400217 	ldw	r5,8(r4)
 1805734:	10c4983a 	sll	r2,r2,r3
 1805738:	81000315 	stw	r4,12(r16)
 180573c:	81400215 	stw	r5,8(r16)
 1805740:	388eb03a 	or	r7,r7,r2
 1805744:	2c000315 	stw	r16,12(r5)
 1805748:	24000215 	stw	r16,8(r4)
 180574c:	e1c00115 	stw	r7,4(fp)
 1805750:	4807883a 	mov	r3,r9
 1805754:	4800cd16 	blt	r9,zero,1805a8c <_malloc_r+0x554>
 1805758:	1807d0ba 	srai	r3,r3,2
 180575c:	00800044 	movi	r2,1
 1805760:	10c8983a 	sll	r4,r2,r3
 1805764:	39004436 	bltu	r7,r4,1805878 <_malloc_r+0x340>
 1805768:	21c4703a 	and	r2,r4,r7
 180576c:	10000a1e 	bne	r2,zero,1805798 <_malloc_r+0x260>
 1805770:	2109883a 	add	r4,r4,r4
 1805774:	00bfff04 	movi	r2,-4
 1805778:	4884703a 	and	r2,r9,r2
 180577c:	3906703a 	and	r3,r7,r4
 1805780:	12400104 	addi	r9,r2,4
 1805784:	1800041e 	bne	r3,zero,1805798 <_malloc_r+0x260>
 1805788:	2109883a 	add	r4,r4,r4
 180578c:	3904703a 	and	r2,r7,r4
 1805790:	4a400104 	addi	r9,r9,4
 1805794:	103ffc26 	beq	r2,zero,1805788 <_malloc_r+0x250>
 1805798:	480490fa 	slli	r2,r9,3
 180579c:	4819883a 	mov	r12,r9
 18057a0:	023fff04 	movi	r8,-4
 18057a4:	589b883a 	add	r13,r11,r2
 18057a8:	6807883a 	mov	r3,r13
 18057ac:	014003c4 	movi	r5,15
 18057b0:	1c000317 	ldw	r16,12(r3)
 18057b4:	1c00041e 	bne	r3,r16,18057c8 <_malloc_r+0x290>
 18057b8:	0000a706 	br	1805a58 <_malloc_r+0x520>
 18057bc:	3000ab0e 	bge	r6,zero,1805a6c <_malloc_r+0x534>
 18057c0:	84000317 	ldw	r16,12(r16)
 18057c4:	1c00a426 	beq	r3,r16,1805a58 <_malloc_r+0x520>
 18057c8:	80800117 	ldw	r2,4(r16)
 18057cc:	1204703a 	and	r2,r2,r8
 18057d0:	144dc83a 	sub	r6,r2,r17
 18057d4:	29bff90e 	bge	r5,r6,18057bc <_malloc_r+0x284>
 18057d8:	81000317 	ldw	r4,12(r16)
 18057dc:	80c00217 	ldw	r3,8(r16)
 18057e0:	89400054 	ori	r5,r17,1
 18057e4:	8445883a 	add	r2,r16,r17
 18057e8:	20c00215 	stw	r3,8(r4)
 18057ec:	19000315 	stw	r4,12(r3)
 18057f0:	81400115 	stw	r5,4(r16)
 18057f4:	1187883a 	add	r3,r2,r6
 18057f8:	31000054 	ori	r4,r6,1
 18057fc:	50800315 	stw	r2,12(r10)
 1805800:	50800215 	stw	r2,8(r10)
 1805804:	19800015 	stw	r6,0(r3)
 1805808:	11000115 	stw	r4,4(r2)
 180580c:	12800215 	stw	r10,8(r2)
 1805810:	12800315 	stw	r10,12(r2)
 1805814:	9009883a 	mov	r4,r18
 1805818:	180a9200 	call	180a920 <__malloc_unlock>
 180581c:	80c00204 	addi	r3,r16,8
 1805820:	003f5906 	br	1805588 <_malloc_r+0x50>
 1805824:	8109883a 	add	r4,r16,r4
 1805828:	20800117 	ldw	r2,4(r4)
 180582c:	80c00217 	ldw	r3,8(r16)
 1805830:	81400317 	ldw	r5,12(r16)
 1805834:	10800054 	ori	r2,r2,1
 1805838:	20800115 	stw	r2,4(r4)
 180583c:	28c00215 	stw	r3,8(r5)
 1805840:	19400315 	stw	r5,12(r3)
 1805844:	9009883a 	mov	r4,r18
 1805848:	180a9200 	call	180a920 <__malloc_unlock>
 180584c:	80c00204 	addi	r3,r16,8
 1805850:	003f4d06 	br	1805588 <_malloc_r+0x50>
 1805854:	80800204 	addi	r2,r16,8
 1805858:	14000317 	ldw	r16,12(r2)
 180585c:	143f911e 	bne	r2,r16,18056a4 <_malloc_r+0x16c>
 1805860:	1a400084 	addi	r9,r3,2
 1805864:	003f7306 	br	1805634 <_malloc_r+0xfc>
 1805868:	88c00054 	ori	r3,r17,1
 180586c:	8445883a 	add	r2,r16,r17
 1805870:	80c00115 	stw	r3,4(r16)
 1805874:	003fdf06 	br	18057f4 <_malloc_r+0x2bc>
 1805878:	e4000217 	ldw	r16,8(fp)
 180587c:	00bfff04 	movi	r2,-4
 1805880:	80c00117 	ldw	r3,4(r16)
 1805884:	802d883a 	mov	r22,r16
 1805888:	18aa703a 	and	r21,r3,r2
 180588c:	ac401636 	bltu	r21,r17,18058e8 <_malloc_r+0x3b0>
 1805890:	ac49c83a 	sub	r4,r21,r17
 1805894:	008003c4 	movi	r2,15
 1805898:	1100130e 	bge	r2,r4,18058e8 <_malloc_r+0x3b0>
 180589c:	88800054 	ori	r2,r17,1
 18058a0:	8447883a 	add	r3,r16,r17
 18058a4:	80800115 	stw	r2,4(r16)
 18058a8:	20800054 	ori	r2,r4,1
 18058ac:	18800115 	stw	r2,4(r3)
 18058b0:	e0c00215 	stw	r3,8(fp)
 18058b4:	9009883a 	mov	r4,r18
 18058b8:	180a9200 	call	180a920 <__malloc_unlock>
 18058bc:	80c00204 	addi	r3,r16,8
 18058c0:	003f3106 	br	1805588 <_malloc_r+0x50>
 18058c4:	39c00117 	ldw	r7,4(r7)
 18058c8:	573ffe04 	addi	fp,r10,-8
 18058cc:	003fa006 	br	1805750 <_malloc_r+0x218>
 18058d0:	00801504 	movi	r2,84
 18058d4:	10c06736 	bltu	r2,r3,1805a74 <_malloc_r+0x53c>
 18058d8:	8804d33a 	srli	r2,r17,12
 18058dc:	11801b84 	addi	r6,r2,110
 18058e0:	300490fa 	slli	r2,r6,3
 18058e4:	003f4106 	br	18055ec <_malloc_r+0xb4>
 18058e8:	d0a6d617 	ldw	r2,-25768(gp)
 18058ec:	d0e00517 	ldw	r3,-32748(gp)
 18058f0:	053fffc4 	movi	r20,-1
 18058f4:	10800404 	addi	r2,r2,16
 18058f8:	88a7883a 	add	r19,r17,r2
 18058fc:	1d000326 	beq	r3,r20,180590c <_malloc_r+0x3d4>
 1805900:	98c3ffc4 	addi	r3,r19,4095
 1805904:	00bc0004 	movi	r2,-4096
 1805908:	18a6703a 	and	r19,r3,r2
 180590c:	9009883a 	mov	r4,r18
 1805910:	980b883a 	mov	r5,r19
 1805914:	18076640 	call	1807664 <_sbrk_r>
 1805918:	1009883a 	mov	r4,r2
 180591c:	15000426 	beq	r2,r20,1805930 <_malloc_r+0x3f8>
 1805920:	854b883a 	add	r5,r16,r21
 1805924:	1029883a 	mov	r20,r2
 1805928:	11405a2e 	bgeu	r2,r5,1805a94 <_malloc_r+0x55c>
 180592c:	87000c26 	beq	r16,fp,1805960 <_malloc_r+0x428>
 1805930:	e4000217 	ldw	r16,8(fp)
 1805934:	80c00117 	ldw	r3,4(r16)
 1805938:	00bfff04 	movi	r2,-4
 180593c:	1884703a 	and	r2,r3,r2
 1805940:	14400336 	bltu	r2,r17,1805950 <_malloc_r+0x418>
 1805944:	1449c83a 	sub	r4,r2,r17
 1805948:	008003c4 	movi	r2,15
 180594c:	113fd316 	blt	r2,r4,180589c <_malloc_r+0x364>
 1805950:	9009883a 	mov	r4,r18
 1805954:	180a9200 	call	180a920 <__malloc_unlock>
 1805958:	0007883a 	mov	r3,zero
 180595c:	003f0a06 	br	1805588 <_malloc_r+0x50>
 1805960:	05c06074 	movhi	r23,385
 1805964:	bdc4f104 	addi	r23,r23,5060
 1805968:	b8800017 	ldw	r2,0(r23)
 180596c:	988d883a 	add	r6,r19,r2
 1805970:	b9800015 	stw	r6,0(r23)
 1805974:	d0e00517 	ldw	r3,-32748(gp)
 1805978:	00bfffc4 	movi	r2,-1
 180597c:	18808e26 	beq	r3,r2,1805bb8 <_malloc_r+0x680>
 1805980:	2145c83a 	sub	r2,r4,r5
 1805984:	3085883a 	add	r2,r6,r2
 1805988:	b8800015 	stw	r2,0(r23)
 180598c:	20c001cc 	andi	r3,r4,7
 1805990:	18005f1e 	bne	r3,zero,1805b10 <_malloc_r+0x5d8>
 1805994:	000b883a 	mov	r5,zero
 1805998:	a4c5883a 	add	r2,r20,r19
 180599c:	1083ffcc 	andi	r2,r2,4095
 18059a0:	00c40004 	movi	r3,4096
 18059a4:	1887c83a 	sub	r3,r3,r2
 18059a8:	28e7883a 	add	r19,r5,r3
 18059ac:	9009883a 	mov	r4,r18
 18059b0:	980b883a 	mov	r5,r19
 18059b4:	18076640 	call	1807664 <_sbrk_r>
 18059b8:	1007883a 	mov	r3,r2
 18059bc:	00bfffc4 	movi	r2,-1
 18059c0:	18807a26 	beq	r3,r2,1805bac <_malloc_r+0x674>
 18059c4:	1d05c83a 	sub	r2,r3,r20
 18059c8:	9885883a 	add	r2,r19,r2
 18059cc:	10c00054 	ori	r3,r2,1
 18059d0:	b8800017 	ldw	r2,0(r23)
 18059d4:	a021883a 	mov	r16,r20
 18059d8:	a0c00115 	stw	r3,4(r20)
 18059dc:	9885883a 	add	r2,r19,r2
 18059e0:	b8800015 	stw	r2,0(r23)
 18059e4:	e5000215 	stw	r20,8(fp)
 18059e8:	b7003626 	beq	r22,fp,1805ac4 <_malloc_r+0x58c>
 18059ec:	018003c4 	movi	r6,15
 18059f0:	35404b36 	bltu	r6,r21,1805b20 <_malloc_r+0x5e8>
 18059f4:	00800044 	movi	r2,1
 18059f8:	a0800115 	stw	r2,4(r20)
 18059fc:	003fcd06 	br	1805934 <_malloc_r+0x3fc>
 1805a00:	2808d27a 	srli	r4,r5,9
 1805a04:	2000371e 	bne	r4,zero,1805ae4 <_malloc_r+0x5ac>
 1805a08:	2808d0fa 	srli	r4,r5,3
 1805a0c:	200690fa 	slli	r3,r4,3
 1805a10:	1ad1883a 	add	r8,r3,r11
 1805a14:	41800217 	ldw	r6,8(r8)
 1805a18:	41805b26 	beq	r8,r6,1805b88 <_malloc_r+0x650>
 1805a1c:	30800117 	ldw	r2,4(r6)
 1805a20:	00ffff04 	movi	r3,-4
 1805a24:	10c4703a 	and	r2,r2,r3
 1805a28:	2880022e 	bgeu	r5,r2,1805a34 <_malloc_r+0x4fc>
 1805a2c:	31800217 	ldw	r6,8(r6)
 1805a30:	41bffa1e 	bne	r8,r6,1805a1c <_malloc_r+0x4e4>
 1805a34:	32000317 	ldw	r8,12(r6)
 1805a38:	39c00117 	ldw	r7,4(r7)
 1805a3c:	82000315 	stw	r8,12(r16)
 1805a40:	81800215 	stw	r6,8(r16)
 1805a44:	07006074 	movhi	fp,385
 1805a48:	e7386104 	addi	fp,fp,-7804
 1805a4c:	34000315 	stw	r16,12(r6)
 1805a50:	44000215 	stw	r16,8(r8)
 1805a54:	003f3e06 	br	1805750 <_malloc_r+0x218>
 1805a58:	63000044 	addi	r12,r12,1
 1805a5c:	608000cc 	andi	r2,r12,3
 1805a60:	10005d26 	beq	r2,zero,1805bd8 <_malloc_r+0x6a0>
 1805a64:	18c00204 	addi	r3,r3,8
 1805a68:	003f5106 	br	18057b0 <_malloc_r+0x278>
 1805a6c:	8089883a 	add	r4,r16,r2
 1805a70:	003f6d06 	br	1805828 <_malloc_r+0x2f0>
 1805a74:	00805504 	movi	r2,340
 1805a78:	10c02036 	bltu	r2,r3,1805afc <_malloc_r+0x5c4>
 1805a7c:	8804d3fa 	srli	r2,r17,15
 1805a80:	11801dc4 	addi	r6,r2,119
 1805a84:	300490fa 	slli	r2,r6,3
 1805a88:	003ed806 	br	18055ec <_malloc_r+0xb4>
 1805a8c:	48c000c4 	addi	r3,r9,3
 1805a90:	003f3106 	br	1805758 <_malloc_r+0x220>
 1805a94:	05c06074 	movhi	r23,385
 1805a98:	bdc4f104 	addi	r23,r23,5060
 1805a9c:	b8800017 	ldw	r2,0(r23)
 1805aa0:	988d883a 	add	r6,r19,r2
 1805aa4:	b9800015 	stw	r6,0(r23)
 1805aa8:	293fb21e 	bne	r5,r4,1805974 <_malloc_r+0x43c>
 1805aac:	2083ffcc 	andi	r2,r4,4095
 1805ab0:	103fb01e 	bne	r2,zero,1805974 <_malloc_r+0x43c>
 1805ab4:	e4000217 	ldw	r16,8(fp)
 1805ab8:	9d45883a 	add	r2,r19,r21
 1805abc:	10800054 	ori	r2,r2,1
 1805ac0:	80800115 	stw	r2,4(r16)
 1805ac4:	b8c00017 	ldw	r3,0(r23)
 1805ac8:	d0a6d717 	ldw	r2,-25764(gp)
 1805acc:	10c0012e 	bgeu	r2,r3,1805ad4 <_malloc_r+0x59c>
 1805ad0:	d0e6d715 	stw	r3,-25764(gp)
 1805ad4:	d0a6d817 	ldw	r2,-25760(gp)
 1805ad8:	10ff962e 	bgeu	r2,r3,1805934 <_malloc_r+0x3fc>
 1805adc:	d0e6d815 	stw	r3,-25760(gp)
 1805ae0:	003f9406 	br	1805934 <_malloc_r+0x3fc>
 1805ae4:	00800104 	movi	r2,4
 1805ae8:	11001e36 	bltu	r2,r4,1805b64 <_malloc_r+0x62c>
 1805aec:	2804d1ba 	srli	r2,r5,6
 1805af0:	11000e04 	addi	r4,r2,56
 1805af4:	200690fa 	slli	r3,r4,3
 1805af8:	003fc506 	br	1805a10 <_malloc_r+0x4d8>
 1805afc:	00815504 	movi	r2,1364
 1805b00:	10c01d2e 	bgeu	r2,r3,1805b78 <_malloc_r+0x640>
 1805b04:	01801f84 	movi	r6,126
 1805b08:	0080fc04 	movi	r2,1008
 1805b0c:	003eb706 	br	18055ec <_malloc_r+0xb4>
 1805b10:	00800204 	movi	r2,8
 1805b14:	10cbc83a 	sub	r5,r2,r3
 1805b18:	2169883a 	add	r20,r4,r5
 1805b1c:	003f9e06 	br	1805998 <_malloc_r+0x460>
 1805b20:	00bffe04 	movi	r2,-8
 1805b24:	a93ffd04 	addi	r4,r21,-12
 1805b28:	2088703a 	and	r4,r4,r2
 1805b2c:	b10b883a 	add	r5,r22,r4
 1805b30:	00c00144 	movi	r3,5
 1805b34:	28c00215 	stw	r3,8(r5)
 1805b38:	28c00115 	stw	r3,4(r5)
 1805b3c:	b0800117 	ldw	r2,4(r22)
 1805b40:	1080004c 	andi	r2,r2,1
 1805b44:	2084b03a 	or	r2,r4,r2
 1805b48:	b0800115 	stw	r2,4(r22)
 1805b4c:	313fdd2e 	bgeu	r6,r4,1805ac4 <_malloc_r+0x58c>
 1805b50:	b1400204 	addi	r5,r22,8
 1805b54:	9009883a 	mov	r4,r18
 1805b58:	18049b00 	call	18049b0 <_free_r>
 1805b5c:	e4000217 	ldw	r16,8(fp)
 1805b60:	003fd806 	br	1805ac4 <_malloc_r+0x58c>
 1805b64:	00800504 	movi	r2,20
 1805b68:	11001536 	bltu	r2,r4,1805bc0 <_malloc_r+0x688>
 1805b6c:	210016c4 	addi	r4,r4,91
 1805b70:	200690fa 	slli	r3,r4,3
 1805b74:	003fa606 	br	1805a10 <_malloc_r+0x4d8>
 1805b78:	8804d4ba 	srli	r2,r17,18
 1805b7c:	11801f04 	addi	r6,r2,124
 1805b80:	300490fa 	slli	r2,r6,3
 1805b84:	003e9906 	br	18055ec <_malloc_r+0xb4>
 1805b88:	2009d0ba 	srai	r4,r4,2
 1805b8c:	01406074 	movhi	r5,385
 1805b90:	29786104 	addi	r5,r5,-7804
 1805b94:	00c00044 	movi	r3,1
 1805b98:	28800117 	ldw	r2,4(r5)
 1805b9c:	1906983a 	sll	r3,r3,r4
 1805ba0:	10c4b03a 	or	r2,r2,r3
 1805ba4:	28800115 	stw	r2,4(r5)
 1805ba8:	003fa306 	br	1805a38 <_malloc_r+0x500>
 1805bac:	0027883a 	mov	r19,zero
 1805bb0:	00c00044 	movi	r3,1
 1805bb4:	003f8606 	br	18059d0 <_malloc_r+0x498>
 1805bb8:	d1200515 	stw	r4,-32748(gp)
 1805bbc:	003f7306 	br	180598c <_malloc_r+0x454>
 1805bc0:	00801504 	movi	r2,84
 1805bc4:	11001936 	bltu	r2,r4,1805c2c <_malloc_r+0x6f4>
 1805bc8:	2804d33a 	srli	r2,r5,12
 1805bcc:	11001b84 	addi	r4,r2,110
 1805bd0:	200690fa 	slli	r3,r4,3
 1805bd4:	003f8e06 	br	1805a10 <_malloc_r+0x4d8>
 1805bd8:	480b883a 	mov	r5,r9
 1805bdc:	6807883a 	mov	r3,r13
 1805be0:	288000cc 	andi	r2,r5,3
 1805be4:	18fffe04 	addi	r3,r3,-8
 1805be8:	297fffc4 	addi	r5,r5,-1
 1805bec:	10001526 	beq	r2,zero,1805c44 <_malloc_r+0x70c>
 1805bf0:	18800217 	ldw	r2,8(r3)
 1805bf4:	10fffa26 	beq	r2,r3,1805be0 <_malloc_r+0x6a8>
 1805bf8:	2109883a 	add	r4,r4,r4
 1805bfc:	393f1e36 	bltu	r7,r4,1805878 <_malloc_r+0x340>
 1805c00:	203f1d26 	beq	r4,zero,1805878 <_malloc_r+0x340>
 1805c04:	21c4703a 	and	r2,r4,r7
 1805c08:	10000226 	beq	r2,zero,1805c14 <_malloc_r+0x6dc>
 1805c0c:	6013883a 	mov	r9,r12
 1805c10:	003ee106 	br	1805798 <_malloc_r+0x260>
 1805c14:	2109883a 	add	r4,r4,r4
 1805c18:	3904703a 	and	r2,r7,r4
 1805c1c:	63000104 	addi	r12,r12,4
 1805c20:	103ffc26 	beq	r2,zero,1805c14 <_malloc_r+0x6dc>
 1805c24:	6013883a 	mov	r9,r12
 1805c28:	003edb06 	br	1805798 <_malloc_r+0x260>
 1805c2c:	00805504 	movi	r2,340
 1805c30:	11000836 	bltu	r2,r4,1805c54 <_malloc_r+0x71c>
 1805c34:	2804d3fa 	srli	r2,r5,15
 1805c38:	11001dc4 	addi	r4,r2,119
 1805c3c:	200690fa 	slli	r3,r4,3
 1805c40:	003f7306 	br	1805a10 <_malloc_r+0x4d8>
 1805c44:	0104303a 	nor	r2,zero,r4
 1805c48:	388e703a 	and	r7,r7,r2
 1805c4c:	e1c00115 	stw	r7,4(fp)
 1805c50:	003fe906 	br	1805bf8 <_malloc_r+0x6c0>
 1805c54:	00815504 	movi	r2,1364
 1805c58:	1100032e 	bgeu	r2,r4,1805c68 <_malloc_r+0x730>
 1805c5c:	01001f84 	movi	r4,126
 1805c60:	00c0fc04 	movi	r3,1008
 1805c64:	003f6a06 	br	1805a10 <_malloc_r+0x4d8>
 1805c68:	2804d4ba 	srli	r2,r5,18
 1805c6c:	11001f04 	addi	r4,r2,124
 1805c70:	200690fa 	slli	r3,r4,3
 1805c74:	003f6606 	br	1805a10 <_malloc_r+0x4d8>

01805c78 <memchr>:
 1805c78:	008000c4 	movi	r2,3
 1805c7c:	29403fcc 	andi	r5,r5,255
 1805c80:	2007883a 	mov	r3,r4
 1805c84:	1180022e 	bgeu	r2,r6,1805c90 <memchr+0x18>
 1805c88:	2084703a 	and	r2,r4,r2
 1805c8c:	10000b26 	beq	r2,zero,1805cbc <memchr+0x44>
 1805c90:	313fffc4 	addi	r4,r6,-1
 1805c94:	3000051e 	bne	r6,zero,1805cac <memchr+0x34>
 1805c98:	00002c06 	br	1805d4c <memchr+0xd4>
 1805c9c:	213fffc4 	addi	r4,r4,-1
 1805ca0:	00bfffc4 	movi	r2,-1
 1805ca4:	18c00044 	addi	r3,r3,1
 1805ca8:	20802826 	beq	r4,r2,1805d4c <memchr+0xd4>
 1805cac:	18800003 	ldbu	r2,0(r3)
 1805cb0:	28bffa1e 	bne	r5,r2,1805c9c <memchr+0x24>
 1805cb4:	1805883a 	mov	r2,r3
 1805cb8:	f800283a 	ret
 1805cbc:	0011883a 	mov	r8,zero
 1805cc0:	0007883a 	mov	r3,zero
 1805cc4:	01c00104 	movi	r7,4
 1805cc8:	4004923a 	slli	r2,r8,8
 1805ccc:	18c00044 	addi	r3,r3,1
 1805cd0:	1151883a 	add	r8,r2,r5
 1805cd4:	19fffc1e 	bne	r3,r7,1805cc8 <memchr+0x50>
 1805cd8:	02bfbff4 	movhi	r10,65279
 1805cdc:	52bfbfc4 	addi	r10,r10,-257
 1805ce0:	02602074 	movhi	r9,32897
 1805ce4:	4a602004 	addi	r9,r9,-32640
 1805ce8:	02c000c4 	movi	r11,3
 1805cec:	20800017 	ldw	r2,0(r4)
 1805cf0:	31bfff04 	addi	r6,r6,-4
 1805cf4:	200f883a 	mov	r7,r4
 1805cf8:	1204f03a 	xor	r2,r2,r8
 1805cfc:	1287883a 	add	r3,r2,r10
 1805d00:	1a46703a 	and	r3,r3,r9
 1805d04:	0084303a 	nor	r2,zero,r2
 1805d08:	10c4703a 	and	r2,r2,r3
 1805d0c:	10000b26 	beq	r2,zero,1805d3c <memchr+0xc4>
 1805d10:	20800003 	ldbu	r2,0(r4)
 1805d14:	28800f26 	beq	r5,r2,1805d54 <memchr+0xdc>
 1805d18:	20800043 	ldbu	r2,1(r4)
 1805d1c:	21c00044 	addi	r7,r4,1
 1805d20:	28800c26 	beq	r5,r2,1805d54 <memchr+0xdc>
 1805d24:	20800083 	ldbu	r2,2(r4)
 1805d28:	21c00084 	addi	r7,r4,2
 1805d2c:	28800926 	beq	r5,r2,1805d54 <memchr+0xdc>
 1805d30:	208000c3 	ldbu	r2,3(r4)
 1805d34:	21c000c4 	addi	r7,r4,3
 1805d38:	28800626 	beq	r5,r2,1805d54 <memchr+0xdc>
 1805d3c:	21000104 	addi	r4,r4,4
 1805d40:	59bfea36 	bltu	r11,r6,1805cec <memchr+0x74>
 1805d44:	2007883a 	mov	r3,r4
 1805d48:	003fd106 	br	1805c90 <memchr+0x18>
 1805d4c:	0005883a 	mov	r2,zero
 1805d50:	f800283a 	ret
 1805d54:	3805883a 	mov	r2,r7
 1805d58:	f800283a 	ret

01805d5c <memcpy>:
 1805d5c:	01c003c4 	movi	r7,15
 1805d60:	2007883a 	mov	r3,r4
 1805d64:	3980032e 	bgeu	r7,r6,1805d74 <memcpy+0x18>
 1805d68:	2904b03a 	or	r2,r5,r4
 1805d6c:	108000cc 	andi	r2,r2,3
 1805d70:	10000926 	beq	r2,zero,1805d98 <memcpy+0x3c>
 1805d74:	30000626 	beq	r6,zero,1805d90 <memcpy+0x34>
 1805d78:	30cd883a 	add	r6,r6,r3
 1805d7c:	28800003 	ldbu	r2,0(r5)
 1805d80:	29400044 	addi	r5,r5,1
 1805d84:	18800005 	stb	r2,0(r3)
 1805d88:	18c00044 	addi	r3,r3,1
 1805d8c:	30fffb1e 	bne	r6,r3,1805d7c <memcpy+0x20>
 1805d90:	2005883a 	mov	r2,r4
 1805d94:	f800283a 	ret
 1805d98:	3811883a 	mov	r8,r7
 1805d9c:	200f883a 	mov	r7,r4
 1805da0:	28c00017 	ldw	r3,0(r5)
 1805da4:	31bffc04 	addi	r6,r6,-16
 1805da8:	38c00015 	stw	r3,0(r7)
 1805dac:	28800117 	ldw	r2,4(r5)
 1805db0:	38800115 	stw	r2,4(r7)
 1805db4:	28c00217 	ldw	r3,8(r5)
 1805db8:	38c00215 	stw	r3,8(r7)
 1805dbc:	28800317 	ldw	r2,12(r5)
 1805dc0:	29400404 	addi	r5,r5,16
 1805dc4:	38800315 	stw	r2,12(r7)
 1805dc8:	39c00404 	addi	r7,r7,16
 1805dcc:	41bff436 	bltu	r8,r6,1805da0 <memcpy+0x44>
 1805dd0:	008000c4 	movi	r2,3
 1805dd4:	1180072e 	bgeu	r2,r6,1805df4 <memcpy+0x98>
 1805dd8:	1007883a 	mov	r3,r2
 1805ddc:	28800017 	ldw	r2,0(r5)
 1805de0:	31bfff04 	addi	r6,r6,-4
 1805de4:	29400104 	addi	r5,r5,4
 1805de8:	38800015 	stw	r2,0(r7)
 1805dec:	39c00104 	addi	r7,r7,4
 1805df0:	19bffa36 	bltu	r3,r6,1805ddc <memcpy+0x80>
 1805df4:	3807883a 	mov	r3,r7
 1805df8:	003fde06 	br	1805d74 <memcpy+0x18>

01805dfc <memmove>:
 1805dfc:	2807883a 	mov	r3,r5
 1805e00:	2011883a 	mov	r8,r4
 1805e04:	29000c2e 	bgeu	r5,r4,1805e38 <memmove+0x3c>
 1805e08:	298f883a 	add	r7,r5,r6
 1805e0c:	21c00a2e 	bgeu	r4,r7,1805e38 <memmove+0x3c>
 1805e10:	30000726 	beq	r6,zero,1805e30 <memmove+0x34>
 1805e14:	2187883a 	add	r3,r4,r6
 1805e18:	198dc83a 	sub	r6,r3,r6
 1805e1c:	39ffffc4 	addi	r7,r7,-1
 1805e20:	38800003 	ldbu	r2,0(r7)
 1805e24:	18ffffc4 	addi	r3,r3,-1
 1805e28:	18800005 	stb	r2,0(r3)
 1805e2c:	19bffb1e 	bne	r3,r6,1805e1c <memmove+0x20>
 1805e30:	2005883a 	mov	r2,r4
 1805e34:	f800283a 	ret
 1805e38:	01c003c4 	movi	r7,15
 1805e3c:	39800a36 	bltu	r7,r6,1805e68 <memmove+0x6c>
 1805e40:	303ffb26 	beq	r6,zero,1805e30 <memmove+0x34>
 1805e44:	400f883a 	mov	r7,r8
 1805e48:	320d883a 	add	r6,r6,r8
 1805e4c:	28800003 	ldbu	r2,0(r5)
 1805e50:	29400044 	addi	r5,r5,1
 1805e54:	38800005 	stb	r2,0(r7)
 1805e58:	39c00044 	addi	r7,r7,1
 1805e5c:	39bffb1e 	bne	r7,r6,1805e4c <memmove+0x50>
 1805e60:	2005883a 	mov	r2,r4
 1805e64:	f800283a 	ret
 1805e68:	1904b03a 	or	r2,r3,r4
 1805e6c:	108000cc 	andi	r2,r2,3
 1805e70:	103ff31e 	bne	r2,zero,1805e40 <memmove+0x44>
 1805e74:	3811883a 	mov	r8,r7
 1805e78:	180b883a 	mov	r5,r3
 1805e7c:	200f883a 	mov	r7,r4
 1805e80:	28c00017 	ldw	r3,0(r5)
 1805e84:	31bffc04 	addi	r6,r6,-16
 1805e88:	38c00015 	stw	r3,0(r7)
 1805e8c:	28800117 	ldw	r2,4(r5)
 1805e90:	38800115 	stw	r2,4(r7)
 1805e94:	28c00217 	ldw	r3,8(r5)
 1805e98:	38c00215 	stw	r3,8(r7)
 1805e9c:	28800317 	ldw	r2,12(r5)
 1805ea0:	29400404 	addi	r5,r5,16
 1805ea4:	38800315 	stw	r2,12(r7)
 1805ea8:	39c00404 	addi	r7,r7,16
 1805eac:	41bff436 	bltu	r8,r6,1805e80 <memmove+0x84>
 1805eb0:	008000c4 	movi	r2,3
 1805eb4:	1180072e 	bgeu	r2,r6,1805ed4 <memmove+0xd8>
 1805eb8:	1007883a 	mov	r3,r2
 1805ebc:	28800017 	ldw	r2,0(r5)
 1805ec0:	31bfff04 	addi	r6,r6,-4
 1805ec4:	29400104 	addi	r5,r5,4
 1805ec8:	38800015 	stw	r2,0(r7)
 1805ecc:	39c00104 	addi	r7,r7,4
 1805ed0:	19bffa36 	bltu	r3,r6,1805ebc <memmove+0xc0>
 1805ed4:	3811883a 	mov	r8,r7
 1805ed8:	003fd906 	br	1805e40 <memmove+0x44>

01805edc <memset>:
 1805edc:	008000c4 	movi	r2,3
 1805ee0:	29403fcc 	andi	r5,r5,255
 1805ee4:	2007883a 	mov	r3,r4
 1805ee8:	1180022e 	bgeu	r2,r6,1805ef4 <memset+0x18>
 1805eec:	2084703a 	and	r2,r4,r2
 1805ef0:	10000826 	beq	r2,zero,1805f14 <memset+0x38>
 1805ef4:	30000526 	beq	r6,zero,1805f0c <memset+0x30>
 1805ef8:	2805883a 	mov	r2,r5
 1805efc:	30cd883a 	add	r6,r6,r3
 1805f00:	18800005 	stb	r2,0(r3)
 1805f04:	18c00044 	addi	r3,r3,1
 1805f08:	19bffd1e 	bne	r3,r6,1805f00 <memset+0x24>
 1805f0c:	2005883a 	mov	r2,r4
 1805f10:	f800283a 	ret
 1805f14:	2804923a 	slli	r2,r5,8
 1805f18:	020003c4 	movi	r8,15
 1805f1c:	200f883a 	mov	r7,r4
 1805f20:	2884b03a 	or	r2,r5,r2
 1805f24:	1006943a 	slli	r3,r2,16
 1805f28:	10c6b03a 	or	r3,r2,r3
 1805f2c:	41800a2e 	bgeu	r8,r6,1805f58 <memset+0x7c>
 1805f30:	4005883a 	mov	r2,r8
 1805f34:	31bffc04 	addi	r6,r6,-16
 1805f38:	38c00015 	stw	r3,0(r7)
 1805f3c:	38c00115 	stw	r3,4(r7)
 1805f40:	38c00215 	stw	r3,8(r7)
 1805f44:	38c00315 	stw	r3,12(r7)
 1805f48:	39c00404 	addi	r7,r7,16
 1805f4c:	11bff936 	bltu	r2,r6,1805f34 <memset+0x58>
 1805f50:	008000c4 	movi	r2,3
 1805f54:	1180052e 	bgeu	r2,r6,1805f6c <memset+0x90>
 1805f58:	31bfff04 	addi	r6,r6,-4
 1805f5c:	008000c4 	movi	r2,3
 1805f60:	38c00015 	stw	r3,0(r7)
 1805f64:	39c00104 	addi	r7,r7,4
 1805f68:	11bffb36 	bltu	r2,r6,1805f58 <memset+0x7c>
 1805f6c:	3807883a 	mov	r3,r7
 1805f70:	003fe006 	br	1805ef4 <memset+0x18>

01805f74 <_Bfree>:
 1805f74:	28000826 	beq	r5,zero,1805f98 <_Bfree+0x24>
 1805f78:	28800117 	ldw	r2,4(r5)
 1805f7c:	21001317 	ldw	r4,76(r4)
 1805f80:	1085883a 	add	r2,r2,r2
 1805f84:	1085883a 	add	r2,r2,r2
 1805f88:	1105883a 	add	r2,r2,r4
 1805f8c:	10c00017 	ldw	r3,0(r2)
 1805f90:	28c00015 	stw	r3,0(r5)
 1805f94:	11400015 	stw	r5,0(r2)
 1805f98:	f800283a 	ret

01805f9c <__hi0bits>:
 1805f9c:	20bfffec 	andhi	r2,r4,65535
 1805fa0:	10001426 	beq	r2,zero,1805ff4 <__hi0bits+0x58>
 1805fa4:	0007883a 	mov	r3,zero
 1805fa8:	20bfc02c 	andhi	r2,r4,65280
 1805fac:	1000021e 	bne	r2,zero,1805fb8 <__hi0bits+0x1c>
 1805fb0:	2008923a 	slli	r4,r4,8
 1805fb4:	18c00204 	addi	r3,r3,8
 1805fb8:	20bc002c 	andhi	r2,r4,61440
 1805fbc:	1000021e 	bne	r2,zero,1805fc8 <__hi0bits+0x2c>
 1805fc0:	2008913a 	slli	r4,r4,4
 1805fc4:	18c00104 	addi	r3,r3,4
 1805fc8:	20b0002c 	andhi	r2,r4,49152
 1805fcc:	1000031e 	bne	r2,zero,1805fdc <__hi0bits+0x40>
 1805fd0:	2105883a 	add	r2,r4,r4
 1805fd4:	18c00084 	addi	r3,r3,2
 1805fd8:	1089883a 	add	r4,r2,r2
 1805fdc:	20000316 	blt	r4,zero,1805fec <__hi0bits+0x50>
 1805fe0:	2090002c 	andhi	r2,r4,16384
 1805fe4:	10000626 	beq	r2,zero,1806000 <__hi0bits+0x64>
 1805fe8:	18c00044 	addi	r3,r3,1
 1805fec:	1805883a 	mov	r2,r3
 1805ff0:	f800283a 	ret
 1805ff4:	2008943a 	slli	r4,r4,16
 1805ff8:	00c00404 	movi	r3,16
 1805ffc:	003fea06 	br	1805fa8 <__hi0bits+0xc>
 1806000:	00c00804 	movi	r3,32
 1806004:	1805883a 	mov	r2,r3
 1806008:	f800283a 	ret

0180600c <__lo0bits>:
 180600c:	20c00017 	ldw	r3,0(r4)
 1806010:	188001cc 	andi	r2,r3,7
 1806014:	10000a26 	beq	r2,zero,1806040 <__lo0bits+0x34>
 1806018:	1880004c 	andi	r2,r3,1
 180601c:	1005003a 	cmpeq	r2,r2,zero
 1806020:	10002126 	beq	r2,zero,18060a8 <__lo0bits+0x9c>
 1806024:	1880008c 	andi	r2,r3,2
 1806028:	1000251e 	bne	r2,zero,18060c0 <__lo0bits+0xb4>
 180602c:	1804d0ba 	srli	r2,r3,2
 1806030:	01400084 	movi	r5,2
 1806034:	20800015 	stw	r2,0(r4)
 1806038:	2805883a 	mov	r2,r5
 180603c:	f800283a 	ret
 1806040:	18bfffcc 	andi	r2,r3,65535
 1806044:	10001526 	beq	r2,zero,180609c <__lo0bits+0x90>
 1806048:	000b883a 	mov	r5,zero
 180604c:	18803fcc 	andi	r2,r3,255
 1806050:	1000021e 	bne	r2,zero,180605c <__lo0bits+0x50>
 1806054:	1806d23a 	srli	r3,r3,8
 1806058:	29400204 	addi	r5,r5,8
 180605c:	188003cc 	andi	r2,r3,15
 1806060:	1000021e 	bne	r2,zero,180606c <__lo0bits+0x60>
 1806064:	1806d13a 	srli	r3,r3,4
 1806068:	29400104 	addi	r5,r5,4
 180606c:	188000cc 	andi	r2,r3,3
 1806070:	1000021e 	bne	r2,zero,180607c <__lo0bits+0x70>
 1806074:	1806d0ba 	srli	r3,r3,2
 1806078:	29400084 	addi	r5,r5,2
 180607c:	1880004c 	andi	r2,r3,1
 1806080:	1000031e 	bne	r2,zero,1806090 <__lo0bits+0x84>
 1806084:	1806d07a 	srli	r3,r3,1
 1806088:	18000a26 	beq	r3,zero,18060b4 <__lo0bits+0xa8>
 180608c:	29400044 	addi	r5,r5,1
 1806090:	2805883a 	mov	r2,r5
 1806094:	20c00015 	stw	r3,0(r4)
 1806098:	f800283a 	ret
 180609c:	1806d43a 	srli	r3,r3,16
 18060a0:	01400404 	movi	r5,16
 18060a4:	003fe906 	br	180604c <__lo0bits+0x40>
 18060a8:	000b883a 	mov	r5,zero
 18060ac:	2805883a 	mov	r2,r5
 18060b0:	f800283a 	ret
 18060b4:	01400804 	movi	r5,32
 18060b8:	2805883a 	mov	r2,r5
 18060bc:	f800283a 	ret
 18060c0:	1804d07a 	srli	r2,r3,1
 18060c4:	01400044 	movi	r5,1
 18060c8:	20800015 	stw	r2,0(r4)
 18060cc:	003fda06 	br	1806038 <__lo0bits+0x2c>

018060d0 <__mcmp>:
 18060d0:	20800417 	ldw	r2,16(r4)
 18060d4:	28c00417 	ldw	r3,16(r5)
 18060d8:	10cfc83a 	sub	r7,r2,r3
 18060dc:	38000c1e 	bne	r7,zero,1806110 <__mcmp+0x40>
 18060e0:	18c5883a 	add	r2,r3,r3
 18060e4:	1085883a 	add	r2,r2,r2
 18060e8:	10c00504 	addi	r3,r2,20
 18060ec:	21000504 	addi	r4,r4,20
 18060f0:	28cb883a 	add	r5,r5,r3
 18060f4:	2085883a 	add	r2,r4,r2
 18060f8:	10bfff04 	addi	r2,r2,-4
 18060fc:	297fff04 	addi	r5,r5,-4
 1806100:	11800017 	ldw	r6,0(r2)
 1806104:	28c00017 	ldw	r3,0(r5)
 1806108:	30c0031e 	bne	r6,r3,1806118 <__mcmp+0x48>
 180610c:	20bffa36 	bltu	r4,r2,18060f8 <__mcmp+0x28>
 1806110:	3805883a 	mov	r2,r7
 1806114:	f800283a 	ret
 1806118:	30c00336 	bltu	r6,r3,1806128 <__mcmp+0x58>
 180611c:	01c00044 	movi	r7,1
 1806120:	3805883a 	mov	r2,r7
 1806124:	f800283a 	ret
 1806128:	01ffffc4 	movi	r7,-1
 180612c:	003ff806 	br	1806110 <__mcmp+0x40>

01806130 <__ulp>:
 1806130:	295ffc2c 	andhi	r5,r5,32752
 1806134:	013f3034 	movhi	r4,64704
 1806138:	290b883a 	add	r5,r5,r4
 180613c:	0145c83a 	sub	r2,zero,r5
 1806140:	1007d53a 	srai	r3,r2,20
 1806144:	000d883a 	mov	r6,zero
 1806148:	0140040e 	bge	zero,r5,180615c <__ulp+0x2c>
 180614c:	280f883a 	mov	r7,r5
 1806150:	3807883a 	mov	r3,r7
 1806154:	3005883a 	mov	r2,r6
 1806158:	f800283a 	ret
 180615c:	008004c4 	movi	r2,19
 1806160:	193ffb04 	addi	r4,r3,-20
 1806164:	10c00c0e 	bge	r2,r3,1806198 <__ulp+0x68>
 1806168:	008007c4 	movi	r2,31
 180616c:	1107c83a 	sub	r3,r2,r4
 1806170:	00800784 	movi	r2,30
 1806174:	01400044 	movi	r5,1
 1806178:	11000216 	blt	r2,r4,1806184 <__ulp+0x54>
 180617c:	00800044 	movi	r2,1
 1806180:	10ca983a 	sll	r5,r2,r3
 1806184:	000f883a 	mov	r7,zero
 1806188:	280d883a 	mov	r6,r5
 180618c:	3807883a 	mov	r3,r7
 1806190:	3005883a 	mov	r2,r6
 1806194:	f800283a 	ret
 1806198:	00800234 	movhi	r2,8
 180619c:	10cfd83a 	sra	r7,r2,r3
 18061a0:	000d883a 	mov	r6,zero
 18061a4:	3005883a 	mov	r2,r6
 18061a8:	3807883a 	mov	r3,r7
 18061ac:	f800283a 	ret

018061b0 <__b2d>:
 18061b0:	20800417 	ldw	r2,16(r4)
 18061b4:	defff904 	addi	sp,sp,-28
 18061b8:	dd000415 	stw	r20,16(sp)
 18061bc:	1085883a 	add	r2,r2,r2
 18061c0:	25000504 	addi	r20,r4,20
 18061c4:	1085883a 	add	r2,r2,r2
 18061c8:	dc000015 	stw	r16,0(sp)
 18061cc:	a0a1883a 	add	r16,r20,r2
 18061d0:	dd400515 	stw	r21,20(sp)
 18061d4:	857fff17 	ldw	r21,-4(r16)
 18061d8:	dc400115 	stw	r17,4(sp)
 18061dc:	dfc00615 	stw	ra,24(sp)
 18061e0:	a809883a 	mov	r4,r21
 18061e4:	2823883a 	mov	r17,r5
 18061e8:	dcc00315 	stw	r19,12(sp)
 18061ec:	dc800215 	stw	r18,8(sp)
 18061f0:	1805f9c0 	call	1805f9c <__hi0bits>
 18061f4:	100b883a 	mov	r5,r2
 18061f8:	00800804 	movi	r2,32
 18061fc:	1145c83a 	sub	r2,r2,r5
 1806200:	88800015 	stw	r2,0(r17)
 1806204:	00800284 	movi	r2,10
 1806208:	80ffff04 	addi	r3,r16,-4
 180620c:	11401416 	blt	r2,r5,1806260 <__b2d+0xb0>
 1806210:	008002c4 	movi	r2,11
 1806214:	1149c83a 	sub	r4,r2,r5
 1806218:	a0c02736 	bltu	r20,r3,18062b8 <__b2d+0x108>
 180621c:	000d883a 	mov	r6,zero
 1806220:	28800544 	addi	r2,r5,21
 1806224:	a906d83a 	srl	r3,r21,r4
 1806228:	a884983a 	sll	r2,r21,r2
 180622c:	1ccffc34 	orhi	r19,r3,16368
 1806230:	11a4b03a 	or	r18,r2,r6
 1806234:	9005883a 	mov	r2,r18
 1806238:	9807883a 	mov	r3,r19
 180623c:	dfc00617 	ldw	ra,24(sp)
 1806240:	dd400517 	ldw	r21,20(sp)
 1806244:	dd000417 	ldw	r20,16(sp)
 1806248:	dcc00317 	ldw	r19,12(sp)
 180624c:	dc800217 	ldw	r18,8(sp)
 1806250:	dc400117 	ldw	r17,4(sp)
 1806254:	dc000017 	ldw	r16,0(sp)
 1806258:	dec00704 	addi	sp,sp,28
 180625c:	f800283a 	ret
 1806260:	a0c00e36 	bltu	r20,r3,180629c <__b2d+0xec>
 1806264:	293ffd44 	addi	r4,r5,-11
 1806268:	000d883a 	mov	r6,zero
 180626c:	20000f26 	beq	r4,zero,18062ac <__b2d+0xfc>
 1806270:	00800804 	movi	r2,32
 1806274:	110bc83a 	sub	r5,r2,r4
 1806278:	a0c01236 	bltu	r20,r3,18062c4 <__b2d+0x114>
 180627c:	000f883a 	mov	r7,zero
 1806280:	a904983a 	sll	r2,r21,r4
 1806284:	3146d83a 	srl	r3,r6,r5
 1806288:	3108983a 	sll	r4,r6,r4
 180628c:	108ffc34 	orhi	r2,r2,16368
 1806290:	18a6b03a 	or	r19,r3,r2
 1806294:	3924b03a 	or	r18,r7,r4
 1806298:	003fe606 	br	1806234 <__b2d+0x84>
 180629c:	293ffd44 	addi	r4,r5,-11
 18062a0:	81bffe17 	ldw	r6,-8(r16)
 18062a4:	80fffe04 	addi	r3,r16,-8
 18062a8:	203ff11e 	bne	r4,zero,1806270 <__b2d+0xc0>
 18062ac:	accffc34 	orhi	r19,r21,16368
 18062b0:	3025883a 	mov	r18,r6
 18062b4:	003fdf06 	br	1806234 <__b2d+0x84>
 18062b8:	18bfff17 	ldw	r2,-4(r3)
 18062bc:	110cd83a 	srl	r6,r2,r4
 18062c0:	003fd706 	br	1806220 <__b2d+0x70>
 18062c4:	18bfff17 	ldw	r2,-4(r3)
 18062c8:	114ed83a 	srl	r7,r2,r5
 18062cc:	003fec06 	br	1806280 <__b2d+0xd0>

018062d0 <__ratio>:
 18062d0:	defff904 	addi	sp,sp,-28
 18062d4:	dc400215 	stw	r17,8(sp)
 18062d8:	2823883a 	mov	r17,r5
 18062dc:	d80b883a 	mov	r5,sp
 18062e0:	dfc00615 	stw	ra,24(sp)
 18062e4:	dd000515 	stw	r20,20(sp)
 18062e8:	dcc00415 	stw	r19,16(sp)
 18062ec:	dc800315 	stw	r18,12(sp)
 18062f0:	2025883a 	mov	r18,r4
 18062f4:	18061b00 	call	18061b0 <__b2d>
 18062f8:	8809883a 	mov	r4,r17
 18062fc:	d9400104 	addi	r5,sp,4
 1806300:	1027883a 	mov	r19,r2
 1806304:	1829883a 	mov	r20,r3
 1806308:	18061b00 	call	18061b0 <__b2d>
 180630c:	89000417 	ldw	r4,16(r17)
 1806310:	91c00417 	ldw	r7,16(r18)
 1806314:	d9800117 	ldw	r6,4(sp)
 1806318:	180b883a 	mov	r5,r3
 180631c:	390fc83a 	sub	r7,r7,r4
 1806320:	1009883a 	mov	r4,r2
 1806324:	d8800017 	ldw	r2,0(sp)
 1806328:	380e917a 	slli	r7,r7,5
 180632c:	2011883a 	mov	r8,r4
 1806330:	1185c83a 	sub	r2,r2,r6
 1806334:	11c5883a 	add	r2,r2,r7
 1806338:	1006953a 	slli	r3,r2,20
 180633c:	2813883a 	mov	r9,r5
 1806340:	00800d0e 	bge	zero,r2,1806378 <__ratio+0xa8>
 1806344:	1d29883a 	add	r20,r3,r20
 1806348:	a00b883a 	mov	r5,r20
 180634c:	480f883a 	mov	r7,r9
 1806350:	9809883a 	mov	r4,r19
 1806354:	400d883a 	mov	r6,r8
 1806358:	18093180 	call	1809318 <__divdf3>
 180635c:	dfc00617 	ldw	ra,24(sp)
 1806360:	dd000517 	ldw	r20,20(sp)
 1806364:	dcc00417 	ldw	r19,16(sp)
 1806368:	dc800317 	ldw	r18,12(sp)
 180636c:	dc400217 	ldw	r17,8(sp)
 1806370:	dec00704 	addi	sp,sp,28
 1806374:	f800283a 	ret
 1806378:	28d3c83a 	sub	r9,r5,r3
 180637c:	003ff206 	br	1806348 <__ratio+0x78>

01806380 <_mprec_log10>:
 1806380:	defffe04 	addi	sp,sp,-8
 1806384:	008005c4 	movi	r2,23
 1806388:	dc000015 	stw	r16,0(sp)
 180638c:	dfc00115 	stw	ra,4(sp)
 1806390:	2021883a 	mov	r16,r4
 1806394:	11000c16 	blt	r2,r4,18063c8 <_mprec_log10+0x48>
 1806398:	200490fa 	slli	r2,r4,3
 180639c:	00c06074 	movhi	r3,385
 18063a0:	18f6b304 	addi	r3,r3,-9524
 18063a4:	10c5883a 	add	r2,r2,r3
 18063a8:	12400117 	ldw	r9,4(r2)
 18063ac:	12000017 	ldw	r8,0(r2)
 18063b0:	4807883a 	mov	r3,r9
 18063b4:	4005883a 	mov	r2,r8
 18063b8:	dfc00117 	ldw	ra,4(sp)
 18063bc:	dc000017 	ldw	r16,0(sp)
 18063c0:	dec00204 	addi	sp,sp,8
 18063c4:	f800283a 	ret
 18063c8:	0011883a 	mov	r8,zero
 18063cc:	024ffc34 	movhi	r9,16368
 18063d0:	0005883a 	mov	r2,zero
 18063d4:	00d00934 	movhi	r3,16420
 18063d8:	480b883a 	mov	r5,r9
 18063dc:	4009883a 	mov	r4,r8
 18063e0:	180f883a 	mov	r7,r3
 18063e4:	100d883a 	mov	r6,r2
 18063e8:	1808f540 	call	1808f54 <__muldf3>
 18063ec:	843fffc4 	addi	r16,r16,-1
 18063f0:	1011883a 	mov	r8,r2
 18063f4:	1813883a 	mov	r9,r3
 18063f8:	803ff51e 	bne	r16,zero,18063d0 <_mprec_log10+0x50>
 18063fc:	4005883a 	mov	r2,r8
 1806400:	4807883a 	mov	r3,r9
 1806404:	dfc00117 	ldw	ra,4(sp)
 1806408:	dc000017 	ldw	r16,0(sp)
 180640c:	dec00204 	addi	sp,sp,8
 1806410:	f800283a 	ret

01806414 <__copybits>:
 1806414:	297fffc4 	addi	r5,r5,-1
 1806418:	30800417 	ldw	r2,16(r6)
 180641c:	280bd17a 	srai	r5,r5,5
 1806420:	31800504 	addi	r6,r6,20
 1806424:	1085883a 	add	r2,r2,r2
 1806428:	294b883a 	add	r5,r5,r5
 180642c:	294b883a 	add	r5,r5,r5
 1806430:	1085883a 	add	r2,r2,r2
 1806434:	290b883a 	add	r5,r5,r4
 1806438:	3087883a 	add	r3,r6,r2
 180643c:	29400104 	addi	r5,r5,4
 1806440:	30c0052e 	bgeu	r6,r3,1806458 <__copybits+0x44>
 1806444:	30800017 	ldw	r2,0(r6)
 1806448:	31800104 	addi	r6,r6,4
 180644c:	20800015 	stw	r2,0(r4)
 1806450:	21000104 	addi	r4,r4,4
 1806454:	30fffb36 	bltu	r6,r3,1806444 <__copybits+0x30>
 1806458:	2140032e 	bgeu	r4,r5,1806468 <__copybits+0x54>
 180645c:	20000015 	stw	zero,0(r4)
 1806460:	21000104 	addi	r4,r4,4
 1806464:	217ffd36 	bltu	r4,r5,180645c <__copybits+0x48>
 1806468:	f800283a 	ret

0180646c <__any_on>:
 180646c:	20800417 	ldw	r2,16(r4)
 1806470:	2807d17a 	srai	r3,r5,5
 1806474:	21000504 	addi	r4,r4,20
 1806478:	10c00d0e 	bge	r2,r3,18064b0 <__any_on+0x44>
 180647c:	1085883a 	add	r2,r2,r2
 1806480:	1085883a 	add	r2,r2,r2
 1806484:	208d883a 	add	r6,r4,r2
 1806488:	2180182e 	bgeu	r4,r6,18064ec <__any_on+0x80>
 180648c:	30bfff17 	ldw	r2,-4(r6)
 1806490:	30ffff04 	addi	r3,r6,-4
 1806494:	1000041e 	bne	r2,zero,18064a8 <__any_on+0x3c>
 1806498:	20c0142e 	bgeu	r4,r3,18064ec <__any_on+0x80>
 180649c:	18ffff04 	addi	r3,r3,-4
 18064a0:	18800017 	ldw	r2,0(r3)
 18064a4:	103ffc26 	beq	r2,zero,1806498 <__any_on+0x2c>
 18064a8:	00800044 	movi	r2,1
 18064ac:	f800283a 	ret
 18064b0:	18800a0e 	bge	r3,r2,18064dc <__any_on+0x70>
 18064b4:	294007cc 	andi	r5,r5,31
 18064b8:	28000826 	beq	r5,zero,18064dc <__any_on+0x70>
 18064bc:	18c5883a 	add	r2,r3,r3
 18064c0:	1085883a 	add	r2,r2,r2
 18064c4:	208d883a 	add	r6,r4,r2
 18064c8:	30c00017 	ldw	r3,0(r6)
 18064cc:	1944d83a 	srl	r2,r3,r5
 18064d0:	1144983a 	sll	r2,r2,r5
 18064d4:	18bff41e 	bne	r3,r2,18064a8 <__any_on+0x3c>
 18064d8:	003feb06 	br	1806488 <__any_on+0x1c>
 18064dc:	18c5883a 	add	r2,r3,r3
 18064e0:	1085883a 	add	r2,r2,r2
 18064e4:	208d883a 	add	r6,r4,r2
 18064e8:	003fe706 	br	1806488 <__any_on+0x1c>
 18064ec:	0005883a 	mov	r2,zero
 18064f0:	f800283a 	ret

018064f4 <_Balloc>:
 18064f4:	20c01317 	ldw	r3,76(r4)
 18064f8:	defffb04 	addi	sp,sp,-20
 18064fc:	dcc00315 	stw	r19,12(sp)
 1806500:	dc800215 	stw	r18,8(sp)
 1806504:	dfc00415 	stw	ra,16(sp)
 1806508:	2825883a 	mov	r18,r5
 180650c:	dc400115 	stw	r17,4(sp)
 1806510:	dc000015 	stw	r16,0(sp)
 1806514:	2027883a 	mov	r19,r4
 1806518:	01800404 	movi	r6,16
 180651c:	01400104 	movi	r5,4
 1806520:	18001726 	beq	r3,zero,1806580 <_Balloc+0x8c>
 1806524:	01400044 	movi	r5,1
 1806528:	9485883a 	add	r2,r18,r18
 180652c:	2ca2983a 	sll	r17,r5,r18
 1806530:	1085883a 	add	r2,r2,r2
 1806534:	10c7883a 	add	r3,r2,r3
 1806538:	1c000017 	ldw	r16,0(r3)
 180653c:	8c4d883a 	add	r6,r17,r17
 1806540:	318d883a 	add	r6,r6,r6
 1806544:	9809883a 	mov	r4,r19
 1806548:	31800504 	addi	r6,r6,20
 180654c:	80001226 	beq	r16,zero,1806598 <_Balloc+0xa4>
 1806550:	80800017 	ldw	r2,0(r16)
 1806554:	18800015 	stw	r2,0(r3)
 1806558:	80000415 	stw	zero,16(r16)
 180655c:	80000315 	stw	zero,12(r16)
 1806560:	8005883a 	mov	r2,r16
 1806564:	dfc00417 	ldw	ra,16(sp)
 1806568:	dcc00317 	ldw	r19,12(sp)
 180656c:	dc800217 	ldw	r18,8(sp)
 1806570:	dc400117 	ldw	r17,4(sp)
 1806574:	dc000017 	ldw	r16,0(sp)
 1806578:	dec00504 	addi	sp,sp,20
 180657c:	f800283a 	ret
 1806580:	18079540 	call	1807954 <_calloc_r>
 1806584:	1007883a 	mov	r3,r2
 1806588:	0021883a 	mov	r16,zero
 180658c:	98801315 	stw	r2,76(r19)
 1806590:	103fe41e 	bne	r2,zero,1806524 <_Balloc+0x30>
 1806594:	003ff206 	br	1806560 <_Balloc+0x6c>
 1806598:	18079540 	call	1807954 <_calloc_r>
 180659c:	103ff026 	beq	r2,zero,1806560 <_Balloc+0x6c>
 18065a0:	1021883a 	mov	r16,r2
 18065a4:	14800115 	stw	r18,4(r2)
 18065a8:	14400215 	stw	r17,8(r2)
 18065ac:	003fea06 	br	1806558 <_Balloc+0x64>

018065b0 <__d2b>:
 18065b0:	defff504 	addi	sp,sp,-44
 18065b4:	dcc00515 	stw	r19,20(sp)
 18065b8:	04c00044 	movi	r19,1
 18065bc:	dc000215 	stw	r16,8(sp)
 18065c0:	2821883a 	mov	r16,r5
 18065c4:	980b883a 	mov	r5,r19
 18065c8:	ddc00915 	stw	r23,36(sp)
 18065cc:	dd800815 	stw	r22,32(sp)
 18065d0:	dd400715 	stw	r21,28(sp)
 18065d4:	dd000615 	stw	r20,24(sp)
 18065d8:	dc800415 	stw	r18,16(sp)
 18065dc:	dc400315 	stw	r17,12(sp)
 18065e0:	dfc00a15 	stw	ra,40(sp)
 18065e4:	3023883a 	mov	r17,r6
 18065e8:	382d883a 	mov	r22,r7
 18065ec:	ddc00b17 	ldw	r23,44(sp)
 18065f0:	18064f40 	call	18064f4 <_Balloc>
 18065f4:	1025883a 	mov	r18,r2
 18065f8:	00a00034 	movhi	r2,32768
 18065fc:	10bfffc4 	addi	r2,r2,-1
 1806600:	8888703a 	and	r4,r17,r2
 1806604:	202ad53a 	srli	r21,r4,20
 1806608:	00800434 	movhi	r2,16
 180660c:	10bfffc4 	addi	r2,r2,-1
 1806610:	8886703a 	and	r3,r17,r2
 1806614:	a829003a 	cmpeq	r20,r21,zero
 1806618:	800b883a 	mov	r5,r16
 180661c:	d8c00115 	stw	r3,4(sp)
 1806620:	94000504 	addi	r16,r18,20
 1806624:	a000021e 	bne	r20,zero,1806630 <__d2b+0x80>
 1806628:	18c00434 	orhi	r3,r3,16
 180662c:	d8c00115 	stw	r3,4(sp)
 1806630:	28002726 	beq	r5,zero,18066d0 <__d2b+0x120>
 1806634:	d809883a 	mov	r4,sp
 1806638:	d9400015 	stw	r5,0(sp)
 180663c:	180600c0 	call	180600c <__lo0bits>
 1806640:	100d883a 	mov	r6,r2
 1806644:	10003526 	beq	r2,zero,180671c <__d2b+0x16c>
 1806648:	d8c00117 	ldw	r3,4(sp)
 180664c:	00800804 	movi	r2,32
 1806650:	1185c83a 	sub	r2,r2,r6
 1806654:	d9000017 	ldw	r4,0(sp)
 1806658:	1886983a 	sll	r3,r3,r2
 180665c:	1906b03a 	or	r3,r3,r4
 1806660:	90c00515 	stw	r3,20(r18)
 1806664:	d8c00117 	ldw	r3,4(sp)
 1806668:	1986d83a 	srl	r3,r3,r6
 180666c:	d8c00115 	stw	r3,4(sp)
 1806670:	180b003a 	cmpeq	r5,r3,zero
 1806674:	00800084 	movi	r2,2
 1806678:	114bc83a 	sub	r5,r2,r5
 180667c:	80c00115 	stw	r3,4(r16)
 1806680:	91400415 	stw	r5,16(r18)
 1806684:	a0001a1e 	bne	r20,zero,18066f0 <__d2b+0x140>
 1806688:	3545883a 	add	r2,r6,r21
 180668c:	10bef344 	addi	r2,r2,-1075
 1806690:	00c00d44 	movi	r3,53
 1806694:	b0800015 	stw	r2,0(r22)
 1806698:	1987c83a 	sub	r3,r3,r6
 180669c:	b8c00015 	stw	r3,0(r23)
 18066a0:	9005883a 	mov	r2,r18
 18066a4:	dfc00a17 	ldw	ra,40(sp)
 18066a8:	ddc00917 	ldw	r23,36(sp)
 18066ac:	dd800817 	ldw	r22,32(sp)
 18066b0:	dd400717 	ldw	r21,28(sp)
 18066b4:	dd000617 	ldw	r20,24(sp)
 18066b8:	dcc00517 	ldw	r19,20(sp)
 18066bc:	dc800417 	ldw	r18,16(sp)
 18066c0:	dc400317 	ldw	r17,12(sp)
 18066c4:	dc000217 	ldw	r16,8(sp)
 18066c8:	dec00b04 	addi	sp,sp,44
 18066cc:	f800283a 	ret
 18066d0:	d9000104 	addi	r4,sp,4
 18066d4:	180600c0 	call	180600c <__lo0bits>
 18066d8:	11800804 	addi	r6,r2,32
 18066dc:	d8800117 	ldw	r2,4(sp)
 18066e0:	94c00415 	stw	r19,16(r18)
 18066e4:	980b883a 	mov	r5,r19
 18066e8:	90800515 	stw	r2,20(r18)
 18066ec:	a03fe626 	beq	r20,zero,1806688 <__d2b+0xd8>
 18066f0:	2945883a 	add	r2,r5,r5
 18066f4:	1085883a 	add	r2,r2,r2
 18066f8:	1405883a 	add	r2,r2,r16
 18066fc:	113fff17 	ldw	r4,-4(r2)
 1806700:	30fef384 	addi	r3,r6,-1074
 1806704:	2820917a 	slli	r16,r5,5
 1806708:	b0c00015 	stw	r3,0(r22)
 180670c:	1805f9c0 	call	1805f9c <__hi0bits>
 1806710:	80a1c83a 	sub	r16,r16,r2
 1806714:	bc000015 	stw	r16,0(r23)
 1806718:	003fe106 	br	18066a0 <__d2b+0xf0>
 180671c:	d8800017 	ldw	r2,0(sp)
 1806720:	90800515 	stw	r2,20(r18)
 1806724:	d8c00117 	ldw	r3,4(sp)
 1806728:	003fd106 	br	1806670 <__d2b+0xc0>

0180672c <__mdiff>:
 180672c:	defffb04 	addi	sp,sp,-20
 1806730:	dc000015 	stw	r16,0(sp)
 1806734:	2821883a 	mov	r16,r5
 1806738:	dc800215 	stw	r18,8(sp)
 180673c:	300b883a 	mov	r5,r6
 1806740:	2025883a 	mov	r18,r4
 1806744:	8009883a 	mov	r4,r16
 1806748:	dc400115 	stw	r17,4(sp)
 180674c:	dfc00415 	stw	ra,16(sp)
 1806750:	dcc00315 	stw	r19,12(sp)
 1806754:	3023883a 	mov	r17,r6
 1806758:	18060d00 	call	18060d0 <__mcmp>
 180675c:	10004226 	beq	r2,zero,1806868 <__mdiff+0x13c>
 1806760:	10005016 	blt	r2,zero,18068a4 <__mdiff+0x178>
 1806764:	0027883a 	mov	r19,zero
 1806768:	81400117 	ldw	r5,4(r16)
 180676c:	9009883a 	mov	r4,r18
 1806770:	18064f40 	call	18064f4 <_Balloc>
 1806774:	1019883a 	mov	r12,r2
 1806778:	82800417 	ldw	r10,16(r16)
 180677c:	88800417 	ldw	r2,16(r17)
 1806780:	81800504 	addi	r6,r16,20
 1806784:	5287883a 	add	r3,r10,r10
 1806788:	1085883a 	add	r2,r2,r2
 180678c:	18c7883a 	add	r3,r3,r3
 1806790:	1085883a 	add	r2,r2,r2
 1806794:	8a000504 	addi	r8,r17,20
 1806798:	64c00315 	stw	r19,12(r12)
 180679c:	30db883a 	add	r13,r6,r3
 18067a0:	4097883a 	add	r11,r8,r2
 18067a4:	61c00504 	addi	r7,r12,20
 18067a8:	0013883a 	mov	r9,zero
 18067ac:	31000017 	ldw	r4,0(r6)
 18067b0:	41400017 	ldw	r5,0(r8)
 18067b4:	42000104 	addi	r8,r8,4
 18067b8:	20bfffcc 	andi	r2,r4,65535
 18067bc:	28ffffcc 	andi	r3,r5,65535
 18067c0:	10c5c83a 	sub	r2,r2,r3
 18067c4:	1245883a 	add	r2,r2,r9
 18067c8:	2008d43a 	srli	r4,r4,16
 18067cc:	280ad43a 	srli	r5,r5,16
 18067d0:	1007d43a 	srai	r3,r2,16
 18067d4:	3880000d 	sth	r2,0(r7)
 18067d8:	2149c83a 	sub	r4,r4,r5
 18067dc:	20c9883a 	add	r4,r4,r3
 18067e0:	3900008d 	sth	r4,2(r7)
 18067e4:	31800104 	addi	r6,r6,4
 18067e8:	39c00104 	addi	r7,r7,4
 18067ec:	2013d43a 	srai	r9,r4,16
 18067f0:	42ffee36 	bltu	r8,r11,18067ac <__mdiff+0x80>
 18067f4:	33400c2e 	bgeu	r6,r13,1806828 <__mdiff+0xfc>
 18067f8:	30800017 	ldw	r2,0(r6)
 18067fc:	31800104 	addi	r6,r6,4
 1806800:	10ffffcc 	andi	r3,r2,65535
 1806804:	1a47883a 	add	r3,r3,r9
 1806808:	1004d43a 	srli	r2,r2,16
 180680c:	1809d43a 	srai	r4,r3,16
 1806810:	38c0000d 	sth	r3,0(r7)
 1806814:	1105883a 	add	r2,r2,r4
 1806818:	3880008d 	sth	r2,2(r7)
 180681c:	1013d43a 	srai	r9,r2,16
 1806820:	39c00104 	addi	r7,r7,4
 1806824:	337ff436 	bltu	r6,r13,18067f8 <__mdiff+0xcc>
 1806828:	38bfff17 	ldw	r2,-4(r7)
 180682c:	38ffff04 	addi	r3,r7,-4
 1806830:	1000041e 	bne	r2,zero,1806844 <__mdiff+0x118>
 1806834:	18ffff04 	addi	r3,r3,-4
 1806838:	18800017 	ldw	r2,0(r3)
 180683c:	52bfffc4 	addi	r10,r10,-1
 1806840:	103ffc26 	beq	r2,zero,1806834 <__mdiff+0x108>
 1806844:	6005883a 	mov	r2,r12
 1806848:	62800415 	stw	r10,16(r12)
 180684c:	dfc00417 	ldw	ra,16(sp)
 1806850:	dcc00317 	ldw	r19,12(sp)
 1806854:	dc800217 	ldw	r18,8(sp)
 1806858:	dc400117 	ldw	r17,4(sp)
 180685c:	dc000017 	ldw	r16,0(sp)
 1806860:	dec00504 	addi	sp,sp,20
 1806864:	f800283a 	ret
 1806868:	9009883a 	mov	r4,r18
 180686c:	000b883a 	mov	r5,zero
 1806870:	18064f40 	call	18064f4 <_Balloc>
 1806874:	1019883a 	mov	r12,r2
 1806878:	00800044 	movi	r2,1
 180687c:	60800415 	stw	r2,16(r12)
 1806880:	6005883a 	mov	r2,r12
 1806884:	60000515 	stw	zero,20(r12)
 1806888:	dfc00417 	ldw	ra,16(sp)
 180688c:	dcc00317 	ldw	r19,12(sp)
 1806890:	dc800217 	ldw	r18,8(sp)
 1806894:	dc400117 	ldw	r17,4(sp)
 1806898:	dc000017 	ldw	r16,0(sp)
 180689c:	dec00504 	addi	sp,sp,20
 18068a0:	f800283a 	ret
 18068a4:	880d883a 	mov	r6,r17
 18068a8:	04c00044 	movi	r19,1
 18068ac:	8023883a 	mov	r17,r16
 18068b0:	3021883a 	mov	r16,r6
 18068b4:	003fac06 	br	1806768 <__mdiff+0x3c>

018068b8 <__lshift>:
 18068b8:	defff904 	addi	sp,sp,-28
 18068bc:	28800417 	ldw	r2,16(r5)
 18068c0:	dc000015 	stw	r16,0(sp)
 18068c4:	3021d17a 	srai	r16,r6,5
 18068c8:	28c00217 	ldw	r3,8(r5)
 18068cc:	10800044 	addi	r2,r2,1
 18068d0:	dc400115 	stw	r17,4(sp)
 18068d4:	80a3883a 	add	r17,r16,r2
 18068d8:	dd400515 	stw	r21,20(sp)
 18068dc:	dd000415 	stw	r20,16(sp)
 18068e0:	dc800215 	stw	r18,8(sp)
 18068e4:	dfc00615 	stw	ra,24(sp)
 18068e8:	2825883a 	mov	r18,r5
 18068ec:	dcc00315 	stw	r19,12(sp)
 18068f0:	3029883a 	mov	r20,r6
 18068f4:	202b883a 	mov	r21,r4
 18068f8:	29400117 	ldw	r5,4(r5)
 18068fc:	1c40030e 	bge	r3,r17,180690c <__lshift+0x54>
 1806900:	18c7883a 	add	r3,r3,r3
 1806904:	29400044 	addi	r5,r5,1
 1806908:	1c7ffd16 	blt	r3,r17,1806900 <__lshift+0x48>
 180690c:	a809883a 	mov	r4,r21
 1806910:	18064f40 	call	18064f4 <_Balloc>
 1806914:	1027883a 	mov	r19,r2
 1806918:	11400504 	addi	r5,r2,20
 180691c:	0400090e 	bge	zero,r16,1806944 <__lshift+0x8c>
 1806920:	2805883a 	mov	r2,r5
 1806924:	0007883a 	mov	r3,zero
 1806928:	18c00044 	addi	r3,r3,1
 180692c:	10000015 	stw	zero,0(r2)
 1806930:	10800104 	addi	r2,r2,4
 1806934:	80fffc1e 	bne	r16,r3,1806928 <__lshift+0x70>
 1806938:	8405883a 	add	r2,r16,r16
 180693c:	1085883a 	add	r2,r2,r2
 1806940:	288b883a 	add	r5,r5,r2
 1806944:	90800417 	ldw	r2,16(r18)
 1806948:	91000504 	addi	r4,r18,20
 180694c:	a18007cc 	andi	r6,r20,31
 1806950:	1085883a 	add	r2,r2,r2
 1806954:	1085883a 	add	r2,r2,r2
 1806958:	208f883a 	add	r7,r4,r2
 180695c:	30001e26 	beq	r6,zero,18069d8 <__lshift+0x120>
 1806960:	00800804 	movi	r2,32
 1806964:	1191c83a 	sub	r8,r2,r6
 1806968:	0007883a 	mov	r3,zero
 180696c:	20800017 	ldw	r2,0(r4)
 1806970:	1184983a 	sll	r2,r2,r6
 1806974:	1884b03a 	or	r2,r3,r2
 1806978:	28800015 	stw	r2,0(r5)
 180697c:	20c00017 	ldw	r3,0(r4)
 1806980:	21000104 	addi	r4,r4,4
 1806984:	29400104 	addi	r5,r5,4
 1806988:	1a06d83a 	srl	r3,r3,r8
 180698c:	21fff736 	bltu	r4,r7,180696c <__lshift+0xb4>
 1806990:	28c00015 	stw	r3,0(r5)
 1806994:	18000126 	beq	r3,zero,180699c <__lshift+0xe4>
 1806998:	8c400044 	addi	r17,r17,1
 180699c:	88bfffc4 	addi	r2,r17,-1
 18069a0:	98800415 	stw	r2,16(r19)
 18069a4:	a809883a 	mov	r4,r21
 18069a8:	900b883a 	mov	r5,r18
 18069ac:	1805f740 	call	1805f74 <_Bfree>
 18069b0:	9805883a 	mov	r2,r19
 18069b4:	dfc00617 	ldw	ra,24(sp)
 18069b8:	dd400517 	ldw	r21,20(sp)
 18069bc:	dd000417 	ldw	r20,16(sp)
 18069c0:	dcc00317 	ldw	r19,12(sp)
 18069c4:	dc800217 	ldw	r18,8(sp)
 18069c8:	dc400117 	ldw	r17,4(sp)
 18069cc:	dc000017 	ldw	r16,0(sp)
 18069d0:	dec00704 	addi	sp,sp,28
 18069d4:	f800283a 	ret
 18069d8:	20800017 	ldw	r2,0(r4)
 18069dc:	21000104 	addi	r4,r4,4
 18069e0:	28800015 	stw	r2,0(r5)
 18069e4:	29400104 	addi	r5,r5,4
 18069e8:	21ffec2e 	bgeu	r4,r7,180699c <__lshift+0xe4>
 18069ec:	20800017 	ldw	r2,0(r4)
 18069f0:	21000104 	addi	r4,r4,4
 18069f4:	28800015 	stw	r2,0(r5)
 18069f8:	29400104 	addi	r5,r5,4
 18069fc:	21fff636 	bltu	r4,r7,18069d8 <__lshift+0x120>
 1806a00:	003fe606 	br	180699c <__lshift+0xe4>

01806a04 <__multiply>:
 1806a04:	defff004 	addi	sp,sp,-64
 1806a08:	dc800815 	stw	r18,32(sp)
 1806a0c:	dc400715 	stw	r17,28(sp)
 1806a10:	2c800417 	ldw	r18,16(r5)
 1806a14:	34400417 	ldw	r17,16(r6)
 1806a18:	dcc00915 	stw	r19,36(sp)
 1806a1c:	dc000615 	stw	r16,24(sp)
 1806a20:	dfc00f15 	stw	ra,60(sp)
 1806a24:	df000e15 	stw	fp,56(sp)
 1806a28:	ddc00d15 	stw	r23,52(sp)
 1806a2c:	dd800c15 	stw	r22,48(sp)
 1806a30:	dd400b15 	stw	r21,44(sp)
 1806a34:	dd000a15 	stw	r20,40(sp)
 1806a38:	2821883a 	mov	r16,r5
 1806a3c:	3027883a 	mov	r19,r6
 1806a40:	9440040e 	bge	r18,r17,1806a54 <__multiply+0x50>
 1806a44:	8825883a 	mov	r18,r17
 1806a48:	2c400417 	ldw	r17,16(r5)
 1806a4c:	2827883a 	mov	r19,r5
 1806a50:	3021883a 	mov	r16,r6
 1806a54:	80800217 	ldw	r2,8(r16)
 1806a58:	9447883a 	add	r3,r18,r17
 1806a5c:	d8c00415 	stw	r3,16(sp)
 1806a60:	81400117 	ldw	r5,4(r16)
 1806a64:	10c0010e 	bge	r2,r3,1806a6c <__multiply+0x68>
 1806a68:	29400044 	addi	r5,r5,1
 1806a6c:	18064f40 	call	18064f4 <_Balloc>
 1806a70:	d8800515 	stw	r2,20(sp)
 1806a74:	d9000417 	ldw	r4,16(sp)
 1806a78:	d8c00517 	ldw	r3,20(sp)
 1806a7c:	2105883a 	add	r2,r4,r4
 1806a80:	1085883a 	add	r2,r2,r2
 1806a84:	19000504 	addi	r4,r3,20
 1806a88:	2085883a 	add	r2,r4,r2
 1806a8c:	d8800315 	stw	r2,12(sp)
 1806a90:	2080052e 	bgeu	r4,r2,1806aa8 <__multiply+0xa4>
 1806a94:	2005883a 	mov	r2,r4
 1806a98:	d8c00317 	ldw	r3,12(sp)
 1806a9c:	10000015 	stw	zero,0(r2)
 1806aa0:	10800104 	addi	r2,r2,4
 1806aa4:	10fffc36 	bltu	r2,r3,1806a98 <__multiply+0x94>
 1806aa8:	8c45883a 	add	r2,r17,r17
 1806aac:	9487883a 	add	r3,r18,r18
 1806ab0:	9dc00504 	addi	r23,r19,20
 1806ab4:	1085883a 	add	r2,r2,r2
 1806ab8:	84000504 	addi	r16,r16,20
 1806abc:	18c7883a 	add	r3,r3,r3
 1806ac0:	b885883a 	add	r2,r23,r2
 1806ac4:	dc000015 	stw	r16,0(sp)
 1806ac8:	d8800215 	stw	r2,8(sp)
 1806acc:	80f9883a 	add	fp,r16,r3
 1806ad0:	b880432e 	bgeu	r23,r2,1806be0 <__multiply+0x1dc>
 1806ad4:	d9000115 	stw	r4,4(sp)
 1806ad8:	b9000017 	ldw	r4,0(r23)
 1806adc:	253fffcc 	andi	r20,r4,65535
 1806ae0:	a0001a26 	beq	r20,zero,1806b4c <__multiply+0x148>
 1806ae4:	dcc00017 	ldw	r19,0(sp)
 1806ae8:	dc800117 	ldw	r18,4(sp)
 1806aec:	002b883a 	mov	r21,zero
 1806af0:	9c400017 	ldw	r17,0(r19)
 1806af4:	94000017 	ldw	r16,0(r18)
 1806af8:	a009883a 	mov	r4,r20
 1806afc:	897fffcc 	andi	r5,r17,65535
 1806b00:	1809b7c0 	call	1809b7c <__mulsi3>
 1806b04:	880ad43a 	srli	r5,r17,16
 1806b08:	80ffffcc 	andi	r3,r16,65535
 1806b0c:	a8c7883a 	add	r3,r21,r3
 1806b10:	a009883a 	mov	r4,r20
 1806b14:	10e3883a 	add	r17,r2,r3
 1806b18:	8020d43a 	srli	r16,r16,16
 1806b1c:	1809b7c0 	call	1809b7c <__mulsi3>
 1806b20:	8806d43a 	srli	r3,r17,16
 1806b24:	1405883a 	add	r2,r2,r16
 1806b28:	9cc00104 	addi	r19,r19,4
 1806b2c:	1887883a 	add	r3,r3,r2
 1806b30:	90c0008d 	sth	r3,2(r18)
 1806b34:	9440000d 	sth	r17,0(r18)
 1806b38:	182ad43a 	srli	r21,r3,16
 1806b3c:	94800104 	addi	r18,r18,4
 1806b40:	9f3feb36 	bltu	r19,fp,1806af0 <__multiply+0xec>
 1806b44:	95400015 	stw	r21,0(r18)
 1806b48:	b9000017 	ldw	r4,0(r23)
 1806b4c:	202ad43a 	srli	r21,r4,16
 1806b50:	a8001c26 	beq	r21,zero,1806bc4 <__multiply+0x1c0>
 1806b54:	d9000117 	ldw	r4,4(sp)
 1806b58:	dd000017 	ldw	r20,0(sp)
 1806b5c:	002d883a 	mov	r22,zero
 1806b60:	24c00017 	ldw	r19,0(r4)
 1806b64:	2025883a 	mov	r18,r4
 1806b68:	9823883a 	mov	r17,r19
 1806b6c:	a4000017 	ldw	r16,0(r20)
 1806b70:	a809883a 	mov	r4,r21
 1806b74:	a5000104 	addi	r20,r20,4
 1806b78:	817fffcc 	andi	r5,r16,65535
 1806b7c:	1809b7c0 	call	1809b7c <__mulsi3>
 1806b80:	8806d43a 	srli	r3,r17,16
 1806b84:	800ad43a 	srli	r5,r16,16
 1806b88:	94c0000d 	sth	r19,0(r18)
 1806b8c:	b0c7883a 	add	r3,r22,r3
 1806b90:	10e1883a 	add	r16,r2,r3
 1806b94:	9400008d 	sth	r16,2(r18)
 1806b98:	a809883a 	mov	r4,r21
 1806b9c:	94800104 	addi	r18,r18,4
 1806ba0:	1809b7c0 	call	1809b7c <__mulsi3>
 1806ba4:	94400017 	ldw	r17,0(r18)
 1806ba8:	8020d43a 	srli	r16,r16,16
 1806bac:	88ffffcc 	andi	r3,r17,65535
 1806bb0:	10c5883a 	add	r2,r2,r3
 1806bb4:	80a7883a 	add	r19,r16,r2
 1806bb8:	982cd43a 	srli	r22,r19,16
 1806bbc:	a73feb36 	bltu	r20,fp,1806b6c <__multiply+0x168>
 1806bc0:	94c00015 	stw	r19,0(r18)
 1806bc4:	d8800217 	ldw	r2,8(sp)
 1806bc8:	bdc00104 	addi	r23,r23,4
 1806bcc:	b880042e 	bgeu	r23,r2,1806be0 <__multiply+0x1dc>
 1806bd0:	d8c00117 	ldw	r3,4(sp)
 1806bd4:	18c00104 	addi	r3,r3,4
 1806bd8:	d8c00115 	stw	r3,4(sp)
 1806bdc:	003fbe06 	br	1806ad8 <__multiply+0xd4>
 1806be0:	d9000417 	ldw	r4,16(sp)
 1806be4:	01000c0e 	bge	zero,r4,1806c18 <__multiply+0x214>
 1806be8:	d8c00317 	ldw	r3,12(sp)
 1806bec:	18bfff17 	ldw	r2,-4(r3)
 1806bf0:	18ffff04 	addi	r3,r3,-4
 1806bf4:	10000326 	beq	r2,zero,1806c04 <__multiply+0x200>
 1806bf8:	00000706 	br	1806c18 <__multiply+0x214>
 1806bfc:	18800017 	ldw	r2,0(r3)
 1806c00:	1000051e 	bne	r2,zero,1806c18 <__multiply+0x214>
 1806c04:	d9000417 	ldw	r4,16(sp)
 1806c08:	18ffff04 	addi	r3,r3,-4
 1806c0c:	213fffc4 	addi	r4,r4,-1
 1806c10:	d9000415 	stw	r4,16(sp)
 1806c14:	203ff91e 	bne	r4,zero,1806bfc <__multiply+0x1f8>
 1806c18:	d8800417 	ldw	r2,16(sp)
 1806c1c:	d8c00517 	ldw	r3,20(sp)
 1806c20:	18800415 	stw	r2,16(r3)
 1806c24:	1805883a 	mov	r2,r3
 1806c28:	dfc00f17 	ldw	ra,60(sp)
 1806c2c:	df000e17 	ldw	fp,56(sp)
 1806c30:	ddc00d17 	ldw	r23,52(sp)
 1806c34:	dd800c17 	ldw	r22,48(sp)
 1806c38:	dd400b17 	ldw	r21,44(sp)
 1806c3c:	dd000a17 	ldw	r20,40(sp)
 1806c40:	dcc00917 	ldw	r19,36(sp)
 1806c44:	dc800817 	ldw	r18,32(sp)
 1806c48:	dc400717 	ldw	r17,28(sp)
 1806c4c:	dc000617 	ldw	r16,24(sp)
 1806c50:	dec01004 	addi	sp,sp,64
 1806c54:	f800283a 	ret

01806c58 <__i2b>:
 1806c58:	defffd04 	addi	sp,sp,-12
 1806c5c:	dc000015 	stw	r16,0(sp)
 1806c60:	04000044 	movi	r16,1
 1806c64:	dc800115 	stw	r18,4(sp)
 1806c68:	2825883a 	mov	r18,r5
 1806c6c:	800b883a 	mov	r5,r16
 1806c70:	dfc00215 	stw	ra,8(sp)
 1806c74:	18064f40 	call	18064f4 <_Balloc>
 1806c78:	14000415 	stw	r16,16(r2)
 1806c7c:	14800515 	stw	r18,20(r2)
 1806c80:	dfc00217 	ldw	ra,8(sp)
 1806c84:	dc800117 	ldw	r18,4(sp)
 1806c88:	dc000017 	ldw	r16,0(sp)
 1806c8c:	dec00304 	addi	sp,sp,12
 1806c90:	f800283a 	ret

01806c94 <__multadd>:
 1806c94:	defff604 	addi	sp,sp,-40
 1806c98:	dd800615 	stw	r22,24(sp)
 1806c9c:	2d800417 	ldw	r22,16(r5)
 1806ca0:	df000815 	stw	fp,32(sp)
 1806ca4:	ddc00715 	stw	r23,28(sp)
 1806ca8:	dd400515 	stw	r21,20(sp)
 1806cac:	dd000415 	stw	r20,16(sp)
 1806cb0:	dcc00315 	stw	r19,12(sp)
 1806cb4:	dc800215 	stw	r18,8(sp)
 1806cb8:	dfc00915 	stw	ra,36(sp)
 1806cbc:	dc400115 	stw	r17,4(sp)
 1806cc0:	dc000015 	stw	r16,0(sp)
 1806cc4:	282f883a 	mov	r23,r5
 1806cc8:	2039883a 	mov	fp,r4
 1806ccc:	302b883a 	mov	r21,r6
 1806cd0:	3829883a 	mov	r20,r7
 1806cd4:	2c800504 	addi	r18,r5,20
 1806cd8:	0027883a 	mov	r19,zero
 1806cdc:	94400017 	ldw	r17,0(r18)
 1806ce0:	a80b883a 	mov	r5,r21
 1806ce4:	9cc00044 	addi	r19,r19,1
 1806ce8:	893fffcc 	andi	r4,r17,65535
 1806cec:	1809b7c0 	call	1809b7c <__mulsi3>
 1806cf0:	8808d43a 	srli	r4,r17,16
 1806cf4:	1521883a 	add	r16,r2,r20
 1806cf8:	a80b883a 	mov	r5,r21
 1806cfc:	1809b7c0 	call	1809b7c <__mulsi3>
 1806d00:	8008d43a 	srli	r4,r16,16
 1806d04:	843fffcc 	andi	r16,r16,65535
 1806d08:	1105883a 	add	r2,r2,r4
 1806d0c:	1006943a 	slli	r3,r2,16
 1806d10:	1028d43a 	srli	r20,r2,16
 1806d14:	1c07883a 	add	r3,r3,r16
 1806d18:	90c00015 	stw	r3,0(r18)
 1806d1c:	94800104 	addi	r18,r18,4
 1806d20:	9dbfee16 	blt	r19,r22,1806cdc <__multadd+0x48>
 1806d24:	a0000826 	beq	r20,zero,1806d48 <__multadd+0xb4>
 1806d28:	b8800217 	ldw	r2,8(r23)
 1806d2c:	b080130e 	bge	r22,r2,1806d7c <__multadd+0xe8>
 1806d30:	b585883a 	add	r2,r22,r22
 1806d34:	1085883a 	add	r2,r2,r2
 1806d38:	15c5883a 	add	r2,r2,r23
 1806d3c:	b0c00044 	addi	r3,r22,1
 1806d40:	15000515 	stw	r20,20(r2)
 1806d44:	b8c00415 	stw	r3,16(r23)
 1806d48:	b805883a 	mov	r2,r23
 1806d4c:	dfc00917 	ldw	ra,36(sp)
 1806d50:	df000817 	ldw	fp,32(sp)
 1806d54:	ddc00717 	ldw	r23,28(sp)
 1806d58:	dd800617 	ldw	r22,24(sp)
 1806d5c:	dd400517 	ldw	r21,20(sp)
 1806d60:	dd000417 	ldw	r20,16(sp)
 1806d64:	dcc00317 	ldw	r19,12(sp)
 1806d68:	dc800217 	ldw	r18,8(sp)
 1806d6c:	dc400117 	ldw	r17,4(sp)
 1806d70:	dc000017 	ldw	r16,0(sp)
 1806d74:	dec00a04 	addi	sp,sp,40
 1806d78:	f800283a 	ret
 1806d7c:	b9400117 	ldw	r5,4(r23)
 1806d80:	e009883a 	mov	r4,fp
 1806d84:	29400044 	addi	r5,r5,1
 1806d88:	18064f40 	call	18064f4 <_Balloc>
 1806d8c:	b9800417 	ldw	r6,16(r23)
 1806d90:	b9400304 	addi	r5,r23,12
 1806d94:	11000304 	addi	r4,r2,12
 1806d98:	318d883a 	add	r6,r6,r6
 1806d9c:	318d883a 	add	r6,r6,r6
 1806da0:	31800204 	addi	r6,r6,8
 1806da4:	1023883a 	mov	r17,r2
 1806da8:	1805d5c0 	call	1805d5c <memcpy>
 1806dac:	b80b883a 	mov	r5,r23
 1806db0:	e009883a 	mov	r4,fp
 1806db4:	1805f740 	call	1805f74 <_Bfree>
 1806db8:	882f883a 	mov	r23,r17
 1806dbc:	003fdc06 	br	1806d30 <__multadd+0x9c>

01806dc0 <__pow5mult>:
 1806dc0:	defffa04 	addi	sp,sp,-24
 1806dc4:	308000cc 	andi	r2,r6,3
 1806dc8:	dd000415 	stw	r20,16(sp)
 1806dcc:	dcc00315 	stw	r19,12(sp)
 1806dd0:	dc000015 	stw	r16,0(sp)
 1806dd4:	dfc00515 	stw	ra,20(sp)
 1806dd8:	dc800215 	stw	r18,8(sp)
 1806ddc:	dc400115 	stw	r17,4(sp)
 1806de0:	3021883a 	mov	r16,r6
 1806de4:	2027883a 	mov	r19,r4
 1806de8:	2829883a 	mov	r20,r5
 1806dec:	10002b1e 	bne	r2,zero,1806e9c <__pow5mult+0xdc>
 1806df0:	8025d0ba 	srai	r18,r16,2
 1806df4:	90001b26 	beq	r18,zero,1806e64 <__pow5mult+0xa4>
 1806df8:	9c001217 	ldw	r16,72(r19)
 1806dfc:	8000081e 	bne	r16,zero,1806e20 <__pow5mult+0x60>
 1806e00:	00003006 	br	1806ec4 <__pow5mult+0x104>
 1806e04:	800b883a 	mov	r5,r16
 1806e08:	800d883a 	mov	r6,r16
 1806e0c:	9809883a 	mov	r4,r19
 1806e10:	90001426 	beq	r18,zero,1806e64 <__pow5mult+0xa4>
 1806e14:	80800017 	ldw	r2,0(r16)
 1806e18:	10001b26 	beq	r2,zero,1806e88 <__pow5mult+0xc8>
 1806e1c:	1021883a 	mov	r16,r2
 1806e20:	9080004c 	andi	r2,r18,1
 1806e24:	1005003a 	cmpeq	r2,r2,zero
 1806e28:	9025d07a 	srai	r18,r18,1
 1806e2c:	800d883a 	mov	r6,r16
 1806e30:	9809883a 	mov	r4,r19
 1806e34:	a00b883a 	mov	r5,r20
 1806e38:	103ff21e 	bne	r2,zero,1806e04 <__pow5mult+0x44>
 1806e3c:	1806a040 	call	1806a04 <__multiply>
 1806e40:	a00b883a 	mov	r5,r20
 1806e44:	9809883a 	mov	r4,r19
 1806e48:	1023883a 	mov	r17,r2
 1806e4c:	1805f740 	call	1805f74 <_Bfree>
 1806e50:	8829883a 	mov	r20,r17
 1806e54:	800b883a 	mov	r5,r16
 1806e58:	800d883a 	mov	r6,r16
 1806e5c:	9809883a 	mov	r4,r19
 1806e60:	903fec1e 	bne	r18,zero,1806e14 <__pow5mult+0x54>
 1806e64:	a005883a 	mov	r2,r20
 1806e68:	dfc00517 	ldw	ra,20(sp)
 1806e6c:	dd000417 	ldw	r20,16(sp)
 1806e70:	dcc00317 	ldw	r19,12(sp)
 1806e74:	dc800217 	ldw	r18,8(sp)
 1806e78:	dc400117 	ldw	r17,4(sp)
 1806e7c:	dc000017 	ldw	r16,0(sp)
 1806e80:	dec00604 	addi	sp,sp,24
 1806e84:	f800283a 	ret
 1806e88:	1806a040 	call	1806a04 <__multiply>
 1806e8c:	80800015 	stw	r2,0(r16)
 1806e90:	1021883a 	mov	r16,r2
 1806e94:	10000015 	stw	zero,0(r2)
 1806e98:	003fe106 	br	1806e20 <__pow5mult+0x60>
 1806e9c:	1085883a 	add	r2,r2,r2
 1806ea0:	00c06074 	movhi	r3,385
 1806ea4:	18f6f904 	addi	r3,r3,-9244
 1806ea8:	1085883a 	add	r2,r2,r2
 1806eac:	10c5883a 	add	r2,r2,r3
 1806eb0:	11bfff17 	ldw	r6,-4(r2)
 1806eb4:	000f883a 	mov	r7,zero
 1806eb8:	1806c940 	call	1806c94 <__multadd>
 1806ebc:	1029883a 	mov	r20,r2
 1806ec0:	003fcb06 	br	1806df0 <__pow5mult+0x30>
 1806ec4:	9809883a 	mov	r4,r19
 1806ec8:	01409c44 	movi	r5,625
 1806ecc:	1806c580 	call	1806c58 <__i2b>
 1806ed0:	98801215 	stw	r2,72(r19)
 1806ed4:	1021883a 	mov	r16,r2
 1806ed8:	10000015 	stw	zero,0(r2)
 1806edc:	003fd006 	br	1806e20 <__pow5mult+0x60>

01806ee0 <__s2b>:
 1806ee0:	defff904 	addi	sp,sp,-28
 1806ee4:	dcc00315 	stw	r19,12(sp)
 1806ee8:	dc800215 	stw	r18,8(sp)
 1806eec:	2827883a 	mov	r19,r5
 1806ef0:	2025883a 	mov	r18,r4
 1806ef4:	01400244 	movi	r5,9
 1806ef8:	39000204 	addi	r4,r7,8
 1806efc:	dd000415 	stw	r20,16(sp)
 1806f00:	dc400115 	stw	r17,4(sp)
 1806f04:	dfc00615 	stw	ra,24(sp)
 1806f08:	dd400515 	stw	r21,20(sp)
 1806f0c:	dc000015 	stw	r16,0(sp)
 1806f10:	3829883a 	mov	r20,r7
 1806f14:	3023883a 	mov	r17,r6
 1806f18:	180087c0 	call	180087c <__divsi3>
 1806f1c:	00c00044 	movi	r3,1
 1806f20:	1880350e 	bge	r3,r2,1806ff8 <__s2b+0x118>
 1806f24:	000b883a 	mov	r5,zero
 1806f28:	18c7883a 	add	r3,r3,r3
 1806f2c:	29400044 	addi	r5,r5,1
 1806f30:	18bffd16 	blt	r3,r2,1806f28 <__s2b+0x48>
 1806f34:	9009883a 	mov	r4,r18
 1806f38:	18064f40 	call	18064f4 <_Balloc>
 1806f3c:	1011883a 	mov	r8,r2
 1806f40:	d8800717 	ldw	r2,28(sp)
 1806f44:	00c00044 	movi	r3,1
 1806f48:	01800244 	movi	r6,9
 1806f4c:	40800515 	stw	r2,20(r8)
 1806f50:	40c00415 	stw	r3,16(r8)
 1806f54:	3440260e 	bge	r6,r17,1806ff0 <__s2b+0x110>
 1806f58:	3021883a 	mov	r16,r6
 1806f5c:	99ab883a 	add	r21,r19,r6
 1806f60:	9c05883a 	add	r2,r19,r16
 1806f64:	11c00007 	ldb	r7,0(r2)
 1806f68:	400b883a 	mov	r5,r8
 1806f6c:	9009883a 	mov	r4,r18
 1806f70:	39fff404 	addi	r7,r7,-48
 1806f74:	01800284 	movi	r6,10
 1806f78:	1806c940 	call	1806c94 <__multadd>
 1806f7c:	84000044 	addi	r16,r16,1
 1806f80:	1011883a 	mov	r8,r2
 1806f84:	8c3ff61e 	bne	r17,r16,1806f60 <__s2b+0x80>
 1806f88:	ac45883a 	add	r2,r21,r17
 1806f8c:	117ffe04 	addi	r5,r2,-8
 1806f90:	880d883a 	mov	r6,r17
 1806f94:	35000c0e 	bge	r6,r20,1806fc8 <__s2b+0xe8>
 1806f98:	a185c83a 	sub	r2,r20,r6
 1806f9c:	2821883a 	mov	r16,r5
 1806fa0:	28a3883a 	add	r17,r5,r2
 1806fa4:	81c00007 	ldb	r7,0(r16)
 1806fa8:	400b883a 	mov	r5,r8
 1806fac:	9009883a 	mov	r4,r18
 1806fb0:	39fff404 	addi	r7,r7,-48
 1806fb4:	01800284 	movi	r6,10
 1806fb8:	1806c940 	call	1806c94 <__multadd>
 1806fbc:	84000044 	addi	r16,r16,1
 1806fc0:	1011883a 	mov	r8,r2
 1806fc4:	847ff71e 	bne	r16,r17,1806fa4 <__s2b+0xc4>
 1806fc8:	4005883a 	mov	r2,r8
 1806fcc:	dfc00617 	ldw	ra,24(sp)
 1806fd0:	dd400517 	ldw	r21,20(sp)
 1806fd4:	dd000417 	ldw	r20,16(sp)
 1806fd8:	dcc00317 	ldw	r19,12(sp)
 1806fdc:	dc800217 	ldw	r18,8(sp)
 1806fe0:	dc400117 	ldw	r17,4(sp)
 1806fe4:	dc000017 	ldw	r16,0(sp)
 1806fe8:	dec00704 	addi	sp,sp,28
 1806fec:	f800283a 	ret
 1806ff0:	99400284 	addi	r5,r19,10
 1806ff4:	003fe706 	br	1806f94 <__s2b+0xb4>
 1806ff8:	000b883a 	mov	r5,zero
 1806ffc:	003fcd06 	br	1806f34 <__s2b+0x54>

01807000 <_realloc_r>:
 1807000:	defff404 	addi	sp,sp,-48
 1807004:	dd800815 	stw	r22,32(sp)
 1807008:	dc800415 	stw	r18,16(sp)
 180700c:	dc400315 	stw	r17,12(sp)
 1807010:	dfc00b15 	stw	ra,44(sp)
 1807014:	df000a15 	stw	fp,40(sp)
 1807018:	ddc00915 	stw	r23,36(sp)
 180701c:	dd400715 	stw	r21,28(sp)
 1807020:	dd000615 	stw	r20,24(sp)
 1807024:	dcc00515 	stw	r19,20(sp)
 1807028:	dc000215 	stw	r16,8(sp)
 180702c:	2825883a 	mov	r18,r5
 1807030:	3023883a 	mov	r17,r6
 1807034:	202d883a 	mov	r22,r4
 1807038:	2800c926 	beq	r5,zero,1807360 <_realloc_r+0x360>
 180703c:	180a9000 	call	180a900 <__malloc_lock>
 1807040:	943ffe04 	addi	r16,r18,-8
 1807044:	88c002c4 	addi	r3,r17,11
 1807048:	00800584 	movi	r2,22
 180704c:	82000117 	ldw	r8,4(r16)
 1807050:	10c01b2e 	bgeu	r2,r3,18070c0 <_realloc_r+0xc0>
 1807054:	00bffe04 	movi	r2,-8
 1807058:	188e703a 	and	r7,r3,r2
 180705c:	3839883a 	mov	fp,r7
 1807060:	38001a16 	blt	r7,zero,18070cc <_realloc_r+0xcc>
 1807064:	e4401936 	bltu	fp,r17,18070cc <_realloc_r+0xcc>
 1807068:	013fff04 	movi	r4,-4
 180706c:	4126703a 	and	r19,r8,r4
 1807070:	99c02616 	blt	r19,r7,180710c <_realloc_r+0x10c>
 1807074:	802b883a 	mov	r21,r16
 1807078:	9829883a 	mov	r20,r19
 180707c:	84000204 	addi	r16,r16,8
 1807080:	a80f883a 	mov	r7,r21
 1807084:	a70dc83a 	sub	r6,r20,fp
 1807088:	008003c4 	movi	r2,15
 180708c:	1180c136 	bltu	r2,r6,1807394 <_realloc_r+0x394>
 1807090:	38800117 	ldw	r2,4(r7)
 1807094:	a549883a 	add	r4,r20,r21
 1807098:	1080004c 	andi	r2,r2,1
 180709c:	a084b03a 	or	r2,r20,r2
 18070a0:	38800115 	stw	r2,4(r7)
 18070a4:	20c00117 	ldw	r3,4(r4)
 18070a8:	18c00054 	ori	r3,r3,1
 18070ac:	20c00115 	stw	r3,4(r4)
 18070b0:	b009883a 	mov	r4,r22
 18070b4:	180a9200 	call	180a920 <__malloc_unlock>
 18070b8:	8023883a 	mov	r17,r16
 18070bc:	00000606 	br	18070d8 <_realloc_r+0xd8>
 18070c0:	01c00404 	movi	r7,16
 18070c4:	3839883a 	mov	fp,r7
 18070c8:	e47fe72e 	bgeu	fp,r17,1807068 <_realloc_r+0x68>
 18070cc:	00800304 	movi	r2,12
 18070d0:	0023883a 	mov	r17,zero
 18070d4:	b0800015 	stw	r2,0(r22)
 18070d8:	8805883a 	mov	r2,r17
 18070dc:	dfc00b17 	ldw	ra,44(sp)
 18070e0:	df000a17 	ldw	fp,40(sp)
 18070e4:	ddc00917 	ldw	r23,36(sp)
 18070e8:	dd800817 	ldw	r22,32(sp)
 18070ec:	dd400717 	ldw	r21,28(sp)
 18070f0:	dd000617 	ldw	r20,24(sp)
 18070f4:	dcc00517 	ldw	r19,20(sp)
 18070f8:	dc800417 	ldw	r18,16(sp)
 18070fc:	dc400317 	ldw	r17,12(sp)
 1807100:	dc000217 	ldw	r16,8(sp)
 1807104:	dec00c04 	addi	sp,sp,48
 1807108:	f800283a 	ret
 180710c:	00806074 	movhi	r2,385
 1807110:	10b86104 	addi	r2,r2,-7804
 1807114:	12400217 	ldw	r9,8(r2)
 1807118:	84cd883a 	add	r6,r16,r19
 180711c:	802b883a 	mov	r21,r16
 1807120:	3240b926 	beq	r6,r9,1807408 <_realloc_r+0x408>
 1807124:	31400117 	ldw	r5,4(r6)
 1807128:	00bfff84 	movi	r2,-2
 180712c:	2884703a 	and	r2,r5,r2
 1807130:	1185883a 	add	r2,r2,r6
 1807134:	10c00117 	ldw	r3,4(r2)
 1807138:	18c0004c 	andi	r3,r3,1
 180713c:	1807003a 	cmpeq	r3,r3,zero
 1807140:	1800a326 	beq	r3,zero,18073d0 <_realloc_r+0x3d0>
 1807144:	2908703a 	and	r4,r5,r4
 1807148:	9929883a 	add	r20,r19,r4
 180714c:	a1c0a30e 	bge	r20,r7,18073dc <_realloc_r+0x3dc>
 1807150:	4080004c 	andi	r2,r8,1
 1807154:	1000551e 	bne	r2,zero,18072ac <_realloc_r+0x2ac>
 1807158:	80800017 	ldw	r2,0(r16)
 180715c:	80afc83a 	sub	r23,r16,r2
 1807160:	b8c00117 	ldw	r3,4(r23)
 1807164:	00bfff04 	movi	r2,-4
 1807168:	1884703a 	and	r2,r3,r2
 180716c:	30002e26 	beq	r6,zero,1807228 <_realloc_r+0x228>
 1807170:	3240b926 	beq	r6,r9,1807458 <_realloc_r+0x458>
 1807174:	98a9883a 	add	r20,r19,r2
 1807178:	2509883a 	add	r4,r4,r20
 180717c:	d9000015 	stw	r4,0(sp)
 1807180:	21c02a16 	blt	r4,r7,180722c <_realloc_r+0x22c>
 1807184:	30800317 	ldw	r2,12(r6)
 1807188:	30c00217 	ldw	r3,8(r6)
 180718c:	01400904 	movi	r5,36
 1807190:	99bfff04 	addi	r6,r19,-4
 1807194:	18800315 	stw	r2,12(r3)
 1807198:	10c00215 	stw	r3,8(r2)
 180719c:	b9000317 	ldw	r4,12(r23)
 18071a0:	b8800217 	ldw	r2,8(r23)
 18071a4:	b82b883a 	mov	r21,r23
 18071a8:	bc000204 	addi	r16,r23,8
 18071ac:	20800215 	stw	r2,8(r4)
 18071b0:	11000315 	stw	r4,12(r2)
 18071b4:	2980e436 	bltu	r5,r6,1807548 <_realloc_r+0x548>
 18071b8:	008004c4 	movi	r2,19
 18071bc:	9009883a 	mov	r4,r18
 18071c0:	8011883a 	mov	r8,r16
 18071c4:	11800f2e 	bgeu	r2,r6,1807204 <_realloc_r+0x204>
 18071c8:	90800017 	ldw	r2,0(r18)
 18071cc:	ba000404 	addi	r8,r23,16
 18071d0:	91000204 	addi	r4,r18,8
 18071d4:	b8800215 	stw	r2,8(r23)
 18071d8:	90c00117 	ldw	r3,4(r18)
 18071dc:	008006c4 	movi	r2,27
 18071e0:	b8c00315 	stw	r3,12(r23)
 18071e4:	1180072e 	bgeu	r2,r6,1807204 <_realloc_r+0x204>
 18071e8:	90c00217 	ldw	r3,8(r18)
 18071ec:	ba000604 	addi	r8,r23,24
 18071f0:	91000404 	addi	r4,r18,16
 18071f4:	b8c00415 	stw	r3,16(r23)
 18071f8:	90800317 	ldw	r2,12(r18)
 18071fc:	b8800515 	stw	r2,20(r23)
 1807200:	3140e726 	beq	r6,r5,18075a0 <_realloc_r+0x5a0>
 1807204:	20800017 	ldw	r2,0(r4)
 1807208:	dd000017 	ldw	r20,0(sp)
 180720c:	b80f883a 	mov	r7,r23
 1807210:	40800015 	stw	r2,0(r8)
 1807214:	20c00117 	ldw	r3,4(r4)
 1807218:	40c00115 	stw	r3,4(r8)
 180721c:	20800217 	ldw	r2,8(r4)
 1807220:	40800215 	stw	r2,8(r8)
 1807224:	003f9706 	br	1807084 <_realloc_r+0x84>
 1807228:	98a9883a 	add	r20,r19,r2
 180722c:	a1c01f16 	blt	r20,r7,18072ac <_realloc_r+0x2ac>
 1807230:	b8c00317 	ldw	r3,12(r23)
 1807234:	b8800217 	ldw	r2,8(r23)
 1807238:	99bfff04 	addi	r6,r19,-4
 180723c:	01400904 	movi	r5,36
 1807240:	b82b883a 	mov	r21,r23
 1807244:	18800215 	stw	r2,8(r3)
 1807248:	10c00315 	stw	r3,12(r2)
 180724c:	bc000204 	addi	r16,r23,8
 1807250:	2980c336 	bltu	r5,r6,1807560 <_realloc_r+0x560>
 1807254:	008004c4 	movi	r2,19
 1807258:	9009883a 	mov	r4,r18
 180725c:	8011883a 	mov	r8,r16
 1807260:	11800f2e 	bgeu	r2,r6,18072a0 <_realloc_r+0x2a0>
 1807264:	90800017 	ldw	r2,0(r18)
 1807268:	ba000404 	addi	r8,r23,16
 180726c:	91000204 	addi	r4,r18,8
 1807270:	b8800215 	stw	r2,8(r23)
 1807274:	90c00117 	ldw	r3,4(r18)
 1807278:	008006c4 	movi	r2,27
 180727c:	b8c00315 	stw	r3,12(r23)
 1807280:	1180072e 	bgeu	r2,r6,18072a0 <_realloc_r+0x2a0>
 1807284:	90c00217 	ldw	r3,8(r18)
 1807288:	ba000604 	addi	r8,r23,24
 180728c:	91000404 	addi	r4,r18,16
 1807290:	b8c00415 	stw	r3,16(r23)
 1807294:	90800317 	ldw	r2,12(r18)
 1807298:	b8800515 	stw	r2,20(r23)
 180729c:	3140c726 	beq	r6,r5,18075bc <_realloc_r+0x5bc>
 18072a0:	20800017 	ldw	r2,0(r4)
 18072a4:	b80f883a 	mov	r7,r23
 18072a8:	003fd906 	br	1807210 <_realloc_r+0x210>
 18072ac:	880b883a 	mov	r5,r17
 18072b0:	b009883a 	mov	r4,r22
 18072b4:	18055380 	call	1805538 <_malloc_r>
 18072b8:	1023883a 	mov	r17,r2
 18072bc:	10002526 	beq	r2,zero,1807354 <_realloc_r+0x354>
 18072c0:	80800117 	ldw	r2,4(r16)
 18072c4:	00ffff84 	movi	r3,-2
 18072c8:	893ffe04 	addi	r4,r17,-8
 18072cc:	10c4703a 	and	r2,r2,r3
 18072d0:	8085883a 	add	r2,r16,r2
 18072d4:	20809526 	beq	r4,r2,180752c <_realloc_r+0x52c>
 18072d8:	99bfff04 	addi	r6,r19,-4
 18072dc:	01c00904 	movi	r7,36
 18072e0:	39804536 	bltu	r7,r6,18073f8 <_realloc_r+0x3f8>
 18072e4:	008004c4 	movi	r2,19
 18072e8:	9009883a 	mov	r4,r18
 18072ec:	880b883a 	mov	r5,r17
 18072f0:	11800f2e 	bgeu	r2,r6,1807330 <_realloc_r+0x330>
 18072f4:	90800017 	ldw	r2,0(r18)
 18072f8:	89400204 	addi	r5,r17,8
 18072fc:	91000204 	addi	r4,r18,8
 1807300:	88800015 	stw	r2,0(r17)
 1807304:	90c00117 	ldw	r3,4(r18)
 1807308:	008006c4 	movi	r2,27
 180730c:	88c00115 	stw	r3,4(r17)
 1807310:	1180072e 	bgeu	r2,r6,1807330 <_realloc_r+0x330>
 1807314:	90c00217 	ldw	r3,8(r18)
 1807318:	89400404 	addi	r5,r17,16
 180731c:	91000404 	addi	r4,r18,16
 1807320:	88c00215 	stw	r3,8(r17)
 1807324:	90800317 	ldw	r2,12(r18)
 1807328:	88800315 	stw	r2,12(r17)
 180732c:	31c09126 	beq	r6,r7,1807574 <_realloc_r+0x574>
 1807330:	20800017 	ldw	r2,0(r4)
 1807334:	28800015 	stw	r2,0(r5)
 1807338:	20c00117 	ldw	r3,4(r4)
 180733c:	28c00115 	stw	r3,4(r5)
 1807340:	20800217 	ldw	r2,8(r4)
 1807344:	28800215 	stw	r2,8(r5)
 1807348:	900b883a 	mov	r5,r18
 180734c:	b009883a 	mov	r4,r22
 1807350:	18049b00 	call	18049b0 <_free_r>
 1807354:	b009883a 	mov	r4,r22
 1807358:	180a9200 	call	180a920 <__malloc_unlock>
 180735c:	003f5e06 	br	18070d8 <_realloc_r+0xd8>
 1807360:	300b883a 	mov	r5,r6
 1807364:	dfc00b17 	ldw	ra,44(sp)
 1807368:	df000a17 	ldw	fp,40(sp)
 180736c:	ddc00917 	ldw	r23,36(sp)
 1807370:	dd800817 	ldw	r22,32(sp)
 1807374:	dd400717 	ldw	r21,28(sp)
 1807378:	dd000617 	ldw	r20,24(sp)
 180737c:	dcc00517 	ldw	r19,20(sp)
 1807380:	dc800417 	ldw	r18,16(sp)
 1807384:	dc400317 	ldw	r17,12(sp)
 1807388:	dc000217 	ldw	r16,8(sp)
 180738c:	dec00c04 	addi	sp,sp,48
 1807390:	18055381 	jmpi	1805538 <_malloc_r>
 1807394:	38800117 	ldw	r2,4(r7)
 1807398:	e54b883a 	add	r5,fp,r21
 180739c:	31000054 	ori	r4,r6,1
 18073a0:	1080004c 	andi	r2,r2,1
 18073a4:	1704b03a 	or	r2,r2,fp
 18073a8:	38800115 	stw	r2,4(r7)
 18073ac:	29000115 	stw	r4,4(r5)
 18073b0:	2987883a 	add	r3,r5,r6
 18073b4:	18800117 	ldw	r2,4(r3)
 18073b8:	29400204 	addi	r5,r5,8
 18073bc:	b009883a 	mov	r4,r22
 18073c0:	10800054 	ori	r2,r2,1
 18073c4:	18800115 	stw	r2,4(r3)
 18073c8:	18049b00 	call	18049b0 <_free_r>
 18073cc:	003f3806 	br	18070b0 <_realloc_r+0xb0>
 18073d0:	000d883a 	mov	r6,zero
 18073d4:	0009883a 	mov	r4,zero
 18073d8:	003f5d06 	br	1807150 <_realloc_r+0x150>
 18073dc:	30c00217 	ldw	r3,8(r6)
 18073e0:	30800317 	ldw	r2,12(r6)
 18073e4:	800f883a 	mov	r7,r16
 18073e8:	84000204 	addi	r16,r16,8
 18073ec:	10c00215 	stw	r3,8(r2)
 18073f0:	18800315 	stw	r2,12(r3)
 18073f4:	003f2306 	br	1807084 <_realloc_r+0x84>
 18073f8:	8809883a 	mov	r4,r17
 18073fc:	900b883a 	mov	r5,r18
 1807400:	1805dfc0 	call	1805dfc <memmove>
 1807404:	003fd006 	br	1807348 <_realloc_r+0x348>
 1807408:	30800117 	ldw	r2,4(r6)
 180740c:	e0c00404 	addi	r3,fp,16
 1807410:	1108703a 	and	r4,r2,r4
 1807414:	9905883a 	add	r2,r19,r4
 1807418:	10ff4d16 	blt	r2,r3,1807150 <_realloc_r+0x150>
 180741c:	1705c83a 	sub	r2,r2,fp
 1807420:	870b883a 	add	r5,r16,fp
 1807424:	10800054 	ori	r2,r2,1
 1807428:	28800115 	stw	r2,4(r5)
 180742c:	80c00117 	ldw	r3,4(r16)
 1807430:	00806074 	movhi	r2,385
 1807434:	10b86104 	addi	r2,r2,-7804
 1807438:	b009883a 	mov	r4,r22
 180743c:	18c0004c 	andi	r3,r3,1
 1807440:	e0c6b03a 	or	r3,fp,r3
 1807444:	11400215 	stw	r5,8(r2)
 1807448:	80c00115 	stw	r3,4(r16)
 180744c:	180a9200 	call	180a920 <__malloc_unlock>
 1807450:	84400204 	addi	r17,r16,8
 1807454:	003f2006 	br	18070d8 <_realloc_r+0xd8>
 1807458:	98a9883a 	add	r20,r19,r2
 180745c:	2509883a 	add	r4,r4,r20
 1807460:	e0800404 	addi	r2,fp,16
 1807464:	d9000115 	stw	r4,4(sp)
 1807468:	20bf7016 	blt	r4,r2,180722c <_realloc_r+0x22c>
 180746c:	b8c00317 	ldw	r3,12(r23)
 1807470:	b8800217 	ldw	r2,8(r23)
 1807474:	99bfff04 	addi	r6,r19,-4
 1807478:	01400904 	movi	r5,36
 180747c:	18800215 	stw	r2,8(r3)
 1807480:	10c00315 	stw	r3,12(r2)
 1807484:	bc400204 	addi	r17,r23,8
 1807488:	29804136 	bltu	r5,r6,1807590 <_realloc_r+0x590>
 180748c:	008004c4 	movi	r2,19
 1807490:	9009883a 	mov	r4,r18
 1807494:	880f883a 	mov	r7,r17
 1807498:	11800f2e 	bgeu	r2,r6,18074d8 <_realloc_r+0x4d8>
 180749c:	90800017 	ldw	r2,0(r18)
 18074a0:	b9c00404 	addi	r7,r23,16
 18074a4:	91000204 	addi	r4,r18,8
 18074a8:	b8800215 	stw	r2,8(r23)
 18074ac:	90c00117 	ldw	r3,4(r18)
 18074b0:	008006c4 	movi	r2,27
 18074b4:	b8c00315 	stw	r3,12(r23)
 18074b8:	1180072e 	bgeu	r2,r6,18074d8 <_realloc_r+0x4d8>
 18074bc:	90c00217 	ldw	r3,8(r18)
 18074c0:	b9c00604 	addi	r7,r23,24
 18074c4:	91000404 	addi	r4,r18,16
 18074c8:	b8c00415 	stw	r3,16(r23)
 18074cc:	90800317 	ldw	r2,12(r18)
 18074d0:	b8800515 	stw	r2,20(r23)
 18074d4:	31404026 	beq	r6,r5,18075d8 <_realloc_r+0x5d8>
 18074d8:	20800017 	ldw	r2,0(r4)
 18074dc:	38800015 	stw	r2,0(r7)
 18074e0:	20c00117 	ldw	r3,4(r4)
 18074e4:	38c00115 	stw	r3,4(r7)
 18074e8:	20800217 	ldw	r2,8(r4)
 18074ec:	38800215 	stw	r2,8(r7)
 18074f0:	d8c00117 	ldw	r3,4(sp)
 18074f4:	bf0b883a 	add	r5,r23,fp
 18074f8:	b009883a 	mov	r4,r22
 18074fc:	1f05c83a 	sub	r2,r3,fp
 1807500:	10800054 	ori	r2,r2,1
 1807504:	28800115 	stw	r2,4(r5)
 1807508:	b8c00117 	ldw	r3,4(r23)
 180750c:	00806074 	movhi	r2,385
 1807510:	10b86104 	addi	r2,r2,-7804
 1807514:	11400215 	stw	r5,8(r2)
 1807518:	18c0004c 	andi	r3,r3,1
 180751c:	e0c6b03a 	or	r3,fp,r3
 1807520:	b8c00115 	stw	r3,4(r23)
 1807524:	180a9200 	call	180a920 <__malloc_unlock>
 1807528:	003eeb06 	br	18070d8 <_realloc_r+0xd8>
 180752c:	20800117 	ldw	r2,4(r4)
 1807530:	00ffff04 	movi	r3,-4
 1807534:	800f883a 	mov	r7,r16
 1807538:	10c4703a 	and	r2,r2,r3
 180753c:	98a9883a 	add	r20,r19,r2
 1807540:	84000204 	addi	r16,r16,8
 1807544:	003ecf06 	br	1807084 <_realloc_r+0x84>
 1807548:	900b883a 	mov	r5,r18
 180754c:	8009883a 	mov	r4,r16
 1807550:	1805dfc0 	call	1805dfc <memmove>
 1807554:	dd000017 	ldw	r20,0(sp)
 1807558:	b80f883a 	mov	r7,r23
 180755c:	003ec906 	br	1807084 <_realloc_r+0x84>
 1807560:	900b883a 	mov	r5,r18
 1807564:	8009883a 	mov	r4,r16
 1807568:	1805dfc0 	call	1805dfc <memmove>
 180756c:	b80f883a 	mov	r7,r23
 1807570:	003ec406 	br	1807084 <_realloc_r+0x84>
 1807574:	90c00417 	ldw	r3,16(r18)
 1807578:	89400604 	addi	r5,r17,24
 180757c:	91000604 	addi	r4,r18,24
 1807580:	88c00415 	stw	r3,16(r17)
 1807584:	90800517 	ldw	r2,20(r18)
 1807588:	88800515 	stw	r2,20(r17)
 180758c:	003f6806 	br	1807330 <_realloc_r+0x330>
 1807590:	900b883a 	mov	r5,r18
 1807594:	8809883a 	mov	r4,r17
 1807598:	1805dfc0 	call	1805dfc <memmove>
 180759c:	003fd406 	br	18074f0 <_realloc_r+0x4f0>
 18075a0:	90c00417 	ldw	r3,16(r18)
 18075a4:	91000604 	addi	r4,r18,24
 18075a8:	ba000804 	addi	r8,r23,32
 18075ac:	b8c00615 	stw	r3,24(r23)
 18075b0:	90800517 	ldw	r2,20(r18)
 18075b4:	b8800715 	stw	r2,28(r23)
 18075b8:	003f1206 	br	1807204 <_realloc_r+0x204>
 18075bc:	90c00417 	ldw	r3,16(r18)
 18075c0:	91000604 	addi	r4,r18,24
 18075c4:	ba000804 	addi	r8,r23,32
 18075c8:	b8c00615 	stw	r3,24(r23)
 18075cc:	90800517 	ldw	r2,20(r18)
 18075d0:	b8800715 	stw	r2,28(r23)
 18075d4:	003f3206 	br	18072a0 <_realloc_r+0x2a0>
 18075d8:	90c00417 	ldw	r3,16(r18)
 18075dc:	91000604 	addi	r4,r18,24
 18075e0:	b9c00804 	addi	r7,r23,32
 18075e4:	b8c00615 	stw	r3,24(r23)
 18075e8:	90800517 	ldw	r2,20(r18)
 18075ec:	b8800715 	stw	r2,28(r23)
 18075f0:	003fb906 	br	18074d8 <_realloc_r+0x4d8>

018075f4 <__isinfd>:
 18075f4:	200d883a 	mov	r6,r4
 18075f8:	0109c83a 	sub	r4,zero,r4
 18075fc:	2188b03a 	or	r4,r4,r6
 1807600:	2008d7fa 	srli	r4,r4,31
 1807604:	00a00034 	movhi	r2,32768
 1807608:	10bfffc4 	addi	r2,r2,-1
 180760c:	1144703a 	and	r2,r2,r5
 1807610:	2088b03a 	or	r4,r4,r2
 1807614:	009ffc34 	movhi	r2,32752
 1807618:	1105c83a 	sub	r2,r2,r4
 180761c:	0087c83a 	sub	r3,zero,r2
 1807620:	10c4b03a 	or	r2,r2,r3
 1807624:	1004d7fa 	srli	r2,r2,31
 1807628:	00c00044 	movi	r3,1
 180762c:	1885c83a 	sub	r2,r3,r2
 1807630:	f800283a 	ret

01807634 <__isnand>:
 1807634:	200d883a 	mov	r6,r4
 1807638:	0109c83a 	sub	r4,zero,r4
 180763c:	2188b03a 	or	r4,r4,r6
 1807640:	2008d7fa 	srli	r4,r4,31
 1807644:	00a00034 	movhi	r2,32768
 1807648:	10bfffc4 	addi	r2,r2,-1
 180764c:	1144703a 	and	r2,r2,r5
 1807650:	2088b03a 	or	r4,r4,r2
 1807654:	009ffc34 	movhi	r2,32752
 1807658:	1105c83a 	sub	r2,r2,r4
 180765c:	1004d7fa 	srli	r2,r2,31
 1807660:	f800283a 	ret

01807664 <_sbrk_r>:
 1807664:	defffd04 	addi	sp,sp,-12
 1807668:	dc000015 	stw	r16,0(sp)
 180766c:	04006074 	movhi	r16,385
 1807670:	8404ea04 	addi	r16,r16,5032
 1807674:	dc400115 	stw	r17,4(sp)
 1807678:	80000015 	stw	zero,0(r16)
 180767c:	2023883a 	mov	r17,r4
 1807680:	2809883a 	mov	r4,r5
 1807684:	dfc00215 	stw	ra,8(sp)
 1807688:	180add40 	call	180add4 <sbrk>
 180768c:	1007883a 	mov	r3,r2
 1807690:	00bfffc4 	movi	r2,-1
 1807694:	18800626 	beq	r3,r2,18076b0 <_sbrk_r+0x4c>
 1807698:	1805883a 	mov	r2,r3
 180769c:	dfc00217 	ldw	ra,8(sp)
 18076a0:	dc400117 	ldw	r17,4(sp)
 18076a4:	dc000017 	ldw	r16,0(sp)
 18076a8:	dec00304 	addi	sp,sp,12
 18076ac:	f800283a 	ret
 18076b0:	80800017 	ldw	r2,0(r16)
 18076b4:	103ff826 	beq	r2,zero,1807698 <_sbrk_r+0x34>
 18076b8:	88800015 	stw	r2,0(r17)
 18076bc:	1805883a 	mov	r2,r3
 18076c0:	dfc00217 	ldw	ra,8(sp)
 18076c4:	dc400117 	ldw	r17,4(sp)
 18076c8:	dc000017 	ldw	r16,0(sp)
 18076cc:	dec00304 	addi	sp,sp,12
 18076d0:	f800283a 	ret

018076d4 <__sclose>:
 18076d4:	2940038f 	ldh	r5,14(r5)
 18076d8:	1807a1c1 	jmpi	1807a1c <_close_r>

018076dc <__sseek>:
 18076dc:	defffe04 	addi	sp,sp,-8
 18076e0:	dc000015 	stw	r16,0(sp)
 18076e4:	2821883a 	mov	r16,r5
 18076e8:	2940038f 	ldh	r5,14(r5)
 18076ec:	dfc00115 	stw	ra,4(sp)
 18076f0:	1807c940 	call	1807c94 <_lseek_r>
 18076f4:	1007883a 	mov	r3,r2
 18076f8:	00bfffc4 	movi	r2,-1
 18076fc:	18800926 	beq	r3,r2,1807724 <__sseek+0x48>
 1807700:	8080030b 	ldhu	r2,12(r16)
 1807704:	80c01415 	stw	r3,80(r16)
 1807708:	10840014 	ori	r2,r2,4096
 180770c:	8080030d 	sth	r2,12(r16)
 1807710:	1805883a 	mov	r2,r3
 1807714:	dfc00117 	ldw	ra,4(sp)
 1807718:	dc000017 	ldw	r16,0(sp)
 180771c:	dec00204 	addi	sp,sp,8
 1807720:	f800283a 	ret
 1807724:	8080030b 	ldhu	r2,12(r16)
 1807728:	10bbffcc 	andi	r2,r2,61439
 180772c:	8080030d 	sth	r2,12(r16)
 1807730:	1805883a 	mov	r2,r3
 1807734:	dfc00117 	ldw	ra,4(sp)
 1807738:	dc000017 	ldw	r16,0(sp)
 180773c:	dec00204 	addi	sp,sp,8
 1807740:	f800283a 	ret

01807744 <__swrite>:
 1807744:	2880030b 	ldhu	r2,12(r5)
 1807748:	defffb04 	addi	sp,sp,-20
 180774c:	dcc00315 	stw	r19,12(sp)
 1807750:	1080400c 	andi	r2,r2,256
 1807754:	dc800215 	stw	r18,8(sp)
 1807758:	dc400115 	stw	r17,4(sp)
 180775c:	dc000015 	stw	r16,0(sp)
 1807760:	3027883a 	mov	r19,r6
 1807764:	3825883a 	mov	r18,r7
 1807768:	dfc00415 	stw	ra,16(sp)
 180776c:	2821883a 	mov	r16,r5
 1807770:	000d883a 	mov	r6,zero
 1807774:	01c00084 	movi	r7,2
 1807778:	2023883a 	mov	r17,r4
 180777c:	10000226 	beq	r2,zero,1807788 <__swrite+0x44>
 1807780:	2940038f 	ldh	r5,14(r5)
 1807784:	1807c940 	call	1807c94 <_lseek_r>
 1807788:	8080030b 	ldhu	r2,12(r16)
 180778c:	8140038f 	ldh	r5,14(r16)
 1807790:	8809883a 	mov	r4,r17
 1807794:	10bbffcc 	andi	r2,r2,61439
 1807798:	980d883a 	mov	r6,r19
 180779c:	900f883a 	mov	r7,r18
 18077a0:	8080030d 	sth	r2,12(r16)
 18077a4:	dfc00417 	ldw	ra,16(sp)
 18077a8:	dcc00317 	ldw	r19,12(sp)
 18077ac:	dc800217 	ldw	r18,8(sp)
 18077b0:	dc400117 	ldw	r17,4(sp)
 18077b4:	dc000017 	ldw	r16,0(sp)
 18077b8:	dec00504 	addi	sp,sp,20
 18077bc:	18078dc1 	jmpi	18078dc <_write_r>

018077c0 <__sread>:
 18077c0:	defffe04 	addi	sp,sp,-8
 18077c4:	dc000015 	stw	r16,0(sp)
 18077c8:	2821883a 	mov	r16,r5
 18077cc:	2940038f 	ldh	r5,14(r5)
 18077d0:	dfc00115 	stw	ra,4(sp)
 18077d4:	1807d0c0 	call	1807d0c <_read_r>
 18077d8:	1007883a 	mov	r3,r2
 18077dc:	10000816 	blt	r2,zero,1807800 <__sread+0x40>
 18077e0:	80801417 	ldw	r2,80(r16)
 18077e4:	10c5883a 	add	r2,r2,r3
 18077e8:	80801415 	stw	r2,80(r16)
 18077ec:	1805883a 	mov	r2,r3
 18077f0:	dfc00117 	ldw	ra,4(sp)
 18077f4:	dc000017 	ldw	r16,0(sp)
 18077f8:	dec00204 	addi	sp,sp,8
 18077fc:	f800283a 	ret
 1807800:	8080030b 	ldhu	r2,12(r16)
 1807804:	10bbffcc 	andi	r2,r2,61439
 1807808:	8080030d 	sth	r2,12(r16)
 180780c:	1805883a 	mov	r2,r3
 1807810:	dfc00117 	ldw	ra,4(sp)
 1807814:	dc000017 	ldw	r16,0(sp)
 1807818:	dec00204 	addi	sp,sp,8
 180781c:	f800283a 	ret

01807820 <strcmp>:
 1807820:	2144b03a 	or	r2,r4,r5
 1807824:	108000cc 	andi	r2,r2,3
 1807828:	10001d1e 	bne	r2,zero,18078a0 <strcmp+0x80>
 180782c:	200f883a 	mov	r7,r4
 1807830:	28800017 	ldw	r2,0(r5)
 1807834:	21000017 	ldw	r4,0(r4)
 1807838:	280d883a 	mov	r6,r5
 180783c:	2080161e 	bne	r4,r2,1807898 <strcmp+0x78>
 1807840:	023fbff4 	movhi	r8,65279
 1807844:	423fbfc4 	addi	r8,r8,-257
 1807848:	2207883a 	add	r3,r4,r8
 180784c:	01602074 	movhi	r5,32897
 1807850:	29602004 	addi	r5,r5,-32640
 1807854:	1946703a 	and	r3,r3,r5
 1807858:	0104303a 	nor	r2,zero,r4
 180785c:	10c4703a 	and	r2,r2,r3
 1807860:	10001c1e 	bne	r2,zero,18078d4 <strcmp+0xb4>
 1807864:	4013883a 	mov	r9,r8
 1807868:	2811883a 	mov	r8,r5
 180786c:	00000106 	br	1807874 <strcmp+0x54>
 1807870:	1800181e 	bne	r3,zero,18078d4 <strcmp+0xb4>
 1807874:	39c00104 	addi	r7,r7,4
 1807878:	39000017 	ldw	r4,0(r7)
 180787c:	31800104 	addi	r6,r6,4
 1807880:	31400017 	ldw	r5,0(r6)
 1807884:	2245883a 	add	r2,r4,r9
 1807888:	1204703a 	and	r2,r2,r8
 180788c:	0106303a 	nor	r3,zero,r4
 1807890:	1886703a 	and	r3,r3,r2
 1807894:	217ff626 	beq	r4,r5,1807870 <strcmp+0x50>
 1807898:	3809883a 	mov	r4,r7
 180789c:	300b883a 	mov	r5,r6
 18078a0:	20c00007 	ldb	r3,0(r4)
 18078a4:	1800051e 	bne	r3,zero,18078bc <strcmp+0x9c>
 18078a8:	00000606 	br	18078c4 <strcmp+0xa4>
 18078ac:	21000044 	addi	r4,r4,1
 18078b0:	20c00007 	ldb	r3,0(r4)
 18078b4:	29400044 	addi	r5,r5,1
 18078b8:	18000226 	beq	r3,zero,18078c4 <strcmp+0xa4>
 18078bc:	28800007 	ldb	r2,0(r5)
 18078c0:	18bffa26 	beq	r3,r2,18078ac <strcmp+0x8c>
 18078c4:	20c00003 	ldbu	r3,0(r4)
 18078c8:	28800003 	ldbu	r2,0(r5)
 18078cc:	1885c83a 	sub	r2,r3,r2
 18078d0:	f800283a 	ret
 18078d4:	0005883a 	mov	r2,zero
 18078d8:	f800283a 	ret

018078dc <_write_r>:
 18078dc:	defffd04 	addi	sp,sp,-12
 18078e0:	dc000015 	stw	r16,0(sp)
 18078e4:	04006074 	movhi	r16,385
 18078e8:	8404ea04 	addi	r16,r16,5032
 18078ec:	dc400115 	stw	r17,4(sp)
 18078f0:	80000015 	stw	zero,0(r16)
 18078f4:	2023883a 	mov	r17,r4
 18078f8:	2809883a 	mov	r4,r5
 18078fc:	300b883a 	mov	r5,r6
 1807900:	380d883a 	mov	r6,r7
 1807904:	dfc00215 	stw	ra,8(sp)
 1807908:	180ae900 	call	180ae90 <write>
 180790c:	1007883a 	mov	r3,r2
 1807910:	00bfffc4 	movi	r2,-1
 1807914:	18800626 	beq	r3,r2,1807930 <_write_r+0x54>
 1807918:	1805883a 	mov	r2,r3
 180791c:	dfc00217 	ldw	ra,8(sp)
 1807920:	dc400117 	ldw	r17,4(sp)
 1807924:	dc000017 	ldw	r16,0(sp)
 1807928:	dec00304 	addi	sp,sp,12
 180792c:	f800283a 	ret
 1807930:	80800017 	ldw	r2,0(r16)
 1807934:	103ff826 	beq	r2,zero,1807918 <_write_r+0x3c>
 1807938:	88800015 	stw	r2,0(r17)
 180793c:	1805883a 	mov	r2,r3
 1807940:	dfc00217 	ldw	ra,8(sp)
 1807944:	dc400117 	ldw	r17,4(sp)
 1807948:	dc000017 	ldw	r16,0(sp)
 180794c:	dec00304 	addi	sp,sp,12
 1807950:	f800283a 	ret

01807954 <_calloc_r>:
 1807954:	defffe04 	addi	sp,sp,-8
 1807958:	dc400015 	stw	r17,0(sp)
 180795c:	2023883a 	mov	r17,r4
 1807960:	2809883a 	mov	r4,r5
 1807964:	300b883a 	mov	r5,r6
 1807968:	dfc00115 	stw	ra,4(sp)
 180796c:	1809b7c0 	call	1809b7c <__mulsi3>
 1807970:	100b883a 	mov	r5,r2
 1807974:	8809883a 	mov	r4,r17
 1807978:	18055380 	call	1805538 <_malloc_r>
 180797c:	1023883a 	mov	r17,r2
 1807980:	01c00904 	movi	r7,36
 1807984:	10000d26 	beq	r2,zero,18079bc <_calloc_r+0x68>
 1807988:	10ffff17 	ldw	r3,-4(r2)
 180798c:	1009883a 	mov	r4,r2
 1807990:	00bfff04 	movi	r2,-4
 1807994:	1886703a 	and	r3,r3,r2
 1807998:	1887883a 	add	r3,r3,r2
 180799c:	180d883a 	mov	r6,r3
 18079a0:	000b883a 	mov	r5,zero
 18079a4:	38c01736 	bltu	r7,r3,1807a04 <_calloc_r+0xb0>
 18079a8:	008004c4 	movi	r2,19
 18079ac:	10c00836 	bltu	r2,r3,18079d0 <_calloc_r+0x7c>
 18079b0:	20000215 	stw	zero,8(r4)
 18079b4:	20000015 	stw	zero,0(r4)
 18079b8:	20000115 	stw	zero,4(r4)
 18079bc:	8805883a 	mov	r2,r17
 18079c0:	dfc00117 	ldw	ra,4(sp)
 18079c4:	dc400017 	ldw	r17,0(sp)
 18079c8:	dec00204 	addi	sp,sp,8
 18079cc:	f800283a 	ret
 18079d0:	008006c4 	movi	r2,27
 18079d4:	88000015 	stw	zero,0(r17)
 18079d8:	88000115 	stw	zero,4(r17)
 18079dc:	89000204 	addi	r4,r17,8
 18079e0:	10fff32e 	bgeu	r2,r3,18079b0 <_calloc_r+0x5c>
 18079e4:	88000215 	stw	zero,8(r17)
 18079e8:	88000315 	stw	zero,12(r17)
 18079ec:	89000404 	addi	r4,r17,16
 18079f0:	19ffef1e 	bne	r3,r7,18079b0 <_calloc_r+0x5c>
 18079f4:	89000604 	addi	r4,r17,24
 18079f8:	88000415 	stw	zero,16(r17)
 18079fc:	88000515 	stw	zero,20(r17)
 1807a00:	003feb06 	br	18079b0 <_calloc_r+0x5c>
 1807a04:	1805edc0 	call	1805edc <memset>
 1807a08:	8805883a 	mov	r2,r17
 1807a0c:	dfc00117 	ldw	ra,4(sp)
 1807a10:	dc400017 	ldw	r17,0(sp)
 1807a14:	dec00204 	addi	sp,sp,8
 1807a18:	f800283a 	ret

01807a1c <_close_r>:
 1807a1c:	defffd04 	addi	sp,sp,-12
 1807a20:	dc000015 	stw	r16,0(sp)
 1807a24:	04006074 	movhi	r16,385
 1807a28:	8404ea04 	addi	r16,r16,5032
 1807a2c:	dc400115 	stw	r17,4(sp)
 1807a30:	80000015 	stw	zero,0(r16)
 1807a34:	2023883a 	mov	r17,r4
 1807a38:	2809883a 	mov	r4,r5
 1807a3c:	dfc00215 	stw	ra,8(sp)
 1807a40:	180a26c0 	call	180a26c <close>
 1807a44:	1007883a 	mov	r3,r2
 1807a48:	00bfffc4 	movi	r2,-1
 1807a4c:	18800626 	beq	r3,r2,1807a68 <_close_r+0x4c>
 1807a50:	1805883a 	mov	r2,r3
 1807a54:	dfc00217 	ldw	ra,8(sp)
 1807a58:	dc400117 	ldw	r17,4(sp)
 1807a5c:	dc000017 	ldw	r16,0(sp)
 1807a60:	dec00304 	addi	sp,sp,12
 1807a64:	f800283a 	ret
 1807a68:	80800017 	ldw	r2,0(r16)
 1807a6c:	103ff826 	beq	r2,zero,1807a50 <_close_r+0x34>
 1807a70:	88800015 	stw	r2,0(r17)
 1807a74:	1805883a 	mov	r2,r3
 1807a78:	dfc00217 	ldw	ra,8(sp)
 1807a7c:	dc400117 	ldw	r17,4(sp)
 1807a80:	dc000017 	ldw	r16,0(sp)
 1807a84:	dec00304 	addi	sp,sp,12
 1807a88:	f800283a 	ret

01807a8c <_fclose_r>:
 1807a8c:	defffc04 	addi	sp,sp,-16
 1807a90:	dc400115 	stw	r17,4(sp)
 1807a94:	dc000015 	stw	r16,0(sp)
 1807a98:	dfc00315 	stw	ra,12(sp)
 1807a9c:	dc800215 	stw	r18,8(sp)
 1807aa0:	2821883a 	mov	r16,r5
 1807aa4:	2023883a 	mov	r17,r4
 1807aa8:	28002926 	beq	r5,zero,1807b50 <_fclose_r+0xc4>
 1807aac:	18045e80 	call	18045e8 <__sfp_lock_acquire>
 1807ab0:	88000226 	beq	r17,zero,1807abc <_fclose_r+0x30>
 1807ab4:	88800e17 	ldw	r2,56(r17)
 1807ab8:	10002d26 	beq	r2,zero,1807b70 <_fclose_r+0xe4>
 1807abc:	8080030f 	ldh	r2,12(r16)
 1807ac0:	10002226 	beq	r2,zero,1807b4c <_fclose_r+0xc0>
 1807ac4:	8809883a 	mov	r4,r17
 1807ac8:	800b883a 	mov	r5,r16
 1807acc:	18043600 	call	1804360 <_fflush_r>
 1807ad0:	1025883a 	mov	r18,r2
 1807ad4:	80800b17 	ldw	r2,44(r16)
 1807ad8:	10000426 	beq	r2,zero,1807aec <_fclose_r+0x60>
 1807adc:	81400717 	ldw	r5,28(r16)
 1807ae0:	8809883a 	mov	r4,r17
 1807ae4:	103ee83a 	callr	r2
 1807ae8:	10002a16 	blt	r2,zero,1807b94 <_fclose_r+0x108>
 1807aec:	8080030b 	ldhu	r2,12(r16)
 1807af0:	1080200c 	andi	r2,r2,128
 1807af4:	1000231e 	bne	r2,zero,1807b84 <_fclose_r+0xf8>
 1807af8:	81400c17 	ldw	r5,48(r16)
 1807afc:	28000526 	beq	r5,zero,1807b14 <_fclose_r+0x88>
 1807b00:	80801004 	addi	r2,r16,64
 1807b04:	28800226 	beq	r5,r2,1807b10 <_fclose_r+0x84>
 1807b08:	8809883a 	mov	r4,r17
 1807b0c:	18049b00 	call	18049b0 <_free_r>
 1807b10:	80000c15 	stw	zero,48(r16)
 1807b14:	81401117 	ldw	r5,68(r16)
 1807b18:	28000326 	beq	r5,zero,1807b28 <_fclose_r+0x9c>
 1807b1c:	8809883a 	mov	r4,r17
 1807b20:	18049b00 	call	18049b0 <_free_r>
 1807b24:	80001115 	stw	zero,68(r16)
 1807b28:	8000030d 	sth	zero,12(r16)
 1807b2c:	18045ec0 	call	18045ec <__sfp_lock_release>
 1807b30:	9005883a 	mov	r2,r18
 1807b34:	dfc00317 	ldw	ra,12(sp)
 1807b38:	dc800217 	ldw	r18,8(sp)
 1807b3c:	dc400117 	ldw	r17,4(sp)
 1807b40:	dc000017 	ldw	r16,0(sp)
 1807b44:	dec00404 	addi	sp,sp,16
 1807b48:	f800283a 	ret
 1807b4c:	18045ec0 	call	18045ec <__sfp_lock_release>
 1807b50:	0025883a 	mov	r18,zero
 1807b54:	9005883a 	mov	r2,r18
 1807b58:	dfc00317 	ldw	ra,12(sp)
 1807b5c:	dc800217 	ldw	r18,8(sp)
 1807b60:	dc400117 	ldw	r17,4(sp)
 1807b64:	dc000017 	ldw	r16,0(sp)
 1807b68:	dec00404 	addi	sp,sp,16
 1807b6c:	f800283a 	ret
 1807b70:	8809883a 	mov	r4,r17
 1807b74:	18045f80 	call	18045f8 <__sinit>
 1807b78:	8080030f 	ldh	r2,12(r16)
 1807b7c:	103fd11e 	bne	r2,zero,1807ac4 <_fclose_r+0x38>
 1807b80:	003ff206 	br	1807b4c <_fclose_r+0xc0>
 1807b84:	81400417 	ldw	r5,16(r16)
 1807b88:	8809883a 	mov	r4,r17
 1807b8c:	18049b00 	call	18049b0 <_free_r>
 1807b90:	003fd906 	br	1807af8 <_fclose_r+0x6c>
 1807b94:	04bfffc4 	movi	r18,-1
 1807b98:	003fd406 	br	1807aec <_fclose_r+0x60>

01807b9c <fclose>:
 1807b9c:	00806074 	movhi	r2,385
 1807ba0:	10be1104 	addi	r2,r2,-1980
 1807ba4:	200b883a 	mov	r5,r4
 1807ba8:	11000017 	ldw	r4,0(r2)
 1807bac:	1807a8c1 	jmpi	1807a8c <_fclose_r>

01807bb0 <_fstat_r>:
 1807bb0:	defffd04 	addi	sp,sp,-12
 1807bb4:	dc000015 	stw	r16,0(sp)
 1807bb8:	04006074 	movhi	r16,385
 1807bbc:	8404ea04 	addi	r16,r16,5032
 1807bc0:	dc400115 	stw	r17,4(sp)
 1807bc4:	80000015 	stw	zero,0(r16)
 1807bc8:	2023883a 	mov	r17,r4
 1807bcc:	2809883a 	mov	r4,r5
 1807bd0:	300b883a 	mov	r5,r6
 1807bd4:	dfc00215 	stw	ra,8(sp)
 1807bd8:	180a3f80 	call	180a3f8 <fstat>
 1807bdc:	1007883a 	mov	r3,r2
 1807be0:	00bfffc4 	movi	r2,-1
 1807be4:	18800626 	beq	r3,r2,1807c00 <_fstat_r+0x50>
 1807be8:	1805883a 	mov	r2,r3
 1807bec:	dfc00217 	ldw	ra,8(sp)
 1807bf0:	dc400117 	ldw	r17,4(sp)
 1807bf4:	dc000017 	ldw	r16,0(sp)
 1807bf8:	dec00304 	addi	sp,sp,12
 1807bfc:	f800283a 	ret
 1807c00:	80800017 	ldw	r2,0(r16)
 1807c04:	103ff826 	beq	r2,zero,1807be8 <_fstat_r+0x38>
 1807c08:	88800015 	stw	r2,0(r17)
 1807c0c:	1805883a 	mov	r2,r3
 1807c10:	dfc00217 	ldw	ra,8(sp)
 1807c14:	dc400117 	ldw	r17,4(sp)
 1807c18:	dc000017 	ldw	r16,0(sp)
 1807c1c:	dec00304 	addi	sp,sp,12
 1807c20:	f800283a 	ret

01807c24 <_isatty_r>:
 1807c24:	defffd04 	addi	sp,sp,-12
 1807c28:	dc000015 	stw	r16,0(sp)
 1807c2c:	04006074 	movhi	r16,385
 1807c30:	8404ea04 	addi	r16,r16,5032
 1807c34:	dc400115 	stw	r17,4(sp)
 1807c38:	80000015 	stw	zero,0(r16)
 1807c3c:	2023883a 	mov	r17,r4
 1807c40:	2809883a 	mov	r4,r5
 1807c44:	dfc00215 	stw	ra,8(sp)
 1807c48:	180a5300 	call	180a530 <isatty>
 1807c4c:	1007883a 	mov	r3,r2
 1807c50:	00bfffc4 	movi	r2,-1
 1807c54:	18800626 	beq	r3,r2,1807c70 <_isatty_r+0x4c>
 1807c58:	1805883a 	mov	r2,r3
 1807c5c:	dfc00217 	ldw	ra,8(sp)
 1807c60:	dc400117 	ldw	r17,4(sp)
 1807c64:	dc000017 	ldw	r16,0(sp)
 1807c68:	dec00304 	addi	sp,sp,12
 1807c6c:	f800283a 	ret
 1807c70:	80800017 	ldw	r2,0(r16)
 1807c74:	103ff826 	beq	r2,zero,1807c58 <_isatty_r+0x34>
 1807c78:	88800015 	stw	r2,0(r17)
 1807c7c:	1805883a 	mov	r2,r3
 1807c80:	dfc00217 	ldw	ra,8(sp)
 1807c84:	dc400117 	ldw	r17,4(sp)
 1807c88:	dc000017 	ldw	r16,0(sp)
 1807c8c:	dec00304 	addi	sp,sp,12
 1807c90:	f800283a 	ret

01807c94 <_lseek_r>:
 1807c94:	defffd04 	addi	sp,sp,-12
 1807c98:	dc000015 	stw	r16,0(sp)
 1807c9c:	04006074 	movhi	r16,385
 1807ca0:	8404ea04 	addi	r16,r16,5032
 1807ca4:	dc400115 	stw	r17,4(sp)
 1807ca8:	80000015 	stw	zero,0(r16)
 1807cac:	2023883a 	mov	r17,r4
 1807cb0:	2809883a 	mov	r4,r5
 1807cb4:	300b883a 	mov	r5,r6
 1807cb8:	380d883a 	mov	r6,r7
 1807cbc:	dfc00215 	stw	ra,8(sp)
 1807cc0:	180a7400 	call	180a740 <lseek>
 1807cc4:	1007883a 	mov	r3,r2
 1807cc8:	00bfffc4 	movi	r2,-1
 1807ccc:	18800626 	beq	r3,r2,1807ce8 <_lseek_r+0x54>
 1807cd0:	1805883a 	mov	r2,r3
 1807cd4:	dfc00217 	ldw	ra,8(sp)
 1807cd8:	dc400117 	ldw	r17,4(sp)
 1807cdc:	dc000017 	ldw	r16,0(sp)
 1807ce0:	dec00304 	addi	sp,sp,12
 1807ce4:	f800283a 	ret
 1807ce8:	80800017 	ldw	r2,0(r16)
 1807cec:	103ff826 	beq	r2,zero,1807cd0 <_lseek_r+0x3c>
 1807cf0:	88800015 	stw	r2,0(r17)
 1807cf4:	1805883a 	mov	r2,r3
 1807cf8:	dfc00217 	ldw	ra,8(sp)
 1807cfc:	dc400117 	ldw	r17,4(sp)
 1807d00:	dc000017 	ldw	r16,0(sp)
 1807d04:	dec00304 	addi	sp,sp,12
 1807d08:	f800283a 	ret

01807d0c <_read_r>:
 1807d0c:	defffd04 	addi	sp,sp,-12
 1807d10:	dc000015 	stw	r16,0(sp)
 1807d14:	04006074 	movhi	r16,385
 1807d18:	8404ea04 	addi	r16,r16,5032
 1807d1c:	dc400115 	stw	r17,4(sp)
 1807d20:	80000015 	stw	zero,0(r16)
 1807d24:	2023883a 	mov	r17,r4
 1807d28:	2809883a 	mov	r4,r5
 1807d2c:	300b883a 	mov	r5,r6
 1807d30:	380d883a 	mov	r6,r7
 1807d34:	dfc00215 	stw	ra,8(sp)
 1807d38:	180abd80 	call	180abd8 <read>
 1807d3c:	1007883a 	mov	r3,r2
 1807d40:	00bfffc4 	movi	r2,-1
 1807d44:	18800626 	beq	r3,r2,1807d60 <_read_r+0x54>
 1807d48:	1805883a 	mov	r2,r3
 1807d4c:	dfc00217 	ldw	ra,8(sp)
 1807d50:	dc400117 	ldw	r17,4(sp)
 1807d54:	dc000017 	ldw	r16,0(sp)
 1807d58:	dec00304 	addi	sp,sp,12
 1807d5c:	f800283a 	ret
 1807d60:	80800017 	ldw	r2,0(r16)
 1807d64:	103ff826 	beq	r2,zero,1807d48 <_read_r+0x3c>
 1807d68:	88800015 	stw	r2,0(r17)
 1807d6c:	1805883a 	mov	r2,r3
 1807d70:	dfc00217 	ldw	ra,8(sp)
 1807d74:	dc400117 	ldw	r17,4(sp)
 1807d78:	dc000017 	ldw	r16,0(sp)
 1807d7c:	dec00304 	addi	sp,sp,12
 1807d80:	f800283a 	ret

01807d84 <__udivdi3>:
 1807d84:	defff104 	addi	sp,sp,-60
 1807d88:	0015883a 	mov	r10,zero
 1807d8c:	2005883a 	mov	r2,r4
 1807d90:	3011883a 	mov	r8,r6
 1807d94:	df000d15 	stw	fp,52(sp)
 1807d98:	dd400a15 	stw	r21,40(sp)
 1807d9c:	dcc00815 	stw	r19,32(sp)
 1807da0:	dfc00e15 	stw	ra,56(sp)
 1807da4:	ddc00c15 	stw	r23,48(sp)
 1807da8:	dd800b15 	stw	r22,44(sp)
 1807dac:	dd000915 	stw	r20,36(sp)
 1807db0:	dc800715 	stw	r18,28(sp)
 1807db4:	dc400615 	stw	r17,24(sp)
 1807db8:	dc000515 	stw	r16,20(sp)
 1807dbc:	da800315 	stw	r10,12(sp)
 1807dc0:	4027883a 	mov	r19,r8
 1807dc4:	1039883a 	mov	fp,r2
 1807dc8:	282b883a 	mov	r21,r5
 1807dcc:	da800415 	stw	r10,16(sp)
 1807dd0:	3800401e 	bne	r7,zero,1807ed4 <__udivdi3+0x150>
 1807dd4:	2a006536 	bltu	r5,r8,1807f6c <__udivdi3+0x1e8>
 1807dd8:	4000b526 	beq	r8,zero,18080b0 <__udivdi3+0x32c>
 1807ddc:	00bfffd4 	movui	r2,65535
 1807de0:	14c0ad36 	bltu	r2,r19,1808098 <__udivdi3+0x314>
 1807de4:	00803fc4 	movi	r2,255
 1807de8:	14c15e36 	bltu	r2,r19,1808364 <__udivdi3+0x5e0>
 1807dec:	000b883a 	mov	r5,zero
 1807df0:	0005883a 	mov	r2,zero
 1807df4:	9884d83a 	srl	r2,r19,r2
 1807df8:	01006074 	movhi	r4,385
 1807dfc:	21370104 	addi	r4,r4,-9212
 1807e00:	01800804 	movi	r6,32
 1807e04:	1105883a 	add	r2,r2,r4
 1807e08:	10c00003 	ldbu	r3,0(r2)
 1807e0c:	28c7883a 	add	r3,r5,r3
 1807e10:	30e9c83a 	sub	r20,r6,r3
 1807e14:	a0010a1e 	bne	r20,zero,1808240 <__udivdi3+0x4bc>
 1807e18:	982ed43a 	srli	r23,r19,16
 1807e1c:	acebc83a 	sub	r21,r21,r19
 1807e20:	9dbfffcc 	andi	r22,r19,65535
 1807e24:	05000044 	movi	r20,1
 1807e28:	a809883a 	mov	r4,r21
 1807e2c:	b80b883a 	mov	r5,r23
 1807e30:	180093c0 	call	180093c <__udivsi3>
 1807e34:	100b883a 	mov	r5,r2
 1807e38:	b009883a 	mov	r4,r22
 1807e3c:	1021883a 	mov	r16,r2
 1807e40:	1809b7c0 	call	1809b7c <__mulsi3>
 1807e44:	a809883a 	mov	r4,r21
 1807e48:	b80b883a 	mov	r5,r23
 1807e4c:	1023883a 	mov	r17,r2
 1807e50:	18009440 	call	1800944 <__umodsi3>
 1807e54:	1004943a 	slli	r2,r2,16
 1807e58:	e006d43a 	srli	r3,fp,16
 1807e5c:	10c4b03a 	or	r2,r2,r3
 1807e60:	1440042e 	bgeu	r2,r17,1807e74 <__udivdi3+0xf0>
 1807e64:	14c5883a 	add	r2,r2,r19
 1807e68:	843fffc4 	addi	r16,r16,-1
 1807e6c:	14c00136 	bltu	r2,r19,1807e74 <__udivdi3+0xf0>
 1807e70:	14415c36 	bltu	r2,r17,18083e4 <__udivdi3+0x660>
 1807e74:	1463c83a 	sub	r17,r2,r17
 1807e78:	8809883a 	mov	r4,r17
 1807e7c:	b80b883a 	mov	r5,r23
 1807e80:	180093c0 	call	180093c <__udivsi3>
 1807e84:	100b883a 	mov	r5,r2
 1807e88:	b009883a 	mov	r4,r22
 1807e8c:	102b883a 	mov	r21,r2
 1807e90:	1809b7c0 	call	1809b7c <__mulsi3>
 1807e94:	8809883a 	mov	r4,r17
 1807e98:	b80b883a 	mov	r5,r23
 1807e9c:	1025883a 	mov	r18,r2
 1807ea0:	18009440 	call	1800944 <__umodsi3>
 1807ea4:	1004943a 	slli	r2,r2,16
 1807ea8:	e0ffffcc 	andi	r3,fp,65535
 1807eac:	10c4b03a 	or	r2,r2,r3
 1807eb0:	1480042e 	bgeu	r2,r18,1807ec4 <__udivdi3+0x140>
 1807eb4:	9885883a 	add	r2,r19,r2
 1807eb8:	ad7fffc4 	addi	r21,r21,-1
 1807ebc:	14c00136 	bltu	r2,r19,1807ec4 <__udivdi3+0x140>
 1807ec0:	14813c36 	bltu	r2,r18,18083b4 <__udivdi3+0x630>
 1807ec4:	8004943a 	slli	r2,r16,16
 1807ec8:	a009883a 	mov	r4,r20
 1807ecc:	a884b03a 	or	r2,r21,r2
 1807ed0:	00001506 	br	1807f28 <__udivdi3+0x1a4>
 1807ed4:	380d883a 	mov	r6,r7
 1807ed8:	29c06c36 	bltu	r5,r7,180808c <__udivdi3+0x308>
 1807edc:	00bfffd4 	movui	r2,65535
 1807ee0:	11c06436 	bltu	r2,r7,1808074 <__udivdi3+0x2f0>
 1807ee4:	00803fc4 	movi	r2,255
 1807ee8:	11c11836 	bltu	r2,r7,180834c <__udivdi3+0x5c8>
 1807eec:	000b883a 	mov	r5,zero
 1807ef0:	0005883a 	mov	r2,zero
 1807ef4:	3084d83a 	srl	r2,r6,r2
 1807ef8:	01006074 	movhi	r4,385
 1807efc:	21370104 	addi	r4,r4,-9212
 1807f00:	01c00804 	movi	r7,32
 1807f04:	1105883a 	add	r2,r2,r4
 1807f08:	10c00003 	ldbu	r3,0(r2)
 1807f0c:	28c7883a 	add	r3,r5,r3
 1807f10:	38edc83a 	sub	r22,r7,r3
 1807f14:	b000731e 	bne	r22,zero,18080e4 <__udivdi3+0x360>
 1807f18:	35400136 	bltu	r6,r21,1807f20 <__udivdi3+0x19c>
 1807f1c:	e4c05b36 	bltu	fp,r19,180808c <__udivdi3+0x308>
 1807f20:	00800044 	movi	r2,1
 1807f24:	0009883a 	mov	r4,zero
 1807f28:	d8800315 	stw	r2,12(sp)
 1807f2c:	d9400317 	ldw	r5,12(sp)
 1807f30:	2007883a 	mov	r3,r4
 1807f34:	d9000415 	stw	r4,16(sp)
 1807f38:	2805883a 	mov	r2,r5
 1807f3c:	dfc00e17 	ldw	ra,56(sp)
 1807f40:	df000d17 	ldw	fp,52(sp)
 1807f44:	ddc00c17 	ldw	r23,48(sp)
 1807f48:	dd800b17 	ldw	r22,44(sp)
 1807f4c:	dd400a17 	ldw	r21,40(sp)
 1807f50:	dd000917 	ldw	r20,36(sp)
 1807f54:	dcc00817 	ldw	r19,32(sp)
 1807f58:	dc800717 	ldw	r18,28(sp)
 1807f5c:	dc400617 	ldw	r17,24(sp)
 1807f60:	dc000517 	ldw	r16,20(sp)
 1807f64:	dec00f04 	addi	sp,sp,60
 1807f68:	f800283a 	ret
 1807f6c:	00bfffd4 	movui	r2,65535
 1807f70:	12005636 	bltu	r2,r8,18080cc <__udivdi3+0x348>
 1807f74:	00803fc4 	movi	r2,255
 1807f78:	12010036 	bltu	r2,r8,180837c <__udivdi3+0x5f8>
 1807f7c:	000b883a 	mov	r5,zero
 1807f80:	0005883a 	mov	r2,zero
 1807f84:	9884d83a 	srl	r2,r19,r2
 1807f88:	01006074 	movhi	r4,385
 1807f8c:	21370104 	addi	r4,r4,-9212
 1807f90:	01800804 	movi	r6,32
 1807f94:	1105883a 	add	r2,r2,r4
 1807f98:	10c00003 	ldbu	r3,0(r2)
 1807f9c:	28c7883a 	add	r3,r5,r3
 1807fa0:	30cbc83a 	sub	r5,r6,r3
 1807fa4:	28000626 	beq	r5,zero,1807fc0 <__udivdi3+0x23c>
 1807fa8:	3145c83a 	sub	r2,r6,r5
 1807fac:	e084d83a 	srl	r2,fp,r2
 1807fb0:	a946983a 	sll	r3,r21,r5
 1807fb4:	e178983a 	sll	fp,fp,r5
 1807fb8:	9966983a 	sll	r19,r19,r5
 1807fbc:	18aab03a 	or	r21,r3,r2
 1807fc0:	982ed43a 	srli	r23,r19,16
 1807fc4:	a809883a 	mov	r4,r21
 1807fc8:	9cbfffcc 	andi	r18,r19,65535
 1807fcc:	b80b883a 	mov	r5,r23
 1807fd0:	180093c0 	call	180093c <__udivsi3>
 1807fd4:	100b883a 	mov	r5,r2
 1807fd8:	9009883a 	mov	r4,r18
 1807fdc:	1021883a 	mov	r16,r2
 1807fe0:	1809b7c0 	call	1809b7c <__mulsi3>
 1807fe4:	a809883a 	mov	r4,r21
 1807fe8:	b80b883a 	mov	r5,r23
 1807fec:	1023883a 	mov	r17,r2
 1807ff0:	18009440 	call	1800944 <__umodsi3>
 1807ff4:	1004943a 	slli	r2,r2,16
 1807ff8:	e006d43a 	srli	r3,fp,16
 1807ffc:	10c4b03a 	or	r2,r2,r3
 1808000:	1440042e 	bgeu	r2,r17,1808014 <__udivdi3+0x290>
 1808004:	14c5883a 	add	r2,r2,r19
 1808008:	843fffc4 	addi	r16,r16,-1
 180800c:	14c00136 	bltu	r2,r19,1808014 <__udivdi3+0x290>
 1808010:	1440ea36 	bltu	r2,r17,18083bc <__udivdi3+0x638>
 1808014:	1463c83a 	sub	r17,r2,r17
 1808018:	8809883a 	mov	r4,r17
 180801c:	b80b883a 	mov	r5,r23
 1808020:	180093c0 	call	180093c <__udivsi3>
 1808024:	100b883a 	mov	r5,r2
 1808028:	9009883a 	mov	r4,r18
 180802c:	102b883a 	mov	r21,r2
 1808030:	1809b7c0 	call	1809b7c <__mulsi3>
 1808034:	8809883a 	mov	r4,r17
 1808038:	b80b883a 	mov	r5,r23
 180803c:	1025883a 	mov	r18,r2
 1808040:	18009440 	call	1800944 <__umodsi3>
 1808044:	1004943a 	slli	r2,r2,16
 1808048:	e0ffffcc 	andi	r3,fp,65535
 180804c:	10c4b03a 	or	r2,r2,r3
 1808050:	1480042e 	bgeu	r2,r18,1808064 <__udivdi3+0x2e0>
 1808054:	9885883a 	add	r2,r19,r2
 1808058:	ad7fffc4 	addi	r21,r21,-1
 180805c:	14c00136 	bltu	r2,r19,1808064 <__udivdi3+0x2e0>
 1808060:	1480d936 	bltu	r2,r18,18083c8 <__udivdi3+0x644>
 1808064:	8004943a 	slli	r2,r16,16
 1808068:	0009883a 	mov	r4,zero
 180806c:	a884b03a 	or	r2,r21,r2
 1808070:	003fad06 	br	1807f28 <__udivdi3+0x1a4>
 1808074:	00804034 	movhi	r2,256
 1808078:	10bfffc4 	addi	r2,r2,-1
 180807c:	11c0b636 	bltu	r2,r7,1808358 <__udivdi3+0x5d4>
 1808080:	01400404 	movi	r5,16
 1808084:	2805883a 	mov	r2,r5
 1808088:	003f9a06 	br	1807ef4 <__udivdi3+0x170>
 180808c:	0005883a 	mov	r2,zero
 1808090:	0009883a 	mov	r4,zero
 1808094:	003fa406 	br	1807f28 <__udivdi3+0x1a4>
 1808098:	00804034 	movhi	r2,256
 180809c:	10bfffc4 	addi	r2,r2,-1
 18080a0:	14c0b336 	bltu	r2,r19,1808370 <__udivdi3+0x5ec>
 18080a4:	01400404 	movi	r5,16
 18080a8:	2805883a 	mov	r2,r5
 18080ac:	003f5106 	br	1807df4 <__udivdi3+0x70>
 18080b0:	01000044 	movi	r4,1
 18080b4:	000b883a 	mov	r5,zero
 18080b8:	180093c0 	call	180093c <__udivsi3>
 18080bc:	1027883a 	mov	r19,r2
 18080c0:	00bfffd4 	movui	r2,65535
 18080c4:	14fff436 	bltu	r2,r19,1808098 <__udivdi3+0x314>
 18080c8:	003f4606 	br	1807de4 <__udivdi3+0x60>
 18080cc:	00804034 	movhi	r2,256
 18080d0:	10bfffc4 	addi	r2,r2,-1
 18080d4:	1200ac36 	bltu	r2,r8,1808388 <__udivdi3+0x604>
 18080d8:	01400404 	movi	r5,16
 18080dc:	2805883a 	mov	r2,r5
 18080e0:	003fa806 	br	1807f84 <__udivdi3+0x200>
 18080e4:	3d85c83a 	sub	r2,r7,r22
 18080e8:	3588983a 	sll	r4,r6,r22
 18080ec:	9886d83a 	srl	r3,r19,r2
 18080f0:	a8a2d83a 	srl	r17,r21,r2
 18080f4:	e084d83a 	srl	r2,fp,r2
 18080f8:	20eeb03a 	or	r23,r4,r3
 18080fc:	b824d43a 	srli	r18,r23,16
 1808100:	ad86983a 	sll	r3,r21,r22
 1808104:	8809883a 	mov	r4,r17
 1808108:	900b883a 	mov	r5,r18
 180810c:	1886b03a 	or	r3,r3,r2
 1808110:	d8c00115 	stw	r3,4(sp)
 1808114:	bc3fffcc 	andi	r16,r23,65535
 1808118:	180093c0 	call	180093c <__udivsi3>
 180811c:	100b883a 	mov	r5,r2
 1808120:	8009883a 	mov	r4,r16
 1808124:	1029883a 	mov	r20,r2
 1808128:	1809b7c0 	call	1809b7c <__mulsi3>
 180812c:	900b883a 	mov	r5,r18
 1808130:	8809883a 	mov	r4,r17
 1808134:	102b883a 	mov	r21,r2
 1808138:	18009440 	call	1800944 <__umodsi3>
 180813c:	d9400117 	ldw	r5,4(sp)
 1808140:	1004943a 	slli	r2,r2,16
 1808144:	9da6983a 	sll	r19,r19,r22
 1808148:	2806d43a 	srli	r3,r5,16
 180814c:	10c4b03a 	or	r2,r2,r3
 1808150:	1540032e 	bgeu	r2,r21,1808160 <__udivdi3+0x3dc>
 1808154:	15c5883a 	add	r2,r2,r23
 1808158:	a53fffc4 	addi	r20,r20,-1
 180815c:	15c0912e 	bgeu	r2,r23,18083a4 <__udivdi3+0x620>
 1808160:	1563c83a 	sub	r17,r2,r21
 1808164:	8809883a 	mov	r4,r17
 1808168:	900b883a 	mov	r5,r18
 180816c:	180093c0 	call	180093c <__udivsi3>
 1808170:	100b883a 	mov	r5,r2
 1808174:	8009883a 	mov	r4,r16
 1808178:	102b883a 	mov	r21,r2
 180817c:	1809b7c0 	call	1809b7c <__mulsi3>
 1808180:	8809883a 	mov	r4,r17
 1808184:	900b883a 	mov	r5,r18
 1808188:	1021883a 	mov	r16,r2
 180818c:	18009440 	call	1800944 <__umodsi3>
 1808190:	da800117 	ldw	r10,4(sp)
 1808194:	1004943a 	slli	r2,r2,16
 1808198:	50ffffcc 	andi	r3,r10,65535
 180819c:	10c6b03a 	or	r3,r2,r3
 18081a0:	1c00032e 	bgeu	r3,r16,18081b0 <__udivdi3+0x42c>
 18081a4:	1dc7883a 	add	r3,r3,r23
 18081a8:	ad7fffc4 	addi	r21,r21,-1
 18081ac:	1dc0792e 	bgeu	r3,r23,1808394 <__udivdi3+0x610>
 18081b0:	a004943a 	slli	r2,r20,16
 18081b4:	982ed43a 	srli	r23,r19,16
 18081b8:	9cffffcc 	andi	r19,r19,65535
 18081bc:	a8a4b03a 	or	r18,r21,r2
 18081c0:	947fffcc 	andi	r17,r18,65535
 18081c4:	902ad43a 	srli	r21,r18,16
 18081c8:	8809883a 	mov	r4,r17
 18081cc:	980b883a 	mov	r5,r19
 18081d0:	1c21c83a 	sub	r16,r3,r16
 18081d4:	1809b7c0 	call	1809b7c <__mulsi3>
 18081d8:	8809883a 	mov	r4,r17
 18081dc:	b80b883a 	mov	r5,r23
 18081e0:	1029883a 	mov	r20,r2
 18081e4:	1809b7c0 	call	1809b7c <__mulsi3>
 18081e8:	980b883a 	mov	r5,r19
 18081ec:	a809883a 	mov	r4,r21
 18081f0:	1023883a 	mov	r17,r2
 18081f4:	1809b7c0 	call	1809b7c <__mulsi3>
 18081f8:	a809883a 	mov	r4,r21
 18081fc:	b80b883a 	mov	r5,r23
 1808200:	1027883a 	mov	r19,r2
 1808204:	1809b7c0 	call	1809b7c <__mulsi3>
 1808208:	1009883a 	mov	r4,r2
 180820c:	a004d43a 	srli	r2,r20,16
 1808210:	8ce3883a 	add	r17,r17,r19
 1808214:	1447883a 	add	r3,r2,r17
 1808218:	1cc0022e 	bgeu	r3,r19,1808224 <__udivdi3+0x4a0>
 180821c:	00800074 	movhi	r2,1
 1808220:	2089883a 	add	r4,r4,r2
 1808224:	1804d43a 	srli	r2,r3,16
 1808228:	2085883a 	add	r2,r4,r2
 180822c:	80804436 	bltu	r16,r2,1808340 <__udivdi3+0x5bc>
 1808230:	80803e26 	beq	r16,r2,180832c <__udivdi3+0x5a8>
 1808234:	9005883a 	mov	r2,r18
 1808238:	0009883a 	mov	r4,zero
 180823c:	003f3a06 	br	1807f28 <__udivdi3+0x1a4>
 1808240:	9d26983a 	sll	r19,r19,r20
 1808244:	3505c83a 	sub	r2,r6,r20
 1808248:	a8a2d83a 	srl	r17,r21,r2
 180824c:	982ed43a 	srli	r23,r19,16
 1808250:	e084d83a 	srl	r2,fp,r2
 1808254:	ad06983a 	sll	r3,r21,r20
 1808258:	8809883a 	mov	r4,r17
 180825c:	b80b883a 	mov	r5,r23
 1808260:	1886b03a 	or	r3,r3,r2
 1808264:	d8c00015 	stw	r3,0(sp)
 1808268:	9dbfffcc 	andi	r22,r19,65535
 180826c:	180093c0 	call	180093c <__udivsi3>
 1808270:	100b883a 	mov	r5,r2
 1808274:	b009883a 	mov	r4,r22
 1808278:	d8800215 	stw	r2,8(sp)
 180827c:	1809b7c0 	call	1809b7c <__mulsi3>
 1808280:	8809883a 	mov	r4,r17
 1808284:	b80b883a 	mov	r5,r23
 1808288:	102b883a 	mov	r21,r2
 180828c:	18009440 	call	1800944 <__umodsi3>
 1808290:	d9000017 	ldw	r4,0(sp)
 1808294:	1004943a 	slli	r2,r2,16
 1808298:	2006d43a 	srli	r3,r4,16
 180829c:	10c4b03a 	or	r2,r2,r3
 18082a0:	1540052e 	bgeu	r2,r21,18082b8 <__udivdi3+0x534>
 18082a4:	d9400217 	ldw	r5,8(sp)
 18082a8:	14c5883a 	add	r2,r2,r19
 18082ac:	297fffc4 	addi	r5,r5,-1
 18082b0:	d9400215 	stw	r5,8(sp)
 18082b4:	14c0462e 	bgeu	r2,r19,18083d0 <__udivdi3+0x64c>
 18082b8:	1563c83a 	sub	r17,r2,r21
 18082bc:	8809883a 	mov	r4,r17
 18082c0:	b80b883a 	mov	r5,r23
 18082c4:	180093c0 	call	180093c <__udivsi3>
 18082c8:	100b883a 	mov	r5,r2
 18082cc:	b009883a 	mov	r4,r22
 18082d0:	1025883a 	mov	r18,r2
 18082d4:	1809b7c0 	call	1809b7c <__mulsi3>
 18082d8:	8809883a 	mov	r4,r17
 18082dc:	b80b883a 	mov	r5,r23
 18082e0:	1021883a 	mov	r16,r2
 18082e4:	18009440 	call	1800944 <__umodsi3>
 18082e8:	da800017 	ldw	r10,0(sp)
 18082ec:	1004943a 	slli	r2,r2,16
 18082f0:	50ffffcc 	andi	r3,r10,65535
 18082f4:	10c6b03a 	or	r3,r2,r3
 18082f8:	1c00062e 	bgeu	r3,r16,1808314 <__udivdi3+0x590>
 18082fc:	1cc7883a 	add	r3,r3,r19
 1808300:	94bfffc4 	addi	r18,r18,-1
 1808304:	1cc00336 	bltu	r3,r19,1808314 <__udivdi3+0x590>
 1808308:	1c00022e 	bgeu	r3,r16,1808314 <__udivdi3+0x590>
 180830c:	94bfffc4 	addi	r18,r18,-1
 1808310:	1cc7883a 	add	r3,r3,r19
 1808314:	d9000217 	ldw	r4,8(sp)
 1808318:	e538983a 	sll	fp,fp,r20
 180831c:	1c2bc83a 	sub	r21,r3,r16
 1808320:	2004943a 	slli	r2,r4,16
 1808324:	90a8b03a 	or	r20,r18,r2
 1808328:	003ebf06 	br	1807e28 <__udivdi3+0xa4>
 180832c:	1804943a 	slli	r2,r3,16
 1808330:	e588983a 	sll	r4,fp,r22
 1808334:	a0ffffcc 	andi	r3,r20,65535
 1808338:	10c5883a 	add	r2,r2,r3
 180833c:	20bfbd2e 	bgeu	r4,r2,1808234 <__udivdi3+0x4b0>
 1808340:	90bfffc4 	addi	r2,r18,-1
 1808344:	0009883a 	mov	r4,zero
 1808348:	003ef706 	br	1807f28 <__udivdi3+0x1a4>
 180834c:	01400204 	movi	r5,8
 1808350:	2805883a 	mov	r2,r5
 1808354:	003ee706 	br	1807ef4 <__udivdi3+0x170>
 1808358:	01400604 	movi	r5,24
 180835c:	2805883a 	mov	r2,r5
 1808360:	003ee406 	br	1807ef4 <__udivdi3+0x170>
 1808364:	01400204 	movi	r5,8
 1808368:	2805883a 	mov	r2,r5
 180836c:	003ea106 	br	1807df4 <__udivdi3+0x70>
 1808370:	01400604 	movi	r5,24
 1808374:	2805883a 	mov	r2,r5
 1808378:	003e9e06 	br	1807df4 <__udivdi3+0x70>
 180837c:	01400204 	movi	r5,8
 1808380:	2805883a 	mov	r2,r5
 1808384:	003eff06 	br	1807f84 <__udivdi3+0x200>
 1808388:	01400604 	movi	r5,24
 180838c:	2805883a 	mov	r2,r5
 1808390:	003efc06 	br	1807f84 <__udivdi3+0x200>
 1808394:	1c3f862e 	bgeu	r3,r16,18081b0 <__udivdi3+0x42c>
 1808398:	1dc7883a 	add	r3,r3,r23
 180839c:	ad7fffc4 	addi	r21,r21,-1
 18083a0:	003f8306 	br	18081b0 <__udivdi3+0x42c>
 18083a4:	157f6e2e 	bgeu	r2,r21,1808160 <__udivdi3+0x3dc>
 18083a8:	a53fffc4 	addi	r20,r20,-1
 18083ac:	15c5883a 	add	r2,r2,r23
 18083b0:	003f6b06 	br	1808160 <__udivdi3+0x3dc>
 18083b4:	ad7fffc4 	addi	r21,r21,-1
 18083b8:	003ec206 	br	1807ec4 <__udivdi3+0x140>
 18083bc:	843fffc4 	addi	r16,r16,-1
 18083c0:	14c5883a 	add	r2,r2,r19
 18083c4:	003f1306 	br	1808014 <__udivdi3+0x290>
 18083c8:	ad7fffc4 	addi	r21,r21,-1
 18083cc:	003f2506 	br	1808064 <__udivdi3+0x2e0>
 18083d0:	157fb92e 	bgeu	r2,r21,18082b8 <__udivdi3+0x534>
 18083d4:	297fffc4 	addi	r5,r5,-1
 18083d8:	14c5883a 	add	r2,r2,r19
 18083dc:	d9400215 	stw	r5,8(sp)
 18083e0:	003fb506 	br	18082b8 <__udivdi3+0x534>
 18083e4:	843fffc4 	addi	r16,r16,-1
 18083e8:	14c5883a 	add	r2,r2,r19
 18083ec:	003ea106 	br	1807e74 <__udivdi3+0xf0>

018083f0 <__umoddi3>:
 18083f0:	defff004 	addi	sp,sp,-64
 18083f4:	3011883a 	mov	r8,r6
 18083f8:	000d883a 	mov	r6,zero
 18083fc:	dd400b15 	stw	r21,44(sp)
 1808400:	dcc00915 	stw	r19,36(sp)
 1808404:	dc000615 	stw	r16,24(sp)
 1808408:	dfc00f15 	stw	ra,60(sp)
 180840c:	df000e15 	stw	fp,56(sp)
 1808410:	ddc00d15 	stw	r23,52(sp)
 1808414:	dd800c15 	stw	r22,48(sp)
 1808418:	dd000a15 	stw	r20,40(sp)
 180841c:	dc800815 	stw	r18,32(sp)
 1808420:	dc400715 	stw	r17,28(sp)
 1808424:	2817883a 	mov	r11,r5
 1808428:	d9800415 	stw	r6,16(sp)
 180842c:	4027883a 	mov	r19,r8
 1808430:	d9800515 	stw	r6,20(sp)
 1808434:	2021883a 	mov	r16,r4
 1808438:	282b883a 	mov	r21,r5
 180843c:	38002c1e 	bne	r7,zero,18084f0 <__umoddi3+0x100>
 1808440:	2a005636 	bltu	r5,r8,180859c <__umoddi3+0x1ac>
 1808444:	40009a26 	beq	r8,zero,18086b0 <__umoddi3+0x2c0>
 1808448:	00bfffd4 	movui	r2,65535
 180844c:	14c09236 	bltu	r2,r19,1808698 <__umoddi3+0x2a8>
 1808450:	00803fc4 	movi	r2,255
 1808454:	14c15c36 	bltu	r2,r19,18089c8 <__umoddi3+0x5d8>
 1808458:	000b883a 	mov	r5,zero
 180845c:	0005883a 	mov	r2,zero
 1808460:	9884d83a 	srl	r2,r19,r2
 1808464:	01006074 	movhi	r4,385
 1808468:	21370104 	addi	r4,r4,-9212
 180846c:	01800804 	movi	r6,32
 1808470:	1105883a 	add	r2,r2,r4
 1808474:	10c00003 	ldbu	r3,0(r2)
 1808478:	28c7883a 	add	r3,r5,r3
 180847c:	30e5c83a 	sub	r18,r6,r3
 1808480:	9000a41e 	bne	r18,zero,1808714 <__umoddi3+0x324>
 1808484:	982ed43a 	srli	r23,r19,16
 1808488:	acebc83a 	sub	r21,r21,r19
 180848c:	9d3fffcc 	andi	r20,r19,65535
 1808490:	002d883a 	mov	r22,zero
 1808494:	a809883a 	mov	r4,r21
 1808498:	b80b883a 	mov	r5,r23
 180849c:	180093c0 	call	180093c <__udivsi3>
 18084a0:	100b883a 	mov	r5,r2
 18084a4:	a009883a 	mov	r4,r20
 18084a8:	1809b7c0 	call	1809b7c <__mulsi3>
 18084ac:	a809883a 	mov	r4,r21
 18084b0:	b80b883a 	mov	r5,r23
 18084b4:	1023883a 	mov	r17,r2
 18084b8:	18009440 	call	1800944 <__umodsi3>
 18084bc:	1004943a 	slli	r2,r2,16
 18084c0:	8006d43a 	srli	r3,r16,16
 18084c4:	10c4b03a 	or	r2,r2,r3
 18084c8:	1440032e 	bgeu	r2,r17,18084d8 <__umoddi3+0xe8>
 18084cc:	14c5883a 	add	r2,r2,r19
 18084d0:	14c00136 	bltu	r2,r19,18084d8 <__umoddi3+0xe8>
 18084d4:	14415836 	bltu	r2,r17,1808a38 <__umoddi3+0x648>
 18084d8:	1463c83a 	sub	r17,r2,r17
 18084dc:	8809883a 	mov	r4,r17
 18084e0:	b80b883a 	mov	r5,r23
 18084e4:	180093c0 	call	180093c <__udivsi3>
 18084e8:	a009883a 	mov	r4,r20
 18084ec:	00005306 	br	180863c <__umoddi3+0x24c>
 18084f0:	380d883a 	mov	r6,r7
 18084f4:	29c0132e 	bgeu	r5,r7,1808544 <__umoddi3+0x154>
 18084f8:	d9000415 	stw	r4,16(sp)
 18084fc:	d9400515 	stw	r5,20(sp)
 1808500:	d9400417 	ldw	r5,16(sp)
 1808504:	5813883a 	mov	r9,r11
 1808508:	2811883a 	mov	r8,r5
 180850c:	4005883a 	mov	r2,r8
 1808510:	4807883a 	mov	r3,r9
 1808514:	dfc00f17 	ldw	ra,60(sp)
 1808518:	df000e17 	ldw	fp,56(sp)
 180851c:	ddc00d17 	ldw	r23,52(sp)
 1808520:	dd800c17 	ldw	r22,48(sp)
 1808524:	dd400b17 	ldw	r21,44(sp)
 1808528:	dd000a17 	ldw	r20,40(sp)
 180852c:	dcc00917 	ldw	r19,36(sp)
 1808530:	dc800817 	ldw	r18,32(sp)
 1808534:	dc400717 	ldw	r17,28(sp)
 1808538:	dc000617 	ldw	r16,24(sp)
 180853c:	dec01004 	addi	sp,sp,64
 1808540:	f800283a 	ret
 1808544:	00bfffd4 	movui	r2,65535
 1808548:	11c06636 	bltu	r2,r7,18086e4 <__umoddi3+0x2f4>
 180854c:	00803fc4 	movi	r2,255
 1808550:	11c12036 	bltu	r2,r7,18089d4 <__umoddi3+0x5e4>
 1808554:	000b883a 	mov	r5,zero
 1808558:	0005883a 	mov	r2,zero
 180855c:	3084d83a 	srl	r2,r6,r2
 1808560:	01006074 	movhi	r4,385
 1808564:	21370104 	addi	r4,r4,-9212
 1808568:	01c00804 	movi	r7,32
 180856c:	1105883a 	add	r2,r2,r4
 1808570:	10c00003 	ldbu	r3,0(r2)
 1808574:	28c7883a 	add	r3,r5,r3
 1808578:	38e5c83a 	sub	r18,r7,r3
 180857c:	9000941e 	bne	r18,zero,18087d0 <__umoddi3+0x3e0>
 1808580:	35405e36 	bltu	r6,r21,18086fc <__umoddi3+0x30c>
 1808584:	84c05d2e 	bgeu	r16,r19,18086fc <__umoddi3+0x30c>
 1808588:	8011883a 	mov	r8,r16
 180858c:	a813883a 	mov	r9,r21
 1808590:	dc000415 	stw	r16,16(sp)
 1808594:	dd400515 	stw	r21,20(sp)
 1808598:	003fdc06 	br	180850c <__umoddi3+0x11c>
 180859c:	00bfffd4 	movui	r2,65535
 18085a0:	12004a36 	bltu	r2,r8,18086cc <__umoddi3+0x2dc>
 18085a4:	00803fc4 	movi	r2,255
 18085a8:	12010d36 	bltu	r2,r8,18089e0 <__umoddi3+0x5f0>
 18085ac:	000b883a 	mov	r5,zero
 18085b0:	0005883a 	mov	r2,zero
 18085b4:	9884d83a 	srl	r2,r19,r2
 18085b8:	01006074 	movhi	r4,385
 18085bc:	21370104 	addi	r4,r4,-9212
 18085c0:	01800804 	movi	r6,32
 18085c4:	1105883a 	add	r2,r2,r4
 18085c8:	10c00003 	ldbu	r3,0(r2)
 18085cc:	28c7883a 	add	r3,r5,r3
 18085d0:	30c7c83a 	sub	r3,r6,r3
 18085d4:	1800dc1e 	bne	r3,zero,1808948 <__umoddi3+0x558>
 18085d8:	002d883a 	mov	r22,zero
 18085dc:	982ed43a 	srli	r23,r19,16
 18085e0:	a809883a 	mov	r4,r21
 18085e4:	9cbfffcc 	andi	r18,r19,65535
 18085e8:	b80b883a 	mov	r5,r23
 18085ec:	180093c0 	call	180093c <__udivsi3>
 18085f0:	100b883a 	mov	r5,r2
 18085f4:	9009883a 	mov	r4,r18
 18085f8:	1809b7c0 	call	1809b7c <__mulsi3>
 18085fc:	a809883a 	mov	r4,r21
 1808600:	b80b883a 	mov	r5,r23
 1808604:	1023883a 	mov	r17,r2
 1808608:	18009440 	call	1800944 <__umodsi3>
 180860c:	1004943a 	slli	r2,r2,16
 1808610:	8006d43a 	srli	r3,r16,16
 1808614:	10c4b03a 	or	r2,r2,r3
 1808618:	1440032e 	bgeu	r2,r17,1808628 <__umoddi3+0x238>
 180861c:	14c5883a 	add	r2,r2,r19
 1808620:	14c00136 	bltu	r2,r19,1808628 <__umoddi3+0x238>
 1808624:	14410236 	bltu	r2,r17,1808a30 <__umoddi3+0x640>
 1808628:	1463c83a 	sub	r17,r2,r17
 180862c:	8809883a 	mov	r4,r17
 1808630:	b80b883a 	mov	r5,r23
 1808634:	180093c0 	call	180093c <__udivsi3>
 1808638:	9009883a 	mov	r4,r18
 180863c:	100b883a 	mov	r5,r2
 1808640:	1809b7c0 	call	1809b7c <__mulsi3>
 1808644:	8809883a 	mov	r4,r17
 1808648:	b80b883a 	mov	r5,r23
 180864c:	102b883a 	mov	r21,r2
 1808650:	18009440 	call	1800944 <__umodsi3>
 1808654:	1004943a 	slli	r2,r2,16
 1808658:	80ffffcc 	andi	r3,r16,65535
 180865c:	10c4b03a 	or	r2,r2,r3
 1808660:	1540042e 	bgeu	r2,r21,1808674 <__umoddi3+0x284>
 1808664:	14c5883a 	add	r2,r2,r19
 1808668:	14c00236 	bltu	r2,r19,1808674 <__umoddi3+0x284>
 180866c:	1540012e 	bgeu	r2,r21,1808674 <__umoddi3+0x284>
 1808670:	14c5883a 	add	r2,r2,r19
 1808674:	1545c83a 	sub	r2,r2,r21
 1808678:	1584d83a 	srl	r2,r2,r22
 180867c:	0013883a 	mov	r9,zero
 1808680:	d8800415 	stw	r2,16(sp)
 1808684:	d8c00417 	ldw	r3,16(sp)
 1808688:	0005883a 	mov	r2,zero
 180868c:	d8800515 	stw	r2,20(sp)
 1808690:	1811883a 	mov	r8,r3
 1808694:	003f9d06 	br	180850c <__umoddi3+0x11c>
 1808698:	00804034 	movhi	r2,256
 180869c:	10bfffc4 	addi	r2,r2,-1
 18086a0:	14c0c636 	bltu	r2,r19,18089bc <__umoddi3+0x5cc>
 18086a4:	01400404 	movi	r5,16
 18086a8:	2805883a 	mov	r2,r5
 18086ac:	003f6c06 	br	1808460 <__umoddi3+0x70>
 18086b0:	01000044 	movi	r4,1
 18086b4:	000b883a 	mov	r5,zero
 18086b8:	180093c0 	call	180093c <__udivsi3>
 18086bc:	1027883a 	mov	r19,r2
 18086c0:	00bfffd4 	movui	r2,65535
 18086c4:	14fff436 	bltu	r2,r19,1808698 <__umoddi3+0x2a8>
 18086c8:	003f6106 	br	1808450 <__umoddi3+0x60>
 18086cc:	00804034 	movhi	r2,256
 18086d0:	10bfffc4 	addi	r2,r2,-1
 18086d4:	1200c536 	bltu	r2,r8,18089ec <__umoddi3+0x5fc>
 18086d8:	01400404 	movi	r5,16
 18086dc:	2805883a 	mov	r2,r5
 18086e0:	003fb406 	br	18085b4 <__umoddi3+0x1c4>
 18086e4:	00804034 	movhi	r2,256
 18086e8:	10bfffc4 	addi	r2,r2,-1
 18086ec:	11c0c236 	bltu	r2,r7,18089f8 <__umoddi3+0x608>
 18086f0:	01400404 	movi	r5,16
 18086f4:	2805883a 	mov	r2,r5
 18086f8:	003f9806 	br	180855c <__umoddi3+0x16c>
 18086fc:	84c9c83a 	sub	r4,r16,r19
 1808700:	8105803a 	cmpltu	r2,r16,r4
 1808704:	a987c83a 	sub	r3,r21,r6
 1808708:	18abc83a 	sub	r21,r3,r2
 180870c:	2021883a 	mov	r16,r4
 1808710:	003f9d06 	br	1808588 <__umoddi3+0x198>
 1808714:	9ca6983a 	sll	r19,r19,r18
 1808718:	3485c83a 	sub	r2,r6,r18
 180871c:	a8a2d83a 	srl	r17,r21,r2
 1808720:	982ed43a 	srli	r23,r19,16
 1808724:	ac86983a 	sll	r3,r21,r18
 1808728:	8084d83a 	srl	r2,r16,r2
 180872c:	8809883a 	mov	r4,r17
 1808730:	b80b883a 	mov	r5,r23
 1808734:	18b8b03a 	or	fp,r3,r2
 1808738:	9d3fffcc 	andi	r20,r19,65535
 180873c:	180093c0 	call	180093c <__udivsi3>
 1808740:	100b883a 	mov	r5,r2
 1808744:	a009883a 	mov	r4,r20
 1808748:	1809b7c0 	call	1809b7c <__mulsi3>
 180874c:	8809883a 	mov	r4,r17
 1808750:	b80b883a 	mov	r5,r23
 1808754:	102b883a 	mov	r21,r2
 1808758:	18009440 	call	1800944 <__umodsi3>
 180875c:	1004943a 	slli	r2,r2,16
 1808760:	e006d43a 	srli	r3,fp,16
 1808764:	902d883a 	mov	r22,r18
 1808768:	10c4b03a 	or	r2,r2,r3
 180876c:	1540022e 	bgeu	r2,r21,1808778 <__umoddi3+0x388>
 1808770:	14c5883a 	add	r2,r2,r19
 1808774:	14c0ab2e 	bgeu	r2,r19,1808a24 <__umoddi3+0x634>
 1808778:	1563c83a 	sub	r17,r2,r21
 180877c:	8809883a 	mov	r4,r17
 1808780:	b80b883a 	mov	r5,r23
 1808784:	180093c0 	call	180093c <__udivsi3>
 1808788:	100b883a 	mov	r5,r2
 180878c:	a009883a 	mov	r4,r20
 1808790:	1809b7c0 	call	1809b7c <__mulsi3>
 1808794:	8809883a 	mov	r4,r17
 1808798:	b80b883a 	mov	r5,r23
 180879c:	102b883a 	mov	r21,r2
 18087a0:	18009440 	call	1800944 <__umodsi3>
 18087a4:	1004943a 	slli	r2,r2,16
 18087a8:	e0ffffcc 	andi	r3,fp,65535
 18087ac:	10c4b03a 	or	r2,r2,r3
 18087b0:	1540042e 	bgeu	r2,r21,18087c4 <__umoddi3+0x3d4>
 18087b4:	14c5883a 	add	r2,r2,r19
 18087b8:	14c00236 	bltu	r2,r19,18087c4 <__umoddi3+0x3d4>
 18087bc:	1540012e 	bgeu	r2,r21,18087c4 <__umoddi3+0x3d4>
 18087c0:	14c5883a 	add	r2,r2,r19
 18087c4:	84a0983a 	sll	r16,r16,r18
 18087c8:	156bc83a 	sub	r21,r2,r21
 18087cc:	003f3106 	br	1808494 <__umoddi3+0xa4>
 18087d0:	3c8fc83a 	sub	r7,r7,r18
 18087d4:	3486983a 	sll	r3,r6,r18
 18087d8:	99c4d83a 	srl	r2,r19,r7
 18087dc:	a9e2d83a 	srl	r17,r21,r7
 18087e0:	ac8c983a 	sll	r6,r21,r18
 18087e4:	18acb03a 	or	r22,r3,r2
 18087e8:	b02ed43a 	srli	r23,r22,16
 18087ec:	81c4d83a 	srl	r2,r16,r7
 18087f0:	8809883a 	mov	r4,r17
 18087f4:	b80b883a 	mov	r5,r23
 18087f8:	308cb03a 	or	r6,r6,r2
 18087fc:	d9c00315 	stw	r7,12(sp)
 1808800:	d9800215 	stw	r6,8(sp)
 1808804:	b53fffcc 	andi	r20,r22,65535
 1808808:	180093c0 	call	180093c <__udivsi3>
 180880c:	100b883a 	mov	r5,r2
 1808810:	a009883a 	mov	r4,r20
 1808814:	1039883a 	mov	fp,r2
 1808818:	1809b7c0 	call	1809b7c <__mulsi3>
 180881c:	8809883a 	mov	r4,r17
 1808820:	b80b883a 	mov	r5,r23
 1808824:	102b883a 	mov	r21,r2
 1808828:	18009440 	call	1800944 <__umodsi3>
 180882c:	d9000217 	ldw	r4,8(sp)
 1808830:	1004943a 	slli	r2,r2,16
 1808834:	9ca6983a 	sll	r19,r19,r18
 1808838:	2006d43a 	srli	r3,r4,16
 180883c:	84a0983a 	sll	r16,r16,r18
 1808840:	dcc00015 	stw	r19,0(sp)
 1808844:	10c4b03a 	or	r2,r2,r3
 1808848:	dc000115 	stw	r16,4(sp)
 180884c:	1540032e 	bgeu	r2,r21,180885c <__umoddi3+0x46c>
 1808850:	1585883a 	add	r2,r2,r22
 1808854:	e73fffc4 	addi	fp,fp,-1
 1808858:	15806e2e 	bgeu	r2,r22,1808a14 <__umoddi3+0x624>
 180885c:	1563c83a 	sub	r17,r2,r21
 1808860:	8809883a 	mov	r4,r17
 1808864:	b80b883a 	mov	r5,r23
 1808868:	180093c0 	call	180093c <__udivsi3>
 180886c:	100b883a 	mov	r5,r2
 1808870:	a009883a 	mov	r4,r20
 1808874:	1021883a 	mov	r16,r2
 1808878:	1809b7c0 	call	1809b7c <__mulsi3>
 180887c:	b80b883a 	mov	r5,r23
 1808880:	8809883a 	mov	r4,r17
 1808884:	1029883a 	mov	r20,r2
 1808888:	18009440 	call	1800944 <__umodsi3>
 180888c:	d9400217 	ldw	r5,8(sp)
 1808890:	1004943a 	slli	r2,r2,16
 1808894:	28ffffcc 	andi	r3,r5,65535
 1808898:	10c4b03a 	or	r2,r2,r3
 180889c:	1500032e 	bgeu	r2,r20,18088ac <__umoddi3+0x4bc>
 18088a0:	1585883a 	add	r2,r2,r22
 18088a4:	843fffc4 	addi	r16,r16,-1
 18088a8:	1580562e 	bgeu	r2,r22,1808a04 <__umoddi3+0x614>
 18088ac:	d9800017 	ldw	r6,0(sp)
 18088b0:	e022943a 	slli	r17,fp,16
 18088b4:	302ed43a 	srli	r23,r6,16
 18088b8:	8462b03a 	or	r17,r16,r17
 18088bc:	34ffffcc 	andi	r19,r6,65535
 18088c0:	882ad43a 	srli	r21,r17,16
 18088c4:	8c7fffcc 	andi	r17,r17,65535
 18088c8:	8809883a 	mov	r4,r17
 18088cc:	980b883a 	mov	r5,r19
 18088d0:	1521c83a 	sub	r16,r2,r20
 18088d4:	1809b7c0 	call	1809b7c <__mulsi3>
 18088d8:	8809883a 	mov	r4,r17
 18088dc:	b80b883a 	mov	r5,r23
 18088e0:	1029883a 	mov	r20,r2
 18088e4:	1809b7c0 	call	1809b7c <__mulsi3>
 18088e8:	980b883a 	mov	r5,r19
 18088ec:	a809883a 	mov	r4,r21
 18088f0:	1023883a 	mov	r17,r2
 18088f4:	1809b7c0 	call	1809b7c <__mulsi3>
 18088f8:	a809883a 	mov	r4,r21
 18088fc:	b80b883a 	mov	r5,r23
 1808900:	1027883a 	mov	r19,r2
 1808904:	1809b7c0 	call	1809b7c <__mulsi3>
 1808908:	100b883a 	mov	r5,r2
 180890c:	a004d43a 	srli	r2,r20,16
 1808910:	8ce3883a 	add	r17,r17,r19
 1808914:	1449883a 	add	r4,r2,r17
 1808918:	24c0022e 	bgeu	r4,r19,1808924 <__umoddi3+0x534>
 180891c:	00800074 	movhi	r2,1
 1808920:	288b883a 	add	r5,r5,r2
 1808924:	2004d43a 	srli	r2,r4,16
 1808928:	2008943a 	slli	r4,r4,16
 180892c:	a0ffffcc 	andi	r3,r20,65535
 1808930:	288d883a 	add	r6,r5,r2
 1808934:	20c9883a 	add	r4,r4,r3
 1808938:	81800b36 	bltu	r16,r6,1808968 <__umoddi3+0x578>
 180893c:	81804026 	beq	r16,r6,1808a40 <__umoddi3+0x650>
 1808940:	818dc83a 	sub	r6,r16,r6
 1808944:	00000f06 	br	1808984 <__umoddi3+0x594>
 1808948:	30c5c83a 	sub	r2,r6,r3
 180894c:	182d883a 	mov	r22,r3
 1808950:	8084d83a 	srl	r2,r16,r2
 1808954:	a8c6983a 	sll	r3,r21,r3
 1808958:	9da6983a 	sll	r19,r19,r22
 180895c:	85a0983a 	sll	r16,r16,r22
 1808960:	18aab03a 	or	r21,r3,r2
 1808964:	003f1d06 	br	18085dc <__umoddi3+0x1ec>
 1808968:	d8c00017 	ldw	r3,0(sp)
 180896c:	20c5c83a 	sub	r2,r4,r3
 1808970:	2089803a 	cmpltu	r4,r4,r2
 1808974:	3587c83a 	sub	r3,r6,r22
 1808978:	1907c83a 	sub	r3,r3,r4
 180897c:	80cdc83a 	sub	r6,r16,r3
 1808980:	1009883a 	mov	r4,r2
 1808984:	d9400117 	ldw	r5,4(sp)
 1808988:	2905c83a 	sub	r2,r5,r4
 180898c:	2887803a 	cmpltu	r3,r5,r2
 1808990:	30c7c83a 	sub	r3,r6,r3
 1808994:	d9800317 	ldw	r6,12(sp)
 1808998:	1484d83a 	srl	r2,r2,r18
 180899c:	1988983a 	sll	r4,r3,r6
 18089a0:	1c86d83a 	srl	r3,r3,r18
 18089a4:	2088b03a 	or	r4,r4,r2
 18089a8:	2011883a 	mov	r8,r4
 18089ac:	1813883a 	mov	r9,r3
 18089b0:	d9000415 	stw	r4,16(sp)
 18089b4:	d8c00515 	stw	r3,20(sp)
 18089b8:	003ed406 	br	180850c <__umoddi3+0x11c>
 18089bc:	01400604 	movi	r5,24
 18089c0:	2805883a 	mov	r2,r5
 18089c4:	003ea606 	br	1808460 <__umoddi3+0x70>
 18089c8:	01400204 	movi	r5,8
 18089cc:	2805883a 	mov	r2,r5
 18089d0:	003ea306 	br	1808460 <__umoddi3+0x70>
 18089d4:	01400204 	movi	r5,8
 18089d8:	2805883a 	mov	r2,r5
 18089dc:	003edf06 	br	180855c <__umoddi3+0x16c>
 18089e0:	01400204 	movi	r5,8
 18089e4:	2805883a 	mov	r2,r5
 18089e8:	003ef206 	br	18085b4 <__umoddi3+0x1c4>
 18089ec:	01400604 	movi	r5,24
 18089f0:	2805883a 	mov	r2,r5
 18089f4:	003eef06 	br	18085b4 <__umoddi3+0x1c4>
 18089f8:	01400604 	movi	r5,24
 18089fc:	2805883a 	mov	r2,r5
 1808a00:	003ed606 	br	180855c <__umoddi3+0x16c>
 1808a04:	153fa92e 	bgeu	r2,r20,18088ac <__umoddi3+0x4bc>
 1808a08:	843fffc4 	addi	r16,r16,-1
 1808a0c:	1585883a 	add	r2,r2,r22
 1808a10:	003fa606 	br	18088ac <__umoddi3+0x4bc>
 1808a14:	157f912e 	bgeu	r2,r21,180885c <__umoddi3+0x46c>
 1808a18:	e73fffc4 	addi	fp,fp,-1
 1808a1c:	1585883a 	add	r2,r2,r22
 1808a20:	003f8e06 	br	180885c <__umoddi3+0x46c>
 1808a24:	157f542e 	bgeu	r2,r21,1808778 <__umoddi3+0x388>
 1808a28:	14c5883a 	add	r2,r2,r19
 1808a2c:	003f5206 	br	1808778 <__umoddi3+0x388>
 1808a30:	14c5883a 	add	r2,r2,r19
 1808a34:	003efc06 	br	1808628 <__umoddi3+0x238>
 1808a38:	14c5883a 	add	r2,r2,r19
 1808a3c:	003ea606 	br	18084d8 <__umoddi3+0xe8>
 1808a40:	d8800117 	ldw	r2,4(sp)
 1808a44:	113fc836 	bltu	r2,r4,1808968 <__umoddi3+0x578>
 1808a48:	000d883a 	mov	r6,zero
 1808a4c:	003fcd06 	br	1808984 <__umoddi3+0x594>

01808a50 <_fpadd_parts>:
 1808a50:	defff804 	addi	sp,sp,-32
 1808a54:	dcc00315 	stw	r19,12(sp)
 1808a58:	2027883a 	mov	r19,r4
 1808a5c:	21000017 	ldw	r4,0(r4)
 1808a60:	00c00044 	movi	r3,1
 1808a64:	dd400515 	stw	r21,20(sp)
 1808a68:	dd000415 	stw	r20,16(sp)
 1808a6c:	ddc00715 	stw	r23,28(sp)
 1808a70:	dd800615 	stw	r22,24(sp)
 1808a74:	dc800215 	stw	r18,8(sp)
 1808a78:	dc400115 	stw	r17,4(sp)
 1808a7c:	dc000015 	stw	r16,0(sp)
 1808a80:	282b883a 	mov	r21,r5
 1808a84:	3029883a 	mov	r20,r6
 1808a88:	1900632e 	bgeu	r3,r4,1808c18 <_fpadd_parts+0x1c8>
 1808a8c:	28800017 	ldw	r2,0(r5)
 1808a90:	1880812e 	bgeu	r3,r2,1808c98 <_fpadd_parts+0x248>
 1808a94:	00c00104 	movi	r3,4
 1808a98:	20c0dc26 	beq	r4,r3,1808e0c <_fpadd_parts+0x3bc>
 1808a9c:	10c07e26 	beq	r2,r3,1808c98 <_fpadd_parts+0x248>
 1808aa0:	00c00084 	movi	r3,2
 1808aa4:	10c06726 	beq	r2,r3,1808c44 <_fpadd_parts+0x1f4>
 1808aa8:	20c07b26 	beq	r4,r3,1808c98 <_fpadd_parts+0x248>
 1808aac:	9dc00217 	ldw	r23,8(r19)
 1808ab0:	28c00217 	ldw	r3,8(r5)
 1808ab4:	9c400317 	ldw	r17,12(r19)
 1808ab8:	2bc00317 	ldw	r15,12(r5)
 1808abc:	b8cdc83a 	sub	r6,r23,r3
 1808ac0:	9c800417 	ldw	r18,16(r19)
 1808ac4:	2c000417 	ldw	r16,16(r5)
 1808ac8:	3009883a 	mov	r4,r6
 1808acc:	30009716 	blt	r6,zero,1808d2c <_fpadd_parts+0x2dc>
 1808ad0:	00800fc4 	movi	r2,63
 1808ad4:	11806b16 	blt	r2,r6,1808c84 <_fpadd_parts+0x234>
 1808ad8:	0100a40e 	bge	zero,r4,1808d6c <_fpadd_parts+0x31c>
 1808adc:	35bff804 	addi	r22,r6,-32
 1808ae0:	b000bc16 	blt	r22,zero,1808dd4 <_fpadd_parts+0x384>
 1808ae4:	8596d83a 	srl	r11,r16,r22
 1808ae8:	0019883a 	mov	r12,zero
 1808aec:	0013883a 	mov	r9,zero
 1808af0:	01000044 	movi	r4,1
 1808af4:	0015883a 	mov	r10,zero
 1808af8:	b000be16 	blt	r22,zero,1808df4 <_fpadd_parts+0x3a4>
 1808afc:	2590983a 	sll	r8,r4,r22
 1808b00:	000f883a 	mov	r7,zero
 1808b04:	00bfffc4 	movi	r2,-1
 1808b08:	3889883a 	add	r4,r7,r2
 1808b0c:	408b883a 	add	r5,r8,r2
 1808b10:	21cd803a 	cmpltu	r6,r4,r7
 1808b14:	314b883a 	add	r5,r6,r5
 1808b18:	7904703a 	and	r2,r15,r4
 1808b1c:	8146703a 	and	r3,r16,r5
 1808b20:	10c4b03a 	or	r2,r2,r3
 1808b24:	10000226 	beq	r2,zero,1808b30 <_fpadd_parts+0xe0>
 1808b28:	02400044 	movi	r9,1
 1808b2c:	0015883a 	mov	r10,zero
 1808b30:	5a5eb03a 	or	r15,r11,r9
 1808b34:	62a0b03a 	or	r16,r12,r10
 1808b38:	99400117 	ldw	r5,4(r19)
 1808b3c:	a8800117 	ldw	r2,4(r21)
 1808b40:	28806e26 	beq	r5,r2,1808cfc <_fpadd_parts+0x2ac>
 1808b44:	28006626 	beq	r5,zero,1808ce0 <_fpadd_parts+0x290>
 1808b48:	7c45c83a 	sub	r2,r15,r17
 1808b4c:	7889803a 	cmpltu	r4,r15,r2
 1808b50:	8487c83a 	sub	r3,r16,r18
 1808b54:	1909c83a 	sub	r4,r3,r4
 1808b58:	100d883a 	mov	r6,r2
 1808b5c:	200f883a 	mov	r7,r4
 1808b60:	38007716 	blt	r7,zero,1808d40 <_fpadd_parts+0x2f0>
 1808b64:	a5c00215 	stw	r23,8(r20)
 1808b68:	a1c00415 	stw	r7,16(r20)
 1808b6c:	a0000115 	stw	zero,4(r20)
 1808b70:	a1800315 	stw	r6,12(r20)
 1808b74:	a2000317 	ldw	r8,12(r20)
 1808b78:	a2400417 	ldw	r9,16(r20)
 1808b7c:	00bfffc4 	movi	r2,-1
 1808b80:	408b883a 	add	r5,r8,r2
 1808b84:	2a09803a 	cmpltu	r4,r5,r8
 1808b88:	488d883a 	add	r6,r9,r2
 1808b8c:	01c40034 	movhi	r7,4096
 1808b90:	39ffffc4 	addi	r7,r7,-1
 1808b94:	218d883a 	add	r6,r4,r6
 1808b98:	39801736 	bltu	r7,r6,1808bf8 <_fpadd_parts+0x1a8>
 1808b9c:	31c06526 	beq	r6,r7,1808d34 <_fpadd_parts+0x2e4>
 1808ba0:	a3000217 	ldw	r12,8(r20)
 1808ba4:	4209883a 	add	r4,r8,r8
 1808ba8:	00bfffc4 	movi	r2,-1
 1808bac:	220f803a 	cmpltu	r7,r4,r8
 1808bb0:	4a4b883a 	add	r5,r9,r9
 1808bb4:	394f883a 	add	r7,r7,r5
 1808bb8:	2095883a 	add	r10,r4,r2
 1808bbc:	3897883a 	add	r11,r7,r2
 1808bc0:	510d803a 	cmpltu	r6,r10,r4
 1808bc4:	6099883a 	add	r12,r12,r2
 1808bc8:	32d7883a 	add	r11,r6,r11
 1808bcc:	00840034 	movhi	r2,4096
 1808bd0:	10bfffc4 	addi	r2,r2,-1
 1808bd4:	2011883a 	mov	r8,r4
 1808bd8:	3813883a 	mov	r9,r7
 1808bdc:	a1000315 	stw	r4,12(r20)
 1808be0:	a1c00415 	stw	r7,16(r20)
 1808be4:	a3000215 	stw	r12,8(r20)
 1808be8:	12c00336 	bltu	r2,r11,1808bf8 <_fpadd_parts+0x1a8>
 1808bec:	58bfed1e 	bne	r11,r2,1808ba4 <_fpadd_parts+0x154>
 1808bf0:	00bfff84 	movi	r2,-2
 1808bf4:	12bfeb2e 	bgeu	r2,r10,1808ba4 <_fpadd_parts+0x154>
 1808bf8:	a2800417 	ldw	r10,16(r20)
 1808bfc:	008000c4 	movi	r2,3
 1808c00:	00c80034 	movhi	r3,8192
 1808c04:	18ffffc4 	addi	r3,r3,-1
 1808c08:	a2400317 	ldw	r9,12(r20)
 1808c0c:	a0800015 	stw	r2,0(r20)
 1808c10:	1a802336 	bltu	r3,r10,1808ca0 <_fpadd_parts+0x250>
 1808c14:	a027883a 	mov	r19,r20
 1808c18:	9805883a 	mov	r2,r19
 1808c1c:	ddc00717 	ldw	r23,28(sp)
 1808c20:	dd800617 	ldw	r22,24(sp)
 1808c24:	dd400517 	ldw	r21,20(sp)
 1808c28:	dd000417 	ldw	r20,16(sp)
 1808c2c:	dcc00317 	ldw	r19,12(sp)
 1808c30:	dc800217 	ldw	r18,8(sp)
 1808c34:	dc400117 	ldw	r17,4(sp)
 1808c38:	dc000017 	ldw	r16,0(sp)
 1808c3c:	dec00804 	addi	sp,sp,32
 1808c40:	f800283a 	ret
 1808c44:	20fff41e 	bne	r4,r3,1808c18 <_fpadd_parts+0x1c8>
 1808c48:	31000015 	stw	r4,0(r6)
 1808c4c:	98800117 	ldw	r2,4(r19)
 1808c50:	30800115 	stw	r2,4(r6)
 1808c54:	98c00217 	ldw	r3,8(r19)
 1808c58:	30c00215 	stw	r3,8(r6)
 1808c5c:	98800317 	ldw	r2,12(r19)
 1808c60:	30800315 	stw	r2,12(r6)
 1808c64:	98c00417 	ldw	r3,16(r19)
 1808c68:	30c00415 	stw	r3,16(r6)
 1808c6c:	98800117 	ldw	r2,4(r19)
 1808c70:	28c00117 	ldw	r3,4(r5)
 1808c74:	3027883a 	mov	r19,r6
 1808c78:	10c4703a 	and	r2,r2,r3
 1808c7c:	30800115 	stw	r2,4(r6)
 1808c80:	003fe506 	br	1808c18 <_fpadd_parts+0x1c8>
 1808c84:	1dc02616 	blt	r3,r23,1808d20 <_fpadd_parts+0x2d0>
 1808c88:	0023883a 	mov	r17,zero
 1808c8c:	182f883a 	mov	r23,r3
 1808c90:	0025883a 	mov	r18,zero
 1808c94:	003fa806 	br	1808b38 <_fpadd_parts+0xe8>
 1808c98:	a827883a 	mov	r19,r21
 1808c9c:	003fde06 	br	1808c18 <_fpadd_parts+0x1c8>
 1808ca0:	01800044 	movi	r6,1
 1808ca4:	500497fa 	slli	r2,r10,31
 1808ca8:	4808d07a 	srli	r4,r9,1
 1808cac:	518ad83a 	srl	r5,r10,r6
 1808cb0:	a2000217 	ldw	r8,8(r20)
 1808cb4:	1108b03a 	or	r4,r2,r4
 1808cb8:	0007883a 	mov	r3,zero
 1808cbc:	4984703a 	and	r2,r9,r6
 1808cc0:	208cb03a 	or	r6,r4,r2
 1808cc4:	28ceb03a 	or	r7,r5,r3
 1808cc8:	42000044 	addi	r8,r8,1
 1808ccc:	a027883a 	mov	r19,r20
 1808cd0:	a1c00415 	stw	r7,16(r20)
 1808cd4:	a2000215 	stw	r8,8(r20)
 1808cd8:	a1800315 	stw	r6,12(r20)
 1808cdc:	003fce06 	br	1808c18 <_fpadd_parts+0x1c8>
 1808ce0:	8bc5c83a 	sub	r2,r17,r15
 1808ce4:	8889803a 	cmpltu	r4,r17,r2
 1808ce8:	9407c83a 	sub	r3,r18,r16
 1808cec:	1909c83a 	sub	r4,r3,r4
 1808cf0:	100d883a 	mov	r6,r2
 1808cf4:	200f883a 	mov	r7,r4
 1808cf8:	003f9906 	br	1808b60 <_fpadd_parts+0x110>
 1808cfc:	7c45883a 	add	r2,r15,r17
 1808d00:	13c9803a 	cmpltu	r4,r2,r15
 1808d04:	8487883a 	add	r3,r16,r18
 1808d08:	20c9883a 	add	r4,r4,r3
 1808d0c:	a1400115 	stw	r5,4(r20)
 1808d10:	a5c00215 	stw	r23,8(r20)
 1808d14:	a0800315 	stw	r2,12(r20)
 1808d18:	a1000415 	stw	r4,16(r20)
 1808d1c:	003fb606 	br	1808bf8 <_fpadd_parts+0x1a8>
 1808d20:	001f883a 	mov	r15,zero
 1808d24:	0021883a 	mov	r16,zero
 1808d28:	003f8306 	br	1808b38 <_fpadd_parts+0xe8>
 1808d2c:	018dc83a 	sub	r6,zero,r6
 1808d30:	003f6706 	br	1808ad0 <_fpadd_parts+0x80>
 1808d34:	00bfff84 	movi	r2,-2
 1808d38:	117faf36 	bltu	r2,r5,1808bf8 <_fpadd_parts+0x1a8>
 1808d3c:	003f9806 	br	1808ba0 <_fpadd_parts+0x150>
 1808d40:	0005883a 	mov	r2,zero
 1808d44:	1189c83a 	sub	r4,r2,r6
 1808d48:	1105803a 	cmpltu	r2,r2,r4
 1808d4c:	01cbc83a 	sub	r5,zero,r7
 1808d50:	2885c83a 	sub	r2,r5,r2
 1808d54:	01800044 	movi	r6,1
 1808d58:	a1800115 	stw	r6,4(r20)
 1808d5c:	a5c00215 	stw	r23,8(r20)
 1808d60:	a1000315 	stw	r4,12(r20)
 1808d64:	a0800415 	stw	r2,16(r20)
 1808d68:	003f8206 	br	1808b74 <_fpadd_parts+0x124>
 1808d6c:	203f7226 	beq	r4,zero,1808b38 <_fpadd_parts+0xe8>
 1808d70:	35bff804 	addi	r22,r6,-32
 1808d74:	b9af883a 	add	r23,r23,r6
 1808d78:	b0003116 	blt	r22,zero,1808e40 <_fpadd_parts+0x3f0>
 1808d7c:	959ad83a 	srl	r13,r18,r22
 1808d80:	001d883a 	mov	r14,zero
 1808d84:	000f883a 	mov	r7,zero
 1808d88:	01000044 	movi	r4,1
 1808d8c:	0011883a 	mov	r8,zero
 1808d90:	b0002516 	blt	r22,zero,1808e28 <_fpadd_parts+0x3d8>
 1808d94:	2594983a 	sll	r10,r4,r22
 1808d98:	0013883a 	mov	r9,zero
 1808d9c:	00bfffc4 	movi	r2,-1
 1808da0:	4889883a 	add	r4,r9,r2
 1808da4:	508b883a 	add	r5,r10,r2
 1808da8:	224d803a 	cmpltu	r6,r4,r9
 1808dac:	314b883a 	add	r5,r6,r5
 1808db0:	8904703a 	and	r2,r17,r4
 1808db4:	9146703a 	and	r3,r18,r5
 1808db8:	10c4b03a 	or	r2,r2,r3
 1808dbc:	10000226 	beq	r2,zero,1808dc8 <_fpadd_parts+0x378>
 1808dc0:	01c00044 	movi	r7,1
 1808dc4:	0011883a 	mov	r8,zero
 1808dc8:	69e2b03a 	or	r17,r13,r7
 1808dcc:	7224b03a 	or	r18,r14,r8
 1808dd0:	003f5906 	br	1808b38 <_fpadd_parts+0xe8>
 1808dd4:	8407883a 	add	r3,r16,r16
 1808dd8:	008007c4 	movi	r2,31
 1808ddc:	1185c83a 	sub	r2,r2,r6
 1808de0:	1886983a 	sll	r3,r3,r2
 1808de4:	7996d83a 	srl	r11,r15,r6
 1808de8:	8198d83a 	srl	r12,r16,r6
 1808dec:	1ad6b03a 	or	r11,r3,r11
 1808df0:	003f3e06 	br	1808aec <_fpadd_parts+0x9c>
 1808df4:	2006d07a 	srli	r3,r4,1
 1808df8:	008007c4 	movi	r2,31
 1808dfc:	1185c83a 	sub	r2,r2,r6
 1808e00:	1890d83a 	srl	r8,r3,r2
 1808e04:	218e983a 	sll	r7,r4,r6
 1808e08:	003f3e06 	br	1808b04 <_fpadd_parts+0xb4>
 1808e0c:	113f821e 	bne	r2,r4,1808c18 <_fpadd_parts+0x1c8>
 1808e10:	28c00117 	ldw	r3,4(r5)
 1808e14:	98800117 	ldw	r2,4(r19)
 1808e18:	10ff7f26 	beq	r2,r3,1808c18 <_fpadd_parts+0x1c8>
 1808e1c:	04c06074 	movhi	r19,385
 1808e20:	9cf6fc04 	addi	r19,r19,-9232
 1808e24:	003f7c06 	br	1808c18 <_fpadd_parts+0x1c8>
 1808e28:	2006d07a 	srli	r3,r4,1
 1808e2c:	008007c4 	movi	r2,31
 1808e30:	1185c83a 	sub	r2,r2,r6
 1808e34:	1894d83a 	srl	r10,r3,r2
 1808e38:	2192983a 	sll	r9,r4,r6
 1808e3c:	003fd706 	br	1808d9c <_fpadd_parts+0x34c>
 1808e40:	9487883a 	add	r3,r18,r18
 1808e44:	008007c4 	movi	r2,31
 1808e48:	1185c83a 	sub	r2,r2,r6
 1808e4c:	1886983a 	sll	r3,r3,r2
 1808e50:	899ad83a 	srl	r13,r17,r6
 1808e54:	919cd83a 	srl	r14,r18,r6
 1808e58:	1b5ab03a 	or	r13,r3,r13
 1808e5c:	003fc906 	br	1808d84 <_fpadd_parts+0x334>

01808e60 <__subdf3>:
 1808e60:	deffea04 	addi	sp,sp,-88
 1808e64:	dcc01415 	stw	r19,80(sp)
 1808e68:	dcc00404 	addi	r19,sp,16
 1808e6c:	2011883a 	mov	r8,r4
 1808e70:	2813883a 	mov	r9,r5
 1808e74:	dc401315 	stw	r17,76(sp)
 1808e78:	d809883a 	mov	r4,sp
 1808e7c:	980b883a 	mov	r5,r19
 1808e80:	dc400904 	addi	r17,sp,36
 1808e84:	dfc01515 	stw	ra,84(sp)
 1808e88:	da400115 	stw	r9,4(sp)
 1808e8c:	d9c00315 	stw	r7,12(sp)
 1808e90:	da000015 	stw	r8,0(sp)
 1808e94:	d9800215 	stw	r6,8(sp)
 1808e98:	180a06c0 	call	180a06c <__unpack_d>
 1808e9c:	d9000204 	addi	r4,sp,8
 1808ea0:	880b883a 	mov	r5,r17
 1808ea4:	180a06c0 	call	180a06c <__unpack_d>
 1808ea8:	d8800a17 	ldw	r2,40(sp)
 1808eac:	880b883a 	mov	r5,r17
 1808eb0:	9809883a 	mov	r4,r19
 1808eb4:	d9800e04 	addi	r6,sp,56
 1808eb8:	1080005c 	xori	r2,r2,1
 1808ebc:	d8800a15 	stw	r2,40(sp)
 1808ec0:	1808a500 	call	1808a50 <_fpadd_parts>
 1808ec4:	1009883a 	mov	r4,r2
 1808ec8:	1809d580 	call	1809d58 <__pack_d>
 1808ecc:	dfc01517 	ldw	ra,84(sp)
 1808ed0:	dcc01417 	ldw	r19,80(sp)
 1808ed4:	dc401317 	ldw	r17,76(sp)
 1808ed8:	dec01604 	addi	sp,sp,88
 1808edc:	f800283a 	ret

01808ee0 <__adddf3>:
 1808ee0:	deffea04 	addi	sp,sp,-88
 1808ee4:	dcc01415 	stw	r19,80(sp)
 1808ee8:	dcc00404 	addi	r19,sp,16
 1808eec:	2011883a 	mov	r8,r4
 1808ef0:	2813883a 	mov	r9,r5
 1808ef4:	dc401315 	stw	r17,76(sp)
 1808ef8:	d809883a 	mov	r4,sp
 1808efc:	980b883a 	mov	r5,r19
 1808f00:	dc400904 	addi	r17,sp,36
 1808f04:	dfc01515 	stw	ra,84(sp)
 1808f08:	da400115 	stw	r9,4(sp)
 1808f0c:	d9c00315 	stw	r7,12(sp)
 1808f10:	da000015 	stw	r8,0(sp)
 1808f14:	d9800215 	stw	r6,8(sp)
 1808f18:	180a06c0 	call	180a06c <__unpack_d>
 1808f1c:	d9000204 	addi	r4,sp,8
 1808f20:	880b883a 	mov	r5,r17
 1808f24:	180a06c0 	call	180a06c <__unpack_d>
 1808f28:	d9800e04 	addi	r6,sp,56
 1808f2c:	9809883a 	mov	r4,r19
 1808f30:	880b883a 	mov	r5,r17
 1808f34:	1808a500 	call	1808a50 <_fpadd_parts>
 1808f38:	1009883a 	mov	r4,r2
 1808f3c:	1809d580 	call	1809d58 <__pack_d>
 1808f40:	dfc01517 	ldw	ra,84(sp)
 1808f44:	dcc01417 	ldw	r19,80(sp)
 1808f48:	dc401317 	ldw	r17,76(sp)
 1808f4c:	dec01604 	addi	sp,sp,88
 1808f50:	f800283a 	ret

01808f54 <__muldf3>:
 1808f54:	deffe004 	addi	sp,sp,-128
 1808f58:	dc401815 	stw	r17,96(sp)
 1808f5c:	dc400404 	addi	r17,sp,16
 1808f60:	2011883a 	mov	r8,r4
 1808f64:	2813883a 	mov	r9,r5
 1808f68:	dc001715 	stw	r16,92(sp)
 1808f6c:	d809883a 	mov	r4,sp
 1808f70:	880b883a 	mov	r5,r17
 1808f74:	dc000904 	addi	r16,sp,36
 1808f78:	dfc01f15 	stw	ra,124(sp)
 1808f7c:	da400115 	stw	r9,4(sp)
 1808f80:	d9c00315 	stw	r7,12(sp)
 1808f84:	da000015 	stw	r8,0(sp)
 1808f88:	d9800215 	stw	r6,8(sp)
 1808f8c:	ddc01e15 	stw	r23,120(sp)
 1808f90:	dd801d15 	stw	r22,116(sp)
 1808f94:	dd401c15 	stw	r21,112(sp)
 1808f98:	dd001b15 	stw	r20,108(sp)
 1808f9c:	dcc01a15 	stw	r19,104(sp)
 1808fa0:	dc801915 	stw	r18,100(sp)
 1808fa4:	180a06c0 	call	180a06c <__unpack_d>
 1808fa8:	d9000204 	addi	r4,sp,8
 1808fac:	800b883a 	mov	r5,r16
 1808fb0:	180a06c0 	call	180a06c <__unpack_d>
 1808fb4:	d9000417 	ldw	r4,16(sp)
 1808fb8:	00800044 	movi	r2,1
 1808fbc:	1100102e 	bgeu	r2,r4,1809000 <__muldf3+0xac>
 1808fc0:	d8c00917 	ldw	r3,36(sp)
 1808fc4:	10c0062e 	bgeu	r2,r3,1808fe0 <__muldf3+0x8c>
 1808fc8:	00800104 	movi	r2,4
 1808fcc:	20800a26 	beq	r4,r2,1808ff8 <__muldf3+0xa4>
 1808fd0:	1880cc26 	beq	r3,r2,1809304 <__muldf3+0x3b0>
 1808fd4:	00800084 	movi	r2,2
 1808fd8:	20800926 	beq	r4,r2,1809000 <__muldf3+0xac>
 1808fdc:	1880191e 	bne	r3,r2,1809044 <__muldf3+0xf0>
 1808fe0:	d8c00a17 	ldw	r3,40(sp)
 1808fe4:	d8800517 	ldw	r2,20(sp)
 1808fe8:	8009883a 	mov	r4,r16
 1808fec:	10c4c03a 	cmpne	r2,r2,r3
 1808ff0:	d8800a15 	stw	r2,40(sp)
 1808ff4:	00000706 	br	1809014 <__muldf3+0xc0>
 1808ff8:	00800084 	movi	r2,2
 1808ffc:	1880c326 	beq	r3,r2,180930c <__muldf3+0x3b8>
 1809000:	d8800517 	ldw	r2,20(sp)
 1809004:	d8c00a17 	ldw	r3,40(sp)
 1809008:	8809883a 	mov	r4,r17
 180900c:	10c4c03a 	cmpne	r2,r2,r3
 1809010:	d8800515 	stw	r2,20(sp)
 1809014:	1809d580 	call	1809d58 <__pack_d>
 1809018:	dfc01f17 	ldw	ra,124(sp)
 180901c:	ddc01e17 	ldw	r23,120(sp)
 1809020:	dd801d17 	ldw	r22,116(sp)
 1809024:	dd401c17 	ldw	r21,112(sp)
 1809028:	dd001b17 	ldw	r20,108(sp)
 180902c:	dcc01a17 	ldw	r19,104(sp)
 1809030:	dc801917 	ldw	r18,100(sp)
 1809034:	dc401817 	ldw	r17,96(sp)
 1809038:	dc001717 	ldw	r16,92(sp)
 180903c:	dec02004 	addi	sp,sp,128
 1809040:	f800283a 	ret
 1809044:	dd800717 	ldw	r22,28(sp)
 1809048:	dc800c17 	ldw	r18,48(sp)
 180904c:	002b883a 	mov	r21,zero
 1809050:	0023883a 	mov	r17,zero
 1809054:	a80b883a 	mov	r5,r21
 1809058:	b00d883a 	mov	r6,r22
 180905c:	880f883a 	mov	r7,r17
 1809060:	ddc00817 	ldw	r23,32(sp)
 1809064:	dcc00d17 	ldw	r19,52(sp)
 1809068:	9009883a 	mov	r4,r18
 180906c:	1809bb40 	call	1809bb4 <__muldi3>
 1809070:	001b883a 	mov	r13,zero
 1809074:	680f883a 	mov	r7,r13
 1809078:	b009883a 	mov	r4,r22
 180907c:	000b883a 	mov	r5,zero
 1809080:	980d883a 	mov	r6,r19
 1809084:	b82d883a 	mov	r22,r23
 1809088:	002f883a 	mov	r23,zero
 180908c:	db401615 	stw	r13,88(sp)
 1809090:	d8801315 	stw	r2,76(sp)
 1809094:	d8c01415 	stw	r3,80(sp)
 1809098:	dcc01515 	stw	r19,84(sp)
 180909c:	1809bb40 	call	1809bb4 <__muldi3>
 18090a0:	b00d883a 	mov	r6,r22
 18090a4:	000b883a 	mov	r5,zero
 18090a8:	9009883a 	mov	r4,r18
 18090ac:	b80f883a 	mov	r7,r23
 18090b0:	1021883a 	mov	r16,r2
 18090b4:	1823883a 	mov	r17,r3
 18090b8:	1809bb40 	call	1809bb4 <__muldi3>
 18090bc:	8085883a 	add	r2,r16,r2
 18090c0:	140d803a 	cmpltu	r6,r2,r16
 18090c4:	88c7883a 	add	r3,r17,r3
 18090c8:	30cd883a 	add	r6,r6,r3
 18090cc:	1029883a 	mov	r20,r2
 18090d0:	302b883a 	mov	r21,r6
 18090d4:	da801317 	ldw	r10,76(sp)
 18090d8:	dac01417 	ldw	r11,80(sp)
 18090dc:	db001517 	ldw	r12,84(sp)
 18090e0:	db401617 	ldw	r13,88(sp)
 18090e4:	3440612e 	bgeu	r6,r17,180926c <__muldf3+0x318>
 18090e8:	0009883a 	mov	r4,zero
 18090ec:	5105883a 	add	r2,r10,r4
 18090f0:	128d803a 	cmpltu	r6,r2,r10
 18090f4:	5d07883a 	add	r3,r11,r20
 18090f8:	30cd883a 	add	r6,r6,r3
 18090fc:	0021883a 	mov	r16,zero
 1809100:	04400044 	movi	r17,1
 1809104:	1025883a 	mov	r18,r2
 1809108:	3027883a 	mov	r19,r6
 180910c:	32c06236 	bltu	r6,r11,1809298 <__muldf3+0x344>
 1809110:	59807a26 	beq	r11,r6,18092fc <__muldf3+0x3a8>
 1809114:	680b883a 	mov	r5,r13
 1809118:	b80f883a 	mov	r7,r23
 180911c:	6009883a 	mov	r4,r12
 1809120:	b00d883a 	mov	r6,r22
 1809124:	1809bb40 	call	1809bb4 <__muldi3>
 1809128:	1009883a 	mov	r4,r2
 180912c:	000f883a 	mov	r7,zero
 1809130:	1545883a 	add	r2,r2,r21
 1809134:	1111803a 	cmpltu	r8,r2,r4
 1809138:	19c7883a 	add	r3,r3,r7
 180913c:	40c7883a 	add	r3,r8,r3
 1809140:	88cb883a 	add	r5,r17,r3
 1809144:	d8c00617 	ldw	r3,24(sp)
 1809148:	8089883a 	add	r4,r16,r2
 180914c:	d8800b17 	ldw	r2,44(sp)
 1809150:	18c00104 	addi	r3,r3,4
 1809154:	240d803a 	cmpltu	r6,r4,r16
 1809158:	10c7883a 	add	r3,r2,r3
 180915c:	2013883a 	mov	r9,r4
 1809160:	d8800a17 	ldw	r2,40(sp)
 1809164:	d9000517 	ldw	r4,20(sp)
 1809168:	314d883a 	add	r6,r6,r5
 180916c:	3015883a 	mov	r10,r6
 1809170:	2088c03a 	cmpne	r4,r4,r2
 1809174:	00880034 	movhi	r2,8192
 1809178:	10bfffc4 	addi	r2,r2,-1
 180917c:	d9000f15 	stw	r4,60(sp)
 1809180:	d8c01015 	stw	r3,64(sp)
 1809184:	1180162e 	bgeu	r2,r6,18091e0 <__muldf3+0x28c>
 1809188:	1811883a 	mov	r8,r3
 180918c:	101f883a 	mov	r15,r2
 1809190:	980497fa 	slli	r2,r19,31
 1809194:	9016d07a 	srli	r11,r18,1
 1809198:	500697fa 	slli	r3,r10,31
 180919c:	480cd07a 	srli	r6,r9,1
 18091a0:	500ed07a 	srli	r7,r10,1
 18091a4:	12d6b03a 	or	r11,r2,r11
 18091a8:	00800044 	movi	r2,1
 18091ac:	198cb03a 	or	r6,r3,r6
 18091b0:	4888703a 	and	r4,r9,r2
 18091b4:	9818d07a 	srli	r12,r19,1
 18091b8:	001b883a 	mov	r13,zero
 18091bc:	03a00034 	movhi	r14,32768
 18091c0:	3013883a 	mov	r9,r6
 18091c4:	3815883a 	mov	r10,r7
 18091c8:	4091883a 	add	r8,r8,r2
 18091cc:	20000226 	beq	r4,zero,18091d8 <__muldf3+0x284>
 18091d0:	5b64b03a 	or	r18,r11,r13
 18091d4:	63a6b03a 	or	r19,r12,r14
 18091d8:	7abfed36 	bltu	r15,r10,1809190 <__muldf3+0x23c>
 18091dc:	da001015 	stw	r8,64(sp)
 18091e0:	00840034 	movhi	r2,4096
 18091e4:	10bfffc4 	addi	r2,r2,-1
 18091e8:	12801436 	bltu	r2,r10,180923c <__muldf3+0x2e8>
 18091ec:	da001017 	ldw	r8,64(sp)
 18091f0:	101f883a 	mov	r15,r2
 18091f4:	4a45883a 	add	r2,r9,r9
 18091f8:	124d803a 	cmpltu	r6,r2,r9
 18091fc:	5287883a 	add	r3,r10,r10
 1809200:	9497883a 	add	r11,r18,r18
 1809204:	5c8f803a 	cmpltu	r7,r11,r18
 1809208:	9cd9883a 	add	r12,r19,r19
 180920c:	01000044 	movi	r4,1
 1809210:	30cd883a 	add	r6,r6,r3
 1809214:	3b0f883a 	add	r7,r7,r12
 1809218:	423fffc4 	addi	r8,r8,-1
 180921c:	1013883a 	mov	r9,r2
 1809220:	3015883a 	mov	r10,r6
 1809224:	111ab03a 	or	r13,r2,r4
 1809228:	98003016 	blt	r19,zero,18092ec <__muldf3+0x398>
 180922c:	5825883a 	mov	r18,r11
 1809230:	3827883a 	mov	r19,r7
 1809234:	7abfef2e 	bgeu	r15,r10,18091f4 <__muldf3+0x2a0>
 1809238:	da001015 	stw	r8,64(sp)
 180923c:	00803fc4 	movi	r2,255
 1809240:	488e703a 	and	r7,r9,r2
 1809244:	00802004 	movi	r2,128
 1809248:	0007883a 	mov	r3,zero
 180924c:	0011883a 	mov	r8,zero
 1809250:	38801826 	beq	r7,r2,18092b4 <__muldf3+0x360>
 1809254:	008000c4 	movi	r2,3
 1809258:	d9000e04 	addi	r4,sp,56
 180925c:	da801215 	stw	r10,72(sp)
 1809260:	d8800e15 	stw	r2,56(sp)
 1809264:	da401115 	stw	r9,68(sp)
 1809268:	003f6a06 	br	1809014 <__muldf3+0xc0>
 180926c:	89802126 	beq	r17,r6,18092f4 <__muldf3+0x3a0>
 1809270:	0009883a 	mov	r4,zero
 1809274:	5105883a 	add	r2,r10,r4
 1809278:	128d803a 	cmpltu	r6,r2,r10
 180927c:	5d07883a 	add	r3,r11,r20
 1809280:	30cd883a 	add	r6,r6,r3
 1809284:	0021883a 	mov	r16,zero
 1809288:	0023883a 	mov	r17,zero
 180928c:	1025883a 	mov	r18,r2
 1809290:	3027883a 	mov	r19,r6
 1809294:	32ff9e2e 	bgeu	r6,r11,1809110 <__muldf3+0x1bc>
 1809298:	00800044 	movi	r2,1
 180929c:	8089883a 	add	r4,r16,r2
 18092a0:	240d803a 	cmpltu	r6,r4,r16
 18092a4:	344d883a 	add	r6,r6,r17
 18092a8:	2021883a 	mov	r16,r4
 18092ac:	3023883a 	mov	r17,r6
 18092b0:	003f9806 	br	1809114 <__muldf3+0x1c0>
 18092b4:	403fe71e 	bne	r8,zero,1809254 <__muldf3+0x300>
 18092b8:	01004004 	movi	r4,256
 18092bc:	4904703a 	and	r2,r9,r4
 18092c0:	10c4b03a 	or	r2,r2,r3
 18092c4:	103fe31e 	bne	r2,zero,1809254 <__muldf3+0x300>
 18092c8:	94c4b03a 	or	r2,r18,r19
 18092cc:	103fe126 	beq	r2,zero,1809254 <__muldf3+0x300>
 18092d0:	49c5883a 	add	r2,r9,r7
 18092d4:	1251803a 	cmpltu	r8,r2,r9
 18092d8:	4291883a 	add	r8,r8,r10
 18092dc:	013fc004 	movi	r4,-256
 18092e0:	1112703a 	and	r9,r2,r4
 18092e4:	4015883a 	mov	r10,r8
 18092e8:	003fda06 	br	1809254 <__muldf3+0x300>
 18092ec:	6813883a 	mov	r9,r13
 18092f0:	003fce06 	br	180922c <__muldf3+0x2d8>
 18092f4:	143f7c36 	bltu	r2,r16,18090e8 <__muldf3+0x194>
 18092f8:	003fdd06 	br	1809270 <__muldf3+0x31c>
 18092fc:	12bf852e 	bgeu	r2,r10,1809114 <__muldf3+0x1c0>
 1809300:	003fe506 	br	1809298 <__muldf3+0x344>
 1809304:	00800084 	movi	r2,2
 1809308:	20bf351e 	bne	r4,r2,1808fe0 <__muldf3+0x8c>
 180930c:	01006074 	movhi	r4,385
 1809310:	2136fc04 	addi	r4,r4,-9232
 1809314:	003f3f06 	br	1809014 <__muldf3+0xc0>

01809318 <__divdf3>:
 1809318:	deffed04 	addi	sp,sp,-76
 180931c:	dcc01115 	stw	r19,68(sp)
 1809320:	dcc00404 	addi	r19,sp,16
 1809324:	2011883a 	mov	r8,r4
 1809328:	2813883a 	mov	r9,r5
 180932c:	dc000e15 	stw	r16,56(sp)
 1809330:	d809883a 	mov	r4,sp
 1809334:	980b883a 	mov	r5,r19
 1809338:	dc000904 	addi	r16,sp,36
 180933c:	dfc01215 	stw	ra,72(sp)
 1809340:	da400115 	stw	r9,4(sp)
 1809344:	d9c00315 	stw	r7,12(sp)
 1809348:	da000015 	stw	r8,0(sp)
 180934c:	d9800215 	stw	r6,8(sp)
 1809350:	dc801015 	stw	r18,64(sp)
 1809354:	dc400f15 	stw	r17,60(sp)
 1809358:	180a06c0 	call	180a06c <__unpack_d>
 180935c:	d9000204 	addi	r4,sp,8
 1809360:	800b883a 	mov	r5,r16
 1809364:	180a06c0 	call	180a06c <__unpack_d>
 1809368:	d9000417 	ldw	r4,16(sp)
 180936c:	00800044 	movi	r2,1
 1809370:	11000b2e 	bgeu	r2,r4,18093a0 <__divdf3+0x88>
 1809374:	d9400917 	ldw	r5,36(sp)
 1809378:	1140762e 	bgeu	r2,r5,1809554 <__divdf3+0x23c>
 180937c:	d8800517 	ldw	r2,20(sp)
 1809380:	d8c00a17 	ldw	r3,40(sp)
 1809384:	01800104 	movi	r6,4
 1809388:	10c4f03a 	xor	r2,r2,r3
 180938c:	d8800515 	stw	r2,20(sp)
 1809390:	21800226 	beq	r4,r6,180939c <__divdf3+0x84>
 1809394:	00800084 	movi	r2,2
 1809398:	2080141e 	bne	r4,r2,18093ec <__divdf3+0xd4>
 180939c:	29000926 	beq	r5,r4,18093c4 <__divdf3+0xac>
 18093a0:	9809883a 	mov	r4,r19
 18093a4:	1809d580 	call	1809d58 <__pack_d>
 18093a8:	dfc01217 	ldw	ra,72(sp)
 18093ac:	dcc01117 	ldw	r19,68(sp)
 18093b0:	dc801017 	ldw	r18,64(sp)
 18093b4:	dc400f17 	ldw	r17,60(sp)
 18093b8:	dc000e17 	ldw	r16,56(sp)
 18093bc:	dec01304 	addi	sp,sp,76
 18093c0:	f800283a 	ret
 18093c4:	01006074 	movhi	r4,385
 18093c8:	2136fc04 	addi	r4,r4,-9232
 18093cc:	1809d580 	call	1809d58 <__pack_d>
 18093d0:	dfc01217 	ldw	ra,72(sp)
 18093d4:	dcc01117 	ldw	r19,68(sp)
 18093d8:	dc801017 	ldw	r18,64(sp)
 18093dc:	dc400f17 	ldw	r17,60(sp)
 18093e0:	dc000e17 	ldw	r16,56(sp)
 18093e4:	dec01304 	addi	sp,sp,76
 18093e8:	f800283a 	ret
 18093ec:	29805b26 	beq	r5,r6,180955c <__divdf3+0x244>
 18093f0:	28802d26 	beq	r5,r2,18094a8 <__divdf3+0x190>
 18093f4:	d8c00617 	ldw	r3,24(sp)
 18093f8:	d8800b17 	ldw	r2,44(sp)
 18093fc:	d9c00817 	ldw	r7,32(sp)
 1809400:	dc400d17 	ldw	r17,52(sp)
 1809404:	188bc83a 	sub	r5,r3,r2
 1809408:	d9800717 	ldw	r6,28(sp)
 180940c:	dc000c17 	ldw	r16,48(sp)
 1809410:	d9400615 	stw	r5,24(sp)
 1809414:	3c403836 	bltu	r7,r17,18094f8 <__divdf3+0x1e0>
 1809418:	89c03626 	beq	r17,r7,18094f4 <__divdf3+0x1dc>
 180941c:	0015883a 	mov	r10,zero
 1809420:	001d883a 	mov	r14,zero
 1809424:	02c40034 	movhi	r11,4096
 1809428:	001f883a 	mov	r15,zero
 180942c:	003f883a 	mov	ra,zero
 1809430:	04800f44 	movi	r18,61
 1809434:	00000f06 	br	1809474 <__divdf3+0x15c>
 1809438:	601d883a 	mov	r14,r12
 180943c:	681f883a 	mov	r15,r13
 1809440:	400d883a 	mov	r6,r8
 1809444:	100f883a 	mov	r7,r2
 1809448:	3191883a 	add	r8,r6,r6
 180944c:	5808d07a 	srli	r4,r11,1
 1809450:	4185803a 	cmpltu	r2,r8,r6
 1809454:	39d3883a 	add	r9,r7,r7
 1809458:	28c6b03a 	or	r3,r5,r3
 180945c:	1245883a 	add	r2,r2,r9
 1809460:	1815883a 	mov	r10,r3
 1809464:	2017883a 	mov	r11,r4
 1809468:	400d883a 	mov	r6,r8
 180946c:	100f883a 	mov	r7,r2
 1809470:	fc801726 	beq	ra,r18,18094d0 <__divdf3+0x1b8>
 1809474:	580a97fa 	slli	r5,r11,31
 1809478:	5006d07a 	srli	r3,r10,1
 180947c:	ffc00044 	addi	ra,ra,1
 1809480:	3c7ff136 	bltu	r7,r17,1809448 <__divdf3+0x130>
 1809484:	3411c83a 	sub	r8,r6,r16
 1809488:	3205803a 	cmpltu	r2,r6,r8
 180948c:	3c53c83a 	sub	r9,r7,r17
 1809490:	7298b03a 	or	r12,r14,r10
 1809494:	7adab03a 	or	r13,r15,r11
 1809498:	4885c83a 	sub	r2,r9,r2
 180949c:	89ffe61e 	bne	r17,r7,1809438 <__divdf3+0x120>
 18094a0:	343fe936 	bltu	r6,r16,1809448 <__divdf3+0x130>
 18094a4:	003fe406 	br	1809438 <__divdf3+0x120>
 18094a8:	9809883a 	mov	r4,r19
 18094ac:	d9800415 	stw	r6,16(sp)
 18094b0:	1809d580 	call	1809d58 <__pack_d>
 18094b4:	dfc01217 	ldw	ra,72(sp)
 18094b8:	dcc01117 	ldw	r19,68(sp)
 18094bc:	dc801017 	ldw	r18,64(sp)
 18094c0:	dc400f17 	ldw	r17,60(sp)
 18094c4:	dc000e17 	ldw	r16,56(sp)
 18094c8:	dec01304 	addi	sp,sp,76
 18094cc:	f800283a 	ret
 18094d0:	00803fc4 	movi	r2,255
 18094d4:	7090703a 	and	r8,r14,r2
 18094d8:	00802004 	movi	r2,128
 18094dc:	0007883a 	mov	r3,zero
 18094e0:	0013883a 	mov	r9,zero
 18094e4:	40800d26 	beq	r8,r2,180951c <__divdf3+0x204>
 18094e8:	dbc00815 	stw	r15,32(sp)
 18094ec:	db800715 	stw	r14,28(sp)
 18094f0:	003fab06 	br	18093a0 <__divdf3+0x88>
 18094f4:	343fc92e 	bgeu	r6,r16,180941c <__divdf3+0x104>
 18094f8:	3185883a 	add	r2,r6,r6
 18094fc:	1189803a 	cmpltu	r4,r2,r6
 1809500:	39c7883a 	add	r3,r7,r7
 1809504:	20c9883a 	add	r4,r4,r3
 1809508:	297fffc4 	addi	r5,r5,-1
 180950c:	100d883a 	mov	r6,r2
 1809510:	200f883a 	mov	r7,r4
 1809514:	d9400615 	stw	r5,24(sp)
 1809518:	003fc006 	br	180941c <__divdf3+0x104>
 180951c:	483ff21e 	bne	r9,zero,18094e8 <__divdf3+0x1d0>
 1809520:	01004004 	movi	r4,256
 1809524:	7104703a 	and	r2,r14,r4
 1809528:	10c4b03a 	or	r2,r2,r3
 180952c:	103fee1e 	bne	r2,zero,18094e8 <__divdf3+0x1d0>
 1809530:	31c4b03a 	or	r2,r6,r7
 1809534:	103fec26 	beq	r2,zero,18094e8 <__divdf3+0x1d0>
 1809538:	7205883a 	add	r2,r14,r8
 180953c:	1391803a 	cmpltu	r8,r2,r14
 1809540:	43d1883a 	add	r8,r8,r15
 1809544:	013fc004 	movi	r4,-256
 1809548:	111c703a 	and	r14,r2,r4
 180954c:	401f883a 	mov	r15,r8
 1809550:	003fe506 	br	18094e8 <__divdf3+0x1d0>
 1809554:	8009883a 	mov	r4,r16
 1809558:	003f9206 	br	18093a4 <__divdf3+0x8c>
 180955c:	9809883a 	mov	r4,r19
 1809560:	d8000715 	stw	zero,28(sp)
 1809564:	d8000815 	stw	zero,32(sp)
 1809568:	d8000615 	stw	zero,24(sp)
 180956c:	003f8d06 	br	18093a4 <__divdf3+0x8c>

01809570 <__eqdf2>:
 1809570:	deffef04 	addi	sp,sp,-68
 1809574:	dc400f15 	stw	r17,60(sp)
 1809578:	dc400404 	addi	r17,sp,16
 180957c:	2005883a 	mov	r2,r4
 1809580:	2807883a 	mov	r3,r5
 1809584:	dc000e15 	stw	r16,56(sp)
 1809588:	d809883a 	mov	r4,sp
 180958c:	880b883a 	mov	r5,r17
 1809590:	dc000904 	addi	r16,sp,36
 1809594:	d8c00115 	stw	r3,4(sp)
 1809598:	d8800015 	stw	r2,0(sp)
 180959c:	d9800215 	stw	r6,8(sp)
 18095a0:	dfc01015 	stw	ra,64(sp)
 18095a4:	d9c00315 	stw	r7,12(sp)
 18095a8:	180a06c0 	call	180a06c <__unpack_d>
 18095ac:	d9000204 	addi	r4,sp,8
 18095b0:	800b883a 	mov	r5,r16
 18095b4:	180a06c0 	call	180a06c <__unpack_d>
 18095b8:	d8800417 	ldw	r2,16(sp)
 18095bc:	00c00044 	movi	r3,1
 18095c0:	180d883a 	mov	r6,r3
 18095c4:	1880062e 	bgeu	r3,r2,18095e0 <__eqdf2+0x70>
 18095c8:	d8800917 	ldw	r2,36(sp)
 18095cc:	8809883a 	mov	r4,r17
 18095d0:	800b883a 	mov	r5,r16
 18095d4:	1880022e 	bgeu	r3,r2,18095e0 <__eqdf2+0x70>
 18095d8:	180a1a40 	call	180a1a4 <__fpcmp_parts_d>
 18095dc:	100d883a 	mov	r6,r2
 18095e0:	3005883a 	mov	r2,r6
 18095e4:	dfc01017 	ldw	ra,64(sp)
 18095e8:	dc400f17 	ldw	r17,60(sp)
 18095ec:	dc000e17 	ldw	r16,56(sp)
 18095f0:	dec01104 	addi	sp,sp,68
 18095f4:	f800283a 	ret

018095f8 <__nedf2>:
 18095f8:	deffef04 	addi	sp,sp,-68
 18095fc:	dc400f15 	stw	r17,60(sp)
 1809600:	dc400404 	addi	r17,sp,16
 1809604:	2005883a 	mov	r2,r4
 1809608:	2807883a 	mov	r3,r5
 180960c:	dc000e15 	stw	r16,56(sp)
 1809610:	d809883a 	mov	r4,sp
 1809614:	880b883a 	mov	r5,r17
 1809618:	dc000904 	addi	r16,sp,36
 180961c:	d8c00115 	stw	r3,4(sp)
 1809620:	d8800015 	stw	r2,0(sp)
 1809624:	d9800215 	stw	r6,8(sp)
 1809628:	dfc01015 	stw	ra,64(sp)
 180962c:	d9c00315 	stw	r7,12(sp)
 1809630:	180a06c0 	call	180a06c <__unpack_d>
 1809634:	d9000204 	addi	r4,sp,8
 1809638:	800b883a 	mov	r5,r16
 180963c:	180a06c0 	call	180a06c <__unpack_d>
 1809640:	d8800417 	ldw	r2,16(sp)
 1809644:	00c00044 	movi	r3,1
 1809648:	180d883a 	mov	r6,r3
 180964c:	1880062e 	bgeu	r3,r2,1809668 <__nedf2+0x70>
 1809650:	d8800917 	ldw	r2,36(sp)
 1809654:	8809883a 	mov	r4,r17
 1809658:	800b883a 	mov	r5,r16
 180965c:	1880022e 	bgeu	r3,r2,1809668 <__nedf2+0x70>
 1809660:	180a1a40 	call	180a1a4 <__fpcmp_parts_d>
 1809664:	100d883a 	mov	r6,r2
 1809668:	3005883a 	mov	r2,r6
 180966c:	dfc01017 	ldw	ra,64(sp)
 1809670:	dc400f17 	ldw	r17,60(sp)
 1809674:	dc000e17 	ldw	r16,56(sp)
 1809678:	dec01104 	addi	sp,sp,68
 180967c:	f800283a 	ret

01809680 <__gtdf2>:
 1809680:	deffef04 	addi	sp,sp,-68
 1809684:	dc400f15 	stw	r17,60(sp)
 1809688:	dc400404 	addi	r17,sp,16
 180968c:	2005883a 	mov	r2,r4
 1809690:	2807883a 	mov	r3,r5
 1809694:	dc000e15 	stw	r16,56(sp)
 1809698:	d809883a 	mov	r4,sp
 180969c:	880b883a 	mov	r5,r17
 18096a0:	dc000904 	addi	r16,sp,36
 18096a4:	d8c00115 	stw	r3,4(sp)
 18096a8:	d8800015 	stw	r2,0(sp)
 18096ac:	d9800215 	stw	r6,8(sp)
 18096b0:	dfc01015 	stw	ra,64(sp)
 18096b4:	d9c00315 	stw	r7,12(sp)
 18096b8:	180a06c0 	call	180a06c <__unpack_d>
 18096bc:	d9000204 	addi	r4,sp,8
 18096c0:	800b883a 	mov	r5,r16
 18096c4:	180a06c0 	call	180a06c <__unpack_d>
 18096c8:	d8800417 	ldw	r2,16(sp)
 18096cc:	00c00044 	movi	r3,1
 18096d0:	01bfffc4 	movi	r6,-1
 18096d4:	1880062e 	bgeu	r3,r2,18096f0 <__gtdf2+0x70>
 18096d8:	d8800917 	ldw	r2,36(sp)
 18096dc:	8809883a 	mov	r4,r17
 18096e0:	800b883a 	mov	r5,r16
 18096e4:	1880022e 	bgeu	r3,r2,18096f0 <__gtdf2+0x70>
 18096e8:	180a1a40 	call	180a1a4 <__fpcmp_parts_d>
 18096ec:	100d883a 	mov	r6,r2
 18096f0:	3005883a 	mov	r2,r6
 18096f4:	dfc01017 	ldw	ra,64(sp)
 18096f8:	dc400f17 	ldw	r17,60(sp)
 18096fc:	dc000e17 	ldw	r16,56(sp)
 1809700:	dec01104 	addi	sp,sp,68
 1809704:	f800283a 	ret

01809708 <__gedf2>:
 1809708:	deffef04 	addi	sp,sp,-68
 180970c:	dc400f15 	stw	r17,60(sp)
 1809710:	dc400404 	addi	r17,sp,16
 1809714:	2005883a 	mov	r2,r4
 1809718:	2807883a 	mov	r3,r5
 180971c:	dc000e15 	stw	r16,56(sp)
 1809720:	d809883a 	mov	r4,sp
 1809724:	880b883a 	mov	r5,r17
 1809728:	dc000904 	addi	r16,sp,36
 180972c:	d8c00115 	stw	r3,4(sp)
 1809730:	d8800015 	stw	r2,0(sp)
 1809734:	d9800215 	stw	r6,8(sp)
 1809738:	dfc01015 	stw	ra,64(sp)
 180973c:	d9c00315 	stw	r7,12(sp)
 1809740:	180a06c0 	call	180a06c <__unpack_d>
 1809744:	d9000204 	addi	r4,sp,8
 1809748:	800b883a 	mov	r5,r16
 180974c:	180a06c0 	call	180a06c <__unpack_d>
 1809750:	d8800417 	ldw	r2,16(sp)
 1809754:	00c00044 	movi	r3,1
 1809758:	01bfffc4 	movi	r6,-1
 180975c:	1880062e 	bgeu	r3,r2,1809778 <__gedf2+0x70>
 1809760:	d8800917 	ldw	r2,36(sp)
 1809764:	8809883a 	mov	r4,r17
 1809768:	800b883a 	mov	r5,r16
 180976c:	1880022e 	bgeu	r3,r2,1809778 <__gedf2+0x70>
 1809770:	180a1a40 	call	180a1a4 <__fpcmp_parts_d>
 1809774:	100d883a 	mov	r6,r2
 1809778:	3005883a 	mov	r2,r6
 180977c:	dfc01017 	ldw	ra,64(sp)
 1809780:	dc400f17 	ldw	r17,60(sp)
 1809784:	dc000e17 	ldw	r16,56(sp)
 1809788:	dec01104 	addi	sp,sp,68
 180978c:	f800283a 	ret

01809790 <__ltdf2>:
 1809790:	deffef04 	addi	sp,sp,-68
 1809794:	dc400f15 	stw	r17,60(sp)
 1809798:	dc400404 	addi	r17,sp,16
 180979c:	2005883a 	mov	r2,r4
 18097a0:	2807883a 	mov	r3,r5
 18097a4:	dc000e15 	stw	r16,56(sp)
 18097a8:	d809883a 	mov	r4,sp
 18097ac:	880b883a 	mov	r5,r17
 18097b0:	dc000904 	addi	r16,sp,36
 18097b4:	d8c00115 	stw	r3,4(sp)
 18097b8:	d8800015 	stw	r2,0(sp)
 18097bc:	d9800215 	stw	r6,8(sp)
 18097c0:	dfc01015 	stw	ra,64(sp)
 18097c4:	d9c00315 	stw	r7,12(sp)
 18097c8:	180a06c0 	call	180a06c <__unpack_d>
 18097cc:	d9000204 	addi	r4,sp,8
 18097d0:	800b883a 	mov	r5,r16
 18097d4:	180a06c0 	call	180a06c <__unpack_d>
 18097d8:	d8800417 	ldw	r2,16(sp)
 18097dc:	00c00044 	movi	r3,1
 18097e0:	180d883a 	mov	r6,r3
 18097e4:	1880062e 	bgeu	r3,r2,1809800 <__ltdf2+0x70>
 18097e8:	d8800917 	ldw	r2,36(sp)
 18097ec:	8809883a 	mov	r4,r17
 18097f0:	800b883a 	mov	r5,r16
 18097f4:	1880022e 	bgeu	r3,r2,1809800 <__ltdf2+0x70>
 18097f8:	180a1a40 	call	180a1a4 <__fpcmp_parts_d>
 18097fc:	100d883a 	mov	r6,r2
 1809800:	3005883a 	mov	r2,r6
 1809804:	dfc01017 	ldw	ra,64(sp)
 1809808:	dc400f17 	ldw	r17,60(sp)
 180980c:	dc000e17 	ldw	r16,56(sp)
 1809810:	dec01104 	addi	sp,sp,68
 1809814:	f800283a 	ret

01809818 <__floatsidf>:
 1809818:	2006d7fa 	srli	r3,r4,31
 180981c:	defff604 	addi	sp,sp,-40
 1809820:	008000c4 	movi	r2,3
 1809824:	dfc00915 	stw	ra,36(sp)
 1809828:	dcc00815 	stw	r19,32(sp)
 180982c:	dc800715 	stw	r18,28(sp)
 1809830:	dc400615 	stw	r17,24(sp)
 1809834:	dc000515 	stw	r16,20(sp)
 1809838:	d8800015 	stw	r2,0(sp)
 180983c:	d8c00115 	stw	r3,4(sp)
 1809840:	20000f1e 	bne	r4,zero,1809880 <__floatsidf+0x68>
 1809844:	00800084 	movi	r2,2
 1809848:	d8800015 	stw	r2,0(sp)
 180984c:	d809883a 	mov	r4,sp
 1809850:	1809d580 	call	1809d58 <__pack_d>
 1809854:	1009883a 	mov	r4,r2
 1809858:	180b883a 	mov	r5,r3
 180985c:	2005883a 	mov	r2,r4
 1809860:	2807883a 	mov	r3,r5
 1809864:	dfc00917 	ldw	ra,36(sp)
 1809868:	dcc00817 	ldw	r19,32(sp)
 180986c:	dc800717 	ldw	r18,28(sp)
 1809870:	dc400617 	ldw	r17,24(sp)
 1809874:	dc000517 	ldw	r16,20(sp)
 1809878:	dec00a04 	addi	sp,sp,40
 180987c:	f800283a 	ret
 1809880:	00800f04 	movi	r2,60
 1809884:	1807003a 	cmpeq	r3,r3,zero
 1809888:	d8800215 	stw	r2,8(sp)
 180988c:	18001126 	beq	r3,zero,18098d4 <__floatsidf+0xbc>
 1809890:	0027883a 	mov	r19,zero
 1809894:	2025883a 	mov	r18,r4
 1809898:	d9000315 	stw	r4,12(sp)
 180989c:	dcc00415 	stw	r19,16(sp)
 18098a0:	1809cd80 	call	1809cd8 <__clzsi2>
 18098a4:	11000744 	addi	r4,r2,29
 18098a8:	013fe80e 	bge	zero,r4,180984c <__floatsidf+0x34>
 18098ac:	10bfff44 	addi	r2,r2,-3
 18098b0:	10000c16 	blt	r2,zero,18098e4 <__floatsidf+0xcc>
 18098b4:	90a2983a 	sll	r17,r18,r2
 18098b8:	0021883a 	mov	r16,zero
 18098bc:	d8800217 	ldw	r2,8(sp)
 18098c0:	dc400415 	stw	r17,16(sp)
 18098c4:	dc000315 	stw	r16,12(sp)
 18098c8:	1105c83a 	sub	r2,r2,r4
 18098cc:	d8800215 	stw	r2,8(sp)
 18098d0:	003fde06 	br	180984c <__floatsidf+0x34>
 18098d4:	00a00034 	movhi	r2,32768
 18098d8:	20800a26 	beq	r4,r2,1809904 <__floatsidf+0xec>
 18098dc:	0109c83a 	sub	r4,zero,r4
 18098e0:	003feb06 	br	1809890 <__floatsidf+0x78>
 18098e4:	9006d07a 	srli	r3,r18,1
 18098e8:	008007c4 	movi	r2,31
 18098ec:	1105c83a 	sub	r2,r2,r4
 18098f0:	1886d83a 	srl	r3,r3,r2
 18098f4:	9922983a 	sll	r17,r19,r4
 18098f8:	9120983a 	sll	r16,r18,r4
 18098fc:	1c62b03a 	or	r17,r3,r17
 1809900:	003fee06 	br	18098bc <__floatsidf+0xa4>
 1809904:	0009883a 	mov	r4,zero
 1809908:	01707834 	movhi	r5,49632
 180990c:	003fd306 	br	180985c <__floatsidf+0x44>

01809910 <__fixdfsi>:
 1809910:	defff804 	addi	sp,sp,-32
 1809914:	2005883a 	mov	r2,r4
 1809918:	2807883a 	mov	r3,r5
 180991c:	d809883a 	mov	r4,sp
 1809920:	d9400204 	addi	r5,sp,8
 1809924:	d8c00115 	stw	r3,4(sp)
 1809928:	d8800015 	stw	r2,0(sp)
 180992c:	dfc00715 	stw	ra,28(sp)
 1809930:	180a06c0 	call	180a06c <__unpack_d>
 1809934:	d8c00217 	ldw	r3,8(sp)
 1809938:	00800084 	movi	r2,2
 180993c:	1880051e 	bne	r3,r2,1809954 <__fixdfsi+0x44>
 1809940:	0007883a 	mov	r3,zero
 1809944:	1805883a 	mov	r2,r3
 1809948:	dfc00717 	ldw	ra,28(sp)
 180994c:	dec00804 	addi	sp,sp,32
 1809950:	f800283a 	ret
 1809954:	00800044 	movi	r2,1
 1809958:	10fff92e 	bgeu	r2,r3,1809940 <__fixdfsi+0x30>
 180995c:	00800104 	movi	r2,4
 1809960:	18800426 	beq	r3,r2,1809974 <__fixdfsi+0x64>
 1809964:	d8c00417 	ldw	r3,16(sp)
 1809968:	183ff516 	blt	r3,zero,1809940 <__fixdfsi+0x30>
 180996c:	00800784 	movi	r2,30
 1809970:	10c0080e 	bge	r2,r3,1809994 <__fixdfsi+0x84>
 1809974:	d8800317 	ldw	r2,12(sp)
 1809978:	1000121e 	bne	r2,zero,18099c4 <__fixdfsi+0xb4>
 180997c:	00e00034 	movhi	r3,32768
 1809980:	18ffffc4 	addi	r3,r3,-1
 1809984:	1805883a 	mov	r2,r3
 1809988:	dfc00717 	ldw	ra,28(sp)
 180998c:	dec00804 	addi	sp,sp,32
 1809990:	f800283a 	ret
 1809994:	00800f04 	movi	r2,60
 1809998:	10d1c83a 	sub	r8,r2,r3
 180999c:	40bff804 	addi	r2,r8,-32
 18099a0:	d9800517 	ldw	r6,20(sp)
 18099a4:	d9c00617 	ldw	r7,24(sp)
 18099a8:	10000816 	blt	r2,zero,18099cc <__fixdfsi+0xbc>
 18099ac:	3888d83a 	srl	r4,r7,r2
 18099b0:	d8800317 	ldw	r2,12(sp)
 18099b4:	2007883a 	mov	r3,r4
 18099b8:	103fe226 	beq	r2,zero,1809944 <__fixdfsi+0x34>
 18099bc:	0107c83a 	sub	r3,zero,r4
 18099c0:	003fe006 	br	1809944 <__fixdfsi+0x34>
 18099c4:	00e00034 	movhi	r3,32768
 18099c8:	003fde06 	br	1809944 <__fixdfsi+0x34>
 18099cc:	39c7883a 	add	r3,r7,r7
 18099d0:	008007c4 	movi	r2,31
 18099d4:	1205c83a 	sub	r2,r2,r8
 18099d8:	1886983a 	sll	r3,r3,r2
 18099dc:	3208d83a 	srl	r4,r6,r8
 18099e0:	1908b03a 	or	r4,r3,r4
 18099e4:	003ff206 	br	18099b0 <__fixdfsi+0xa0>

018099e8 <__floatunsidf>:
 18099e8:	defff204 	addi	sp,sp,-56
 18099ec:	dfc00d15 	stw	ra,52(sp)
 18099f0:	ddc00c15 	stw	r23,48(sp)
 18099f4:	dd800b15 	stw	r22,44(sp)
 18099f8:	dd400a15 	stw	r21,40(sp)
 18099fc:	dd000915 	stw	r20,36(sp)
 1809a00:	dcc00815 	stw	r19,32(sp)
 1809a04:	dc800715 	stw	r18,28(sp)
 1809a08:	dc400615 	stw	r17,24(sp)
 1809a0c:	dc000515 	stw	r16,20(sp)
 1809a10:	d8000115 	stw	zero,4(sp)
 1809a14:	20000f1e 	bne	r4,zero,1809a54 <__floatunsidf+0x6c>
 1809a18:	00800084 	movi	r2,2
 1809a1c:	d8800015 	stw	r2,0(sp)
 1809a20:	d809883a 	mov	r4,sp
 1809a24:	1809d580 	call	1809d58 <__pack_d>
 1809a28:	dfc00d17 	ldw	ra,52(sp)
 1809a2c:	ddc00c17 	ldw	r23,48(sp)
 1809a30:	dd800b17 	ldw	r22,44(sp)
 1809a34:	dd400a17 	ldw	r21,40(sp)
 1809a38:	dd000917 	ldw	r20,36(sp)
 1809a3c:	dcc00817 	ldw	r19,32(sp)
 1809a40:	dc800717 	ldw	r18,28(sp)
 1809a44:	dc400617 	ldw	r17,24(sp)
 1809a48:	dc000517 	ldw	r16,20(sp)
 1809a4c:	dec00e04 	addi	sp,sp,56
 1809a50:	f800283a 	ret
 1809a54:	008000c4 	movi	r2,3
 1809a58:	00c00f04 	movi	r3,60
 1809a5c:	002f883a 	mov	r23,zero
 1809a60:	202d883a 	mov	r22,r4
 1809a64:	d8800015 	stw	r2,0(sp)
 1809a68:	d8c00215 	stw	r3,8(sp)
 1809a6c:	d9000315 	stw	r4,12(sp)
 1809a70:	ddc00415 	stw	r23,16(sp)
 1809a74:	1809cd80 	call	1809cd8 <__clzsi2>
 1809a78:	12400744 	addi	r9,r2,29
 1809a7c:	48000b16 	blt	r9,zero,1809aac <__floatunsidf+0xc4>
 1809a80:	483fe726 	beq	r9,zero,1809a20 <__floatunsidf+0x38>
 1809a84:	10bfff44 	addi	r2,r2,-3
 1809a88:	10002e16 	blt	r2,zero,1809b44 <__floatunsidf+0x15c>
 1809a8c:	b0a2983a 	sll	r17,r22,r2
 1809a90:	0021883a 	mov	r16,zero
 1809a94:	d8800217 	ldw	r2,8(sp)
 1809a98:	dc400415 	stw	r17,16(sp)
 1809a9c:	dc000315 	stw	r16,12(sp)
 1809aa0:	1245c83a 	sub	r2,r2,r9
 1809aa4:	d8800215 	stw	r2,8(sp)
 1809aa8:	003fdd06 	br	1809a20 <__floatunsidf+0x38>
 1809aac:	0255c83a 	sub	r10,zero,r9
 1809ab0:	51bff804 	addi	r6,r10,-32
 1809ab4:	30001b16 	blt	r6,zero,1809b24 <__floatunsidf+0x13c>
 1809ab8:	b9a8d83a 	srl	r20,r23,r6
 1809abc:	002b883a 	mov	r21,zero
 1809ac0:	000f883a 	mov	r7,zero
 1809ac4:	01000044 	movi	r4,1
 1809ac8:	0011883a 	mov	r8,zero
 1809acc:	30002516 	blt	r6,zero,1809b64 <__floatunsidf+0x17c>
 1809ad0:	21a6983a 	sll	r19,r4,r6
 1809ad4:	0025883a 	mov	r18,zero
 1809ad8:	00bfffc4 	movi	r2,-1
 1809adc:	9089883a 	add	r4,r18,r2
 1809ae0:	988b883a 	add	r5,r19,r2
 1809ae4:	248d803a 	cmpltu	r6,r4,r18
 1809ae8:	314b883a 	add	r5,r6,r5
 1809aec:	b104703a 	and	r2,r22,r4
 1809af0:	b946703a 	and	r3,r23,r5
 1809af4:	10c4b03a 	or	r2,r2,r3
 1809af8:	10000226 	beq	r2,zero,1809b04 <__floatunsidf+0x11c>
 1809afc:	01c00044 	movi	r7,1
 1809b00:	0011883a 	mov	r8,zero
 1809b04:	d9000217 	ldw	r4,8(sp)
 1809b08:	a1c4b03a 	or	r2,r20,r7
 1809b0c:	aa06b03a 	or	r3,r21,r8
 1809b10:	2249c83a 	sub	r4,r4,r9
 1809b14:	d8c00415 	stw	r3,16(sp)
 1809b18:	d9000215 	stw	r4,8(sp)
 1809b1c:	d8800315 	stw	r2,12(sp)
 1809b20:	003fbf06 	br	1809a20 <__floatunsidf+0x38>
 1809b24:	bdc7883a 	add	r3,r23,r23
 1809b28:	008007c4 	movi	r2,31
 1809b2c:	1285c83a 	sub	r2,r2,r10
 1809b30:	1886983a 	sll	r3,r3,r2
 1809b34:	b2a8d83a 	srl	r20,r22,r10
 1809b38:	baaad83a 	srl	r21,r23,r10
 1809b3c:	1d28b03a 	or	r20,r3,r20
 1809b40:	003fdf06 	br	1809ac0 <__floatunsidf+0xd8>
 1809b44:	b006d07a 	srli	r3,r22,1
 1809b48:	008007c4 	movi	r2,31
 1809b4c:	1245c83a 	sub	r2,r2,r9
 1809b50:	1886d83a 	srl	r3,r3,r2
 1809b54:	ba62983a 	sll	r17,r23,r9
 1809b58:	b260983a 	sll	r16,r22,r9
 1809b5c:	1c62b03a 	or	r17,r3,r17
 1809b60:	003fcc06 	br	1809a94 <__floatunsidf+0xac>
 1809b64:	2006d07a 	srli	r3,r4,1
 1809b68:	008007c4 	movi	r2,31
 1809b6c:	1285c83a 	sub	r2,r2,r10
 1809b70:	18a6d83a 	srl	r19,r3,r2
 1809b74:	22a4983a 	sll	r18,r4,r10
 1809b78:	003fd706 	br	1809ad8 <__floatunsidf+0xf0>

01809b7c <__mulsi3>:
 1809b7c:	20000a26 	beq	r4,zero,1809ba8 <__mulsi3+0x2c>
 1809b80:	0007883a 	mov	r3,zero
 1809b84:	2080004c 	andi	r2,r4,1
 1809b88:	1005003a 	cmpeq	r2,r2,zero
 1809b8c:	2008d07a 	srli	r4,r4,1
 1809b90:	1000011e 	bne	r2,zero,1809b98 <__mulsi3+0x1c>
 1809b94:	1947883a 	add	r3,r3,r5
 1809b98:	294b883a 	add	r5,r5,r5
 1809b9c:	203ff91e 	bne	r4,zero,1809b84 <__mulsi3+0x8>
 1809ba0:	1805883a 	mov	r2,r3
 1809ba4:	f800283a 	ret
 1809ba8:	0007883a 	mov	r3,zero
 1809bac:	1805883a 	mov	r2,r3
 1809bb0:	f800283a 	ret

01809bb4 <__muldi3>:
 1809bb4:	defff204 	addi	sp,sp,-56
 1809bb8:	df000c15 	stw	fp,48(sp)
 1809bbc:	3038d43a 	srli	fp,r6,16
 1809bc0:	dd000815 	stw	r20,32(sp)
 1809bc4:	dc400515 	stw	r17,20(sp)
 1809bc8:	2028d43a 	srli	r20,r4,16
 1809bcc:	247fffcc 	andi	r17,r4,65535
 1809bd0:	dc000415 	stw	r16,16(sp)
 1809bd4:	343fffcc 	andi	r16,r6,65535
 1809bd8:	dcc00715 	stw	r19,28(sp)
 1809bdc:	d9000015 	stw	r4,0(sp)
 1809be0:	2827883a 	mov	r19,r5
 1809be4:	8809883a 	mov	r4,r17
 1809be8:	d9400115 	stw	r5,4(sp)
 1809bec:	800b883a 	mov	r5,r16
 1809bf0:	d9800215 	stw	r6,8(sp)
 1809bf4:	dfc00d15 	stw	ra,52(sp)
 1809bf8:	d9c00315 	stw	r7,12(sp)
 1809bfc:	dd800a15 	stw	r22,40(sp)
 1809c00:	dd400915 	stw	r21,36(sp)
 1809c04:	302d883a 	mov	r22,r6
 1809c08:	ddc00b15 	stw	r23,44(sp)
 1809c0c:	dc800615 	stw	r18,24(sp)
 1809c10:	1809b7c0 	call	1809b7c <__mulsi3>
 1809c14:	8809883a 	mov	r4,r17
 1809c18:	e00b883a 	mov	r5,fp
 1809c1c:	102b883a 	mov	r21,r2
 1809c20:	1809b7c0 	call	1809b7c <__mulsi3>
 1809c24:	800b883a 	mov	r5,r16
 1809c28:	a009883a 	mov	r4,r20
 1809c2c:	1023883a 	mov	r17,r2
 1809c30:	1809b7c0 	call	1809b7c <__mulsi3>
 1809c34:	a009883a 	mov	r4,r20
 1809c38:	e00b883a 	mov	r5,fp
 1809c3c:	1021883a 	mov	r16,r2
 1809c40:	1809b7c0 	call	1809b7c <__mulsi3>
 1809c44:	a8ffffcc 	andi	r3,r21,65535
 1809c48:	a82ad43a 	srli	r21,r21,16
 1809c4c:	8c23883a 	add	r17,r17,r16
 1809c50:	1011883a 	mov	r8,r2
 1809c54:	ac6b883a 	add	r21,r21,r17
 1809c58:	a804943a 	slli	r2,r21,16
 1809c5c:	b009883a 	mov	r4,r22
 1809c60:	980b883a 	mov	r5,r19
 1809c64:	10c7883a 	add	r3,r2,r3
 1809c68:	a812d43a 	srli	r9,r21,16
 1809c6c:	180d883a 	mov	r6,r3
 1809c70:	ac00022e 	bgeu	r21,r16,1809c7c <__muldi3+0xc8>
 1809c74:	00800074 	movhi	r2,1
 1809c78:	4091883a 	add	r8,r8,r2
 1809c7c:	4267883a 	add	r19,r8,r9
 1809c80:	302d883a 	mov	r22,r6
 1809c84:	1809b7c0 	call	1809b7c <__mulsi3>
 1809c88:	d9400317 	ldw	r5,12(sp)
 1809c8c:	d9000017 	ldw	r4,0(sp)
 1809c90:	1023883a 	mov	r17,r2
 1809c94:	1809b7c0 	call	1809b7c <__mulsi3>
 1809c98:	14cb883a 	add	r5,r2,r19
 1809c9c:	894b883a 	add	r5,r17,r5
 1809ca0:	b005883a 	mov	r2,r22
 1809ca4:	2807883a 	mov	r3,r5
 1809ca8:	dfc00d17 	ldw	ra,52(sp)
 1809cac:	df000c17 	ldw	fp,48(sp)
 1809cb0:	ddc00b17 	ldw	r23,44(sp)
 1809cb4:	dd800a17 	ldw	r22,40(sp)
 1809cb8:	dd400917 	ldw	r21,36(sp)
 1809cbc:	dd000817 	ldw	r20,32(sp)
 1809cc0:	dcc00717 	ldw	r19,28(sp)
 1809cc4:	dc800617 	ldw	r18,24(sp)
 1809cc8:	dc400517 	ldw	r17,20(sp)
 1809ccc:	dc000417 	ldw	r16,16(sp)
 1809cd0:	dec00e04 	addi	sp,sp,56
 1809cd4:	f800283a 	ret

01809cd8 <__clzsi2>:
 1809cd8:	00bfffd4 	movui	r2,65535
 1809cdc:	11000e36 	bltu	r2,r4,1809d18 <__clzsi2+0x40>
 1809ce0:	00803fc4 	movi	r2,255
 1809ce4:	01400204 	movi	r5,8
 1809ce8:	0007883a 	mov	r3,zero
 1809cec:	11001036 	bltu	r2,r4,1809d30 <__clzsi2+0x58>
 1809cf0:	000b883a 	mov	r5,zero
 1809cf4:	20c6d83a 	srl	r3,r4,r3
 1809cf8:	00806074 	movhi	r2,385
 1809cfc:	10b70104 	addi	r2,r2,-9212
 1809d00:	1887883a 	add	r3,r3,r2
 1809d04:	18800003 	ldbu	r2,0(r3)
 1809d08:	00c00804 	movi	r3,32
 1809d0c:	2885883a 	add	r2,r5,r2
 1809d10:	1885c83a 	sub	r2,r3,r2
 1809d14:	f800283a 	ret
 1809d18:	01400404 	movi	r5,16
 1809d1c:	00804034 	movhi	r2,256
 1809d20:	10bfffc4 	addi	r2,r2,-1
 1809d24:	2807883a 	mov	r3,r5
 1809d28:	113ff22e 	bgeu	r2,r4,1809cf4 <__clzsi2+0x1c>
 1809d2c:	01400604 	movi	r5,24
 1809d30:	2807883a 	mov	r3,r5
 1809d34:	20c6d83a 	srl	r3,r4,r3
 1809d38:	00806074 	movhi	r2,385
 1809d3c:	10b70104 	addi	r2,r2,-9212
 1809d40:	1887883a 	add	r3,r3,r2
 1809d44:	18800003 	ldbu	r2,0(r3)
 1809d48:	00c00804 	movi	r3,32
 1809d4c:	2885883a 	add	r2,r5,r2
 1809d50:	1885c83a 	sub	r2,r3,r2
 1809d54:	f800283a 	ret

01809d58 <__pack_d>:
 1809d58:	20c00017 	ldw	r3,0(r4)
 1809d5c:	defffd04 	addi	sp,sp,-12
 1809d60:	dc000015 	stw	r16,0(sp)
 1809d64:	dc800215 	stw	r18,8(sp)
 1809d68:	dc400115 	stw	r17,4(sp)
 1809d6c:	00800044 	movi	r2,1
 1809d70:	22000317 	ldw	r8,12(r4)
 1809d74:	001f883a 	mov	r15,zero
 1809d78:	22400417 	ldw	r9,16(r4)
 1809d7c:	24000117 	ldw	r16,4(r4)
 1809d80:	10c0552e 	bgeu	r2,r3,1809ed8 <__pack_d+0x180>
 1809d84:	00800104 	movi	r2,4
 1809d88:	18804f26 	beq	r3,r2,1809ec8 <__pack_d+0x170>
 1809d8c:	00800084 	movi	r2,2
 1809d90:	18800226 	beq	r3,r2,1809d9c <__pack_d+0x44>
 1809d94:	4244b03a 	or	r2,r8,r9
 1809d98:	10001a1e 	bne	r2,zero,1809e04 <__pack_d+0xac>
 1809d9c:	000d883a 	mov	r6,zero
 1809da0:	000f883a 	mov	r7,zero
 1809da4:	0011883a 	mov	r8,zero
 1809da8:	00800434 	movhi	r2,16
 1809dac:	10bfffc4 	addi	r2,r2,-1
 1809db0:	301d883a 	mov	r14,r6
 1809db4:	3884703a 	and	r2,r7,r2
 1809db8:	400a953a 	slli	r5,r8,20
 1809dbc:	79bffc2c 	andhi	r6,r15,65520
 1809dc0:	308cb03a 	or	r6,r6,r2
 1809dc4:	00e00434 	movhi	r3,32784
 1809dc8:	18ffffc4 	addi	r3,r3,-1
 1809dcc:	800497fa 	slli	r2,r16,31
 1809dd0:	30c6703a 	and	r3,r6,r3
 1809dd4:	1946b03a 	or	r3,r3,r5
 1809dd8:	01600034 	movhi	r5,32768
 1809ddc:	297fffc4 	addi	r5,r5,-1
 1809de0:	194a703a 	and	r5,r3,r5
 1809de4:	288ab03a 	or	r5,r5,r2
 1809de8:	2807883a 	mov	r3,r5
 1809dec:	7005883a 	mov	r2,r14
 1809df0:	dc800217 	ldw	r18,8(sp)
 1809df4:	dc400117 	ldw	r17,4(sp)
 1809df8:	dc000017 	ldw	r16,0(sp)
 1809dfc:	dec00304 	addi	sp,sp,12
 1809e00:	f800283a 	ret
 1809e04:	21000217 	ldw	r4,8(r4)
 1809e08:	00bf0084 	movi	r2,-1022
 1809e0c:	20803f16 	blt	r4,r2,1809f0c <__pack_d+0x1b4>
 1809e10:	0080ffc4 	movi	r2,1023
 1809e14:	11002c16 	blt	r2,r4,1809ec8 <__pack_d+0x170>
 1809e18:	00803fc4 	movi	r2,255
 1809e1c:	408c703a 	and	r6,r8,r2
 1809e20:	00802004 	movi	r2,128
 1809e24:	0007883a 	mov	r3,zero
 1809e28:	000f883a 	mov	r7,zero
 1809e2c:	2280ffc4 	addi	r10,r4,1023
 1809e30:	30801e26 	beq	r6,r2,1809eac <__pack_d+0x154>
 1809e34:	00801fc4 	movi	r2,127
 1809e38:	4089883a 	add	r4,r8,r2
 1809e3c:	220d803a 	cmpltu	r6,r4,r8
 1809e40:	324d883a 	add	r6,r6,r9
 1809e44:	2011883a 	mov	r8,r4
 1809e48:	3013883a 	mov	r9,r6
 1809e4c:	00880034 	movhi	r2,8192
 1809e50:	10bfffc4 	addi	r2,r2,-1
 1809e54:	12400d36 	bltu	r2,r9,1809e8c <__pack_d+0x134>
 1809e58:	4804963a 	slli	r2,r9,24
 1809e5c:	400cd23a 	srli	r6,r8,8
 1809e60:	480ed23a 	srli	r7,r9,8
 1809e64:	013fffc4 	movi	r4,-1
 1809e68:	118cb03a 	or	r6,r2,r6
 1809e6c:	01400434 	movhi	r5,16
 1809e70:	297fffc4 	addi	r5,r5,-1
 1809e74:	3104703a 	and	r2,r6,r4
 1809e78:	3946703a 	and	r3,r7,r5
 1809e7c:	5201ffcc 	andi	r8,r10,2047
 1809e80:	100d883a 	mov	r6,r2
 1809e84:	180f883a 	mov	r7,r3
 1809e88:	003fc706 	br	1809da8 <__pack_d+0x50>
 1809e8c:	480897fa 	slli	r4,r9,31
 1809e90:	4004d07a 	srli	r2,r8,1
 1809e94:	4806d07a 	srli	r3,r9,1
 1809e98:	52800044 	addi	r10,r10,1
 1809e9c:	2084b03a 	or	r2,r4,r2
 1809ea0:	1011883a 	mov	r8,r2
 1809ea4:	1813883a 	mov	r9,r3
 1809ea8:	003feb06 	br	1809e58 <__pack_d+0x100>
 1809eac:	383fe11e 	bne	r7,zero,1809e34 <__pack_d+0xdc>
 1809eb0:	01004004 	movi	r4,256
 1809eb4:	4104703a 	and	r2,r8,r4
 1809eb8:	10c4b03a 	or	r2,r2,r3
 1809ebc:	103fe326 	beq	r2,zero,1809e4c <__pack_d+0xf4>
 1809ec0:	3005883a 	mov	r2,r6
 1809ec4:	003fdc06 	br	1809e38 <__pack_d+0xe0>
 1809ec8:	000d883a 	mov	r6,zero
 1809ecc:	000f883a 	mov	r7,zero
 1809ed0:	0201ffc4 	movi	r8,2047
 1809ed4:	003fb406 	br	1809da8 <__pack_d+0x50>
 1809ed8:	0005883a 	mov	r2,zero
 1809edc:	00c00234 	movhi	r3,8
 1809ee0:	408cb03a 	or	r6,r8,r2
 1809ee4:	48ceb03a 	or	r7,r9,r3
 1809ee8:	013fffc4 	movi	r4,-1
 1809eec:	01400434 	movhi	r5,16
 1809ef0:	297fffc4 	addi	r5,r5,-1
 1809ef4:	3104703a 	and	r2,r6,r4
 1809ef8:	3946703a 	and	r3,r7,r5
 1809efc:	100d883a 	mov	r6,r2
 1809f00:	180f883a 	mov	r7,r3
 1809f04:	0201ffc4 	movi	r8,2047
 1809f08:	003fa706 	br	1809da8 <__pack_d+0x50>
 1809f0c:	1109c83a 	sub	r4,r2,r4
 1809f10:	00800e04 	movi	r2,56
 1809f14:	11004316 	blt	r2,r4,180a024 <__pack_d+0x2cc>
 1809f18:	21fff804 	addi	r7,r4,-32
 1809f1c:	38004516 	blt	r7,zero,180a034 <__pack_d+0x2dc>
 1809f20:	49d8d83a 	srl	r12,r9,r7
 1809f24:	001b883a 	mov	r13,zero
 1809f28:	0023883a 	mov	r17,zero
 1809f2c:	01400044 	movi	r5,1
 1809f30:	0025883a 	mov	r18,zero
 1809f34:	38004716 	blt	r7,zero,180a054 <__pack_d+0x2fc>
 1809f38:	29d6983a 	sll	r11,r5,r7
 1809f3c:	0015883a 	mov	r10,zero
 1809f40:	00bfffc4 	movi	r2,-1
 1809f44:	5089883a 	add	r4,r10,r2
 1809f48:	588b883a 	add	r5,r11,r2
 1809f4c:	228d803a 	cmpltu	r6,r4,r10
 1809f50:	314b883a 	add	r5,r6,r5
 1809f54:	4104703a 	and	r2,r8,r4
 1809f58:	4946703a 	and	r3,r9,r5
 1809f5c:	10c4b03a 	or	r2,r2,r3
 1809f60:	10000226 	beq	r2,zero,1809f6c <__pack_d+0x214>
 1809f64:	04400044 	movi	r17,1
 1809f68:	0025883a 	mov	r18,zero
 1809f6c:	00803fc4 	movi	r2,255
 1809f70:	644eb03a 	or	r7,r12,r17
 1809f74:	3892703a 	and	r9,r7,r2
 1809f78:	00802004 	movi	r2,128
 1809f7c:	6c90b03a 	or	r8,r13,r18
 1809f80:	0015883a 	mov	r10,zero
 1809f84:	48801626 	beq	r9,r2,1809fe0 <__pack_d+0x288>
 1809f88:	01001fc4 	movi	r4,127
 1809f8c:	3905883a 	add	r2,r7,r4
 1809f90:	11cd803a 	cmpltu	r6,r2,r7
 1809f94:	320d883a 	add	r6,r6,r8
 1809f98:	100f883a 	mov	r7,r2
 1809f9c:	00840034 	movhi	r2,4096
 1809fa0:	10bfffc4 	addi	r2,r2,-1
 1809fa4:	3011883a 	mov	r8,r6
 1809fa8:	0007883a 	mov	r3,zero
 1809fac:	11801b36 	bltu	r2,r6,180a01c <__pack_d+0x2c4>
 1809fb0:	4004963a 	slli	r2,r8,24
 1809fb4:	3808d23a 	srli	r4,r7,8
 1809fb8:	400ad23a 	srli	r5,r8,8
 1809fbc:	1813883a 	mov	r9,r3
 1809fc0:	1108b03a 	or	r4,r2,r4
 1809fc4:	00bfffc4 	movi	r2,-1
 1809fc8:	00c00434 	movhi	r3,16
 1809fcc:	18ffffc4 	addi	r3,r3,-1
 1809fd0:	208c703a 	and	r6,r4,r2
 1809fd4:	28ce703a 	and	r7,r5,r3
 1809fd8:	4a01ffcc 	andi	r8,r9,2047
 1809fdc:	003f7206 	br	1809da8 <__pack_d+0x50>
 1809fe0:	503fe91e 	bne	r10,zero,1809f88 <__pack_d+0x230>
 1809fe4:	01004004 	movi	r4,256
 1809fe8:	3904703a 	and	r2,r7,r4
 1809fec:	0007883a 	mov	r3,zero
 1809ff0:	10c4b03a 	or	r2,r2,r3
 1809ff4:	10000626 	beq	r2,zero,180a010 <__pack_d+0x2b8>
 1809ff8:	3a45883a 	add	r2,r7,r9
 1809ffc:	11cd803a 	cmpltu	r6,r2,r7
 180a000:	320d883a 	add	r6,r6,r8
 180a004:	100f883a 	mov	r7,r2
 180a008:	3011883a 	mov	r8,r6
 180a00c:	0007883a 	mov	r3,zero
 180a010:	00840034 	movhi	r2,4096
 180a014:	10bfffc4 	addi	r2,r2,-1
 180a018:	123fe52e 	bgeu	r2,r8,1809fb0 <__pack_d+0x258>
 180a01c:	00c00044 	movi	r3,1
 180a020:	003fe306 	br	1809fb0 <__pack_d+0x258>
 180a024:	0009883a 	mov	r4,zero
 180a028:	0013883a 	mov	r9,zero
 180a02c:	000b883a 	mov	r5,zero
 180a030:	003fe406 	br	1809fc4 <__pack_d+0x26c>
 180a034:	4a47883a 	add	r3,r9,r9
 180a038:	008007c4 	movi	r2,31
 180a03c:	1105c83a 	sub	r2,r2,r4
 180a040:	1886983a 	sll	r3,r3,r2
 180a044:	4118d83a 	srl	r12,r8,r4
 180a048:	491ad83a 	srl	r13,r9,r4
 180a04c:	1b18b03a 	or	r12,r3,r12
 180a050:	003fb506 	br	1809f28 <__pack_d+0x1d0>
 180a054:	2806d07a 	srli	r3,r5,1
 180a058:	008007c4 	movi	r2,31
 180a05c:	1105c83a 	sub	r2,r2,r4
 180a060:	1896d83a 	srl	r11,r3,r2
 180a064:	2914983a 	sll	r10,r5,r4
 180a068:	003fb506 	br	1809f40 <__pack_d+0x1e8>

0180a06c <__unpack_d>:
 180a06c:	20c00117 	ldw	r3,4(r4)
 180a070:	22400017 	ldw	r9,0(r4)
 180a074:	00800434 	movhi	r2,16
 180a078:	10bfffc4 	addi	r2,r2,-1
 180a07c:	1808d53a 	srli	r4,r3,20
 180a080:	180cd7fa 	srli	r6,r3,31
 180a084:	1894703a 	and	r10,r3,r2
 180a088:	2201ffcc 	andi	r8,r4,2047
 180a08c:	281b883a 	mov	r13,r5
 180a090:	4817883a 	mov	r11,r9
 180a094:	29800115 	stw	r6,4(r5)
 180a098:	5019883a 	mov	r12,r10
 180a09c:	40001e1e 	bne	r8,zero,180a118 <__unpack_d+0xac>
 180a0a0:	4a84b03a 	or	r2,r9,r10
 180a0a4:	10001926 	beq	r2,zero,180a10c <__unpack_d+0xa0>
 180a0a8:	4804d63a 	srli	r2,r9,24
 180a0ac:	500c923a 	slli	r6,r10,8
 180a0b0:	013f0084 	movi	r4,-1022
 180a0b4:	00c40034 	movhi	r3,4096
 180a0b8:	18ffffc4 	addi	r3,r3,-1
 180a0bc:	118cb03a 	or	r6,r2,r6
 180a0c0:	008000c4 	movi	r2,3
 180a0c4:	480a923a 	slli	r5,r9,8
 180a0c8:	68800015 	stw	r2,0(r13)
 180a0cc:	69000215 	stw	r4,8(r13)
 180a0d0:	19800b36 	bltu	r3,r6,180a100 <__unpack_d+0x94>
 180a0d4:	200f883a 	mov	r7,r4
 180a0d8:	1811883a 	mov	r8,r3
 180a0dc:	2945883a 	add	r2,r5,r5
 180a0e0:	1149803a 	cmpltu	r4,r2,r5
 180a0e4:	3187883a 	add	r3,r6,r6
 180a0e8:	20c9883a 	add	r4,r4,r3
 180a0ec:	100b883a 	mov	r5,r2
 180a0f0:	200d883a 	mov	r6,r4
 180a0f4:	39ffffc4 	addi	r7,r7,-1
 180a0f8:	413ff82e 	bgeu	r8,r4,180a0dc <__unpack_d+0x70>
 180a0fc:	69c00215 	stw	r7,8(r13)
 180a100:	69800415 	stw	r6,16(r13)
 180a104:	69400315 	stw	r5,12(r13)
 180a108:	f800283a 	ret
 180a10c:	00800084 	movi	r2,2
 180a110:	28800015 	stw	r2,0(r5)
 180a114:	f800283a 	ret
 180a118:	0081ffc4 	movi	r2,2047
 180a11c:	40800f26 	beq	r8,r2,180a15c <__unpack_d+0xf0>
 180a120:	480cd63a 	srli	r6,r9,24
 180a124:	5006923a 	slli	r3,r10,8
 180a128:	4804923a 	slli	r2,r9,8
 180a12c:	0009883a 	mov	r4,zero
 180a130:	30c6b03a 	or	r3,r6,r3
 180a134:	01440034 	movhi	r5,4096
 180a138:	110cb03a 	or	r6,r2,r4
 180a13c:	423f0044 	addi	r8,r8,-1023
 180a140:	194eb03a 	or	r7,r3,r5
 180a144:	008000c4 	movi	r2,3
 180a148:	69c00415 	stw	r7,16(r13)
 180a14c:	6a000215 	stw	r8,8(r13)
 180a150:	68800015 	stw	r2,0(r13)
 180a154:	69800315 	stw	r6,12(r13)
 180a158:	f800283a 	ret
 180a15c:	4a84b03a 	or	r2,r9,r10
 180a160:	1000031e 	bne	r2,zero,180a170 <__unpack_d+0x104>
 180a164:	00800104 	movi	r2,4
 180a168:	28800015 	stw	r2,0(r5)
 180a16c:	f800283a 	ret
 180a170:	0009883a 	mov	r4,zero
 180a174:	01400234 	movhi	r5,8
 180a178:	4904703a 	and	r2,r9,r4
 180a17c:	5146703a 	and	r3,r10,r5
 180a180:	10c4b03a 	or	r2,r2,r3
 180a184:	10000526 	beq	r2,zero,180a19c <__unpack_d+0x130>
 180a188:	00800044 	movi	r2,1
 180a18c:	68800015 	stw	r2,0(r13)
 180a190:	6b000415 	stw	r12,16(r13)
 180a194:	6ac00315 	stw	r11,12(r13)
 180a198:	f800283a 	ret
 180a19c:	68000015 	stw	zero,0(r13)
 180a1a0:	003ffb06 	br	180a190 <__unpack_d+0x124>

0180a1a4 <__fpcmp_parts_d>:
 180a1a4:	21800017 	ldw	r6,0(r4)
 180a1a8:	00c00044 	movi	r3,1
 180a1ac:	19800a2e 	bgeu	r3,r6,180a1d8 <__fpcmp_parts_d+0x34>
 180a1b0:	28800017 	ldw	r2,0(r5)
 180a1b4:	1880082e 	bgeu	r3,r2,180a1d8 <__fpcmp_parts_d+0x34>
 180a1b8:	00c00104 	movi	r3,4
 180a1bc:	30c02626 	beq	r6,r3,180a258 <__fpcmp_parts_d+0xb4>
 180a1c0:	10c02226 	beq	r2,r3,180a24c <__fpcmp_parts_d+0xa8>
 180a1c4:	00c00084 	movi	r3,2
 180a1c8:	30c00526 	beq	r6,r3,180a1e0 <__fpcmp_parts_d+0x3c>
 180a1cc:	10c0071e 	bne	r2,r3,180a1ec <__fpcmp_parts_d+0x48>
 180a1d0:	20800117 	ldw	r2,4(r4)
 180a1d4:	1000091e 	bne	r2,zero,180a1fc <__fpcmp_parts_d+0x58>
 180a1d8:	00800044 	movi	r2,1
 180a1dc:	f800283a 	ret
 180a1e0:	10c01a1e 	bne	r2,r3,180a24c <__fpcmp_parts_d+0xa8>
 180a1e4:	0005883a 	mov	r2,zero
 180a1e8:	f800283a 	ret
 180a1ec:	22000117 	ldw	r8,4(r4)
 180a1f0:	28800117 	ldw	r2,4(r5)
 180a1f4:	40800326 	beq	r8,r2,180a204 <__fpcmp_parts_d+0x60>
 180a1f8:	403ff726 	beq	r8,zero,180a1d8 <__fpcmp_parts_d+0x34>
 180a1fc:	00bfffc4 	movi	r2,-1
 180a200:	f800283a 	ret
 180a204:	20c00217 	ldw	r3,8(r4)
 180a208:	28800217 	ldw	r2,8(r5)
 180a20c:	10fffa16 	blt	r2,r3,180a1f8 <__fpcmp_parts_d+0x54>
 180a210:	18800916 	blt	r3,r2,180a238 <__fpcmp_parts_d+0x94>
 180a214:	21c00417 	ldw	r7,16(r4)
 180a218:	28c00417 	ldw	r3,16(r5)
 180a21c:	21800317 	ldw	r6,12(r4)
 180a220:	28800317 	ldw	r2,12(r5)
 180a224:	19fff436 	bltu	r3,r7,180a1f8 <__fpcmp_parts_d+0x54>
 180a228:	38c00526 	beq	r7,r3,180a240 <__fpcmp_parts_d+0x9c>
 180a22c:	38c00236 	bltu	r7,r3,180a238 <__fpcmp_parts_d+0x94>
 180a230:	19ffec1e 	bne	r3,r7,180a1e4 <__fpcmp_parts_d+0x40>
 180a234:	30bfeb2e 	bgeu	r6,r2,180a1e4 <__fpcmp_parts_d+0x40>
 180a238:	403fe71e 	bne	r8,zero,180a1d8 <__fpcmp_parts_d+0x34>
 180a23c:	003fef06 	br	180a1fc <__fpcmp_parts_d+0x58>
 180a240:	11bffa2e 	bgeu	r2,r6,180a22c <__fpcmp_parts_d+0x88>
 180a244:	403fe426 	beq	r8,zero,180a1d8 <__fpcmp_parts_d+0x34>
 180a248:	003fec06 	br	180a1fc <__fpcmp_parts_d+0x58>
 180a24c:	28800117 	ldw	r2,4(r5)
 180a250:	103fe11e 	bne	r2,zero,180a1d8 <__fpcmp_parts_d+0x34>
 180a254:	003fe906 	br	180a1fc <__fpcmp_parts_d+0x58>
 180a258:	11bfdd1e 	bne	r2,r6,180a1d0 <__fpcmp_parts_d+0x2c>
 180a25c:	28c00117 	ldw	r3,4(r5)
 180a260:	20800117 	ldw	r2,4(r4)
 180a264:	1885c83a 	sub	r2,r3,r2
 180a268:	f800283a 	ret

0180a26c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 180a26c:	defff804 	addi	sp,sp,-32
 180a270:	dfc00715 	stw	ra,28(sp)
 180a274:	df000615 	stw	fp,24(sp)
 180a278:	df000604 	addi	fp,sp,24
 180a27c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 180a280:	e0bffc17 	ldw	r2,-16(fp)
 180a284:	1004803a 	cmplt	r2,r2,zero
 180a288:	1000091e 	bne	r2,zero,180a2b0 <close+0x44>
 180a28c:	e13ffc17 	ldw	r4,-16(fp)
 180a290:	01400304 	movi	r5,12
 180a294:	1809b7c0 	call	1809b7c <__mulsi3>
 180a298:	1007883a 	mov	r3,r2
 180a29c:	00806074 	movhi	r2,385
 180a2a0:	10b96d04 	addi	r2,r2,-6732
 180a2a4:	1887883a 	add	r3,r3,r2
 180a2a8:	e0ffff15 	stw	r3,-4(fp)
 180a2ac:	00000106 	br	180a2b4 <close+0x48>
 180a2b0:	e03fff15 	stw	zero,-4(fp)
 180a2b4:	e0bfff17 	ldw	r2,-4(fp)
 180a2b8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 180a2bc:	e0bffb17 	ldw	r2,-20(fp)
 180a2c0:	1005003a 	cmpeq	r2,r2,zero
 180a2c4:	10001d1e 	bne	r2,zero,180a33c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 180a2c8:	e0bffb17 	ldw	r2,-20(fp)
 180a2cc:	10800017 	ldw	r2,0(r2)
 180a2d0:	10800417 	ldw	r2,16(r2)
 180a2d4:	1005003a 	cmpeq	r2,r2,zero
 180a2d8:	1000071e 	bne	r2,zero,180a2f8 <close+0x8c>
 180a2dc:	e0bffb17 	ldw	r2,-20(fp)
 180a2e0:	10800017 	ldw	r2,0(r2)
 180a2e4:	10800417 	ldw	r2,16(r2)
 180a2e8:	e13ffb17 	ldw	r4,-20(fp)
 180a2ec:	103ee83a 	callr	r2
 180a2f0:	e0bffe15 	stw	r2,-8(fp)
 180a2f4:	00000106 	br	180a2fc <close+0x90>
 180a2f8:	e03ffe15 	stw	zero,-8(fp)
 180a2fc:	e0bffe17 	ldw	r2,-8(fp)
 180a300:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 180a304:	e13ffc17 	ldw	r4,-16(fp)
 180a308:	180ad5c0 	call	180ad5c <alt_release_fd>
    if (rval < 0)
 180a30c:	e0bffa17 	ldw	r2,-24(fp)
 180a310:	1004403a 	cmpge	r2,r2,zero
 180a314:	1000071e 	bne	r2,zero,180a334 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 180a318:	180a36c0 	call	180a36c <alt_get_errno>
 180a31c:	e0fffa17 	ldw	r3,-24(fp)
 180a320:	00c7c83a 	sub	r3,zero,r3
 180a324:	10c00015 	stw	r3,0(r2)
      return -1;
 180a328:	00bfffc4 	movi	r2,-1
 180a32c:	e0bffd15 	stw	r2,-12(fp)
 180a330:	00000806 	br	180a354 <close+0xe8>
    }
    return 0;
 180a334:	e03ffd15 	stw	zero,-12(fp)
 180a338:	00000606 	br	180a354 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 180a33c:	180a36c0 	call	180a36c <alt_get_errno>
 180a340:	1007883a 	mov	r3,r2
 180a344:	00801444 	movi	r2,81
 180a348:	18800015 	stw	r2,0(r3)
    return -1;
 180a34c:	00bfffc4 	movi	r2,-1
 180a350:	e0bffd15 	stw	r2,-12(fp)
 180a354:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 180a358:	e037883a 	mov	sp,fp
 180a35c:	dfc00117 	ldw	ra,4(sp)
 180a360:	df000017 	ldw	fp,0(sp)
 180a364:	dec00204 	addi	sp,sp,8
 180a368:	f800283a 	ret

0180a36c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 180a36c:	defffd04 	addi	sp,sp,-12
 180a370:	dfc00215 	stw	ra,8(sp)
 180a374:	df000115 	stw	fp,4(sp)
 180a378:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 180a37c:	00806074 	movhi	r2,385
 180a380:	10be1c04 	addi	r2,r2,-1936
 180a384:	10800017 	ldw	r2,0(r2)
 180a388:	1005003a 	cmpeq	r2,r2,zero
 180a38c:	1000061e 	bne	r2,zero,180a3a8 <alt_get_errno+0x3c>
 180a390:	00806074 	movhi	r2,385
 180a394:	10be1c04 	addi	r2,r2,-1936
 180a398:	10800017 	ldw	r2,0(r2)
 180a39c:	103ee83a 	callr	r2
 180a3a0:	e0bfff15 	stw	r2,-4(fp)
 180a3a4:	00000306 	br	180a3b4 <alt_get_errno+0x48>
 180a3a8:	00806074 	movhi	r2,385
 180a3ac:	1084ea04 	addi	r2,r2,5032
 180a3b0:	e0bfff15 	stw	r2,-4(fp)
 180a3b4:	e0bfff17 	ldw	r2,-4(fp)
}
 180a3b8:	e037883a 	mov	sp,fp
 180a3bc:	dfc00117 	ldw	ra,4(sp)
 180a3c0:	df000017 	ldw	fp,0(sp)
 180a3c4:	dec00204 	addi	sp,sp,8
 180a3c8:	f800283a 	ret

0180a3cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 180a3cc:	defffc04 	addi	sp,sp,-16
 180a3d0:	df000315 	stw	fp,12(sp)
 180a3d4:	df000304 	addi	fp,sp,12
 180a3d8:	e13ffd15 	stw	r4,-12(fp)
 180a3dc:	e17ffe15 	stw	r5,-8(fp)
 180a3e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 180a3e4:	e0bfff17 	ldw	r2,-4(fp)
}
 180a3e8:	e037883a 	mov	sp,fp
 180a3ec:	df000017 	ldw	fp,0(sp)
 180a3f0:	dec00104 	addi	sp,sp,4
 180a3f4:	f800283a 	ret

0180a3f8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 180a3f8:	defff904 	addi	sp,sp,-28
 180a3fc:	dfc00615 	stw	ra,24(sp)
 180a400:	df000515 	stw	fp,20(sp)
 180a404:	df000504 	addi	fp,sp,20
 180a408:	e13ffc15 	stw	r4,-16(fp)
 180a40c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 180a410:	e0bffc17 	ldw	r2,-16(fp)
 180a414:	1004803a 	cmplt	r2,r2,zero
 180a418:	1000091e 	bne	r2,zero,180a440 <fstat+0x48>
 180a41c:	e13ffc17 	ldw	r4,-16(fp)
 180a420:	01400304 	movi	r5,12
 180a424:	1809b7c0 	call	1809b7c <__mulsi3>
 180a428:	1007883a 	mov	r3,r2
 180a42c:	00806074 	movhi	r2,385
 180a430:	10b96d04 	addi	r2,r2,-6732
 180a434:	1887883a 	add	r3,r3,r2
 180a438:	e0ffff15 	stw	r3,-4(fp)
 180a43c:	00000106 	br	180a444 <fstat+0x4c>
 180a440:	e03fff15 	stw	zero,-4(fp)
 180a444:	e0bfff17 	ldw	r2,-4(fp)
 180a448:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 180a44c:	e0bffb17 	ldw	r2,-20(fp)
 180a450:	1005003a 	cmpeq	r2,r2,zero
 180a454:	1000121e 	bne	r2,zero,180a4a0 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 180a458:	e0bffb17 	ldw	r2,-20(fp)
 180a45c:	10800017 	ldw	r2,0(r2)
 180a460:	10800817 	ldw	r2,32(r2)
 180a464:	1005003a 	cmpeq	r2,r2,zero
 180a468:	1000081e 	bne	r2,zero,180a48c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 180a46c:	e0bffb17 	ldw	r2,-20(fp)
 180a470:	10800017 	ldw	r2,0(r2)
 180a474:	10800817 	ldw	r2,32(r2)
 180a478:	e13ffb17 	ldw	r4,-20(fp)
 180a47c:	e17ffd17 	ldw	r5,-12(fp)
 180a480:	103ee83a 	callr	r2
 180a484:	e0bffe15 	stw	r2,-8(fp)
 180a488:	00000b06 	br	180a4b8 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 180a48c:	e0fffd17 	ldw	r3,-12(fp)
 180a490:	00880004 	movi	r2,8192
 180a494:	18800115 	stw	r2,4(r3)
      return 0;
 180a498:	e03ffe15 	stw	zero,-8(fp)
 180a49c:	00000606 	br	180a4b8 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 180a4a0:	180a4d00 	call	180a4d0 <alt_get_errno>
 180a4a4:	1007883a 	mov	r3,r2
 180a4a8:	00801444 	movi	r2,81
 180a4ac:	18800015 	stw	r2,0(r3)
    return -1;
 180a4b0:	00bfffc4 	movi	r2,-1
 180a4b4:	e0bffe15 	stw	r2,-8(fp)
 180a4b8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 180a4bc:	e037883a 	mov	sp,fp
 180a4c0:	dfc00117 	ldw	ra,4(sp)
 180a4c4:	df000017 	ldw	fp,0(sp)
 180a4c8:	dec00204 	addi	sp,sp,8
 180a4cc:	f800283a 	ret

0180a4d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 180a4d0:	defffd04 	addi	sp,sp,-12
 180a4d4:	dfc00215 	stw	ra,8(sp)
 180a4d8:	df000115 	stw	fp,4(sp)
 180a4dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 180a4e0:	00806074 	movhi	r2,385
 180a4e4:	10be1c04 	addi	r2,r2,-1936
 180a4e8:	10800017 	ldw	r2,0(r2)
 180a4ec:	1005003a 	cmpeq	r2,r2,zero
 180a4f0:	1000061e 	bne	r2,zero,180a50c <alt_get_errno+0x3c>
 180a4f4:	00806074 	movhi	r2,385
 180a4f8:	10be1c04 	addi	r2,r2,-1936
 180a4fc:	10800017 	ldw	r2,0(r2)
 180a500:	103ee83a 	callr	r2
 180a504:	e0bfff15 	stw	r2,-4(fp)
 180a508:	00000306 	br	180a518 <alt_get_errno+0x48>
 180a50c:	00806074 	movhi	r2,385
 180a510:	1084ea04 	addi	r2,r2,5032
 180a514:	e0bfff15 	stw	r2,-4(fp)
 180a518:	e0bfff17 	ldw	r2,-4(fp)
}
 180a51c:	e037883a 	mov	sp,fp
 180a520:	dfc00117 	ldw	ra,4(sp)
 180a524:	df000017 	ldw	fp,0(sp)
 180a528:	dec00204 	addi	sp,sp,8
 180a52c:	f800283a 	ret

0180a530 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 180a530:	deffeb04 	addi	sp,sp,-84
 180a534:	dfc01415 	stw	ra,80(sp)
 180a538:	df001315 	stw	fp,76(sp)
 180a53c:	df001304 	addi	fp,sp,76
 180a540:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 180a544:	e0bffd17 	ldw	r2,-12(fp)
 180a548:	1004803a 	cmplt	r2,r2,zero
 180a54c:	1000091e 	bne	r2,zero,180a574 <isatty+0x44>
 180a550:	e13ffd17 	ldw	r4,-12(fp)
 180a554:	01400304 	movi	r5,12
 180a558:	1809b7c0 	call	1809b7c <__mulsi3>
 180a55c:	1007883a 	mov	r3,r2
 180a560:	00806074 	movhi	r2,385
 180a564:	10b96d04 	addi	r2,r2,-6732
 180a568:	1887883a 	add	r3,r3,r2
 180a56c:	e0ffff15 	stw	r3,-4(fp)
 180a570:	00000106 	br	180a578 <isatty+0x48>
 180a574:	e03fff15 	stw	zero,-4(fp)
 180a578:	e0bfff17 	ldw	r2,-4(fp)
 180a57c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 180a580:	e0bfed17 	ldw	r2,-76(fp)
 180a584:	1005003a 	cmpeq	r2,r2,zero
 180a588:	10000f1e 	bne	r2,zero,180a5c8 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 180a58c:	e0bfed17 	ldw	r2,-76(fp)
 180a590:	10800017 	ldw	r2,0(r2)
 180a594:	10800817 	ldw	r2,32(r2)
 180a598:	1004c03a 	cmpne	r2,r2,zero
 180a59c:	1000031e 	bne	r2,zero,180a5ac <isatty+0x7c>
    {
      return 1;
 180a5a0:	00800044 	movi	r2,1
 180a5a4:	e0bffe15 	stw	r2,-8(fp)
 180a5a8:	00000c06 	br	180a5dc <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 180a5ac:	e17fee04 	addi	r5,fp,-72
 180a5b0:	e13ffd17 	ldw	r4,-12(fp)
 180a5b4:	180a3f80 	call	180a3f8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 180a5b8:	e0bfef17 	ldw	r2,-68(fp)
 180a5bc:	10880020 	cmpeqi	r2,r2,8192
 180a5c0:	e0bffe15 	stw	r2,-8(fp)
 180a5c4:	00000506 	br	180a5dc <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 180a5c8:	180a5f40 	call	180a5f4 <alt_get_errno>
 180a5cc:	1007883a 	mov	r3,r2
 180a5d0:	00801444 	movi	r2,81
 180a5d4:	18800015 	stw	r2,0(r3)
    return 0;
 180a5d8:	e03ffe15 	stw	zero,-8(fp)
 180a5dc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 180a5e0:	e037883a 	mov	sp,fp
 180a5e4:	dfc00117 	ldw	ra,4(sp)
 180a5e8:	df000017 	ldw	fp,0(sp)
 180a5ec:	dec00204 	addi	sp,sp,8
 180a5f0:	f800283a 	ret

0180a5f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 180a5f4:	defffd04 	addi	sp,sp,-12
 180a5f8:	dfc00215 	stw	ra,8(sp)
 180a5fc:	df000115 	stw	fp,4(sp)
 180a600:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 180a604:	00806074 	movhi	r2,385
 180a608:	10be1c04 	addi	r2,r2,-1936
 180a60c:	10800017 	ldw	r2,0(r2)
 180a610:	1005003a 	cmpeq	r2,r2,zero
 180a614:	1000061e 	bne	r2,zero,180a630 <alt_get_errno+0x3c>
 180a618:	00806074 	movhi	r2,385
 180a61c:	10be1c04 	addi	r2,r2,-1936
 180a620:	10800017 	ldw	r2,0(r2)
 180a624:	103ee83a 	callr	r2
 180a628:	e0bfff15 	stw	r2,-4(fp)
 180a62c:	00000306 	br	180a63c <alt_get_errno+0x48>
 180a630:	00806074 	movhi	r2,385
 180a634:	1084ea04 	addi	r2,r2,5032
 180a638:	e0bfff15 	stw	r2,-4(fp)
 180a63c:	e0bfff17 	ldw	r2,-4(fp)
}
 180a640:	e037883a 	mov	sp,fp
 180a644:	dfc00117 	ldw	ra,4(sp)
 180a648:	df000017 	ldw	fp,0(sp)
 180a64c:	dec00204 	addi	sp,sp,8
 180a650:	f800283a 	ret

0180a654 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 180a654:	defffe04 	addi	sp,sp,-8
 180a658:	dfc00115 	stw	ra,4(sp)
 180a65c:	df000015 	stw	fp,0(sp)
 180a660:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 180a664:	01006074 	movhi	r4,385
 180a668:	213e2104 	addi	r4,r4,-1916
 180a66c:	01406074 	movhi	r5,385
 180a670:	29775e04 	addi	r5,r5,-8840
 180a674:	01806074 	movhi	r6,385
 180a678:	31be2104 	addi	r6,r6,-1916
 180a67c:	180a6d40 	call	180a6d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 180a680:	01006034 	movhi	r4,384
 180a684:	21000804 	addi	r4,r4,32
 180a688:	01406034 	movhi	r5,384
 180a68c:	29400804 	addi	r5,r5,32
 180a690:	01806034 	movhi	r6,384
 180a694:	31806d04 	addi	r6,r6,436
 180a698:	180a6d40 	call	180a6d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 180a69c:	01006074 	movhi	r4,385
 180a6a0:	21362c04 	addi	r4,r4,-10064
 180a6a4:	01406074 	movhi	r5,385
 180a6a8:	29762c04 	addi	r5,r5,-10064
 180a6ac:	01806074 	movhi	r6,385
 180a6b0:	31b75e04 	addi	r6,r6,-8840
 180a6b4:	180a6d40 	call	180a6d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 180a6b8:	180c4100 	call	180c410 <alt_dcache_flush_all>
  alt_icache_flush_all();
 180a6bc:	180c69c0 	call	180c69c <alt_icache_flush_all>
}
 180a6c0:	e037883a 	mov	sp,fp
 180a6c4:	dfc00117 	ldw	ra,4(sp)
 180a6c8:	df000017 	ldw	fp,0(sp)
 180a6cc:	dec00204 	addi	sp,sp,8
 180a6d0:	f800283a 	ret

0180a6d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 180a6d4:	defffc04 	addi	sp,sp,-16
 180a6d8:	df000315 	stw	fp,12(sp)
 180a6dc:	df000304 	addi	fp,sp,12
 180a6e0:	e13ffd15 	stw	r4,-12(fp)
 180a6e4:	e17ffe15 	stw	r5,-8(fp)
 180a6e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 180a6ec:	e0fffe17 	ldw	r3,-8(fp)
 180a6f0:	e0bffd17 	ldw	r2,-12(fp)
 180a6f4:	18800e26 	beq	r3,r2,180a730 <alt_load_section+0x5c>
  {
    while( to != end )
 180a6f8:	00000a06 	br	180a724 <alt_load_section+0x50>
    {
      *to++ = *from++;
 180a6fc:	e0bffd17 	ldw	r2,-12(fp)
 180a700:	10c00017 	ldw	r3,0(r2)
 180a704:	e0bffe17 	ldw	r2,-8(fp)
 180a708:	10c00015 	stw	r3,0(r2)
 180a70c:	e0bffe17 	ldw	r2,-8(fp)
 180a710:	10800104 	addi	r2,r2,4
 180a714:	e0bffe15 	stw	r2,-8(fp)
 180a718:	e0bffd17 	ldw	r2,-12(fp)
 180a71c:	10800104 	addi	r2,r2,4
 180a720:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 180a724:	e0fffe17 	ldw	r3,-8(fp)
 180a728:	e0bfff17 	ldw	r2,-4(fp)
 180a72c:	18bff31e 	bne	r3,r2,180a6fc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 180a730:	e037883a 	mov	sp,fp
 180a734:	df000017 	ldw	fp,0(sp)
 180a738:	dec00104 	addi	sp,sp,4
 180a73c:	f800283a 	ret

0180a740 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 180a740:	defff804 	addi	sp,sp,-32
 180a744:	dfc00715 	stw	ra,28(sp)
 180a748:	df000615 	stw	fp,24(sp)
 180a74c:	df000604 	addi	fp,sp,24
 180a750:	e13ffc15 	stw	r4,-16(fp)
 180a754:	e17ffd15 	stw	r5,-12(fp)
 180a758:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 180a75c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 180a760:	e0bffc17 	ldw	r2,-16(fp)
 180a764:	1004803a 	cmplt	r2,r2,zero
 180a768:	1000091e 	bne	r2,zero,180a790 <lseek+0x50>
 180a76c:	e13ffc17 	ldw	r4,-16(fp)
 180a770:	01400304 	movi	r5,12
 180a774:	1809b7c0 	call	1809b7c <__mulsi3>
 180a778:	1007883a 	mov	r3,r2
 180a77c:	00806074 	movhi	r2,385
 180a780:	10b96d04 	addi	r2,r2,-6732
 180a784:	1887883a 	add	r3,r3,r2
 180a788:	e0ffff15 	stw	r3,-4(fp)
 180a78c:	00000106 	br	180a794 <lseek+0x54>
 180a790:	e03fff15 	stw	zero,-4(fp)
 180a794:	e0bfff17 	ldw	r2,-4(fp)
 180a798:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 180a79c:	e0bffb17 	ldw	r2,-20(fp)
 180a7a0:	1005003a 	cmpeq	r2,r2,zero
 180a7a4:	1000111e 	bne	r2,zero,180a7ec <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 180a7a8:	e0bffb17 	ldw	r2,-20(fp)
 180a7ac:	10800017 	ldw	r2,0(r2)
 180a7b0:	10800717 	ldw	r2,28(r2)
 180a7b4:	1005003a 	cmpeq	r2,r2,zero
 180a7b8:	1000091e 	bne	r2,zero,180a7e0 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 180a7bc:	e0bffb17 	ldw	r2,-20(fp)
 180a7c0:	10800017 	ldw	r2,0(r2)
 180a7c4:	10800717 	ldw	r2,28(r2)
 180a7c8:	e13ffb17 	ldw	r4,-20(fp)
 180a7cc:	e17ffd17 	ldw	r5,-12(fp)
 180a7d0:	e1bffe17 	ldw	r6,-8(fp)
 180a7d4:	103ee83a 	callr	r2
 180a7d8:	e0bffa15 	stw	r2,-24(fp)
 180a7dc:	00000506 	br	180a7f4 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 180a7e0:	00bfde84 	movi	r2,-134
 180a7e4:	e0bffa15 	stw	r2,-24(fp)
 180a7e8:	00000206 	br	180a7f4 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 180a7ec:	00bfebc4 	movi	r2,-81
 180a7f0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 180a7f4:	e0bffa17 	ldw	r2,-24(fp)
 180a7f8:	1004403a 	cmpge	r2,r2,zero
 180a7fc:	1000071e 	bne	r2,zero,180a81c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 180a800:	180a8340 	call	180a834 <alt_get_errno>
 180a804:	1007883a 	mov	r3,r2
 180a808:	e0bffa17 	ldw	r2,-24(fp)
 180a80c:	0085c83a 	sub	r2,zero,r2
 180a810:	18800015 	stw	r2,0(r3)
    rc = -1;
 180a814:	00bfffc4 	movi	r2,-1
 180a818:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 180a81c:	e0bffa17 	ldw	r2,-24(fp)
}
 180a820:	e037883a 	mov	sp,fp
 180a824:	dfc00117 	ldw	ra,4(sp)
 180a828:	df000017 	ldw	fp,0(sp)
 180a82c:	dec00204 	addi	sp,sp,8
 180a830:	f800283a 	ret

0180a834 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 180a834:	defffd04 	addi	sp,sp,-12
 180a838:	dfc00215 	stw	ra,8(sp)
 180a83c:	df000115 	stw	fp,4(sp)
 180a840:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 180a844:	00806074 	movhi	r2,385
 180a848:	10be1c04 	addi	r2,r2,-1936
 180a84c:	10800017 	ldw	r2,0(r2)
 180a850:	1005003a 	cmpeq	r2,r2,zero
 180a854:	1000061e 	bne	r2,zero,180a870 <alt_get_errno+0x3c>
 180a858:	00806074 	movhi	r2,385
 180a85c:	10be1c04 	addi	r2,r2,-1936
 180a860:	10800017 	ldw	r2,0(r2)
 180a864:	103ee83a 	callr	r2
 180a868:	e0bfff15 	stw	r2,-4(fp)
 180a86c:	00000306 	br	180a87c <alt_get_errno+0x48>
 180a870:	00806074 	movhi	r2,385
 180a874:	1084ea04 	addi	r2,r2,5032
 180a878:	e0bfff15 	stw	r2,-4(fp)
 180a87c:	e0bfff17 	ldw	r2,-4(fp)
}
 180a880:	e037883a 	mov	sp,fp
 180a884:	dfc00117 	ldw	ra,4(sp)
 180a888:	df000017 	ldw	fp,0(sp)
 180a88c:	dec00204 	addi	sp,sp,8
 180a890:	f800283a 	ret

0180a894 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 180a894:	defffd04 	addi	sp,sp,-12
 180a898:	dfc00215 	stw	ra,8(sp)
 180a89c:	df000115 	stw	fp,4(sp)
 180a8a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 180a8a4:	0009883a 	mov	r4,zero
 180a8a8:	180b0140 	call	180b014 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 180a8ac:	180b0480 	call	180b048 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 180a8b0:	01006074 	movhi	r4,385
 180a8b4:	21374404 	addi	r4,r4,-8944
 180a8b8:	01406074 	movhi	r5,385
 180a8bc:	29774404 	addi	r5,r5,-8944
 180a8c0:	01806074 	movhi	r6,385
 180a8c4:	31b74404 	addi	r6,r6,-8944
 180a8c8:	180ca5c0 	call	180ca5c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 180a8cc:	180c5400 	call	180c540 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 180a8d0:	01006074 	movhi	r4,385
 180a8d4:	21316904 	addi	r4,r4,-14940
 180a8d8:	180d16c0 	call	180d16c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 180a8dc:	d126da17 	ldw	r4,-25752(gp)
 180a8e0:	d166db17 	ldw	r5,-25748(gp)
 180a8e4:	d1a6dc17 	ldw	r6,-25744(gp)
 180a8e8:	180023c0 	call	180023c <main>
 180a8ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 180a8f0:	01000044 	movi	r4,1
 180a8f4:	180a26c0 	call	180a26c <close>
  exit (result);
 180a8f8:	e13fff17 	ldw	r4,-4(fp)
 180a8fc:	180d1800 	call	180d180 <exit>

0180a900 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 180a900:	defffe04 	addi	sp,sp,-8
 180a904:	df000115 	stw	fp,4(sp)
 180a908:	df000104 	addi	fp,sp,4
 180a90c:	e13fff15 	stw	r4,-4(fp)
}
 180a910:	e037883a 	mov	sp,fp
 180a914:	df000017 	ldw	fp,0(sp)
 180a918:	dec00104 	addi	sp,sp,4
 180a91c:	f800283a 	ret

0180a920 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 180a920:	defffe04 	addi	sp,sp,-8
 180a924:	df000115 	stw	fp,4(sp)
 180a928:	df000104 	addi	fp,sp,4
 180a92c:	e13fff15 	stw	r4,-4(fp)
}
 180a930:	e037883a 	mov	sp,fp
 180a934:	df000017 	ldw	fp,0(sp)
 180a938:	dec00104 	addi	sp,sp,4
 180a93c:	f800283a 	ret

0180a940 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 180a940:	defff204 	addi	sp,sp,-56
 180a944:	dfc00a15 	stw	ra,40(sp)
 180a948:	df000915 	stw	fp,36(sp)
 180a94c:	df000904 	addi	fp,sp,36
 180a950:	e1400215 	stw	r5,8(fp)
 180a954:	e1800315 	stw	r6,12(fp)
 180a958:	e1c00415 	stw	r7,16(fp)
 180a95c:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
 180a960:	e0800204 	addi	r2,fp,8
 180a964:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 180a968:	e0bfff17 	ldw	r2,-4(fp)
 180a96c:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
 180a970:	00007806 	br	180ab54 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 180a974:	e0bffc07 	ldb	r2,-16(fp)
 180a978:	10800960 	cmpeqi	r2,r2,37
 180a97c:	1000031e 	bne	r2,zero,180a98c <alt_printf+0x4c>
        {
            alt_putchar(c);
 180a980:	e13ffc07 	ldb	r4,-16(fp)
 180a984:	180ab980 	call	180ab98 <alt_putchar>
 180a988:	00007206 	br	180ab54 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 180a98c:	e0bffd17 	ldw	r2,-12(fp)
 180a990:	10800003 	ldbu	r2,0(r2)
 180a994:	e0bffc05 	stb	r2,-16(fp)
 180a998:	e0bffc07 	ldb	r2,-16(fp)
 180a99c:	1004c03a 	cmpne	r2,r2,zero
 180a9a0:	1007883a 	mov	r3,r2
 180a9a4:	e0bffd17 	ldw	r2,-12(fp)
 180a9a8:	10800044 	addi	r2,r2,1
 180a9ac:	e0bffd15 	stw	r2,-12(fp)
 180a9b0:	18803fcc 	andi	r2,r3,255
 180a9b4:	1005003a 	cmpeq	r2,r2,zero
 180a9b8:	1000721e 	bne	r2,zero,180ab84 <alt_printf+0x244>
            {
                if (c == '%')
 180a9bc:	e0bffc07 	ldb	r2,-16(fp)
 180a9c0:	10800958 	cmpnei	r2,r2,37
 180a9c4:	1000031e 	bne	r2,zero,180a9d4 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 180a9c8:	e13ffc07 	ldb	r4,-16(fp)
 180a9cc:	180ab980 	call	180ab98 <alt_putchar>
 180a9d0:	00006006 	br	180ab54 <alt_printf+0x214>
                } 
                else if (c == 'c')
 180a9d4:	e0bffc07 	ldb	r2,-16(fp)
 180a9d8:	108018d8 	cmpnei	r2,r2,99
 180a9dc:	1000091e 	bne	r2,zero,180aa04 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
 180a9e0:	e0fffe17 	ldw	r3,-8(fp)
 180a9e4:	18800104 	addi	r2,r3,4
 180a9e8:	e0bffe15 	stw	r2,-8(fp)
 180a9ec:	1805883a 	mov	r2,r3
 180a9f0:	10800017 	ldw	r2,0(r2)
 180a9f4:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
 180a9f8:	e13ffb17 	ldw	r4,-20(fp)
 180a9fc:	180ab980 	call	180ab98 <alt_putchar>
 180aa00:	00005406 	br	180ab54 <alt_printf+0x214>
                }
                else if (c == 'x')
 180aa04:	e0bffc07 	ldb	r2,-16(fp)
 180aa08:	10801e18 	cmpnei	r2,r2,120
 180aa0c:	1000371e 	bne	r2,zero,180aaec <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 180aa10:	e0fffe17 	ldw	r3,-8(fp)
 180aa14:	18800104 	addi	r2,r3,4
 180aa18:	e0bffe15 	stw	r2,-8(fp)
 180aa1c:	1805883a 	mov	r2,r3
 180aa20:	10800017 	ldw	r2,0(r2)
 180aa24:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 180aa28:	e0bffa17 	ldw	r2,-24(fp)
 180aa2c:	1004c03a 	cmpne	r2,r2,zero
 180aa30:	1000031e 	bne	r2,zero,180aa40 <alt_printf+0x100>
                    {
                        alt_putchar('0');
 180aa34:	01000c04 	movi	r4,48
 180aa38:	180ab980 	call	180ab98 <alt_putchar>
                        continue;
 180aa3c:	00004506 	br	180ab54 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 180aa40:	00800704 	movi	r2,28
 180aa44:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
 180aa48:	00000306 	br	180aa58 <alt_printf+0x118>
                        digit_shift -= 4;
 180aa4c:	e0bff817 	ldw	r2,-32(fp)
 180aa50:	10bfff04 	addi	r2,r2,-4
 180aa54:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 180aa58:	00c003c4 	movi	r3,15
 180aa5c:	e0bff817 	ldw	r2,-32(fp)
 180aa60:	1884983a 	sll	r2,r3,r2
 180aa64:	1007883a 	mov	r3,r2
 180aa68:	e0bffa17 	ldw	r2,-24(fp)
 180aa6c:	1884703a 	and	r2,r3,r2
 180aa70:	1005003a 	cmpeq	r2,r2,zero
 180aa74:	103ff51e 	bne	r2,zero,180aa4c <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 180aa78:	00001806 	br	180aadc <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 180aa7c:	00c003c4 	movi	r3,15
 180aa80:	e0bff817 	ldw	r2,-32(fp)
 180aa84:	1884983a 	sll	r2,r3,r2
 180aa88:	1007883a 	mov	r3,r2
 180aa8c:	e0bffa17 	ldw	r2,-24(fp)
 180aa90:	1886703a 	and	r3,r3,r2
 180aa94:	e0bff817 	ldw	r2,-32(fp)
 180aa98:	1884d83a 	srl	r2,r3,r2
 180aa9c:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
 180aaa0:	e0bff917 	ldw	r2,-28(fp)
 180aaa4:	108002a8 	cmpgeui	r2,r2,10
 180aaa8:	1000041e 	bne	r2,zero,180aabc <alt_printf+0x17c>
                            c = '0' + digit;
 180aaac:	e0bff917 	ldw	r2,-28(fp)
 180aab0:	10800c04 	addi	r2,r2,48
 180aab4:	e0bffc05 	stb	r2,-16(fp)
 180aab8:	00000306 	br	180aac8 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
 180aabc:	e0bff917 	ldw	r2,-28(fp)
 180aac0:	108015c4 	addi	r2,r2,87
 180aac4:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
 180aac8:	e13ffc07 	ldb	r4,-16(fp)
 180aacc:	180ab980 	call	180ab98 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 180aad0:	e0bff817 	ldw	r2,-32(fp)
 180aad4:	10bfff04 	addi	r2,r2,-4
 180aad8:	e0bff815 	stw	r2,-32(fp)
 180aadc:	e0bff817 	ldw	r2,-32(fp)
 180aae0:	1004403a 	cmpge	r2,r2,zero
 180aae4:	103fe51e 	bne	r2,zero,180aa7c <alt_printf+0x13c>
 180aae8:	00001a06 	br	180ab54 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 180aaec:	e0bffc07 	ldb	r2,-16(fp)
 180aaf0:	10801cd8 	cmpnei	r2,r2,115
 180aaf4:	1000171e 	bne	r2,zero,180ab54 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 180aaf8:	e0fffe17 	ldw	r3,-8(fp)
 180aafc:	18800104 	addi	r2,r3,4
 180ab00:	e0bffe15 	stw	r2,-8(fp)
 180ab04:	1805883a 	mov	r2,r3
 180ab08:	10800017 	ldw	r2,0(r2)
 180ab0c:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
 180ab10:	00000906 	br	180ab38 <alt_printf+0x1f8>
                      alt_putchar(*s++);
 180ab14:	e0bff717 	ldw	r2,-36(fp)
 180ab18:	10800003 	ldbu	r2,0(r2)
 180ab1c:	11003fcc 	andi	r4,r2,255
 180ab20:	2100201c 	xori	r4,r4,128
 180ab24:	213fe004 	addi	r4,r4,-128
 180ab28:	e0bff717 	ldw	r2,-36(fp)
 180ab2c:	10800044 	addi	r2,r2,1
 180ab30:	e0bff715 	stw	r2,-36(fp)
 180ab34:	180ab980 	call	180ab98 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 180ab38:	e0bff717 	ldw	r2,-36(fp)
 180ab3c:	10800003 	ldbu	r2,0(r2)
 180ab40:	10803fcc 	andi	r2,r2,255
 180ab44:	1080201c 	xori	r2,r2,128
 180ab48:	10bfe004 	addi	r2,r2,-128
 180ab4c:	1004c03a 	cmpne	r2,r2,zero
 180ab50:	103ff01e 	bne	r2,zero,180ab14 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 180ab54:	e0bffd17 	ldw	r2,-12(fp)
 180ab58:	10800003 	ldbu	r2,0(r2)
 180ab5c:	e0bffc05 	stb	r2,-16(fp)
 180ab60:	e0bffc07 	ldb	r2,-16(fp)
 180ab64:	1004c03a 	cmpne	r2,r2,zero
 180ab68:	1007883a 	mov	r3,r2
 180ab6c:	e0bffd17 	ldw	r2,-12(fp)
 180ab70:	10800044 	addi	r2,r2,1
 180ab74:	e0bffd15 	stw	r2,-12(fp)
 180ab78:	18803fcc 	andi	r2,r3,255
 180ab7c:	1004c03a 	cmpne	r2,r2,zero
 180ab80:	103f7c1e 	bne	r2,zero,180a974 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
 180ab84:	e037883a 	mov	sp,fp
 180ab88:	dfc00117 	ldw	ra,4(sp)
 180ab8c:	df000017 	ldw	fp,0(sp)
 180ab90:	dec00504 	addi	sp,sp,20
 180ab94:	f800283a 	ret

0180ab98 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 180ab98:	defffd04 	addi	sp,sp,-12
 180ab9c:	dfc00215 	stw	ra,8(sp)
 180aba0:	df000115 	stw	fp,4(sp)
 180aba4:	df000104 	addi	fp,sp,4
 180aba8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 180abac:	00806074 	movhi	r2,385
 180abb0:	10be1104 	addi	r2,r2,-1980
 180abb4:	10800017 	ldw	r2,0(r2)
 180abb8:	11400217 	ldw	r5,8(r2)
 180abbc:	e13fff17 	ldw	r4,-4(fp)
 180abc0:	180d22c0 	call	180d22c <putc>
#endif
}
 180abc4:	e037883a 	mov	sp,fp
 180abc8:	dfc00117 	ldw	ra,4(sp)
 180abcc:	df000017 	ldw	fp,0(sp)
 180abd0:	dec00204 	addi	sp,sp,8
 180abd4:	f800283a 	ret

0180abd8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 180abd8:	defff704 	addi	sp,sp,-36
 180abdc:	dfc00815 	stw	ra,32(sp)
 180abe0:	df000715 	stw	fp,28(sp)
 180abe4:	df000704 	addi	fp,sp,28
 180abe8:	e13ffb15 	stw	r4,-20(fp)
 180abec:	e17ffc15 	stw	r5,-16(fp)
 180abf0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 180abf4:	e0bffb17 	ldw	r2,-20(fp)
 180abf8:	1004803a 	cmplt	r2,r2,zero
 180abfc:	1000091e 	bne	r2,zero,180ac24 <read+0x4c>
 180ac00:	e13ffb17 	ldw	r4,-20(fp)
 180ac04:	01400304 	movi	r5,12
 180ac08:	1809b7c0 	call	1809b7c <__mulsi3>
 180ac0c:	1007883a 	mov	r3,r2
 180ac10:	00806074 	movhi	r2,385
 180ac14:	10b96d04 	addi	r2,r2,-6732
 180ac18:	1887883a 	add	r3,r3,r2
 180ac1c:	e0ffff15 	stw	r3,-4(fp)
 180ac20:	00000106 	br	180ac28 <read+0x50>
 180ac24:	e03fff15 	stw	zero,-4(fp)
 180ac28:	e0bfff17 	ldw	r2,-4(fp)
 180ac2c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 180ac30:	e0bffa17 	ldw	r2,-24(fp)
 180ac34:	1005003a 	cmpeq	r2,r2,zero
 180ac38:	1000241e 	bne	r2,zero,180accc <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 180ac3c:	e0bffa17 	ldw	r2,-24(fp)
 180ac40:	10800217 	ldw	r2,8(r2)
 180ac44:	108000cc 	andi	r2,r2,3
 180ac48:	10800060 	cmpeqi	r2,r2,1
 180ac4c:	10001a1e 	bne	r2,zero,180acb8 <read+0xe0>
 180ac50:	e0bffa17 	ldw	r2,-24(fp)
 180ac54:	10800017 	ldw	r2,0(r2)
 180ac58:	10800517 	ldw	r2,20(r2)
 180ac5c:	1005003a 	cmpeq	r2,r2,zero
 180ac60:	1000151e 	bne	r2,zero,180acb8 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 180ac64:	e0bffa17 	ldw	r2,-24(fp)
 180ac68:	10800017 	ldw	r2,0(r2)
 180ac6c:	10800517 	ldw	r2,20(r2)
 180ac70:	e17ffc17 	ldw	r5,-16(fp)
 180ac74:	e1bffd17 	ldw	r6,-12(fp)
 180ac78:	e13ffa17 	ldw	r4,-24(fp)
 180ac7c:	103ee83a 	callr	r2
 180ac80:	e0bff915 	stw	r2,-28(fp)
 180ac84:	e0bff917 	ldw	r2,-28(fp)
 180ac88:	1004403a 	cmpge	r2,r2,zero
 180ac8c:	1000071e 	bne	r2,zero,180acac <read+0xd4>
        {
          ALT_ERRNO = -rval;
 180ac90:	180acfc0 	call	180acfc <alt_get_errno>
 180ac94:	e0fff917 	ldw	r3,-28(fp)
 180ac98:	00c7c83a 	sub	r3,zero,r3
 180ac9c:	10c00015 	stw	r3,0(r2)
          return -1;
 180aca0:	00bfffc4 	movi	r2,-1
 180aca4:	e0bffe15 	stw	r2,-8(fp)
 180aca8:	00000e06 	br	180ace4 <read+0x10c>
        }
        return rval;
 180acac:	e0bff917 	ldw	r2,-28(fp)
 180acb0:	e0bffe15 	stw	r2,-8(fp)
 180acb4:	00000b06 	br	180ace4 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 180acb8:	180acfc0 	call	180acfc <alt_get_errno>
 180acbc:	1007883a 	mov	r3,r2
 180acc0:	00800344 	movi	r2,13
 180acc4:	18800015 	stw	r2,0(r3)
 180acc8:	00000406 	br	180acdc <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 180accc:	180acfc0 	call	180acfc <alt_get_errno>
 180acd0:	1007883a 	mov	r3,r2
 180acd4:	00801444 	movi	r2,81
 180acd8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 180acdc:	00bfffc4 	movi	r2,-1
 180ace0:	e0bffe15 	stw	r2,-8(fp)
 180ace4:	e0bffe17 	ldw	r2,-8(fp)
}
 180ace8:	e037883a 	mov	sp,fp
 180acec:	dfc00117 	ldw	ra,4(sp)
 180acf0:	df000017 	ldw	fp,0(sp)
 180acf4:	dec00204 	addi	sp,sp,8
 180acf8:	f800283a 	ret

0180acfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 180acfc:	defffd04 	addi	sp,sp,-12
 180ad00:	dfc00215 	stw	ra,8(sp)
 180ad04:	df000115 	stw	fp,4(sp)
 180ad08:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 180ad0c:	00806074 	movhi	r2,385
 180ad10:	10be1c04 	addi	r2,r2,-1936
 180ad14:	10800017 	ldw	r2,0(r2)
 180ad18:	1005003a 	cmpeq	r2,r2,zero
 180ad1c:	1000061e 	bne	r2,zero,180ad38 <alt_get_errno+0x3c>
 180ad20:	00806074 	movhi	r2,385
 180ad24:	10be1c04 	addi	r2,r2,-1936
 180ad28:	10800017 	ldw	r2,0(r2)
 180ad2c:	103ee83a 	callr	r2
 180ad30:	e0bfff15 	stw	r2,-4(fp)
 180ad34:	00000306 	br	180ad44 <alt_get_errno+0x48>
 180ad38:	00806074 	movhi	r2,385
 180ad3c:	1084ea04 	addi	r2,r2,5032
 180ad40:	e0bfff15 	stw	r2,-4(fp)
 180ad44:	e0bfff17 	ldw	r2,-4(fp)
}
 180ad48:	e037883a 	mov	sp,fp
 180ad4c:	dfc00117 	ldw	ra,4(sp)
 180ad50:	df000017 	ldw	fp,0(sp)
 180ad54:	dec00204 	addi	sp,sp,8
 180ad58:	f800283a 	ret

0180ad5c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 180ad5c:	defffc04 	addi	sp,sp,-16
 180ad60:	dfc00315 	stw	ra,12(sp)
 180ad64:	df000215 	stw	fp,8(sp)
 180ad68:	dc000115 	stw	r16,4(sp)
 180ad6c:	df000104 	addi	fp,sp,4
 180ad70:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 180ad74:	e0bfff17 	ldw	r2,-4(fp)
 180ad78:	108000d0 	cmplti	r2,r2,3
 180ad7c:	10000f1e 	bne	r2,zero,180adbc <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 180ad80:	e13fff17 	ldw	r4,-4(fp)
 180ad84:	04006074 	movhi	r16,385
 180ad88:	84396d04 	addi	r16,r16,-6732
 180ad8c:	01400304 	movi	r5,12
 180ad90:	1809b7c0 	call	1809b7c <__mulsi3>
 180ad94:	1405883a 	add	r2,r2,r16
 180ad98:	10800204 	addi	r2,r2,8
 180ad9c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 180ada0:	e13fff17 	ldw	r4,-4(fp)
 180ada4:	04006074 	movhi	r16,385
 180ada8:	84396d04 	addi	r16,r16,-6732
 180adac:	01400304 	movi	r5,12
 180adb0:	1809b7c0 	call	1809b7c <__mulsi3>
 180adb4:	1405883a 	add	r2,r2,r16
 180adb8:	10000015 	stw	zero,0(r2)
  }
}
 180adbc:	e037883a 	mov	sp,fp
 180adc0:	dfc00217 	ldw	ra,8(sp)
 180adc4:	df000117 	ldw	fp,4(sp)
 180adc8:	dc000017 	ldw	r16,0(sp)
 180adcc:	dec00304 	addi	sp,sp,12
 180add0:	f800283a 	ret

0180add4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 180add4:	defff804 	addi	sp,sp,-32
 180add8:	df000715 	stw	fp,28(sp)
 180addc:	df000704 	addi	fp,sp,28
 180ade0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 180ade4:	0005303a 	rdctl	r2,status
 180ade8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 180adec:	e0fffb17 	ldw	r3,-20(fp)
 180adf0:	00bfff84 	movi	r2,-2
 180adf4:	1884703a 	and	r2,r3,r2
 180adf8:	1001703a 	wrctl	status,r2
  
  return context;
 180adfc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 180ae00:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 180ae04:	d0a00c17 	ldw	r2,-32720(gp)
 180ae08:	10c000c4 	addi	r3,r2,3
 180ae0c:	00bfff04 	movi	r2,-4
 180ae10:	1884703a 	and	r2,r3,r2
 180ae14:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 180ae18:	d0e00c17 	ldw	r3,-32720(gp)
 180ae1c:	e0bffe17 	ldw	r2,-8(fp)
 180ae20:	1887883a 	add	r3,r3,r2
 180ae24:	00808034 	movhi	r2,512
 180ae28:	10800004 	addi	r2,r2,0
 180ae2c:	10c0072e 	bgeu	r2,r3,180ae4c <sbrk+0x78>
 180ae30:	e0bffd17 	ldw	r2,-12(fp)
 180ae34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 180ae38:	e0bffa17 	ldw	r2,-24(fp)
 180ae3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 180ae40:	00bfffc4 	movi	r2,-1
 180ae44:	e0bfff15 	stw	r2,-4(fp)
 180ae48:	00000c06 	br	180ae7c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 180ae4c:	d0a00c17 	ldw	r2,-32720(gp)
 180ae50:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 180ae54:	d0e00c17 	ldw	r3,-32720(gp)
 180ae58:	e0bffe17 	ldw	r2,-8(fp)
 180ae5c:	1885883a 	add	r2,r3,r2
 180ae60:	d0a00c15 	stw	r2,-32720(gp)
 180ae64:	e0bffd17 	ldw	r2,-12(fp)
 180ae68:	e0bff915 	stw	r2,-28(fp)
 180ae6c:	e0bff917 	ldw	r2,-28(fp)
 180ae70:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 180ae74:	e0bffc17 	ldw	r2,-16(fp)
 180ae78:	e0bfff15 	stw	r2,-4(fp)
 180ae7c:	e0bfff17 	ldw	r2,-4(fp)
} 
 180ae80:	e037883a 	mov	sp,fp
 180ae84:	df000017 	ldw	fp,0(sp)
 180ae88:	dec00104 	addi	sp,sp,4
 180ae8c:	f800283a 	ret

0180ae90 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 180ae90:	defff704 	addi	sp,sp,-36
 180ae94:	dfc00815 	stw	ra,32(sp)
 180ae98:	df000715 	stw	fp,28(sp)
 180ae9c:	df000704 	addi	fp,sp,28
 180aea0:	e13ffb15 	stw	r4,-20(fp)
 180aea4:	e17ffc15 	stw	r5,-16(fp)
 180aea8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 180aeac:	e0bffb17 	ldw	r2,-20(fp)
 180aeb0:	1004803a 	cmplt	r2,r2,zero
 180aeb4:	1000091e 	bne	r2,zero,180aedc <write+0x4c>
 180aeb8:	e13ffb17 	ldw	r4,-20(fp)
 180aebc:	01400304 	movi	r5,12
 180aec0:	1809b7c0 	call	1809b7c <__mulsi3>
 180aec4:	1007883a 	mov	r3,r2
 180aec8:	00806074 	movhi	r2,385
 180aecc:	10b96d04 	addi	r2,r2,-6732
 180aed0:	1887883a 	add	r3,r3,r2
 180aed4:	e0ffff15 	stw	r3,-4(fp)
 180aed8:	00000106 	br	180aee0 <write+0x50>
 180aedc:	e03fff15 	stw	zero,-4(fp)
 180aee0:	e0bfff17 	ldw	r2,-4(fp)
 180aee4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 180aee8:	e0bffa17 	ldw	r2,-24(fp)
 180aeec:	1005003a 	cmpeq	r2,r2,zero
 180aef0:	1000241e 	bne	r2,zero,180af84 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 180aef4:	e0bffa17 	ldw	r2,-24(fp)
 180aef8:	10800217 	ldw	r2,8(r2)
 180aefc:	108000cc 	andi	r2,r2,3
 180af00:	1005003a 	cmpeq	r2,r2,zero
 180af04:	10001a1e 	bne	r2,zero,180af70 <write+0xe0>
 180af08:	e0bffa17 	ldw	r2,-24(fp)
 180af0c:	10800017 	ldw	r2,0(r2)
 180af10:	10800617 	ldw	r2,24(r2)
 180af14:	1005003a 	cmpeq	r2,r2,zero
 180af18:	1000151e 	bne	r2,zero,180af70 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 180af1c:	e0bffa17 	ldw	r2,-24(fp)
 180af20:	10800017 	ldw	r2,0(r2)
 180af24:	10800617 	ldw	r2,24(r2)
 180af28:	e17ffc17 	ldw	r5,-16(fp)
 180af2c:	e1bffd17 	ldw	r6,-12(fp)
 180af30:	e13ffa17 	ldw	r4,-24(fp)
 180af34:	103ee83a 	callr	r2
 180af38:	e0bff915 	stw	r2,-28(fp)
 180af3c:	e0bff917 	ldw	r2,-28(fp)
 180af40:	1004403a 	cmpge	r2,r2,zero
 180af44:	1000071e 	bne	r2,zero,180af64 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 180af48:	180afb40 	call	180afb4 <alt_get_errno>
 180af4c:	e0fff917 	ldw	r3,-28(fp)
 180af50:	00c7c83a 	sub	r3,zero,r3
 180af54:	10c00015 	stw	r3,0(r2)
        return -1;
 180af58:	00bfffc4 	movi	r2,-1
 180af5c:	e0bffe15 	stw	r2,-8(fp)
 180af60:	00000e06 	br	180af9c <write+0x10c>
      }
      return rval;
 180af64:	e0bff917 	ldw	r2,-28(fp)
 180af68:	e0bffe15 	stw	r2,-8(fp)
 180af6c:	00000b06 	br	180af9c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 180af70:	180afb40 	call	180afb4 <alt_get_errno>
 180af74:	1007883a 	mov	r3,r2
 180af78:	00800344 	movi	r2,13
 180af7c:	18800015 	stw	r2,0(r3)
 180af80:	00000406 	br	180af94 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 180af84:	180afb40 	call	180afb4 <alt_get_errno>
 180af88:	1007883a 	mov	r3,r2
 180af8c:	00801444 	movi	r2,81
 180af90:	18800015 	stw	r2,0(r3)
  }
  return -1;
 180af94:	00bfffc4 	movi	r2,-1
 180af98:	e0bffe15 	stw	r2,-8(fp)
 180af9c:	e0bffe17 	ldw	r2,-8(fp)
}
 180afa0:	e037883a 	mov	sp,fp
 180afa4:	dfc00117 	ldw	ra,4(sp)
 180afa8:	df000017 	ldw	fp,0(sp)
 180afac:	dec00204 	addi	sp,sp,8
 180afb0:	f800283a 	ret

0180afb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 180afb4:	defffd04 	addi	sp,sp,-12
 180afb8:	dfc00215 	stw	ra,8(sp)
 180afbc:	df000115 	stw	fp,4(sp)
 180afc0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 180afc4:	00806074 	movhi	r2,385
 180afc8:	10be1c04 	addi	r2,r2,-1936
 180afcc:	10800017 	ldw	r2,0(r2)
 180afd0:	1005003a 	cmpeq	r2,r2,zero
 180afd4:	1000061e 	bne	r2,zero,180aff0 <alt_get_errno+0x3c>
 180afd8:	00806074 	movhi	r2,385
 180afdc:	10be1c04 	addi	r2,r2,-1936
 180afe0:	10800017 	ldw	r2,0(r2)
 180afe4:	103ee83a 	callr	r2
 180afe8:	e0bfff15 	stw	r2,-4(fp)
 180afec:	00000306 	br	180affc <alt_get_errno+0x48>
 180aff0:	00806074 	movhi	r2,385
 180aff4:	1084ea04 	addi	r2,r2,5032
 180aff8:	e0bfff15 	stw	r2,-4(fp)
 180affc:	e0bfff17 	ldw	r2,-4(fp)
}
 180b000:	e037883a 	mov	sp,fp
 180b004:	dfc00117 	ldw	ra,4(sp)
 180b008:	df000017 	ldw	fp,0(sp)
 180b00c:	dec00204 	addi	sp,sp,8
 180b010:	f800283a 	ret

0180b014 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 180b014:	defffd04 	addi	sp,sp,-12
 180b018:	dfc00215 	stw	ra,8(sp)
 180b01c:	df000115 	stw	fp,4(sp)
 180b020:	df000104 	addi	fp,sp,4
 180b024:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
 180b028:	180cf5c0 	call	180cf5c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 180b02c:	00800044 	movi	r2,1
 180b030:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 180b034:	e037883a 	mov	sp,fp
 180b038:	dfc00117 	ldw	ra,4(sp)
 180b03c:	df000017 	ldw	fp,0(sp)
 180b040:	dec00204 	addi	sp,sp,8
 180b044:	f800283a 	ret

0180b048 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 180b048:	defffd04 	addi	sp,sp,-12
 180b04c:	dfc00215 	stw	ra,8(sp)
 180b050:	df000115 	stw	fp,4(sp)
 180b054:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 180b058:	01006074 	movhi	r4,385
 180b05c:	2139d704 	addi	r4,r4,-6308
 180b060:	000b883a 	mov	r5,zero
 180b064:	000d883a 	mov	r6,zero
 180b068:	180b4280 	call	180b428 <altera_avalon_jtag_uart_init>
 180b06c:	01006074 	movhi	r4,385
 180b070:	2139cd04 	addi	r4,r4,-6348
 180b074:	180b2a80 	call	180b2a8 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
 180b078:	01006074 	movhi	r4,385
 180b07c:	213de504 	addi	r4,r4,-2156
 180b080:	180b2a80 	call	180b2a8 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 180b084:	01006074 	movhi	r4,385
 180b088:	213df104 	addi	r4,r4,-2108
 180b08c:	180be3c0 	call	180be3c <alt_up_character_lcd_init>
 180b090:	01006074 	movhi	r4,385
 180b094:	213df104 	addi	r4,r4,-2108
 180b098:	180b2a80 	call	180b2a8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, Pixel_Buffer_DMA);
 180b09c:	00806074 	movhi	r2,385
 180b0a0:	10bdfc04 	addi	r2,r2,-2064
 180b0a4:	10800a17 	ldw	r2,40(r2)
 180b0a8:	10800017 	ldw	r2,0(r2)
 180b0ac:	1007883a 	mov	r3,r2
 180b0b0:	00806074 	movhi	r2,385
 180b0b4:	10bdfc04 	addi	r2,r2,-2064
 180b0b8:	10c00b15 	stw	r3,44(r2)
 180b0bc:	00806074 	movhi	r2,385
 180b0c0:	10bdfc04 	addi	r2,r2,-2064
 180b0c4:	10800a17 	ldw	r2,40(r2)
 180b0c8:	10800104 	addi	r2,r2,4
 180b0cc:	10800017 	ldw	r2,0(r2)
 180b0d0:	1007883a 	mov	r3,r2
 180b0d4:	00806074 	movhi	r2,385
 180b0d8:	10bdfc04 	addi	r2,r2,-2064
 180b0dc:	10c00c15 	stw	r3,48(r2)
 180b0e0:	00806074 	movhi	r2,385
 180b0e4:	10bdfc04 	addi	r2,r2,-2064
 180b0e8:	10800a17 	ldw	r2,40(r2)
 180b0ec:	10800204 	addi	r2,r2,8
 180b0f0:	10800017 	ldw	r2,0(r2)
 180b0f4:	10ffffcc 	andi	r3,r2,65535
 180b0f8:	00806074 	movhi	r2,385
 180b0fc:	10bdfc04 	addi	r2,r2,-2064
 180b100:	10c00f15 	stw	r3,60(r2)
 180b104:	00806074 	movhi	r2,385
 180b108:	10bdfc04 	addi	r2,r2,-2064
 180b10c:	10800a17 	ldw	r2,40(r2)
 180b110:	10800204 	addi	r2,r2,8
 180b114:	10800017 	ldw	r2,0(r2)
 180b118:	1005d43a 	srai	r2,r2,16
 180b11c:	10ffffcc 	andi	r3,r2,65535
 180b120:	00806074 	movhi	r2,385
 180b124:	10bdfc04 	addi	r2,r2,-2064
 180b128:	10c01015 	stw	r3,64(r2)
 180b12c:	00806074 	movhi	r2,385
 180b130:	10bdfc04 	addi	r2,r2,-2064
 180b134:	10800a17 	ldw	r2,40(r2)
 180b138:	10800304 	addi	r2,r2,12
 180b13c:	10800017 	ldw	r2,0(r2)
 180b140:	1005d07a 	srai	r2,r2,1
 180b144:	10c0004c 	andi	r3,r2,1
 180b148:	00806074 	movhi	r2,385
 180b14c:	10bdfc04 	addi	r2,r2,-2064
 180b150:	10c00d15 	stw	r3,52(r2)
 180b154:	00806074 	movhi	r2,385
 180b158:	10bdfc04 	addi	r2,r2,-2064
 180b15c:	10800a17 	ldw	r2,40(r2)
 180b160:	10800304 	addi	r2,r2,12
 180b164:	10800017 	ldw	r2,0(r2)
 180b168:	1005d13a 	srai	r2,r2,4
 180b16c:	10c003cc 	andi	r3,r2,15
 180b170:	00806074 	movhi	r2,385
 180b174:	10bdfc04 	addi	r2,r2,-2064
 180b178:	10c00e15 	stw	r3,56(r2)
 180b17c:	00806074 	movhi	r2,385
 180b180:	10bdfc04 	addi	r2,r2,-2064
 180b184:	10800a17 	ldw	r2,40(r2)
 180b188:	10800304 	addi	r2,r2,12
 180b18c:	10800017 	ldw	r2,0(r2)
 180b190:	1005d43a 	srai	r2,r2,16
 180b194:	1007883a 	mov	r3,r2
 180b198:	00bfffc4 	movi	r2,-1
 180b19c:	1884703a 	and	r2,r3,r2
 180b1a0:	e0bfff45 	stb	r2,-3(fp)
 180b1a4:	00806074 	movhi	r2,385
 180b1a8:	10bdfc04 	addi	r2,r2,-2064
 180b1ac:	10800a17 	ldw	r2,40(r2)
 180b1b0:	10800304 	addi	r2,r2,12
 180b1b4:	10800017 	ldw	r2,0(r2)
 180b1b8:	1005d63a 	srai	r2,r2,24
 180b1bc:	1007883a 	mov	r3,r2
 180b1c0:	00bfffc4 	movi	r2,-1
 180b1c4:	1884703a 	and	r2,r3,r2
 180b1c8:	e0bfff05 	stb	r2,-4(fp)
 180b1cc:	00806074 	movhi	r2,385
 180b1d0:	10bdfc04 	addi	r2,r2,-2064
 180b1d4:	10800e17 	ldw	r2,56(r2)
 180b1d8:	10800058 	cmpnei	r2,r2,1
 180b1dc:	1000041e 	bne	r2,zero,180b1f0 <alt_sys_init+0x1a8>
 180b1e0:	00806074 	movhi	r2,385
 180b1e4:	10bdfc04 	addi	r2,r2,-2064
 180b1e8:	10001115 	stw	zero,68(r2)
 180b1ec:	00000e06 	br	180b228 <alt_sys_init+0x1e0>
 180b1f0:	00806074 	movhi	r2,385
 180b1f4:	10bdfc04 	addi	r2,r2,-2064
 180b1f8:	10800e17 	ldw	r2,56(r2)
 180b1fc:	10800098 	cmpnei	r2,r2,2
 180b200:	1000051e 	bne	r2,zero,180b218 <alt_sys_init+0x1d0>
 180b204:	00c06074 	movhi	r3,385
 180b208:	18fdfc04 	addi	r3,r3,-2064
 180b20c:	00800044 	movi	r2,1
 180b210:	18801115 	stw	r2,68(r3)
 180b214:	00000406 	br	180b228 <alt_sys_init+0x1e0>
 180b218:	00c06074 	movhi	r3,385
 180b21c:	18fdfc04 	addi	r3,r3,-2064
 180b220:	00800084 	movi	r2,2
 180b224:	18801115 	stw	r2,68(r3)
 180b228:	e0ffff43 	ldbu	r3,-3(fp)
 180b22c:	00800804 	movi	r2,32
 180b230:	10c7c83a 	sub	r3,r2,r3
 180b234:	00bfffc4 	movi	r2,-1
 180b238:	10c6d83a 	srl	r3,r2,r3
 180b23c:	00806074 	movhi	r2,385
 180b240:	10bdfc04 	addi	r2,r2,-2064
 180b244:	10c01215 	stw	r3,72(r2)
 180b248:	e0ffff43 	ldbu	r3,-3(fp)
 180b24c:	00806074 	movhi	r2,385
 180b250:	10bdfc04 	addi	r2,r2,-2064
 180b254:	10801117 	ldw	r2,68(r2)
 180b258:	1887883a 	add	r3,r3,r2
 180b25c:	00806074 	movhi	r2,385
 180b260:	10bdfc04 	addi	r2,r2,-2064
 180b264:	10c01315 	stw	r3,76(r2)
 180b268:	e0ffff03 	ldbu	r3,-4(fp)
 180b26c:	00800804 	movi	r2,32
 180b270:	10c7c83a 	sub	r3,r2,r3
 180b274:	00bfffc4 	movi	r2,-1
 180b278:	10c6d83a 	srl	r3,r2,r3
 180b27c:	00806074 	movhi	r2,385
 180b280:	10bdfc04 	addi	r2,r2,-2064
 180b284:	10c01415 	stw	r3,80(r2)
 180b288:	01006074 	movhi	r4,385
 180b28c:	213dfc04 	addi	r4,r4,-2064
 180b290:	180b2a80 	call	180b2a8 <alt_dev_reg>
}
 180b294:	e037883a 	mov	sp,fp
 180b298:	dfc00117 	ldw	ra,4(sp)
 180b29c:	df000017 	ldw	fp,0(sp)
 180b2a0:	dec00204 	addi	sp,sp,8
 180b2a4:	f800283a 	ret

0180b2a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 180b2a8:	defffd04 	addi	sp,sp,-12
 180b2ac:	dfc00215 	stw	ra,8(sp)
 180b2b0:	df000115 	stw	fp,4(sp)
 180b2b4:	df000104 	addi	fp,sp,4
 180b2b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 180b2bc:	e13fff17 	ldw	r4,-4(fp)
 180b2c0:	01406074 	movhi	r5,385
 180b2c4:	297e1904 	addi	r5,r5,-1948
 180b2c8:	180c42c0 	call	180c42c <alt_dev_llist_insert>
}
 180b2cc:	e037883a 	mov	sp,fp
 180b2d0:	dfc00117 	ldw	ra,4(sp)
 180b2d4:	df000017 	ldw	fp,0(sp)
 180b2d8:	dec00204 	addi	sp,sp,8
 180b2dc:	f800283a 	ret

0180b2e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 180b2e0:	defffa04 	addi	sp,sp,-24
 180b2e4:	dfc00515 	stw	ra,20(sp)
 180b2e8:	df000415 	stw	fp,16(sp)
 180b2ec:	df000404 	addi	fp,sp,16
 180b2f0:	e13ffd15 	stw	r4,-12(fp)
 180b2f4:	e17ffe15 	stw	r5,-8(fp)
 180b2f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 180b2fc:	e0bffd17 	ldw	r2,-12(fp)
 180b300:	10800017 	ldw	r2,0(r2)
 180b304:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 180b308:	e0bffc17 	ldw	r2,-16(fp)
 180b30c:	11000a04 	addi	r4,r2,40
 180b310:	e0bffd17 	ldw	r2,-12(fp)
 180b314:	11c00217 	ldw	r7,8(r2)
 180b318:	e17ffe17 	ldw	r5,-8(fp)
 180b31c:	e1bfff17 	ldw	r6,-4(fp)
 180b320:	180b9280 	call	180b928 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 180b324:	e037883a 	mov	sp,fp
 180b328:	dfc00117 	ldw	ra,4(sp)
 180b32c:	df000017 	ldw	fp,0(sp)
 180b330:	dec00204 	addi	sp,sp,8
 180b334:	f800283a 	ret

0180b338 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 180b338:	defffa04 	addi	sp,sp,-24
 180b33c:	dfc00515 	stw	ra,20(sp)
 180b340:	df000415 	stw	fp,16(sp)
 180b344:	df000404 	addi	fp,sp,16
 180b348:	e13ffd15 	stw	r4,-12(fp)
 180b34c:	e17ffe15 	stw	r5,-8(fp)
 180b350:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 180b354:	e0bffd17 	ldw	r2,-12(fp)
 180b358:	10800017 	ldw	r2,0(r2)
 180b35c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 180b360:	e0bffc17 	ldw	r2,-16(fp)
 180b364:	11000a04 	addi	r4,r2,40
 180b368:	e0bffd17 	ldw	r2,-12(fp)
 180b36c:	11c00217 	ldw	r7,8(r2)
 180b370:	e17ffe17 	ldw	r5,-8(fp)
 180b374:	e1bfff17 	ldw	r6,-4(fp)
 180b378:	180bb4c0 	call	180bb4c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 180b37c:	e037883a 	mov	sp,fp
 180b380:	dfc00117 	ldw	ra,4(sp)
 180b384:	df000017 	ldw	fp,0(sp)
 180b388:	dec00204 	addi	sp,sp,8
 180b38c:	f800283a 	ret

0180b390 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 180b390:	defffc04 	addi	sp,sp,-16
 180b394:	dfc00315 	stw	ra,12(sp)
 180b398:	df000215 	stw	fp,8(sp)
 180b39c:	df000204 	addi	fp,sp,8
 180b3a0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 180b3a4:	e0bfff17 	ldw	r2,-4(fp)
 180b3a8:	10800017 	ldw	r2,0(r2)
 180b3ac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 180b3b0:	e0bffe17 	ldw	r2,-8(fp)
 180b3b4:	11000a04 	addi	r4,r2,40
 180b3b8:	e0bfff17 	ldw	r2,-4(fp)
 180b3bc:	11400217 	ldw	r5,8(r2)
 180b3c0:	180b7c00 	call	180b7c0 <altera_avalon_jtag_uart_close>
}
 180b3c4:	e037883a 	mov	sp,fp
 180b3c8:	dfc00117 	ldw	ra,4(sp)
 180b3cc:	df000017 	ldw	fp,0(sp)
 180b3d0:	dec00204 	addi	sp,sp,8
 180b3d4:	f800283a 	ret

0180b3d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 180b3d8:	defffa04 	addi	sp,sp,-24
 180b3dc:	dfc00515 	stw	ra,20(sp)
 180b3e0:	df000415 	stw	fp,16(sp)
 180b3e4:	df000404 	addi	fp,sp,16
 180b3e8:	e13ffd15 	stw	r4,-12(fp)
 180b3ec:	e17ffe15 	stw	r5,-8(fp)
 180b3f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 180b3f4:	e0bffd17 	ldw	r2,-12(fp)
 180b3f8:	10800017 	ldw	r2,0(r2)
 180b3fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 180b400:	e0bffc17 	ldw	r2,-16(fp)
 180b404:	11000a04 	addi	r4,r2,40
 180b408:	e17ffe17 	ldw	r5,-8(fp)
 180b40c:	e1bfff17 	ldw	r6,-4(fp)
 180b410:	180b8340 	call	180b834 <altera_avalon_jtag_uart_ioctl>
}
 180b414:	e037883a 	mov	sp,fp
 180b418:	dfc00117 	ldw	ra,4(sp)
 180b41c:	df000017 	ldw	fp,0(sp)
 180b420:	dec00204 	addi	sp,sp,8
 180b424:	f800283a 	ret

0180b428 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 180b428:	defffa04 	addi	sp,sp,-24
 180b42c:	dfc00515 	stw	ra,20(sp)
 180b430:	df000415 	stw	fp,16(sp)
 180b434:	df000404 	addi	fp,sp,16
 180b438:	e13ffd15 	stw	r4,-12(fp)
 180b43c:	e17ffe15 	stw	r5,-8(fp)
 180b440:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 180b444:	e0fffd17 	ldw	r3,-12(fp)
 180b448:	00800044 	movi	r2,1
 180b44c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 180b450:	e0bffd17 	ldw	r2,-12(fp)
 180b454:	10800017 	ldw	r2,0(r2)
 180b458:	11000104 	addi	r4,r2,4
 180b45c:	e0bffd17 	ldw	r2,-12(fp)
 180b460:	10800817 	ldw	r2,32(r2)
 180b464:	1007883a 	mov	r3,r2
 180b468:	2005883a 	mov	r2,r4
 180b46c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 180b470:	e13ffe17 	ldw	r4,-8(fp)
 180b474:	e17fff17 	ldw	r5,-4(fp)
 180b478:	d8000015 	stw	zero,0(sp)
 180b47c:	01806074 	movhi	r6,385
 180b480:	31ad3a04 	addi	r6,r6,-19224
 180b484:	e1fffd17 	ldw	r7,-12(fp)
 180b488:	180c6b80 	call	180c6b8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 180b48c:	e0bffd17 	ldw	r2,-12(fp)
 180b490:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 180b494:	e0bffd17 	ldw	r2,-12(fp)
 180b498:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 180b49c:	00806074 	movhi	r2,385
 180b4a0:	1084ef04 	addi	r2,r2,5052
 180b4a4:	10800017 	ldw	r2,0(r2)
 180b4a8:	100b883a 	mov	r5,r2
 180b4ac:	01806074 	movhi	r6,385
 180b4b0:	31adc404 	addi	r6,r6,-18672
 180b4b4:	e1fffd17 	ldw	r7,-12(fp)
 180b4b8:	180c2bc0 	call	180c2bc <alt_alarm_start>
 180b4bc:	1004403a 	cmpge	r2,r2,zero
 180b4c0:	1000041e 	bne	r2,zero,180b4d4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 180b4c4:	e0fffd17 	ldw	r3,-12(fp)
 180b4c8:	00a00034 	movhi	r2,32768
 180b4cc:	10bfffc4 	addi	r2,r2,-1
 180b4d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 180b4d4:	e037883a 	mov	sp,fp
 180b4d8:	dfc00117 	ldw	ra,4(sp)
 180b4dc:	df000017 	ldw	fp,0(sp)
 180b4e0:	dec00204 	addi	sp,sp,8
 180b4e4:	f800283a 	ret

0180b4e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 180b4e8:	defff804 	addi	sp,sp,-32
 180b4ec:	df000715 	stw	fp,28(sp)
 180b4f0:	df000704 	addi	fp,sp,28
 180b4f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 180b4f8:	e0bfff17 	ldw	r2,-4(fp)
 180b4fc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 180b500:	e0bffe17 	ldw	r2,-8(fp)
 180b504:	10800017 	ldw	r2,0(r2)
 180b508:	e0bffd15 	stw	r2,-12(fp)
 180b50c:	00000006 	br	180b510 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 180b510:	e0bffd17 	ldw	r2,-12(fp)
 180b514:	10800104 	addi	r2,r2,4
 180b518:	10800037 	ldwio	r2,0(r2)
 180b51c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 180b520:	e0bffc17 	ldw	r2,-16(fp)
 180b524:	1080c00c 	andi	r2,r2,768
 180b528:	1005003a 	cmpeq	r2,r2,zero
 180b52c:	1000741e 	bne	r2,zero,180b700 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 180b530:	e0bffc17 	ldw	r2,-16(fp)
 180b534:	1080400c 	andi	r2,r2,256
 180b538:	1005003a 	cmpeq	r2,r2,zero
 180b53c:	1000351e 	bne	r2,zero,180b614 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 180b540:	00800074 	movhi	r2,1
 180b544:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 180b548:	e0bffe17 	ldw	r2,-8(fp)
 180b54c:	10800a17 	ldw	r2,40(r2)
 180b550:	10800044 	addi	r2,r2,1
 180b554:	1081ffcc 	andi	r2,r2,2047
 180b558:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 180b55c:	e0bffe17 	ldw	r2,-8(fp)
 180b560:	10c00b17 	ldw	r3,44(r2)
 180b564:	e0bffa17 	ldw	r2,-24(fp)
 180b568:	18801626 	beq	r3,r2,180b5c4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 180b56c:	e0bffd17 	ldw	r2,-12(fp)
 180b570:	10800037 	ldwio	r2,0(r2)
 180b574:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 180b578:	e0bffb17 	ldw	r2,-20(fp)
 180b57c:	10a0000c 	andi	r2,r2,32768
 180b580:	1005003a 	cmpeq	r2,r2,zero
 180b584:	10000f1e 	bne	r2,zero,180b5c4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 180b588:	e0bffe17 	ldw	r2,-8(fp)
 180b58c:	10c00a17 	ldw	r3,40(r2)
 180b590:	e0bffb17 	ldw	r2,-20(fp)
 180b594:	1009883a 	mov	r4,r2
 180b598:	e0bffe17 	ldw	r2,-8(fp)
 180b59c:	1885883a 	add	r2,r3,r2
 180b5a0:	10800e04 	addi	r2,r2,56
 180b5a4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 180b5a8:	e0bffe17 	ldw	r2,-8(fp)
 180b5ac:	10800a17 	ldw	r2,40(r2)
 180b5b0:	10800044 	addi	r2,r2,1
 180b5b4:	10c1ffcc 	andi	r3,r2,2047
 180b5b8:	e0bffe17 	ldw	r2,-8(fp)
 180b5bc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 180b5c0:	003fe106 	br	180b548 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 180b5c4:	e0bffb17 	ldw	r2,-20(fp)
 180b5c8:	10bfffec 	andhi	r2,r2,65535
 180b5cc:	1005003a 	cmpeq	r2,r2,zero
 180b5d0:	1000101e 	bne	r2,zero,180b614 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 180b5d4:	e0bffe17 	ldw	r2,-8(fp)
 180b5d8:	10c00817 	ldw	r3,32(r2)
 180b5dc:	00bfff84 	movi	r2,-2
 180b5e0:	1886703a 	and	r3,r3,r2
 180b5e4:	e0bffe17 	ldw	r2,-8(fp)
 180b5e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 180b5ec:	e0bffd17 	ldw	r2,-12(fp)
 180b5f0:	11000104 	addi	r4,r2,4
 180b5f4:	e0bffe17 	ldw	r2,-8(fp)
 180b5f8:	10800817 	ldw	r2,32(r2)
 180b5fc:	1007883a 	mov	r3,r2
 180b600:	2005883a 	mov	r2,r4
 180b604:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 180b608:	e0bffd17 	ldw	r2,-12(fp)
 180b60c:	10800104 	addi	r2,r2,4
 180b610:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 180b614:	e0bffc17 	ldw	r2,-16(fp)
 180b618:	1080800c 	andi	r2,r2,512
 180b61c:	1005003a 	cmpeq	r2,r2,zero
 180b620:	103fbb1e 	bne	r2,zero,180b510 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 180b624:	e0bffc17 	ldw	r2,-16(fp)
 180b628:	10bfffec 	andhi	r2,r2,65535
 180b62c:	1004d43a 	srli	r2,r2,16
 180b630:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 180b634:	00001506 	br	180b68c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 180b638:	e13ffd17 	ldw	r4,-12(fp)
 180b63c:	e0bffe17 	ldw	r2,-8(fp)
 180b640:	10c00d17 	ldw	r3,52(r2)
 180b644:	e0bffe17 	ldw	r2,-8(fp)
 180b648:	1885883a 	add	r2,r3,r2
 180b64c:	10820e04 	addi	r2,r2,2104
 180b650:	10800003 	ldbu	r2,0(r2)
 180b654:	10c03fcc 	andi	r3,r2,255
 180b658:	18c0201c 	xori	r3,r3,128
 180b65c:	18ffe004 	addi	r3,r3,-128
 180b660:	2005883a 	mov	r2,r4
 180b664:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 180b668:	e0bffe17 	ldw	r2,-8(fp)
 180b66c:	10800d17 	ldw	r2,52(r2)
 180b670:	10800044 	addi	r2,r2,1
 180b674:	10c1ffcc 	andi	r3,r2,2047
 180b678:	e0bffe17 	ldw	r2,-8(fp)
 180b67c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 180b680:	e0bff917 	ldw	r2,-28(fp)
 180b684:	10bfffc4 	addi	r2,r2,-1
 180b688:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 180b68c:	e0bff917 	ldw	r2,-28(fp)
 180b690:	1005003a 	cmpeq	r2,r2,zero
 180b694:	1000051e 	bne	r2,zero,180b6ac <altera_avalon_jtag_uart_irq+0x1c4>
 180b698:	e0bffe17 	ldw	r2,-8(fp)
 180b69c:	10c00d17 	ldw	r3,52(r2)
 180b6a0:	e0bffe17 	ldw	r2,-8(fp)
 180b6a4:	10800c17 	ldw	r2,48(r2)
 180b6a8:	18bfe31e 	bne	r3,r2,180b638 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 180b6ac:	e0bff917 	ldw	r2,-28(fp)
 180b6b0:	1005003a 	cmpeq	r2,r2,zero
 180b6b4:	103f961e 	bne	r2,zero,180b510 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 180b6b8:	e0bffe17 	ldw	r2,-8(fp)
 180b6bc:	10c00817 	ldw	r3,32(r2)
 180b6c0:	00bfff44 	movi	r2,-3
 180b6c4:	1886703a 	and	r3,r3,r2
 180b6c8:	e0bffe17 	ldw	r2,-8(fp)
 180b6cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 180b6d0:	e0bffe17 	ldw	r2,-8(fp)
 180b6d4:	10800017 	ldw	r2,0(r2)
 180b6d8:	11000104 	addi	r4,r2,4
 180b6dc:	e0bffe17 	ldw	r2,-8(fp)
 180b6e0:	10800817 	ldw	r2,32(r2)
 180b6e4:	1007883a 	mov	r3,r2
 180b6e8:	2005883a 	mov	r2,r4
 180b6ec:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 180b6f0:	e0bffd17 	ldw	r2,-12(fp)
 180b6f4:	10800104 	addi	r2,r2,4
 180b6f8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 180b6fc:	003f8406 	br	180b510 <altera_avalon_jtag_uart_irq+0x28>
}
 180b700:	e037883a 	mov	sp,fp
 180b704:	df000017 	ldw	fp,0(sp)
 180b708:	dec00104 	addi	sp,sp,4
 180b70c:	f800283a 	ret

0180b710 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 180b710:	defffc04 	addi	sp,sp,-16
 180b714:	df000315 	stw	fp,12(sp)
 180b718:	df000304 	addi	fp,sp,12
 180b71c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 180b720:	e0bfff17 	ldw	r2,-4(fp)
 180b724:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 180b728:	e0bffe17 	ldw	r2,-8(fp)
 180b72c:	10800017 	ldw	r2,0(r2)
 180b730:	10800104 	addi	r2,r2,4
 180b734:	10800037 	ldwio	r2,0(r2)
 180b738:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 180b73c:	e0bffd17 	ldw	r2,-12(fp)
 180b740:	1081000c 	andi	r2,r2,1024
 180b744:	1005003a 	cmpeq	r2,r2,zero
 180b748:	10000c1e 	bne	r2,zero,180b77c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 180b74c:	e0bffe17 	ldw	r2,-8(fp)
 180b750:	10800017 	ldw	r2,0(r2)
 180b754:	11000104 	addi	r4,r2,4
 180b758:	e0bffe17 	ldw	r2,-8(fp)
 180b75c:	10800817 	ldw	r2,32(r2)
 180b760:	10810014 	ori	r2,r2,1024
 180b764:	1007883a 	mov	r3,r2
 180b768:	2005883a 	mov	r2,r4
 180b76c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 180b770:	e0bffe17 	ldw	r2,-8(fp)
 180b774:	10000915 	stw	zero,36(r2)
 180b778:	00000a06 	br	180b7a4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 180b77c:	e0bffe17 	ldw	r2,-8(fp)
 180b780:	10c00917 	ldw	r3,36(r2)
 180b784:	00a00034 	movhi	r2,32768
 180b788:	10bfff04 	addi	r2,r2,-4
 180b78c:	10c00536 	bltu	r2,r3,180b7a4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 180b790:	e0bffe17 	ldw	r2,-8(fp)
 180b794:	10800917 	ldw	r2,36(r2)
 180b798:	10c00044 	addi	r3,r2,1
 180b79c:	e0bffe17 	ldw	r2,-8(fp)
 180b7a0:	10c00915 	stw	r3,36(r2)
 180b7a4:	00806074 	movhi	r2,385
 180b7a8:	1084ef04 	addi	r2,r2,5052
 180b7ac:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 180b7b0:	e037883a 	mov	sp,fp
 180b7b4:	df000017 	ldw	fp,0(sp)
 180b7b8:	dec00104 	addi	sp,sp,4
 180b7bc:	f800283a 	ret

0180b7c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 180b7c0:	defffc04 	addi	sp,sp,-16
 180b7c4:	df000315 	stw	fp,12(sp)
 180b7c8:	df000304 	addi	fp,sp,12
 180b7cc:	e13ffd15 	stw	r4,-12(fp)
 180b7d0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 180b7d4:	00000706 	br	180b7f4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 180b7d8:	e0bffe17 	ldw	r2,-8(fp)
 180b7dc:	1090000c 	andi	r2,r2,16384
 180b7e0:	1005003a 	cmpeq	r2,r2,zero
 180b7e4:	1000031e 	bne	r2,zero,180b7f4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 180b7e8:	00bffd44 	movi	r2,-11
 180b7ec:	e0bfff15 	stw	r2,-4(fp)
 180b7f0:	00000b06 	br	180b820 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 180b7f4:	e0bffd17 	ldw	r2,-12(fp)
 180b7f8:	10c00d17 	ldw	r3,52(r2)
 180b7fc:	e0bffd17 	ldw	r2,-12(fp)
 180b800:	10800c17 	ldw	r2,48(r2)
 180b804:	18800526 	beq	r3,r2,180b81c <altera_avalon_jtag_uart_close+0x5c>
 180b808:	e0bffd17 	ldw	r2,-12(fp)
 180b80c:	10c00917 	ldw	r3,36(r2)
 180b810:	e0bffd17 	ldw	r2,-12(fp)
 180b814:	10800117 	ldw	r2,4(r2)
 180b818:	18bfef36 	bltu	r3,r2,180b7d8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 180b81c:	e03fff15 	stw	zero,-4(fp)
 180b820:	e0bfff17 	ldw	r2,-4(fp)
}
 180b824:	e037883a 	mov	sp,fp
 180b828:	df000017 	ldw	fp,0(sp)
 180b82c:	dec00104 	addi	sp,sp,4
 180b830:	f800283a 	ret

0180b834 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 180b834:	defff804 	addi	sp,sp,-32
 180b838:	df000715 	stw	fp,28(sp)
 180b83c:	df000704 	addi	fp,sp,28
 180b840:	e13ffb15 	stw	r4,-20(fp)
 180b844:	e17ffc15 	stw	r5,-16(fp)
 180b848:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 180b84c:	00bff9c4 	movi	r2,-25
 180b850:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 180b854:	e0bffc17 	ldw	r2,-16(fp)
 180b858:	e0bfff15 	stw	r2,-4(fp)
 180b85c:	e0ffff17 	ldw	r3,-4(fp)
 180b860:	189a8060 	cmpeqi	r2,r3,27137
 180b864:	1000041e 	bne	r2,zero,180b878 <altera_avalon_jtag_uart_ioctl+0x44>
 180b868:	e0ffff17 	ldw	r3,-4(fp)
 180b86c:	189a80a0 	cmpeqi	r2,r3,27138
 180b870:	10001b1e 	bne	r2,zero,180b8e0 <altera_avalon_jtag_uart_ioctl+0xac>
 180b874:	00002706 	br	180b914 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 180b878:	e0bffb17 	ldw	r2,-20(fp)
 180b87c:	10c00117 	ldw	r3,4(r2)
 180b880:	00a00034 	movhi	r2,32768
 180b884:	10bfffc4 	addi	r2,r2,-1
 180b888:	18802226 	beq	r3,r2,180b914 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 180b88c:	e0bffd17 	ldw	r2,-12(fp)
 180b890:	10800017 	ldw	r2,0(r2)
 180b894:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 180b898:	e0bff917 	ldw	r2,-28(fp)
 180b89c:	10800090 	cmplti	r2,r2,2
 180b8a0:	1000071e 	bne	r2,zero,180b8c0 <altera_avalon_jtag_uart_ioctl+0x8c>
 180b8a4:	e0fff917 	ldw	r3,-28(fp)
 180b8a8:	00a00034 	movhi	r2,32768
 180b8ac:	10bfffc4 	addi	r2,r2,-1
 180b8b0:	18800326 	beq	r3,r2,180b8c0 <altera_avalon_jtag_uart_ioctl+0x8c>
 180b8b4:	e0bff917 	ldw	r2,-28(fp)
 180b8b8:	e0bffe15 	stw	r2,-8(fp)
 180b8bc:	00000306 	br	180b8cc <altera_avalon_jtag_uart_ioctl+0x98>
 180b8c0:	00e00034 	movhi	r3,32768
 180b8c4:	18ffff84 	addi	r3,r3,-2
 180b8c8:	e0fffe15 	stw	r3,-8(fp)
 180b8cc:	e0bffb17 	ldw	r2,-20(fp)
 180b8d0:	e0fffe17 	ldw	r3,-8(fp)
 180b8d4:	10c00115 	stw	r3,4(r2)
      rc = 0;
 180b8d8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 180b8dc:	00000d06 	br	180b914 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 180b8e0:	e0bffb17 	ldw	r2,-20(fp)
 180b8e4:	10c00117 	ldw	r3,4(r2)
 180b8e8:	00a00034 	movhi	r2,32768
 180b8ec:	10bfffc4 	addi	r2,r2,-1
 180b8f0:	18800826 	beq	r3,r2,180b914 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 180b8f4:	e13ffd17 	ldw	r4,-12(fp)
 180b8f8:	e0bffb17 	ldw	r2,-20(fp)
 180b8fc:	10c00917 	ldw	r3,36(r2)
 180b900:	e0bffb17 	ldw	r2,-20(fp)
 180b904:	10800117 	ldw	r2,4(r2)
 180b908:	1885803a 	cmpltu	r2,r3,r2
 180b90c:	20800015 	stw	r2,0(r4)
      rc = 0;
 180b910:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 180b914:	e0bffa17 	ldw	r2,-24(fp)
}
 180b918:	e037883a 	mov	sp,fp
 180b91c:	df000017 	ldw	fp,0(sp)
 180b920:	dec00104 	addi	sp,sp,4
 180b924:	f800283a 	ret

0180b928 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 180b928:	defff204 	addi	sp,sp,-56
 180b92c:	dfc00d15 	stw	ra,52(sp)
 180b930:	df000c15 	stw	fp,48(sp)
 180b934:	df000c04 	addi	fp,sp,48
 180b938:	e13ffb15 	stw	r4,-20(fp)
 180b93c:	e17ffc15 	stw	r5,-16(fp)
 180b940:	e1bffd15 	stw	r6,-12(fp)
 180b944:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 180b948:	e0bffc17 	ldw	r2,-16(fp)
 180b94c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 180b950:	00004806 	br	180ba74 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 180b954:	e0bffb17 	ldw	r2,-20(fp)
 180b958:	10800a17 	ldw	r2,40(r2)
 180b95c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 180b960:	e0bffb17 	ldw	r2,-20(fp)
 180b964:	10800b17 	ldw	r2,44(r2)
 180b968:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 180b96c:	e0fff717 	ldw	r3,-36(fp)
 180b970:	e0bff617 	ldw	r2,-40(fp)
 180b974:	18800536 	bltu	r3,r2,180b98c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 180b978:	e0bff717 	ldw	r2,-36(fp)
 180b97c:	e0fff617 	ldw	r3,-40(fp)
 180b980:	10c5c83a 	sub	r2,r2,r3
 180b984:	e0bff815 	stw	r2,-32(fp)
 180b988:	00000406 	br	180b99c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 180b98c:	00820004 	movi	r2,2048
 180b990:	e0fff617 	ldw	r3,-40(fp)
 180b994:	10c5c83a 	sub	r2,r2,r3
 180b998:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 180b99c:	e0bff817 	ldw	r2,-32(fp)
 180b9a0:	1005003a 	cmpeq	r2,r2,zero
 180b9a4:	10001f1e 	bne	r2,zero,180ba24 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 180b9a8:	e0fffd17 	ldw	r3,-12(fp)
 180b9ac:	e0bff817 	ldw	r2,-32(fp)
 180b9b0:	1880022e 	bgeu	r3,r2,180b9bc <altera_avalon_jtag_uart_read+0x94>
        n = space;
 180b9b4:	e0bffd17 	ldw	r2,-12(fp)
 180b9b8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 180b9bc:	e0bffb17 	ldw	r2,-20(fp)
 180b9c0:	10c00e04 	addi	r3,r2,56
 180b9c4:	e0bff617 	ldw	r2,-40(fp)
 180b9c8:	1887883a 	add	r3,r3,r2
 180b9cc:	e0bffa17 	ldw	r2,-24(fp)
 180b9d0:	1009883a 	mov	r4,r2
 180b9d4:	180b883a 	mov	r5,r3
 180b9d8:	e1bff817 	ldw	r6,-32(fp)
 180b9dc:	1805d5c0 	call	1805d5c <memcpy>
      ptr   += n;
 180b9e0:	e0fff817 	ldw	r3,-32(fp)
 180b9e4:	e0bffa17 	ldw	r2,-24(fp)
 180b9e8:	10c5883a 	add	r2,r2,r3
 180b9ec:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 180b9f0:	e0fffd17 	ldw	r3,-12(fp)
 180b9f4:	e0bff817 	ldw	r2,-32(fp)
 180b9f8:	1885c83a 	sub	r2,r3,r2
 180b9fc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 180ba00:	e0fff617 	ldw	r3,-40(fp)
 180ba04:	e0bff817 	ldw	r2,-32(fp)
 180ba08:	1885883a 	add	r2,r3,r2
 180ba0c:	10c1ffcc 	andi	r3,r2,2047
 180ba10:	e0bffb17 	ldw	r2,-20(fp)
 180ba14:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 180ba18:	e0bffd17 	ldw	r2,-12(fp)
 180ba1c:	10800048 	cmpgei	r2,r2,1
 180ba20:	103fcc1e 	bne	r2,zero,180b954 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 180ba24:	e0fffa17 	ldw	r3,-24(fp)
 180ba28:	e0bffc17 	ldw	r2,-16(fp)
 180ba2c:	1880141e 	bne	r3,r2,180ba80 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 180ba30:	e0bffe17 	ldw	r2,-8(fp)
 180ba34:	1090000c 	andi	r2,r2,16384
 180ba38:	1004c03a 	cmpne	r2,r2,zero
 180ba3c:	1000101e 	bne	r2,zero,180ba80 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 180ba40:	e0bffb17 	ldw	r2,-20(fp)
 180ba44:	10c00a17 	ldw	r3,40(r2)
 180ba48:	e0bff717 	ldw	r2,-36(fp)
 180ba4c:	1880051e 	bne	r3,r2,180ba64 <altera_avalon_jtag_uart_read+0x13c>
 180ba50:	e0bffb17 	ldw	r2,-20(fp)
 180ba54:	10c00917 	ldw	r3,36(r2)
 180ba58:	e0bffb17 	ldw	r2,-20(fp)
 180ba5c:	10800117 	ldw	r2,4(r2)
 180ba60:	18bff736 	bltu	r3,r2,180ba40 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 180ba64:	e0bffb17 	ldw	r2,-20(fp)
 180ba68:	10c00a17 	ldw	r3,40(r2)
 180ba6c:	e0bff717 	ldw	r2,-36(fp)
 180ba70:	18800326 	beq	r3,r2,180ba80 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 180ba74:	e0bffd17 	ldw	r2,-12(fp)
 180ba78:	10800048 	cmpgei	r2,r2,1
 180ba7c:	103fb51e 	bne	r2,zero,180b954 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 180ba80:	e0fffa17 	ldw	r3,-24(fp)
 180ba84:	e0bffc17 	ldw	r2,-16(fp)
 180ba88:	18801926 	beq	r3,r2,180baf0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 180ba8c:	0005303a 	rdctl	r2,status
 180ba90:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 180ba94:	e0fff517 	ldw	r3,-44(fp)
 180ba98:	00bfff84 	movi	r2,-2
 180ba9c:	1884703a 	and	r2,r3,r2
 180baa0:	1001703a 	wrctl	status,r2
  
  return context;
 180baa4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 180baa8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 180baac:	e0bffb17 	ldw	r2,-20(fp)
 180bab0:	10800817 	ldw	r2,32(r2)
 180bab4:	10c00054 	ori	r3,r2,1
 180bab8:	e0bffb17 	ldw	r2,-20(fp)
 180babc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 180bac0:	e0bffb17 	ldw	r2,-20(fp)
 180bac4:	10800017 	ldw	r2,0(r2)
 180bac8:	11000104 	addi	r4,r2,4
 180bacc:	e0bffb17 	ldw	r2,-20(fp)
 180bad0:	10800817 	ldw	r2,32(r2)
 180bad4:	1007883a 	mov	r3,r2
 180bad8:	2005883a 	mov	r2,r4
 180badc:	10c00035 	stwio	r3,0(r2)
 180bae0:	e0bff917 	ldw	r2,-28(fp)
 180bae4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 180bae8:	e0bff417 	ldw	r2,-48(fp)
 180baec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 180baf0:	e0fffa17 	ldw	r3,-24(fp)
 180baf4:	e0bffc17 	ldw	r2,-16(fp)
 180baf8:	18800526 	beq	r3,r2,180bb10 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 180bafc:	e0fffa17 	ldw	r3,-24(fp)
 180bb00:	e0bffc17 	ldw	r2,-16(fp)
 180bb04:	1887c83a 	sub	r3,r3,r2
 180bb08:	e0ffff15 	stw	r3,-4(fp)
 180bb0c:	00000906 	br	180bb34 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 180bb10:	e0bffe17 	ldw	r2,-8(fp)
 180bb14:	1090000c 	andi	r2,r2,16384
 180bb18:	1005003a 	cmpeq	r2,r2,zero
 180bb1c:	1000031e 	bne	r2,zero,180bb2c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 180bb20:	00bffd44 	movi	r2,-11
 180bb24:	e0bfff15 	stw	r2,-4(fp)
 180bb28:	00000206 	br	180bb34 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 180bb2c:	00bffec4 	movi	r2,-5
 180bb30:	e0bfff15 	stw	r2,-4(fp)
 180bb34:	e0bfff17 	ldw	r2,-4(fp)
}
 180bb38:	e037883a 	mov	sp,fp
 180bb3c:	dfc00117 	ldw	ra,4(sp)
 180bb40:	df000017 	ldw	fp,0(sp)
 180bb44:	dec00204 	addi	sp,sp,8
 180bb48:	f800283a 	ret

0180bb4c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 180bb4c:	defff204 	addi	sp,sp,-56
 180bb50:	dfc00d15 	stw	ra,52(sp)
 180bb54:	df000c15 	stw	fp,48(sp)
 180bb58:	df000c04 	addi	fp,sp,48
 180bb5c:	e13ffb15 	stw	r4,-20(fp)
 180bb60:	e17ffc15 	stw	r5,-16(fp)
 180bb64:	e1bffd15 	stw	r6,-12(fp)
 180bb68:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 180bb6c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 180bb70:	e0bffc17 	ldw	r2,-16(fp)
 180bb74:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 180bb78:	00003a06 	br	180bc64 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 180bb7c:	e0bffb17 	ldw	r2,-20(fp)
 180bb80:	10800c17 	ldw	r2,48(r2)
 180bb84:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 180bb88:	e0bffb17 	ldw	r2,-20(fp)
 180bb8c:	10800d17 	ldw	r2,52(r2)
 180bb90:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 180bb94:	e0fffa17 	ldw	r3,-24(fp)
 180bb98:	e0bff917 	ldw	r2,-28(fp)
 180bb9c:	1880062e 	bgeu	r3,r2,180bbb8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 180bba0:	e0fff917 	ldw	r3,-28(fp)
 180bba4:	e0bffa17 	ldw	r2,-24(fp)
 180bba8:	1885c83a 	sub	r2,r3,r2
 180bbac:	10bfffc4 	addi	r2,r2,-1
 180bbb0:	e0bff815 	stw	r2,-32(fp)
 180bbb4:	00000c06 	br	180bbe8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 180bbb8:	e0bff917 	ldw	r2,-28(fp)
 180bbbc:	1005003a 	cmpeq	r2,r2,zero
 180bbc0:	1000051e 	bne	r2,zero,180bbd8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 180bbc4:	00820004 	movi	r2,2048
 180bbc8:	e0fffa17 	ldw	r3,-24(fp)
 180bbcc:	10c5c83a 	sub	r2,r2,r3
 180bbd0:	e0bff815 	stw	r2,-32(fp)
 180bbd4:	00000406 	br	180bbe8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 180bbd8:	0081ffc4 	movi	r2,2047
 180bbdc:	e0fffa17 	ldw	r3,-24(fp)
 180bbe0:	10c5c83a 	sub	r2,r2,r3
 180bbe4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 180bbe8:	e0bff817 	ldw	r2,-32(fp)
 180bbec:	1005003a 	cmpeq	r2,r2,zero
 180bbf0:	10001f1e 	bne	r2,zero,180bc70 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 180bbf4:	e0fffd17 	ldw	r3,-12(fp)
 180bbf8:	e0bff817 	ldw	r2,-32(fp)
 180bbfc:	1880022e 	bgeu	r3,r2,180bc08 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 180bc00:	e0bffd17 	ldw	r2,-12(fp)
 180bc04:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 180bc08:	e0bffb17 	ldw	r2,-20(fp)
 180bc0c:	10c20e04 	addi	r3,r2,2104
 180bc10:	e0bffa17 	ldw	r2,-24(fp)
 180bc14:	1885883a 	add	r2,r3,r2
 180bc18:	e0fffc17 	ldw	r3,-16(fp)
 180bc1c:	1009883a 	mov	r4,r2
 180bc20:	180b883a 	mov	r5,r3
 180bc24:	e1bff817 	ldw	r6,-32(fp)
 180bc28:	1805d5c0 	call	1805d5c <memcpy>
      ptr   += n;
 180bc2c:	e0fff817 	ldw	r3,-32(fp)
 180bc30:	e0bffc17 	ldw	r2,-16(fp)
 180bc34:	10c5883a 	add	r2,r2,r3
 180bc38:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 180bc3c:	e0fffd17 	ldw	r3,-12(fp)
 180bc40:	e0bff817 	ldw	r2,-32(fp)
 180bc44:	1885c83a 	sub	r2,r3,r2
 180bc48:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 180bc4c:	e0fffa17 	ldw	r3,-24(fp)
 180bc50:	e0bff817 	ldw	r2,-32(fp)
 180bc54:	1885883a 	add	r2,r3,r2
 180bc58:	10c1ffcc 	andi	r3,r2,2047
 180bc5c:	e0bffb17 	ldw	r2,-20(fp)
 180bc60:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 180bc64:	e0bffd17 	ldw	r2,-12(fp)
 180bc68:	10800048 	cmpgei	r2,r2,1
 180bc6c:	103fc31e 	bne	r2,zero,180bb7c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 180bc70:	0005303a 	rdctl	r2,status
 180bc74:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 180bc78:	e0fff517 	ldw	r3,-44(fp)
 180bc7c:	00bfff84 	movi	r2,-2
 180bc80:	1884703a 	and	r2,r3,r2
 180bc84:	1001703a 	wrctl	status,r2
  
  return context;
 180bc88:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 180bc8c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 180bc90:	e0bffb17 	ldw	r2,-20(fp)
 180bc94:	10800817 	ldw	r2,32(r2)
 180bc98:	10c00094 	ori	r3,r2,2
 180bc9c:	e0bffb17 	ldw	r2,-20(fp)
 180bca0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 180bca4:	e0bffb17 	ldw	r2,-20(fp)
 180bca8:	10800017 	ldw	r2,0(r2)
 180bcac:	11000104 	addi	r4,r2,4
 180bcb0:	e0bffb17 	ldw	r2,-20(fp)
 180bcb4:	10800817 	ldw	r2,32(r2)
 180bcb8:	1007883a 	mov	r3,r2
 180bcbc:	2005883a 	mov	r2,r4
 180bcc0:	10c00035 	stwio	r3,0(r2)
 180bcc4:	e0bff717 	ldw	r2,-36(fp)
 180bcc8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 180bccc:	e0bff417 	ldw	r2,-48(fp)
 180bcd0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 180bcd4:	e0bffd17 	ldw	r2,-12(fp)
 180bcd8:	10800050 	cmplti	r2,r2,1
 180bcdc:	1000111e 	bne	r2,zero,180bd24 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 180bce0:	e0bffe17 	ldw	r2,-8(fp)
 180bce4:	1090000c 	andi	r2,r2,16384
 180bce8:	1004c03a 	cmpne	r2,r2,zero
 180bcec:	1000101e 	bne	r2,zero,180bd30 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 180bcf0:	e0bffb17 	ldw	r2,-20(fp)
 180bcf4:	10c00d17 	ldw	r3,52(r2)
 180bcf8:	e0bff917 	ldw	r2,-28(fp)
 180bcfc:	1880051e 	bne	r3,r2,180bd14 <altera_avalon_jtag_uart_write+0x1c8>
 180bd00:	e0bffb17 	ldw	r2,-20(fp)
 180bd04:	10c00917 	ldw	r3,36(r2)
 180bd08:	e0bffb17 	ldw	r2,-20(fp)
 180bd0c:	10800117 	ldw	r2,4(r2)
 180bd10:	18bff736 	bltu	r3,r2,180bcf0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 180bd14:	e0bffb17 	ldw	r2,-20(fp)
 180bd18:	10c00d17 	ldw	r3,52(r2)
 180bd1c:	e0bff917 	ldw	r2,-28(fp)
 180bd20:	18800326 	beq	r3,r2,180bd30 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 180bd24:	e0bffd17 	ldw	r2,-12(fp)
 180bd28:	10800048 	cmpgei	r2,r2,1
 180bd2c:	103fcd1e 	bne	r2,zero,180bc64 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 180bd30:	e0fffc17 	ldw	r3,-16(fp)
 180bd34:	e0bff617 	ldw	r2,-40(fp)
 180bd38:	18800526 	beq	r3,r2,180bd50 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 180bd3c:	e0fffc17 	ldw	r3,-16(fp)
 180bd40:	e0bff617 	ldw	r2,-40(fp)
 180bd44:	1887c83a 	sub	r3,r3,r2
 180bd48:	e0ffff15 	stw	r3,-4(fp)
 180bd4c:	00000906 	br	180bd74 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 180bd50:	e0bffe17 	ldw	r2,-8(fp)
 180bd54:	1090000c 	andi	r2,r2,16384
 180bd58:	1005003a 	cmpeq	r2,r2,zero
 180bd5c:	1000031e 	bne	r2,zero,180bd6c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 180bd60:	00bffd44 	movi	r2,-11
 180bd64:	e0bfff15 	stw	r2,-4(fp)
 180bd68:	00000206 	br	180bd74 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 180bd6c:	00bffec4 	movi	r2,-5
 180bd70:	e0bfff15 	stw	r2,-4(fp)
 180bd74:	e0bfff17 	ldw	r2,-4(fp)
}
 180bd78:	e037883a 	mov	sp,fp
 180bd7c:	dfc00117 	ldw	ra,4(sp)
 180bd80:	df000017 	ldw	fp,0(sp)
 180bd84:	dec00204 	addi	sp,sp,8
 180bd88:	f800283a 	ret

0180bd8c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 180bd8c:	defffc04 	addi	sp,sp,-16
 180bd90:	df000315 	stw	fp,12(sp)
 180bd94:	df000304 	addi	fp,sp,12
 180bd98:	e13ffe15 	stw	r4,-8(fp)
 180bd9c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 180bda0:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 180bda4:	e0bfff17 	ldw	r2,-4(fp)
 180bda8:	1004c03a 	cmpne	r2,r2,zero
 180bdac:	1000061e 	bne	r2,zero,180bdc8 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 180bdb0:	e0bffe17 	ldw	r2,-8(fp)
 180bdb4:	1007883a 	mov	r3,r2
 180bdb8:	e0bffd03 	ldbu	r2,-12(fp)
 180bdbc:	10c4b03a 	or	r2,r2,r3
 180bdc0:	e0bffd05 	stb	r2,-12(fp)
 180bdc4:	00000806 	br	180bde8 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 180bdc8:	e0bffe17 	ldw	r2,-8(fp)
 180bdcc:	1007883a 	mov	r3,r2
 180bdd0:	e0bffd03 	ldbu	r2,-12(fp)
 180bdd4:	10c4b03a 	or	r2,r2,r3
 180bdd8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 180bddc:	e0bffd03 	ldbu	r2,-12(fp)
 180bde0:	10801014 	ori	r2,r2,64
 180bde4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 180bde8:	e0fffd03 	ldbu	r3,-12(fp)
 180bdec:	00bfe004 	movi	r2,-128
 180bdf0:	1884b03a 	or	r2,r3,r2
 180bdf4:	10803fcc 	andi	r2,r2,255
}
 180bdf8:	e037883a 	mov	sp,fp
 180bdfc:	df000017 	ldw	fp,0(sp)
 180be00:	dec00104 	addi	sp,sp,4
 180be04:	f800283a 	ret

0180be08 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 180be08:	defffd04 	addi	sp,sp,-12
 180be0c:	df000215 	stw	fp,8(sp)
 180be10:	df000204 	addi	fp,sp,8
 180be14:	e13ffe15 	stw	r4,-8(fp)
 180be18:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 180be1c:	e0bffe17 	ldw	r2,-8(fp)
 180be20:	10800a17 	ldw	r2,40(r2)
 180be24:	e0ffff03 	ldbu	r3,-4(fp)
 180be28:	10c00025 	stbio	r3,0(r2)
}
 180be2c:	e037883a 	mov	sp,fp
 180be30:	df000017 	ldw	fp,0(sp)
 180be34:	dec00104 	addi	sp,sp,4
 180be38:	f800283a 	ret

0180be3c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 180be3c:	defffe04 	addi	sp,sp,-8
 180be40:	df000115 	stw	fp,4(sp)
 180be44:	df000104 	addi	fp,sp,4
 180be48:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 180be4c:	e0bfff17 	ldw	r2,-4(fp)
 180be50:	10800a17 	ldw	r2,40(r2)
 180be54:	1007883a 	mov	r3,r2
 180be58:	00800044 	movi	r2,1
 180be5c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 180be60:	e037883a 	mov	sp,fp
 180be64:	df000017 	ldw	fp,0(sp)
 180be68:	dec00104 	addi	sp,sp,4
 180be6c:	f800283a 	ret

0180be70 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 180be70:	defffc04 	addi	sp,sp,-16
 180be74:	dfc00315 	stw	ra,12(sp)
 180be78:	df000215 	stw	fp,8(sp)
 180be7c:	df000204 	addi	fp,sp,8
 180be80:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 180be84:	e13fff17 	ldw	r4,-4(fp)
 180be88:	01406074 	movhi	r5,385
 180be8c:	297e1904 	addi	r5,r5,-1948
 180be90:	180c6080 	call	180c608 <alt_find_dev>
 180be94:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 180be98:	e0bffe17 	ldw	r2,-8(fp)
}
 180be9c:	e037883a 	mov	sp,fp
 180bea0:	dfc00117 	ldw	ra,4(sp)
 180bea4:	df000017 	ldw	fp,0(sp)
 180bea8:	dec00204 	addi	sp,sp,8
 180beac:	f800283a 	ret

0180beb0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 180beb0:	defffb04 	addi	sp,sp,-20
 180beb4:	df000415 	stw	fp,16(sp)
 180beb8:	df000404 	addi	fp,sp,16
 180bebc:	e13ffd15 	stw	r4,-12(fp)
 180bec0:	e17ffe15 	stw	r5,-8(fp)
 180bec4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 180bec8:	e03ffc15 	stw	zero,-16(fp)
 180becc:	00000f06 	br	180bf0c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 180bed0:	e0bffd17 	ldw	r2,-12(fp)
 180bed4:	10800a17 	ldw	r2,40(r2)
 180bed8:	11000044 	addi	r4,r2,1
 180bedc:	e0fffc17 	ldw	r3,-16(fp)
 180bee0:	e0bffe17 	ldw	r2,-8(fp)
 180bee4:	1885883a 	add	r2,r3,r2
 180bee8:	10800003 	ldbu	r2,0(r2)
 180beec:	10c03fcc 	andi	r3,r2,255
 180bef0:	18c0201c 	xori	r3,r3,128
 180bef4:	18ffe004 	addi	r3,r3,-128
 180bef8:	2005883a 	mov	r2,r4
 180befc:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 180bf00:	e0bffc17 	ldw	r2,-16(fp)
 180bf04:	10800044 	addi	r2,r2,1
 180bf08:	e0bffc15 	stw	r2,-16(fp)
 180bf0c:	e0fffc17 	ldw	r3,-16(fp)
 180bf10:	e0bfff17 	ldw	r2,-4(fp)
 180bf14:	18bfee36 	bltu	r3,r2,180bed0 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 180bf18:	e037883a 	mov	sp,fp
 180bf1c:	df000017 	ldw	fp,0(sp)
 180bf20:	dec00104 	addi	sp,sp,4
 180bf24:	f800283a 	ret

0180bf28 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 180bf28:	defffd04 	addi	sp,sp,-12
 180bf2c:	df000215 	stw	fp,8(sp)
 180bf30:	df000204 	addi	fp,sp,8
 180bf34:	e13ffe15 	stw	r4,-8(fp)
 180bf38:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 180bf3c:	00000d06 	br	180bf74 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 180bf40:	e0bffe17 	ldw	r2,-8(fp)
 180bf44:	10800a17 	ldw	r2,40(r2)
 180bf48:	11000044 	addi	r4,r2,1
 180bf4c:	e0bfff17 	ldw	r2,-4(fp)
 180bf50:	10800003 	ldbu	r2,0(r2)
 180bf54:	10c03fcc 	andi	r3,r2,255
 180bf58:	18c0201c 	xori	r3,r3,128
 180bf5c:	18ffe004 	addi	r3,r3,-128
 180bf60:	2005883a 	mov	r2,r4
 180bf64:	10c00025 	stbio	r3,0(r2)
		++ptr;
 180bf68:	e0bfff17 	ldw	r2,-4(fp)
 180bf6c:	10800044 	addi	r2,r2,1
 180bf70:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 180bf74:	e0bfff17 	ldw	r2,-4(fp)
 180bf78:	10800003 	ldbu	r2,0(r2)
 180bf7c:	10803fcc 	andi	r2,r2,255
 180bf80:	1080201c 	xori	r2,r2,128
 180bf84:	10bfe004 	addi	r2,r2,-128
 180bf88:	1004c03a 	cmpne	r2,r2,zero
 180bf8c:	103fec1e 	bne	r2,zero,180bf40 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 180bf90:	e037883a 	mov	sp,fp
 180bf94:	df000017 	ldw	fp,0(sp)
 180bf98:	dec00104 	addi	sp,sp,4
 180bf9c:	f800283a 	ret

0180bfa0 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 180bfa0:	defffb04 	addi	sp,sp,-20
 180bfa4:	dfc00415 	stw	ra,16(sp)
 180bfa8:	df000315 	stw	fp,12(sp)
 180bfac:	df000304 	addi	fp,sp,12
 180bfb0:	e13ffd15 	stw	r4,-12(fp)
 180bfb4:	e17ffe15 	stw	r5,-8(fp)
 180bfb8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 180bfbc:	e0bffd17 	ldw	r2,-12(fp)
 180bfc0:	10800017 	ldw	r2,0(r2)
 180bfc4:	1009883a 	mov	r4,r2
 180bfc8:	e1bfff17 	ldw	r6,-4(fp)
 180bfcc:	e17ffe17 	ldw	r5,-8(fp)
 180bfd0:	180beb00 	call	180beb0 <alt_up_character_lcd_write>
	return 0;
 180bfd4:	0005883a 	mov	r2,zero
}
 180bfd8:	e037883a 	mov	sp,fp
 180bfdc:	dfc00117 	ldw	ra,4(sp)
 180bfe0:	df000017 	ldw	fp,0(sp)
 180bfe4:	dec00204 	addi	sp,sp,8
 180bfe8:	f800283a 	ret

0180bfec <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 180bfec:	defff904 	addi	sp,sp,-28
 180bff0:	dfc00615 	stw	ra,24(sp)
 180bff4:	df000515 	stw	fp,20(sp)
 180bff8:	df000504 	addi	fp,sp,20
 180bffc:	e13ffc15 	stw	r4,-16(fp)
 180c000:	e17ffd15 	stw	r5,-12(fp)
 180c004:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 180c008:	e0bffd17 	ldw	r2,-12(fp)
 180c00c:	10800a28 	cmpgeui	r2,r2,40
 180c010:	1000031e 	bne	r2,zero,180c020 <alt_up_character_lcd_set_cursor_pos+0x34>
 180c014:	e0bffe17 	ldw	r2,-8(fp)
 180c018:	108000b0 	cmpltui	r2,r2,2
 180c01c:	1000031e 	bne	r2,zero,180c02c <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 180c020:	00bfffc4 	movi	r2,-1
 180c024:	e0bfff15 	stw	r2,-4(fp)
 180c028:	00000806 	br	180c04c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 180c02c:	e13ffd17 	ldw	r4,-12(fp)
 180c030:	e17ffe17 	ldw	r5,-8(fp)
 180c034:	180bd8c0 	call	180bd8c <get_DDRAM_addr>
 180c038:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 180c03c:	e17ffb03 	ldbu	r5,-20(fp)
 180c040:	e13ffc17 	ldw	r4,-16(fp)
 180c044:	180be080 	call	180be08 <alt_up_character_lcd_send_cmd>
	return 0;
 180c048:	e03fff15 	stw	zero,-4(fp)
 180c04c:	e0bfff17 	ldw	r2,-4(fp)
}
 180c050:	e037883a 	mov	sp,fp
 180c054:	dfc00117 	ldw	ra,4(sp)
 180c058:	df000017 	ldw	fp,0(sp)
 180c05c:	dec00204 	addi	sp,sp,8
 180c060:	f800283a 	ret

0180c064 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 180c064:	defff904 	addi	sp,sp,-28
 180c068:	dfc00615 	stw	ra,24(sp)
 180c06c:	df000515 	stw	fp,20(sp)
 180c070:	df000504 	addi	fp,sp,20
 180c074:	e13ffc15 	stw	r4,-16(fp)
 180c078:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 180c07c:	e0bffd17 	ldw	r2,-12(fp)
 180c080:	1005003a 	cmpeq	r2,r2,zero
 180c084:	10001e1e 	bne	r2,zero,180c100 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 180c088:	e0bffd17 	ldw	r2,-12(fp)
 180c08c:	10800050 	cmplti	r2,r2,1
 180c090:	1000031e 	bne	r2,zero,180c0a0 <alt_up_character_lcd_shift_cursor+0x3c>
 180c094:	00800504 	movi	r2,20
 180c098:	e0bfff05 	stb	r2,-4(fp)
 180c09c:	00000206 	br	180c0a8 <alt_up_character_lcd_shift_cursor+0x44>
 180c0a0:	00c00404 	movi	r3,16
 180c0a4:	e0ffff05 	stb	r3,-4(fp)
 180c0a8:	e0bfff03 	ldbu	r2,-4(fp)
 180c0ac:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 180c0b0:	e0fffd17 	ldw	r3,-12(fp)
 180c0b4:	e0fffe15 	stw	r3,-8(fp)
 180c0b8:	e0fffe17 	ldw	r3,-8(fp)
 180c0bc:	1804403a 	cmpge	r2,r3,zero
 180c0c0:	1000031e 	bne	r2,zero,180c0d0 <alt_up_character_lcd_shift_cursor+0x6c>
 180c0c4:	e0bffe17 	ldw	r2,-8(fp)
 180c0c8:	0085c83a 	sub	r2,zero,r2
 180c0cc:	e0bffe15 	stw	r2,-8(fp)
 180c0d0:	e0fffe17 	ldw	r3,-8(fp)
 180c0d4:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 180c0d8:	00000306 	br	180c0e8 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 180c0dc:	e17ffb43 	ldbu	r5,-19(fp)
 180c0e0:	e13ffc17 	ldw	r4,-16(fp)
 180c0e4:	180be080 	call	180be08 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 180c0e8:	e0bffb03 	ldbu	r2,-20(fp)
 180c0ec:	10bfffc4 	addi	r2,r2,-1
 180c0f0:	e0bffb05 	stb	r2,-20(fp)
 180c0f4:	e0bffb03 	ldbu	r2,-20(fp)
 180c0f8:	10803fd8 	cmpnei	r2,r2,255
 180c0fc:	103ff71e 	bne	r2,zero,180c0dc <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 180c100:	e037883a 	mov	sp,fp
 180c104:	dfc00117 	ldw	ra,4(sp)
 180c108:	df000017 	ldw	fp,0(sp)
 180c10c:	dec00204 	addi	sp,sp,8
 180c110:	f800283a 	ret

0180c114 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 180c114:	defff904 	addi	sp,sp,-28
 180c118:	dfc00615 	stw	ra,24(sp)
 180c11c:	df000515 	stw	fp,20(sp)
 180c120:	df000504 	addi	fp,sp,20
 180c124:	e13ffc15 	stw	r4,-16(fp)
 180c128:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 180c12c:	e0bffd17 	ldw	r2,-12(fp)
 180c130:	1005003a 	cmpeq	r2,r2,zero
 180c134:	10001e1e 	bne	r2,zero,180c1b0 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 180c138:	e0bffd17 	ldw	r2,-12(fp)
 180c13c:	10800050 	cmplti	r2,r2,1
 180c140:	1000031e 	bne	r2,zero,180c150 <alt_up_character_lcd_shift_display+0x3c>
 180c144:	00800704 	movi	r2,28
 180c148:	e0bfff05 	stb	r2,-4(fp)
 180c14c:	00000206 	br	180c158 <alt_up_character_lcd_shift_display+0x44>
 180c150:	00c00604 	movi	r3,24
 180c154:	e0ffff05 	stb	r3,-4(fp)
 180c158:	e0bfff03 	ldbu	r2,-4(fp)
 180c15c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 180c160:	e0fffd17 	ldw	r3,-12(fp)
 180c164:	e0fffe15 	stw	r3,-8(fp)
 180c168:	e0fffe17 	ldw	r3,-8(fp)
 180c16c:	1804403a 	cmpge	r2,r3,zero
 180c170:	1000031e 	bne	r2,zero,180c180 <alt_up_character_lcd_shift_display+0x6c>
 180c174:	e0bffe17 	ldw	r2,-8(fp)
 180c178:	0085c83a 	sub	r2,zero,r2
 180c17c:	e0bffe15 	stw	r2,-8(fp)
 180c180:	e0fffe17 	ldw	r3,-8(fp)
 180c184:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 180c188:	00000306 	br	180c198 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 180c18c:	e17ffb43 	ldbu	r5,-19(fp)
 180c190:	e13ffc17 	ldw	r4,-16(fp)
 180c194:	180be080 	call	180be08 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 180c198:	e0bffb03 	ldbu	r2,-20(fp)
 180c19c:	10bfffc4 	addi	r2,r2,-1
 180c1a0:	e0bffb05 	stb	r2,-20(fp)
 180c1a4:	e0bffb03 	ldbu	r2,-20(fp)
 180c1a8:	10803fd8 	cmpnei	r2,r2,255
 180c1ac:	103ff71e 	bne	r2,zero,180c18c <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 180c1b0:	e037883a 	mov	sp,fp
 180c1b4:	dfc00117 	ldw	ra,4(sp)
 180c1b8:	df000017 	ldw	fp,0(sp)
 180c1bc:	dec00204 	addi	sp,sp,8
 180c1c0:	f800283a 	ret

0180c1c4 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 180c1c4:	defff904 	addi	sp,sp,-28
 180c1c8:	dfc00615 	stw	ra,24(sp)
 180c1cc:	df000515 	stw	fp,20(sp)
 180c1d0:	df000504 	addi	fp,sp,20
 180c1d4:	e13ffc15 	stw	r4,-16(fp)
 180c1d8:	e17ffd15 	stw	r5,-12(fp)
 180c1dc:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 180c1e0:	e0bffd17 	ldw	r2,-12(fp)
 180c1e4:	10800a28 	cmpgeui	r2,r2,40
 180c1e8:	1000031e 	bne	r2,zero,180c1f8 <alt_up_character_lcd_erase_pos+0x34>
 180c1ec:	e0bffe17 	ldw	r2,-8(fp)
 180c1f0:	108000b0 	cmpltui	r2,r2,2
 180c1f4:	1000031e 	bne	r2,zero,180c204 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 180c1f8:	00bfffc4 	movi	r2,-1
 180c1fc:	e0bfff15 	stw	r2,-4(fp)
 180c200:	00000e06 	br	180c23c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 180c204:	e13ffd17 	ldw	r4,-12(fp)
 180c208:	e17ffe17 	ldw	r5,-8(fp)
 180c20c:	180bd8c0 	call	180bd8c <get_DDRAM_addr>
 180c210:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 180c214:	e17ffb03 	ldbu	r5,-20(fp)
 180c218:	e13ffc17 	ldw	r4,-16(fp)
 180c21c:	180be080 	call	180be08 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 180c220:	e0bffc17 	ldw	r2,-16(fp)
 180c224:	10800a17 	ldw	r2,40(r2)
 180c228:	10800044 	addi	r2,r2,1
 180c22c:	1007883a 	mov	r3,r2
 180c230:	00800084 	movi	r2,2
 180c234:	18800025 	stbio	r2,0(r3)
	return 0;
 180c238:	e03fff15 	stw	zero,-4(fp)
 180c23c:	e0bfff17 	ldw	r2,-4(fp)
}
 180c240:	e037883a 	mov	sp,fp
 180c244:	dfc00117 	ldw	ra,4(sp)
 180c248:	df000017 	ldw	fp,0(sp)
 180c24c:	dec00204 	addi	sp,sp,8
 180c250:	f800283a 	ret

0180c254 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 180c254:	defffd04 	addi	sp,sp,-12
 180c258:	dfc00215 	stw	ra,8(sp)
 180c25c:	df000115 	stw	fp,4(sp)
 180c260:	df000104 	addi	fp,sp,4
 180c264:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 180c268:	e13fff17 	ldw	r4,-4(fp)
 180c26c:	01400304 	movi	r5,12
 180c270:	180be080 	call	180be08 <alt_up_character_lcd_send_cmd>
}
 180c274:	e037883a 	mov	sp,fp
 180c278:	dfc00117 	ldw	ra,4(sp)
 180c27c:	df000017 	ldw	fp,0(sp)
 180c280:	dec00204 	addi	sp,sp,8
 180c284:	f800283a 	ret

0180c288 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 180c288:	defffd04 	addi	sp,sp,-12
 180c28c:	dfc00215 	stw	ra,8(sp)
 180c290:	df000115 	stw	fp,4(sp)
 180c294:	df000104 	addi	fp,sp,4
 180c298:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 180c29c:	e13fff17 	ldw	r4,-4(fp)
 180c2a0:	014003c4 	movi	r5,15
 180c2a4:	180be080 	call	180be08 <alt_up_character_lcd_send_cmd>
}
 180c2a8:	e037883a 	mov	sp,fp
 180c2ac:	dfc00117 	ldw	ra,4(sp)
 180c2b0:	df000017 	ldw	fp,0(sp)
 180c2b4:	dec00204 	addi	sp,sp,8
 180c2b8:	f800283a 	ret

0180c2bc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 180c2bc:	defff404 	addi	sp,sp,-48
 180c2c0:	df000b15 	stw	fp,44(sp)
 180c2c4:	df000b04 	addi	fp,sp,44
 180c2c8:	e13ffb15 	stw	r4,-20(fp)
 180c2cc:	e17ffc15 	stw	r5,-16(fp)
 180c2d0:	e1bffd15 	stw	r6,-12(fp)
 180c2d4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 180c2d8:	e03ff915 	stw	zero,-28(fp)
 180c2dc:	00806074 	movhi	r2,385
 180c2e0:	1084ef04 	addi	r2,r2,5052
 180c2e4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 180c2e8:	1005003a 	cmpeq	r2,r2,zero
 180c2ec:	1000411e 	bne	r2,zero,180c3f4 <alt_alarm_start+0x138>
  {
    if (alarm)
 180c2f0:	e0bffb17 	ldw	r2,-20(fp)
 180c2f4:	1005003a 	cmpeq	r2,r2,zero
 180c2f8:	10003b1e 	bne	r2,zero,180c3e8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 180c2fc:	e0fffb17 	ldw	r3,-20(fp)
 180c300:	e0bffd17 	ldw	r2,-12(fp)
 180c304:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 180c308:	e0fffb17 	ldw	r3,-20(fp)
 180c30c:	e0bffe17 	ldw	r2,-8(fp)
 180c310:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 180c314:	0005303a 	rdctl	r2,status
 180c318:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 180c31c:	e0fff817 	ldw	r3,-32(fp)
 180c320:	00bfff84 	movi	r2,-2
 180c324:	1884703a 	and	r2,r3,r2
 180c328:	1001703a 	wrctl	status,r2
  
  return context;
 180c32c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 180c330:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 180c334:	00806074 	movhi	r2,385
 180c338:	1084f004 	addi	r2,r2,5056
 180c33c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 180c340:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 180c344:	e0fffc17 	ldw	r3,-16(fp)
 180c348:	e0bff917 	ldw	r2,-28(fp)
 180c34c:	1885883a 	add	r2,r3,r2
 180c350:	10c00044 	addi	r3,r2,1
 180c354:	e0bffb17 	ldw	r2,-20(fp)
 180c358:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 180c35c:	e0bffb17 	ldw	r2,-20(fp)
 180c360:	10c00217 	ldw	r3,8(r2)
 180c364:	e0bff917 	ldw	r2,-28(fp)
 180c368:	1880042e 	bgeu	r3,r2,180c37c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 180c36c:	e0fffb17 	ldw	r3,-20(fp)
 180c370:	00800044 	movi	r2,1
 180c374:	18800405 	stb	r2,16(r3)
 180c378:	00000206 	br	180c384 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 180c37c:	e0bffb17 	ldw	r2,-20(fp)
 180c380:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 180c384:	e0fffb17 	ldw	r3,-20(fp)
 180c388:	00806074 	movhi	r2,385
 180c38c:	10be1f04 	addi	r2,r2,-1924
 180c390:	e0bff615 	stw	r2,-40(fp)
 180c394:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 180c398:	e0fff717 	ldw	r3,-36(fp)
 180c39c:	e0bff617 	ldw	r2,-40(fp)
 180c3a0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 180c3a4:	e0bff617 	ldw	r2,-40(fp)
 180c3a8:	10c00017 	ldw	r3,0(r2)
 180c3ac:	e0bff717 	ldw	r2,-36(fp)
 180c3b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 180c3b4:	e0bff617 	ldw	r2,-40(fp)
 180c3b8:	10c00017 	ldw	r3,0(r2)
 180c3bc:	e0bff717 	ldw	r2,-36(fp)
 180c3c0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 180c3c4:	e0fff617 	ldw	r3,-40(fp)
 180c3c8:	e0bff717 	ldw	r2,-36(fp)
 180c3cc:	18800015 	stw	r2,0(r3)
 180c3d0:	e0bffa17 	ldw	r2,-24(fp)
 180c3d4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 180c3d8:	e0bff517 	ldw	r2,-44(fp)
 180c3dc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 180c3e0:	e03fff15 	stw	zero,-4(fp)
 180c3e4:	00000506 	br	180c3fc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 180c3e8:	00bffa84 	movi	r2,-22
 180c3ec:	e0bfff15 	stw	r2,-4(fp)
 180c3f0:	00000206 	br	180c3fc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 180c3f4:	00bfde84 	movi	r2,-134
 180c3f8:	e0bfff15 	stw	r2,-4(fp)
 180c3fc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 180c400:	e037883a 	mov	sp,fp
 180c404:	df000017 	ldw	fp,0(sp)
 180c408:	dec00104 	addi	sp,sp,4
 180c40c:	f800283a 	ret

0180c410 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 180c410:	deffff04 	addi	sp,sp,-4
 180c414:	df000015 	stw	fp,0(sp)
 180c418:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 180c41c:	e037883a 	mov	sp,fp
 180c420:	df000017 	ldw	fp,0(sp)
 180c424:	dec00104 	addi	sp,sp,4
 180c428:	f800283a 	ret

0180c42c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 180c42c:	defff904 	addi	sp,sp,-28
 180c430:	dfc00615 	stw	ra,24(sp)
 180c434:	df000515 	stw	fp,20(sp)
 180c438:	df000504 	addi	fp,sp,20
 180c43c:	e13ffd15 	stw	r4,-12(fp)
 180c440:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 180c444:	e0bffd17 	ldw	r2,-12(fp)
 180c448:	1005003a 	cmpeq	r2,r2,zero
 180c44c:	1000041e 	bne	r2,zero,180c460 <alt_dev_llist_insert+0x34>
 180c450:	e0bffd17 	ldw	r2,-12(fp)
 180c454:	10800217 	ldw	r2,8(r2)
 180c458:	1004c03a 	cmpne	r2,r2,zero
 180c45c:	1000071e 	bne	r2,zero,180c47c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 180c460:	180c4e00 	call	180c4e0 <alt_get_errno>
 180c464:	1007883a 	mov	r3,r2
 180c468:	00800584 	movi	r2,22
 180c46c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 180c470:	00bffa84 	movi	r2,-22
 180c474:	e0bfff15 	stw	r2,-4(fp)
 180c478:	00001306 	br	180c4c8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 180c47c:	e0fffd17 	ldw	r3,-12(fp)
 180c480:	e0bffe17 	ldw	r2,-8(fp)
 180c484:	e0bffb15 	stw	r2,-20(fp)
 180c488:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 180c48c:	e0fffc17 	ldw	r3,-16(fp)
 180c490:	e0bffb17 	ldw	r2,-20(fp)
 180c494:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 180c498:	e0bffb17 	ldw	r2,-20(fp)
 180c49c:	10c00017 	ldw	r3,0(r2)
 180c4a0:	e0bffc17 	ldw	r2,-16(fp)
 180c4a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 180c4a8:	e0bffb17 	ldw	r2,-20(fp)
 180c4ac:	10c00017 	ldw	r3,0(r2)
 180c4b0:	e0bffc17 	ldw	r2,-16(fp)
 180c4b4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 180c4b8:	e0fffb17 	ldw	r3,-20(fp)
 180c4bc:	e0bffc17 	ldw	r2,-16(fp)
 180c4c0:	18800015 	stw	r2,0(r3)

  return 0;  
 180c4c4:	e03fff15 	stw	zero,-4(fp)
 180c4c8:	e0bfff17 	ldw	r2,-4(fp)
}
 180c4cc:	e037883a 	mov	sp,fp
 180c4d0:	dfc00117 	ldw	ra,4(sp)
 180c4d4:	df000017 	ldw	fp,0(sp)
 180c4d8:	dec00204 	addi	sp,sp,8
 180c4dc:	f800283a 	ret

0180c4e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 180c4e0:	defffd04 	addi	sp,sp,-12
 180c4e4:	dfc00215 	stw	ra,8(sp)
 180c4e8:	df000115 	stw	fp,4(sp)
 180c4ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 180c4f0:	00806074 	movhi	r2,385
 180c4f4:	10be1c04 	addi	r2,r2,-1936
 180c4f8:	10800017 	ldw	r2,0(r2)
 180c4fc:	1005003a 	cmpeq	r2,r2,zero
 180c500:	1000061e 	bne	r2,zero,180c51c <alt_get_errno+0x3c>
 180c504:	00806074 	movhi	r2,385
 180c508:	10be1c04 	addi	r2,r2,-1936
 180c50c:	10800017 	ldw	r2,0(r2)
 180c510:	103ee83a 	callr	r2
 180c514:	e0bfff15 	stw	r2,-4(fp)
 180c518:	00000306 	br	180c528 <alt_get_errno+0x48>
 180c51c:	00806074 	movhi	r2,385
 180c520:	1084ea04 	addi	r2,r2,5032
 180c524:	e0bfff15 	stw	r2,-4(fp)
 180c528:	e0bfff17 	ldw	r2,-4(fp)
}
 180c52c:	e037883a 	mov	sp,fp
 180c530:	dfc00117 	ldw	ra,4(sp)
 180c534:	df000017 	ldw	fp,0(sp)
 180c538:	dec00204 	addi	sp,sp,8
 180c53c:	f800283a 	ret

0180c540 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 180c540:	defffd04 	addi	sp,sp,-12
 180c544:	dfc00215 	stw	ra,8(sp)
 180c548:	df000115 	stw	fp,4(sp)
 180c54c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 180c550:	00bfff04 	movi	r2,-4
 180c554:	00c06074 	movhi	r3,385
 180c558:	18f62c04 	addi	r3,r3,-10064
 180c55c:	1885883a 	add	r2,r3,r2
 180c560:	e0bfff15 	stw	r2,-4(fp)
 180c564:	00000606 	br	180c580 <_do_ctors+0x40>
        (*ctor) (); 
 180c568:	e0bfff17 	ldw	r2,-4(fp)
 180c56c:	10800017 	ldw	r2,0(r2)
 180c570:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 180c574:	e0bfff17 	ldw	r2,-4(fp)
 180c578:	10bfff04 	addi	r2,r2,-4
 180c57c:	e0bfff15 	stw	r2,-4(fp)
 180c580:	e0ffff17 	ldw	r3,-4(fp)
 180c584:	00806074 	movhi	r2,385
 180c588:	10b62b04 	addi	r2,r2,-10068
 180c58c:	18bff62e 	bgeu	r3,r2,180c568 <_do_ctors+0x28>
        (*ctor) (); 
}
 180c590:	e037883a 	mov	sp,fp
 180c594:	dfc00117 	ldw	ra,4(sp)
 180c598:	df000017 	ldw	fp,0(sp)
 180c59c:	dec00204 	addi	sp,sp,8
 180c5a0:	f800283a 	ret

0180c5a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 180c5a4:	defffd04 	addi	sp,sp,-12
 180c5a8:	dfc00215 	stw	ra,8(sp)
 180c5ac:	df000115 	stw	fp,4(sp)
 180c5b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 180c5b4:	00bfff04 	movi	r2,-4
 180c5b8:	00c06074 	movhi	r3,385
 180c5bc:	18f62c04 	addi	r3,r3,-10064
 180c5c0:	1885883a 	add	r2,r3,r2
 180c5c4:	e0bfff15 	stw	r2,-4(fp)
 180c5c8:	00000606 	br	180c5e4 <_do_dtors+0x40>
        (*dtor) (); 
 180c5cc:	e0bfff17 	ldw	r2,-4(fp)
 180c5d0:	10800017 	ldw	r2,0(r2)
 180c5d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 180c5d8:	e0bfff17 	ldw	r2,-4(fp)
 180c5dc:	10bfff04 	addi	r2,r2,-4
 180c5e0:	e0bfff15 	stw	r2,-4(fp)
 180c5e4:	e0ffff17 	ldw	r3,-4(fp)
 180c5e8:	00806074 	movhi	r2,385
 180c5ec:	10b62c04 	addi	r2,r2,-10064
 180c5f0:	18bff62e 	bgeu	r3,r2,180c5cc <_do_dtors+0x28>
        (*dtor) (); 
}
 180c5f4:	e037883a 	mov	sp,fp
 180c5f8:	dfc00117 	ldw	ra,4(sp)
 180c5fc:	df000017 	ldw	fp,0(sp)
 180c600:	dec00204 	addi	sp,sp,8
 180c604:	f800283a 	ret

0180c608 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 180c608:	defff904 	addi	sp,sp,-28
 180c60c:	dfc00615 	stw	ra,24(sp)
 180c610:	df000515 	stw	fp,20(sp)
 180c614:	df000504 	addi	fp,sp,20
 180c618:	e13ffd15 	stw	r4,-12(fp)
 180c61c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 180c620:	e0bffe17 	ldw	r2,-8(fp)
 180c624:	10800017 	ldw	r2,0(r2)
 180c628:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 180c62c:	e13ffd17 	ldw	r4,-12(fp)
 180c630:	1800a780 	call	1800a78 <strlen>
 180c634:	10800044 	addi	r2,r2,1
 180c638:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 180c63c:	00000d06 	br	180c674 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 180c640:	e0bffc17 	ldw	r2,-16(fp)
 180c644:	11000217 	ldw	r4,8(r2)
 180c648:	e1bffb17 	ldw	r6,-20(fp)
 180c64c:	e17ffd17 	ldw	r5,-12(fp)
 180c650:	180d1b80 	call	180d1b8 <memcmp>
 180c654:	1004c03a 	cmpne	r2,r2,zero
 180c658:	1000031e 	bne	r2,zero,180c668 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 180c65c:	e0bffc17 	ldw	r2,-16(fp)
 180c660:	e0bfff15 	stw	r2,-4(fp)
 180c664:	00000706 	br	180c684 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 180c668:	e0bffc17 	ldw	r2,-16(fp)
 180c66c:	10800017 	ldw	r2,0(r2)
 180c670:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 180c674:	e0fffe17 	ldw	r3,-8(fp)
 180c678:	e0bffc17 	ldw	r2,-16(fp)
 180c67c:	10fff01e 	bne	r2,r3,180c640 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 180c680:	e03fff15 	stw	zero,-4(fp)
 180c684:	e0bfff17 	ldw	r2,-4(fp)
}
 180c688:	e037883a 	mov	sp,fp
 180c68c:	dfc00117 	ldw	ra,4(sp)
 180c690:	df000017 	ldw	fp,0(sp)
 180c694:	dec00204 	addi	sp,sp,8
 180c698:	f800283a 	ret

0180c69c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 180c69c:	deffff04 	addi	sp,sp,-4
 180c6a0:	df000015 	stw	fp,0(sp)
 180c6a4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 180c6a8:	e037883a 	mov	sp,fp
 180c6ac:	df000017 	ldw	fp,0(sp)
 180c6b0:	dec00104 	addi	sp,sp,4
 180c6b4:	f800283a 	ret

0180c6b8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 180c6b8:	defff904 	addi	sp,sp,-28
 180c6bc:	dfc00615 	stw	ra,24(sp)
 180c6c0:	df000515 	stw	fp,20(sp)
 180c6c4:	df000504 	addi	fp,sp,20
 180c6c8:	e13ffc15 	stw	r4,-16(fp)
 180c6cc:	e17ffd15 	stw	r5,-12(fp)
 180c6d0:	e1bffe15 	stw	r6,-8(fp)
 180c6d4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 180c6d8:	e0800217 	ldw	r2,8(fp)
 180c6dc:	d8800015 	stw	r2,0(sp)
 180c6e0:	e13ffc17 	ldw	r4,-16(fp)
 180c6e4:	e17ffd17 	ldw	r5,-12(fp)
 180c6e8:	e1bffe17 	ldw	r6,-8(fp)
 180c6ec:	e1ffff17 	ldw	r7,-4(fp)
 180c6f0:	180c88c0 	call	180c88c <alt_iic_isr_register>
}  
 180c6f4:	e037883a 	mov	sp,fp
 180c6f8:	dfc00117 	ldw	ra,4(sp)
 180c6fc:	df000017 	ldw	fp,0(sp)
 180c700:	dec00204 	addi	sp,sp,8
 180c704:	f800283a 	ret

0180c708 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 180c708:	defff904 	addi	sp,sp,-28
 180c70c:	df000615 	stw	fp,24(sp)
 180c710:	df000604 	addi	fp,sp,24
 180c714:	e13ffe15 	stw	r4,-8(fp)
 180c718:	e17fff15 	stw	r5,-4(fp)
 180c71c:	e0bfff17 	ldw	r2,-4(fp)
 180c720:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 180c724:	0005303a 	rdctl	r2,status
 180c728:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 180c72c:	e0fffb17 	ldw	r3,-20(fp)
 180c730:	00bfff84 	movi	r2,-2
 180c734:	1884703a 	and	r2,r3,r2
 180c738:	1001703a 	wrctl	status,r2
  
  return context;
 180c73c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 180c740:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 180c744:	e0fffc17 	ldw	r3,-16(fp)
 180c748:	00800044 	movi	r2,1
 180c74c:	10c4983a 	sll	r2,r2,r3
 180c750:	1007883a 	mov	r3,r2
 180c754:	00806074 	movhi	r2,385
 180c758:	1084ee04 	addi	r2,r2,5048
 180c75c:	10800017 	ldw	r2,0(r2)
 180c760:	1886b03a 	or	r3,r3,r2
 180c764:	00806074 	movhi	r2,385
 180c768:	1084ee04 	addi	r2,r2,5048
 180c76c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 180c770:	00806074 	movhi	r2,385
 180c774:	1084ee04 	addi	r2,r2,5048
 180c778:	10800017 	ldw	r2,0(r2)
 180c77c:	100170fa 	wrctl	ienable,r2
 180c780:	e0bffd17 	ldw	r2,-12(fp)
 180c784:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 180c788:	e0bffa17 	ldw	r2,-24(fp)
 180c78c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 180c790:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 180c794:	e037883a 	mov	sp,fp
 180c798:	df000017 	ldw	fp,0(sp)
 180c79c:	dec00104 	addi	sp,sp,4
 180c7a0:	f800283a 	ret

0180c7a4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 180c7a4:	defff904 	addi	sp,sp,-28
 180c7a8:	df000615 	stw	fp,24(sp)
 180c7ac:	df000604 	addi	fp,sp,24
 180c7b0:	e13ffe15 	stw	r4,-8(fp)
 180c7b4:	e17fff15 	stw	r5,-4(fp)
 180c7b8:	e0bfff17 	ldw	r2,-4(fp)
 180c7bc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 180c7c0:	0005303a 	rdctl	r2,status
 180c7c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 180c7c8:	e0fffb17 	ldw	r3,-20(fp)
 180c7cc:	00bfff84 	movi	r2,-2
 180c7d0:	1884703a 	and	r2,r3,r2
 180c7d4:	1001703a 	wrctl	status,r2
  
  return context;
 180c7d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 180c7dc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 180c7e0:	e0fffc17 	ldw	r3,-16(fp)
 180c7e4:	00800044 	movi	r2,1
 180c7e8:	10c4983a 	sll	r2,r2,r3
 180c7ec:	0084303a 	nor	r2,zero,r2
 180c7f0:	1007883a 	mov	r3,r2
 180c7f4:	00806074 	movhi	r2,385
 180c7f8:	1084ee04 	addi	r2,r2,5048
 180c7fc:	10800017 	ldw	r2,0(r2)
 180c800:	1886703a 	and	r3,r3,r2
 180c804:	00806074 	movhi	r2,385
 180c808:	1084ee04 	addi	r2,r2,5048
 180c80c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 180c810:	00806074 	movhi	r2,385
 180c814:	1084ee04 	addi	r2,r2,5048
 180c818:	10800017 	ldw	r2,0(r2)
 180c81c:	100170fa 	wrctl	ienable,r2
 180c820:	e0bffd17 	ldw	r2,-12(fp)
 180c824:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 180c828:	e0bffa17 	ldw	r2,-24(fp)
 180c82c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 180c830:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 180c834:	e037883a 	mov	sp,fp
 180c838:	df000017 	ldw	fp,0(sp)
 180c83c:	dec00104 	addi	sp,sp,4
 180c840:	f800283a 	ret

0180c844 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 180c844:	defffc04 	addi	sp,sp,-16
 180c848:	df000315 	stw	fp,12(sp)
 180c84c:	df000304 	addi	fp,sp,12
 180c850:	e13ffe15 	stw	r4,-8(fp)
 180c854:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 180c858:	000530fa 	rdctl	r2,ienable
 180c85c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 180c860:	e0ffff17 	ldw	r3,-4(fp)
 180c864:	00800044 	movi	r2,1
 180c868:	10c4983a 	sll	r2,r2,r3
 180c86c:	1007883a 	mov	r3,r2
 180c870:	e0bffd17 	ldw	r2,-12(fp)
 180c874:	1884703a 	and	r2,r3,r2
 180c878:	1004c03a 	cmpne	r2,r2,zero
}
 180c87c:	e037883a 	mov	sp,fp
 180c880:	df000017 	ldw	fp,0(sp)
 180c884:	dec00104 	addi	sp,sp,4
 180c888:	f800283a 	ret

0180c88c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 180c88c:	defff404 	addi	sp,sp,-48
 180c890:	dfc00b15 	stw	ra,44(sp)
 180c894:	df000a15 	stw	fp,40(sp)
 180c898:	df000a04 	addi	fp,sp,40
 180c89c:	e13ffb15 	stw	r4,-20(fp)
 180c8a0:	e17ffc15 	stw	r5,-16(fp)
 180c8a4:	e1bffd15 	stw	r6,-12(fp)
 180c8a8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 180c8ac:	00bffa84 	movi	r2,-22
 180c8b0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 180c8b4:	e0bffc17 	ldw	r2,-16(fp)
 180c8b8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 180c8bc:	e0bff917 	ldw	r2,-28(fp)
 180c8c0:	10800808 	cmpgei	r2,r2,32
 180c8c4:	1000291e 	bne	r2,zero,180c96c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 180c8c8:	0005303a 	rdctl	r2,status
 180c8cc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 180c8d0:	e0fff717 	ldw	r3,-36(fp)
 180c8d4:	00bfff84 	movi	r2,-2
 180c8d8:	1884703a 	and	r2,r3,r2
 180c8dc:	1001703a 	wrctl	status,r2
  
  return context;
 180c8e0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 180c8e4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 180c8e8:	e0bff917 	ldw	r2,-28(fp)
 180c8ec:	00c06074 	movhi	r3,385
 180c8f0:	18c4fb04 	addi	r3,r3,5100
 180c8f4:	100490fa 	slli	r2,r2,3
 180c8f8:	10c7883a 	add	r3,r2,r3
 180c8fc:	e0bffd17 	ldw	r2,-12(fp)
 180c900:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 180c904:	e0bff917 	ldw	r2,-28(fp)
 180c908:	00c06074 	movhi	r3,385
 180c90c:	18c4fb04 	addi	r3,r3,5100
 180c910:	100490fa 	slli	r2,r2,3
 180c914:	10c5883a 	add	r2,r2,r3
 180c918:	10c00104 	addi	r3,r2,4
 180c91c:	e0bffe17 	ldw	r2,-8(fp)
 180c920:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 180c924:	e0bffd17 	ldw	r2,-12(fp)
 180c928:	1005003a 	cmpeq	r2,r2,zero
 180c92c:	1000051e 	bne	r2,zero,180c944 <alt_iic_isr_register+0xb8>
 180c930:	e17ff917 	ldw	r5,-28(fp)
 180c934:	e13ffb17 	ldw	r4,-20(fp)
 180c938:	180c7080 	call	180c708 <alt_ic_irq_enable>
 180c93c:	e0bfff15 	stw	r2,-4(fp)
 180c940:	00000406 	br	180c954 <alt_iic_isr_register+0xc8>
 180c944:	e17ff917 	ldw	r5,-28(fp)
 180c948:	e13ffb17 	ldw	r4,-20(fp)
 180c94c:	180c7a40 	call	180c7a4 <alt_ic_irq_disable>
 180c950:	e0bfff15 	stw	r2,-4(fp)
 180c954:	e0bfff17 	ldw	r2,-4(fp)
 180c958:	e0bffa15 	stw	r2,-24(fp)
 180c95c:	e0bff817 	ldw	r2,-32(fp)
 180c960:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 180c964:	e0bff617 	ldw	r2,-40(fp)
 180c968:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 180c96c:	e0bffa17 	ldw	r2,-24(fp)
}
 180c970:	e037883a 	mov	sp,fp
 180c974:	dfc00117 	ldw	ra,4(sp)
 180c978:	df000017 	ldw	fp,0(sp)
 180c97c:	dec00204 	addi	sp,sp,8
 180c980:	f800283a 	ret

0180c984 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 180c984:	defff804 	addi	sp,sp,-32
 180c988:	dfc00715 	stw	ra,28(sp)
 180c98c:	df000615 	stw	fp,24(sp)
 180c990:	dc000515 	stw	r16,20(sp)
 180c994:	df000504 	addi	fp,sp,20
 180c998:	e13ffc15 	stw	r4,-16(fp)
 180c99c:	e17ffd15 	stw	r5,-12(fp)
 180c9a0:	e1bffe15 	stw	r6,-8(fp)
 180c9a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 180c9a8:	e13ffd17 	ldw	r4,-12(fp)
 180c9ac:	e17ffe17 	ldw	r5,-8(fp)
 180c9b0:	e1bfff17 	ldw	r6,-4(fp)
 180c9b4:	180cbcc0 	call	180cbcc <open>
 180c9b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 180c9bc:	e0bffb17 	ldw	r2,-20(fp)
 180c9c0:	1004803a 	cmplt	r2,r2,zero
 180c9c4:	10001f1e 	bne	r2,zero,180ca44 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 180c9c8:	e13ffb17 	ldw	r4,-20(fp)
 180c9cc:	04006074 	movhi	r16,385
 180c9d0:	84396d04 	addi	r16,r16,-6732
 180c9d4:	01400304 	movi	r5,12
 180c9d8:	1809b7c0 	call	1809b7c <__mulsi3>
 180c9dc:	1405883a 	add	r2,r2,r16
 180c9e0:	10c00017 	ldw	r3,0(r2)
 180c9e4:	e0bffc17 	ldw	r2,-16(fp)
 180c9e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 180c9ec:	e13ffb17 	ldw	r4,-20(fp)
 180c9f0:	04006074 	movhi	r16,385
 180c9f4:	84396d04 	addi	r16,r16,-6732
 180c9f8:	01400304 	movi	r5,12
 180c9fc:	1809b7c0 	call	1809b7c <__mulsi3>
 180ca00:	1405883a 	add	r2,r2,r16
 180ca04:	10800104 	addi	r2,r2,4
 180ca08:	10c00017 	ldw	r3,0(r2)
 180ca0c:	e0bffc17 	ldw	r2,-16(fp)
 180ca10:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 180ca14:	e13ffb17 	ldw	r4,-20(fp)
 180ca18:	04006074 	movhi	r16,385
 180ca1c:	84396d04 	addi	r16,r16,-6732
 180ca20:	01400304 	movi	r5,12
 180ca24:	1809b7c0 	call	1809b7c <__mulsi3>
 180ca28:	1405883a 	add	r2,r2,r16
 180ca2c:	10800204 	addi	r2,r2,8
 180ca30:	10c00017 	ldw	r3,0(r2)
 180ca34:	e0bffc17 	ldw	r2,-16(fp)
 180ca38:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 180ca3c:	e13ffb17 	ldw	r4,-20(fp)
 180ca40:	180ad5c0 	call	180ad5c <alt_release_fd>
  }
} 
 180ca44:	e037883a 	mov	sp,fp
 180ca48:	dfc00217 	ldw	ra,8(sp)
 180ca4c:	df000117 	ldw	fp,4(sp)
 180ca50:	dc000017 	ldw	r16,0(sp)
 180ca54:	dec00304 	addi	sp,sp,12
 180ca58:	f800283a 	ret

0180ca5c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 180ca5c:	defffb04 	addi	sp,sp,-20
 180ca60:	dfc00415 	stw	ra,16(sp)
 180ca64:	df000315 	stw	fp,12(sp)
 180ca68:	df000304 	addi	fp,sp,12
 180ca6c:	e13ffd15 	stw	r4,-12(fp)
 180ca70:	e17ffe15 	stw	r5,-8(fp)
 180ca74:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 180ca78:	01006074 	movhi	r4,385
 180ca7c:	21397004 	addi	r4,r4,-6720
 180ca80:	e17ffd17 	ldw	r5,-12(fp)
 180ca84:	01800044 	movi	r6,1
 180ca88:	01c07fc4 	movi	r7,511
 180ca8c:	180c9840 	call	180c984 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 180ca90:	01006074 	movhi	r4,385
 180ca94:	21396d04 	addi	r4,r4,-6732
 180ca98:	e17ffe17 	ldw	r5,-8(fp)
 180ca9c:	000d883a 	mov	r6,zero
 180caa0:	01c07fc4 	movi	r7,511
 180caa4:	180c9840 	call	180c984 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 180caa8:	01006074 	movhi	r4,385
 180caac:	21397304 	addi	r4,r4,-6708
 180cab0:	e17fff17 	ldw	r5,-4(fp)
 180cab4:	01800044 	movi	r6,1
 180cab8:	01c07fc4 	movi	r7,511
 180cabc:	180c9840 	call	180c984 <alt_open_fd>
}  
 180cac0:	e037883a 	mov	sp,fp
 180cac4:	dfc00117 	ldw	ra,4(sp)
 180cac8:	df000017 	ldw	fp,0(sp)
 180cacc:	dec00204 	addi	sp,sp,8
 180cad0:	f800283a 	ret

0180cad4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 180cad4:	defffa04 	addi	sp,sp,-24
 180cad8:	dfc00515 	stw	ra,20(sp)
 180cadc:	df000415 	stw	fp,16(sp)
 180cae0:	dc000315 	stw	r16,12(sp)
 180cae4:	df000304 	addi	fp,sp,12
 180cae8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 180caec:	e0bffe17 	ldw	r2,-8(fp)
 180caf0:	10800217 	ldw	r2,8(r2)
 180caf4:	10d00034 	orhi	r3,r2,16384
 180caf8:	e0bffe17 	ldw	r2,-8(fp)
 180cafc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 180cb00:	e03ffd15 	stw	zero,-12(fp)
 180cb04:	00002306 	br	180cb94 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 180cb08:	e13ffd17 	ldw	r4,-12(fp)
 180cb0c:	04006074 	movhi	r16,385
 180cb10:	84396d04 	addi	r16,r16,-6732
 180cb14:	01400304 	movi	r5,12
 180cb18:	1809b7c0 	call	1809b7c <__mulsi3>
 180cb1c:	1405883a 	add	r2,r2,r16
 180cb20:	10c00017 	ldw	r3,0(r2)
 180cb24:	e0bffe17 	ldw	r2,-8(fp)
 180cb28:	10800017 	ldw	r2,0(r2)
 180cb2c:	1880161e 	bne	r3,r2,180cb88 <alt_file_locked+0xb4>
 180cb30:	e13ffd17 	ldw	r4,-12(fp)
 180cb34:	04006074 	movhi	r16,385
 180cb38:	84396d04 	addi	r16,r16,-6732
 180cb3c:	01400304 	movi	r5,12
 180cb40:	1809b7c0 	call	1809b7c <__mulsi3>
 180cb44:	1405883a 	add	r2,r2,r16
 180cb48:	10800204 	addi	r2,r2,8
 180cb4c:	10800017 	ldw	r2,0(r2)
 180cb50:	1004403a 	cmpge	r2,r2,zero
 180cb54:	10000c1e 	bne	r2,zero,180cb88 <alt_file_locked+0xb4>
 180cb58:	e13ffd17 	ldw	r4,-12(fp)
 180cb5c:	01400304 	movi	r5,12
 180cb60:	1809b7c0 	call	1809b7c <__mulsi3>
 180cb64:	1007883a 	mov	r3,r2
 180cb68:	00806074 	movhi	r2,385
 180cb6c:	10b96d04 	addi	r2,r2,-6732
 180cb70:	1887883a 	add	r3,r3,r2
 180cb74:	e0bffe17 	ldw	r2,-8(fp)
 180cb78:	18800326 	beq	r3,r2,180cb88 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 180cb7c:	00bffcc4 	movi	r2,-13
 180cb80:	e0bfff15 	stw	r2,-4(fp)
 180cb84:	00000a06 	br	180cbb0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 180cb88:	e0bffd17 	ldw	r2,-12(fp)
 180cb8c:	10800044 	addi	r2,r2,1
 180cb90:	e0bffd15 	stw	r2,-12(fp)
 180cb94:	00806074 	movhi	r2,385
 180cb98:	10be1b04 	addi	r2,r2,-1940
 180cb9c:	10800017 	ldw	r2,0(r2)
 180cba0:	1007883a 	mov	r3,r2
 180cba4:	e0bffd17 	ldw	r2,-12(fp)
 180cba8:	18bfd72e 	bgeu	r3,r2,180cb08 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 180cbac:	e03fff15 	stw	zero,-4(fp)
 180cbb0:	e0bfff17 	ldw	r2,-4(fp)
}
 180cbb4:	e037883a 	mov	sp,fp
 180cbb8:	dfc00217 	ldw	ra,8(sp)
 180cbbc:	df000117 	ldw	fp,4(sp)
 180cbc0:	dc000017 	ldw	r16,0(sp)
 180cbc4:	dec00304 	addi	sp,sp,12
 180cbc8:	f800283a 	ret

0180cbcc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 180cbcc:	defff404 	addi	sp,sp,-48
 180cbd0:	dfc00b15 	stw	ra,44(sp)
 180cbd4:	df000a15 	stw	fp,40(sp)
 180cbd8:	df000a04 	addi	fp,sp,40
 180cbdc:	e13ffb15 	stw	r4,-20(fp)
 180cbe0:	e17ffc15 	stw	r5,-16(fp)
 180cbe4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 180cbe8:	00bfffc4 	movi	r2,-1
 180cbec:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 180cbf0:	00bffb44 	movi	r2,-19
 180cbf4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 180cbf8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 180cbfc:	e13ffb17 	ldw	r4,-20(fp)
 180cc00:	01406074 	movhi	r5,385
 180cc04:	297e1904 	addi	r5,r5,-1948
 180cc08:	180c6080 	call	180c608 <alt_find_dev>
 180cc0c:	e0bffa15 	stw	r2,-24(fp)
 180cc10:	e0bffa17 	ldw	r2,-24(fp)
 180cc14:	1004c03a 	cmpne	r2,r2,zero
 180cc18:	1000051e 	bne	r2,zero,180cc30 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 180cc1c:	e13ffb17 	ldw	r4,-20(fp)
 180cc20:	180cf7c0 	call	180cf7c <alt_find_file>
 180cc24:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 180cc28:	00800044 	movi	r2,1
 180cc2c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 180cc30:	e0bffa17 	ldw	r2,-24(fp)
 180cc34:	1005003a 	cmpeq	r2,r2,zero
 180cc38:	1000311e 	bne	r2,zero,180cd00 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 180cc3c:	e13ffa17 	ldw	r4,-24(fp)
 180cc40:	180d09c0 	call	180d09c <alt_get_fd>
 180cc44:	e0bff815 	stw	r2,-32(fp)
 180cc48:	e0bff817 	ldw	r2,-32(fp)
 180cc4c:	1004403a 	cmpge	r2,r2,zero
 180cc50:	1000031e 	bne	r2,zero,180cc60 <open+0x94>
    {
      status = index;
 180cc54:	e0bff817 	ldw	r2,-32(fp)
 180cc58:	e0bff715 	stw	r2,-36(fp)
 180cc5c:	00002a06 	br	180cd08 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 180cc60:	e13ff817 	ldw	r4,-32(fp)
 180cc64:	01400304 	movi	r5,12
 180cc68:	1809b7c0 	call	1809b7c <__mulsi3>
 180cc6c:	1007883a 	mov	r3,r2
 180cc70:	00806074 	movhi	r2,385
 180cc74:	10b96d04 	addi	r2,r2,-6732
 180cc78:	1885883a 	add	r2,r3,r2
 180cc7c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 180cc80:	e0fffc17 	ldw	r3,-16(fp)
 180cc84:	00900034 	movhi	r2,16384
 180cc88:	10bfffc4 	addi	r2,r2,-1
 180cc8c:	1886703a 	and	r3,r3,r2
 180cc90:	e0bff917 	ldw	r2,-28(fp)
 180cc94:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 180cc98:	e0bff617 	ldw	r2,-40(fp)
 180cc9c:	1004c03a 	cmpne	r2,r2,zero
 180cca0:	1000061e 	bne	r2,zero,180ccbc <open+0xf0>
 180cca4:	e13ff917 	ldw	r4,-28(fp)
 180cca8:	180cad40 	call	180cad4 <alt_file_locked>
 180ccac:	e0bff715 	stw	r2,-36(fp)
 180ccb0:	e0bff717 	ldw	r2,-36(fp)
 180ccb4:	1004803a 	cmplt	r2,r2,zero
 180ccb8:	1000131e 	bne	r2,zero,180cd08 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 180ccbc:	e0bffa17 	ldw	r2,-24(fp)
 180ccc0:	10800317 	ldw	r2,12(r2)
 180ccc4:	1005003a 	cmpeq	r2,r2,zero
 180ccc8:	1000091e 	bne	r2,zero,180ccf0 <open+0x124>
 180cccc:	e0bffa17 	ldw	r2,-24(fp)
 180ccd0:	10800317 	ldw	r2,12(r2)
 180ccd4:	e13ff917 	ldw	r4,-28(fp)
 180ccd8:	e17ffb17 	ldw	r5,-20(fp)
 180ccdc:	e1bffc17 	ldw	r6,-16(fp)
 180cce0:	e1fffd17 	ldw	r7,-12(fp)
 180cce4:	103ee83a 	callr	r2
 180cce8:	e0bfff15 	stw	r2,-4(fp)
 180ccec:	00000106 	br	180ccf4 <open+0x128>
 180ccf0:	e03fff15 	stw	zero,-4(fp)
 180ccf4:	e0bfff17 	ldw	r2,-4(fp)
 180ccf8:	e0bff715 	stw	r2,-36(fp)
 180ccfc:	00000206 	br	180cd08 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 180cd00:	00bffb44 	movi	r2,-19
 180cd04:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 180cd08:	e0bff717 	ldw	r2,-36(fp)
 180cd0c:	1004403a 	cmpge	r2,r2,zero
 180cd10:	1000091e 	bne	r2,zero,180cd38 <open+0x16c>
  {
    alt_release_fd (index);  
 180cd14:	e13ff817 	ldw	r4,-32(fp)
 180cd18:	180ad5c0 	call	180ad5c <alt_release_fd>
    ALT_ERRNO = -status;
 180cd1c:	180cd580 	call	180cd58 <alt_get_errno>
 180cd20:	e0fff717 	ldw	r3,-36(fp)
 180cd24:	00c7c83a 	sub	r3,zero,r3
 180cd28:	10c00015 	stw	r3,0(r2)
    return -1;
 180cd2c:	00bfffc4 	movi	r2,-1
 180cd30:	e0bffe15 	stw	r2,-8(fp)
 180cd34:	00000206 	br	180cd40 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 180cd38:	e0bff817 	ldw	r2,-32(fp)
 180cd3c:	e0bffe15 	stw	r2,-8(fp)
 180cd40:	e0bffe17 	ldw	r2,-8(fp)
}
 180cd44:	e037883a 	mov	sp,fp
 180cd48:	dfc00117 	ldw	ra,4(sp)
 180cd4c:	df000017 	ldw	fp,0(sp)
 180cd50:	dec00204 	addi	sp,sp,8
 180cd54:	f800283a 	ret

0180cd58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 180cd58:	defffd04 	addi	sp,sp,-12
 180cd5c:	dfc00215 	stw	ra,8(sp)
 180cd60:	df000115 	stw	fp,4(sp)
 180cd64:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 180cd68:	00806074 	movhi	r2,385
 180cd6c:	10be1c04 	addi	r2,r2,-1936
 180cd70:	10800017 	ldw	r2,0(r2)
 180cd74:	1005003a 	cmpeq	r2,r2,zero
 180cd78:	1000061e 	bne	r2,zero,180cd94 <alt_get_errno+0x3c>
 180cd7c:	00806074 	movhi	r2,385
 180cd80:	10be1c04 	addi	r2,r2,-1936
 180cd84:	10800017 	ldw	r2,0(r2)
 180cd88:	103ee83a 	callr	r2
 180cd8c:	e0bfff15 	stw	r2,-4(fp)
 180cd90:	00000306 	br	180cda0 <alt_get_errno+0x48>
 180cd94:	00806074 	movhi	r2,385
 180cd98:	1084ea04 	addi	r2,r2,5032
 180cd9c:	e0bfff15 	stw	r2,-4(fp)
 180cda0:	e0bfff17 	ldw	r2,-4(fp)
}
 180cda4:	e037883a 	mov	sp,fp
 180cda8:	dfc00117 	ldw	ra,4(sp)
 180cdac:	df000017 	ldw	fp,0(sp)
 180cdb0:	dec00204 	addi	sp,sp,8
 180cdb4:	f800283a 	ret

0180cdb8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 180cdb8:	defffa04 	addi	sp,sp,-24
 180cdbc:	df000515 	stw	fp,20(sp)
 180cdc0:	df000504 	addi	fp,sp,20
 180cdc4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 180cdc8:	0005303a 	rdctl	r2,status
 180cdcc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 180cdd0:	e0fffd17 	ldw	r3,-12(fp)
 180cdd4:	00bfff84 	movi	r2,-2
 180cdd8:	1884703a 	and	r2,r3,r2
 180cddc:	1001703a 	wrctl	status,r2
  
  return context;
 180cde0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 180cde4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 180cde8:	e0bfff17 	ldw	r2,-4(fp)
 180cdec:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 180cdf0:	e0bffc17 	ldw	r2,-16(fp)
 180cdf4:	10c00017 	ldw	r3,0(r2)
 180cdf8:	e0bffc17 	ldw	r2,-16(fp)
 180cdfc:	10800117 	ldw	r2,4(r2)
 180ce00:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 180ce04:	e0bffc17 	ldw	r2,-16(fp)
 180ce08:	10c00117 	ldw	r3,4(r2)
 180ce0c:	e0bffc17 	ldw	r2,-16(fp)
 180ce10:	10800017 	ldw	r2,0(r2)
 180ce14:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 180ce18:	e0fffc17 	ldw	r3,-16(fp)
 180ce1c:	e0bffc17 	ldw	r2,-16(fp)
 180ce20:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 180ce24:	e0fffc17 	ldw	r3,-16(fp)
 180ce28:	e0bffc17 	ldw	r2,-16(fp)
 180ce2c:	18800015 	stw	r2,0(r3)
 180ce30:	e0bffe17 	ldw	r2,-8(fp)
 180ce34:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 180ce38:	e0bffb17 	ldw	r2,-20(fp)
 180ce3c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 180ce40:	e037883a 	mov	sp,fp
 180ce44:	df000017 	ldw	fp,0(sp)
 180ce48:	dec00104 	addi	sp,sp,4
 180ce4c:	f800283a 	ret

0180ce50 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 180ce50:	defffb04 	addi	sp,sp,-20
 180ce54:	dfc00415 	stw	ra,16(sp)
 180ce58:	df000315 	stw	fp,12(sp)
 180ce5c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 180ce60:	d0a00e17 	ldw	r2,-32712(gp)
 180ce64:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 180ce68:	d0a6df17 	ldw	r2,-25732(gp)
 180ce6c:	10800044 	addi	r2,r2,1
 180ce70:	d0a6df15 	stw	r2,-25732(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 180ce74:	00003106 	br	180cf3c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 180ce78:	e0bffe17 	ldw	r2,-8(fp)
 180ce7c:	10800017 	ldw	r2,0(r2)
 180ce80:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 180ce84:	e0bffe17 	ldw	r2,-8(fp)
 180ce88:	10800403 	ldbu	r2,16(r2)
 180ce8c:	10803fcc 	andi	r2,r2,255
 180ce90:	1005003a 	cmpeq	r2,r2,zero
 180ce94:	1000051e 	bne	r2,zero,180ceac <alt_tick+0x5c>
 180ce98:	d0a6df17 	ldw	r2,-25732(gp)
 180ce9c:	1004c03a 	cmpne	r2,r2,zero
 180cea0:	1000021e 	bne	r2,zero,180ceac <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 180cea4:	e0bffe17 	ldw	r2,-8(fp)
 180cea8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 180ceac:	e0bffe17 	ldw	r2,-8(fp)
 180ceb0:	10c00217 	ldw	r3,8(r2)
 180ceb4:	d0a6df17 	ldw	r2,-25732(gp)
 180ceb8:	10c01e36 	bltu	r2,r3,180cf34 <alt_tick+0xe4>
 180cebc:	e0bffe17 	ldw	r2,-8(fp)
 180cec0:	10800403 	ldbu	r2,16(r2)
 180cec4:	10803fcc 	andi	r2,r2,255
 180cec8:	1004c03a 	cmpne	r2,r2,zero
 180cecc:	1000191e 	bne	r2,zero,180cf34 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 180ced0:	e0bffe17 	ldw	r2,-8(fp)
 180ced4:	10c00317 	ldw	r3,12(r2)
 180ced8:	e0bffe17 	ldw	r2,-8(fp)
 180cedc:	11000517 	ldw	r4,20(r2)
 180cee0:	183ee83a 	callr	r3
 180cee4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 180cee8:	e0bffd17 	ldw	r2,-12(fp)
 180ceec:	1004c03a 	cmpne	r2,r2,zero
 180cef0:	1000031e 	bne	r2,zero,180cf00 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 180cef4:	e13ffe17 	ldw	r4,-8(fp)
 180cef8:	180cdb80 	call	180cdb8 <alt_alarm_stop>
 180cefc:	00000d06 	br	180cf34 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 180cf00:	e0bffe17 	ldw	r2,-8(fp)
 180cf04:	10c00217 	ldw	r3,8(r2)
 180cf08:	e0bffd17 	ldw	r2,-12(fp)
 180cf0c:	1887883a 	add	r3,r3,r2
 180cf10:	e0bffe17 	ldw	r2,-8(fp)
 180cf14:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 180cf18:	e0bffe17 	ldw	r2,-8(fp)
 180cf1c:	10c00217 	ldw	r3,8(r2)
 180cf20:	d0a6df17 	ldw	r2,-25732(gp)
 180cf24:	1880032e 	bgeu	r3,r2,180cf34 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 180cf28:	e0fffe17 	ldw	r3,-8(fp)
 180cf2c:	00800044 	movi	r2,1
 180cf30:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 180cf34:	e0bfff17 	ldw	r2,-4(fp)
 180cf38:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 180cf3c:	d0e00e04 	addi	r3,gp,-32712
 180cf40:	e0bffe17 	ldw	r2,-8(fp)
 180cf44:	10ffcc1e 	bne	r2,r3,180ce78 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 180cf48:	e037883a 	mov	sp,fp
 180cf4c:	dfc00117 	ldw	ra,4(sp)
 180cf50:	df000017 	ldw	fp,0(sp)
 180cf54:	dec00204 	addi	sp,sp,8
 180cf58:	f800283a 	ret

0180cf5c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 180cf5c:	deffff04 	addi	sp,sp,-4
 180cf60:	df000015 	stw	fp,0(sp)
 180cf64:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 180cf68:	000170fa 	wrctl	ienable,zero
}
 180cf6c:	e037883a 	mov	sp,fp
 180cf70:	df000017 	ldw	fp,0(sp)
 180cf74:	dec00104 	addi	sp,sp,4
 180cf78:	f800283a 	ret

0180cf7c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 180cf7c:	defffa04 	addi	sp,sp,-24
 180cf80:	dfc00515 	stw	ra,20(sp)
 180cf84:	df000415 	stw	fp,16(sp)
 180cf88:	df000404 	addi	fp,sp,16
 180cf8c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 180cf90:	00806074 	movhi	r2,385
 180cf94:	10be1704 	addi	r2,r2,-1956
 180cf98:	10800017 	ldw	r2,0(r2)
 180cf9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 180cfa0:	00003306 	br	180d070 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 180cfa4:	e0bffd17 	ldw	r2,-12(fp)
 180cfa8:	11000217 	ldw	r4,8(r2)
 180cfac:	1800a780 	call	1800a78 <strlen>
 180cfb0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 180cfb4:	e0bffd17 	ldw	r2,-12(fp)
 180cfb8:	10c00217 	ldw	r3,8(r2)
 180cfbc:	e0bffc17 	ldw	r2,-16(fp)
 180cfc0:	1885883a 	add	r2,r3,r2
 180cfc4:	10bfffc4 	addi	r2,r2,-1
 180cfc8:	10800003 	ldbu	r2,0(r2)
 180cfcc:	10803fcc 	andi	r2,r2,255
 180cfd0:	1080201c 	xori	r2,r2,128
 180cfd4:	10bfe004 	addi	r2,r2,-128
 180cfd8:	10800bd8 	cmpnei	r2,r2,47
 180cfdc:	1000031e 	bne	r2,zero,180cfec <alt_find_file+0x70>
    {
      len -= 1;
 180cfe0:	e0bffc17 	ldw	r2,-16(fp)
 180cfe4:	10bfffc4 	addi	r2,r2,-1
 180cfe8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 180cfec:	e0bffc17 	ldw	r2,-16(fp)
 180cff0:	1007883a 	mov	r3,r2
 180cff4:	e0bffe17 	ldw	r2,-8(fp)
 180cff8:	1885883a 	add	r2,r3,r2
 180cffc:	10800003 	ldbu	r2,0(r2)
 180d000:	10803fcc 	andi	r2,r2,255
 180d004:	1080201c 	xori	r2,r2,128
 180d008:	10bfe004 	addi	r2,r2,-128
 180d00c:	10800be0 	cmpeqi	r2,r2,47
 180d010:	10000a1e 	bne	r2,zero,180d03c <alt_find_file+0xc0>
 180d014:	e0bffc17 	ldw	r2,-16(fp)
 180d018:	1007883a 	mov	r3,r2
 180d01c:	e0bffe17 	ldw	r2,-8(fp)
 180d020:	1885883a 	add	r2,r3,r2
 180d024:	10800003 	ldbu	r2,0(r2)
 180d028:	10803fcc 	andi	r2,r2,255
 180d02c:	1080201c 	xori	r2,r2,128
 180d030:	10bfe004 	addi	r2,r2,-128
 180d034:	1004c03a 	cmpne	r2,r2,zero
 180d038:	10000a1e 	bne	r2,zero,180d064 <alt_find_file+0xe8>
 180d03c:	e0bffd17 	ldw	r2,-12(fp)
 180d040:	11000217 	ldw	r4,8(r2)
 180d044:	e1bffc17 	ldw	r6,-16(fp)
 180d048:	e17ffe17 	ldw	r5,-8(fp)
 180d04c:	180d1b80 	call	180d1b8 <memcmp>
 180d050:	1004c03a 	cmpne	r2,r2,zero
 180d054:	1000031e 	bne	r2,zero,180d064 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 180d058:	e0bffd17 	ldw	r2,-12(fp)
 180d05c:	e0bfff15 	stw	r2,-4(fp)
 180d060:	00000806 	br	180d084 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 180d064:	e0bffd17 	ldw	r2,-12(fp)
 180d068:	10800017 	ldw	r2,0(r2)
 180d06c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 180d070:	00c06074 	movhi	r3,385
 180d074:	18fe1704 	addi	r3,r3,-1956
 180d078:	e0bffd17 	ldw	r2,-12(fp)
 180d07c:	10ffc91e 	bne	r2,r3,180cfa4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 180d080:	e03fff15 	stw	zero,-4(fp)
 180d084:	e0bfff17 	ldw	r2,-4(fp)
}
 180d088:	e037883a 	mov	sp,fp
 180d08c:	dfc00117 	ldw	ra,4(sp)
 180d090:	df000017 	ldw	fp,0(sp)
 180d094:	dec00204 	addi	sp,sp,8
 180d098:	f800283a 	ret

0180d09c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 180d09c:	defffa04 	addi	sp,sp,-24
 180d0a0:	dfc00515 	stw	ra,20(sp)
 180d0a4:	df000415 	stw	fp,16(sp)
 180d0a8:	dc000315 	stw	r16,12(sp)
 180d0ac:	df000304 	addi	fp,sp,12
 180d0b0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 180d0b4:	00bffa04 	movi	r2,-24
 180d0b8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 180d0bc:	e03ffe15 	stw	zero,-8(fp)
 180d0c0:	00002006 	br	180d144 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 180d0c4:	e13ffe17 	ldw	r4,-8(fp)
 180d0c8:	04006074 	movhi	r16,385
 180d0cc:	84396d04 	addi	r16,r16,-6732
 180d0d0:	01400304 	movi	r5,12
 180d0d4:	1809b7c0 	call	1809b7c <__mulsi3>
 180d0d8:	1405883a 	add	r2,r2,r16
 180d0dc:	10800017 	ldw	r2,0(r2)
 180d0e0:	1004c03a 	cmpne	r2,r2,zero
 180d0e4:	1000141e 	bne	r2,zero,180d138 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 180d0e8:	e13ffe17 	ldw	r4,-8(fp)
 180d0ec:	04006074 	movhi	r16,385
 180d0f0:	84396d04 	addi	r16,r16,-6732
 180d0f4:	01400304 	movi	r5,12
 180d0f8:	1809b7c0 	call	1809b7c <__mulsi3>
 180d0fc:	1407883a 	add	r3,r2,r16
 180d100:	e0bfff17 	ldw	r2,-4(fp)
 180d104:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 180d108:	00806074 	movhi	r2,385
 180d10c:	10be1b04 	addi	r2,r2,-1940
 180d110:	10c00017 	ldw	r3,0(r2)
 180d114:	e0bffe17 	ldw	r2,-8(fp)
 180d118:	1880040e 	bge	r3,r2,180d12c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 180d11c:	00c06074 	movhi	r3,385
 180d120:	18fe1b04 	addi	r3,r3,-1940
 180d124:	e0bffe17 	ldw	r2,-8(fp)
 180d128:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 180d12c:	e0bffe17 	ldw	r2,-8(fp)
 180d130:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 180d134:	00000606 	br	180d150 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 180d138:	e0bffe17 	ldw	r2,-8(fp)
 180d13c:	10800044 	addi	r2,r2,1
 180d140:	e0bffe15 	stw	r2,-8(fp)
 180d144:	e0bffe17 	ldw	r2,-8(fp)
 180d148:	10800810 	cmplti	r2,r2,32
 180d14c:	103fdd1e 	bne	r2,zero,180d0c4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 180d150:	e0bffd17 	ldw	r2,-12(fp)
}
 180d154:	e037883a 	mov	sp,fp
 180d158:	dfc00217 	ldw	ra,8(sp)
 180d15c:	df000117 	ldw	fp,4(sp)
 180d160:	dc000017 	ldw	r16,0(sp)
 180d164:	dec00304 	addi	sp,sp,12
 180d168:	f800283a 	ret

0180d16c <atexit>:
 180d16c:	200b883a 	mov	r5,r4
 180d170:	000d883a 	mov	r6,zero
 180d174:	0009883a 	mov	r4,zero
 180d178:	000f883a 	mov	r7,zero
 180d17c:	180d5641 	jmpi	180d564 <__register_exitproc>

0180d180 <exit>:
 180d180:	defffe04 	addi	sp,sp,-8
 180d184:	000b883a 	mov	r5,zero
 180d188:	dc000015 	stw	r16,0(sp)
 180d18c:	dfc00115 	stw	ra,4(sp)
 180d190:	2021883a 	mov	r16,r4
 180d194:	180d69c0 	call	180d69c <__call_exitprocs>
 180d198:	00806074 	movhi	r2,385
 180d19c:	10be1204 	addi	r2,r2,-1976
 180d1a0:	11000017 	ldw	r4,0(r2)
 180d1a4:	20800f17 	ldw	r2,60(r4)
 180d1a8:	10000126 	beq	r2,zero,180d1b0 <exit+0x30>
 180d1ac:	103ee83a 	callr	r2
 180d1b0:	8009883a 	mov	r4,r16
 180d1b4:	180d88c0 	call	180d88c <_exit>

0180d1b8 <memcmp>:
 180d1b8:	00c000c4 	movi	r3,3
 180d1bc:	1980032e 	bgeu	r3,r6,180d1cc <memcmp+0x14>
 180d1c0:	2144b03a 	or	r2,r4,r5
 180d1c4:	10c4703a 	and	r2,r2,r3
 180d1c8:	10000f26 	beq	r2,zero,180d208 <memcmp+0x50>
 180d1cc:	31ffffc4 	addi	r7,r6,-1
 180d1d0:	3000061e 	bne	r6,zero,180d1ec <memcmp+0x34>
 180d1d4:	00000a06 	br	180d200 <memcmp+0x48>
 180d1d8:	39ffffc4 	addi	r7,r7,-1
 180d1dc:	00bfffc4 	movi	r2,-1
 180d1e0:	21000044 	addi	r4,r4,1
 180d1e4:	29400044 	addi	r5,r5,1
 180d1e8:	38800526 	beq	r7,r2,180d200 <memcmp+0x48>
 180d1ec:	20c00003 	ldbu	r3,0(r4)
 180d1f0:	28800003 	ldbu	r2,0(r5)
 180d1f4:	18bff826 	beq	r3,r2,180d1d8 <memcmp+0x20>
 180d1f8:	1885c83a 	sub	r2,r3,r2
 180d1fc:	f800283a 	ret
 180d200:	0005883a 	mov	r2,zero
 180d204:	f800283a 	ret
 180d208:	180f883a 	mov	r7,r3
 180d20c:	20c00017 	ldw	r3,0(r4)
 180d210:	28800017 	ldw	r2,0(r5)
 180d214:	18bfed1e 	bne	r3,r2,180d1cc <memcmp+0x14>
 180d218:	31bfff04 	addi	r6,r6,-4
 180d21c:	21000104 	addi	r4,r4,4
 180d220:	29400104 	addi	r5,r5,4
 180d224:	39bff936 	bltu	r7,r6,180d20c <memcmp+0x54>
 180d228:	003fe806 	br	180d1cc <memcmp+0x14>

0180d22c <putc>:
 180d22c:	defffc04 	addi	sp,sp,-16
 180d230:	dc800215 	stw	r18,8(sp)
 180d234:	04806074 	movhi	r18,385
 180d238:	94be1104 	addi	r18,r18,-1980
 180d23c:	90c00017 	ldw	r3,0(r18)
 180d240:	dc400115 	stw	r17,4(sp)
 180d244:	dc000015 	stw	r16,0(sp)
 180d248:	dfc00315 	stw	ra,12(sp)
 180d24c:	2023883a 	mov	r17,r4
 180d250:	2821883a 	mov	r16,r5
 180d254:	18000226 	beq	r3,zero,180d260 <putc+0x34>
 180d258:	18800e17 	ldw	r2,56(r3)
 180d25c:	10001126 	beq	r2,zero,180d2a4 <putc+0x78>
 180d260:	80800217 	ldw	r2,8(r16)
 180d264:	10ffffc4 	addi	r3,r2,-1
 180d268:	80c00215 	stw	r3,8(r16)
 180d26c:	18001316 	blt	r3,zero,180d2bc <putc+0x90>
 180d270:	80800017 	ldw	r2,0(r16)
 180d274:	14400005 	stb	r17,0(r2)
 180d278:	80c00017 	ldw	r3,0(r16)
 180d27c:	18800044 	addi	r2,r3,1
 180d280:	18c00003 	ldbu	r3,0(r3)
 180d284:	80800015 	stw	r2,0(r16)
 180d288:	1805883a 	mov	r2,r3
 180d28c:	dfc00317 	ldw	ra,12(sp)
 180d290:	dc800217 	ldw	r18,8(sp)
 180d294:	dc400117 	ldw	r17,4(sp)
 180d298:	dc000017 	ldw	r16,0(sp)
 180d29c:	dec00404 	addi	sp,sp,16
 180d2a0:	f800283a 	ret
 180d2a4:	1809883a 	mov	r4,r3
 180d2a8:	18045f80 	call	18045f8 <__sinit>
 180d2ac:	80800217 	ldw	r2,8(r16)
 180d2b0:	10ffffc4 	addi	r3,r2,-1
 180d2b4:	80c00215 	stw	r3,8(r16)
 180d2b8:	183fed0e 	bge	r3,zero,180d270 <putc+0x44>
 180d2bc:	80800617 	ldw	r2,24(r16)
 180d2c0:	18800f16 	blt	r3,r2,180d300 <putc+0xd4>
 180d2c4:	80800017 	ldw	r2,0(r16)
 180d2c8:	14400005 	stb	r17,0(r2)
 180d2cc:	81000017 	ldw	r4,0(r16)
 180d2d0:	00800284 	movi	r2,10
 180d2d4:	20c00003 	ldbu	r3,0(r4)
 180d2d8:	18801226 	beq	r3,r2,180d324 <putc+0xf8>
 180d2dc:	20800044 	addi	r2,r4,1
 180d2e0:	80800015 	stw	r2,0(r16)
 180d2e4:	1805883a 	mov	r2,r3
 180d2e8:	dfc00317 	ldw	ra,12(sp)
 180d2ec:	dc800217 	ldw	r18,8(sp)
 180d2f0:	dc400117 	ldw	r17,4(sp)
 180d2f4:	dc000017 	ldw	r16,0(sp)
 180d2f8:	dec00404 	addi	sp,sp,16
 180d2fc:	f800283a 	ret
 180d300:	91000017 	ldw	r4,0(r18)
 180d304:	880b883a 	mov	r5,r17
 180d308:	800d883a 	mov	r6,r16
 180d30c:	dfc00317 	ldw	ra,12(sp)
 180d310:	dc800217 	ldw	r18,8(sp)
 180d314:	dc400117 	ldw	r17,4(sp)
 180d318:	dc000017 	ldw	r16,0(sp)
 180d31c:	dec00404 	addi	sp,sp,16
 180d320:	180d4181 	jmpi	180d418 <__swbuf_r>
 180d324:	91000017 	ldw	r4,0(r18)
 180d328:	180b883a 	mov	r5,r3
 180d32c:	003ff606 	br	180d308 <putc+0xdc>

0180d330 <_putc_r>:
 180d330:	defffc04 	addi	sp,sp,-16
 180d334:	dc400215 	stw	r17,8(sp)
 180d338:	dc000115 	stw	r16,4(sp)
 180d33c:	dfc00315 	stw	ra,12(sp)
 180d340:	2021883a 	mov	r16,r4
 180d344:	2823883a 	mov	r17,r5
 180d348:	20000226 	beq	r4,zero,180d354 <_putc_r+0x24>
 180d34c:	20800e17 	ldw	r2,56(r4)
 180d350:	10001026 	beq	r2,zero,180d394 <_putc_r+0x64>
 180d354:	30800217 	ldw	r2,8(r6)
 180d358:	10ffffc4 	addi	r3,r2,-1
 180d35c:	30c00215 	stw	r3,8(r6)
 180d360:	18001316 	blt	r3,zero,180d3b0 <_putc_r+0x80>
 180d364:	30800017 	ldw	r2,0(r6)
 180d368:	14400005 	stb	r17,0(r2)
 180d36c:	30c00017 	ldw	r3,0(r6)
 180d370:	18800044 	addi	r2,r3,1
 180d374:	18c00003 	ldbu	r3,0(r3)
 180d378:	30800015 	stw	r2,0(r6)
 180d37c:	1805883a 	mov	r2,r3
 180d380:	dfc00317 	ldw	ra,12(sp)
 180d384:	dc400217 	ldw	r17,8(sp)
 180d388:	dc000117 	ldw	r16,4(sp)
 180d38c:	dec00404 	addi	sp,sp,16
 180d390:	f800283a 	ret
 180d394:	d9800015 	stw	r6,0(sp)
 180d398:	18045f80 	call	18045f8 <__sinit>
 180d39c:	d9800017 	ldw	r6,0(sp)
 180d3a0:	30800217 	ldw	r2,8(r6)
 180d3a4:	10ffffc4 	addi	r3,r2,-1
 180d3a8:	30c00215 	stw	r3,8(r6)
 180d3ac:	183fed0e 	bge	r3,zero,180d364 <_putc_r+0x34>
 180d3b0:	30800617 	ldw	r2,24(r6)
 180d3b4:	18800e16 	blt	r3,r2,180d3f0 <_putc_r+0xc0>
 180d3b8:	30800017 	ldw	r2,0(r6)
 180d3bc:	14400005 	stb	r17,0(r2)
 180d3c0:	31000017 	ldw	r4,0(r6)
 180d3c4:	00800284 	movi	r2,10
 180d3c8:	20c00003 	ldbu	r3,0(r4)
 180d3cc:	18800f26 	beq	r3,r2,180d40c <_putc_r+0xdc>
 180d3d0:	20800044 	addi	r2,r4,1
 180d3d4:	30800015 	stw	r2,0(r6)
 180d3d8:	1805883a 	mov	r2,r3
 180d3dc:	dfc00317 	ldw	ra,12(sp)
 180d3e0:	dc400217 	ldw	r17,8(sp)
 180d3e4:	dc000117 	ldw	r16,4(sp)
 180d3e8:	dec00404 	addi	sp,sp,16
 180d3ec:	f800283a 	ret
 180d3f0:	8009883a 	mov	r4,r16
 180d3f4:	880b883a 	mov	r5,r17
 180d3f8:	dfc00317 	ldw	ra,12(sp)
 180d3fc:	dc400217 	ldw	r17,8(sp)
 180d400:	dc000117 	ldw	r16,4(sp)
 180d404:	dec00404 	addi	sp,sp,16
 180d408:	180d4181 	jmpi	180d418 <__swbuf_r>
 180d40c:	8009883a 	mov	r4,r16
 180d410:	180b883a 	mov	r5,r3
 180d414:	003ff806 	br	180d3f8 <_putc_r+0xc8>

0180d418 <__swbuf_r>:
 180d418:	defffc04 	addi	sp,sp,-16
 180d41c:	dc400215 	stw	r17,8(sp)
 180d420:	dc000115 	stw	r16,4(sp)
 180d424:	dfc00315 	stw	ra,12(sp)
 180d428:	2023883a 	mov	r17,r4
 180d42c:	2821883a 	mov	r16,r5
 180d430:	20000226 	beq	r4,zero,180d43c <__swbuf_r+0x24>
 180d434:	20800e17 	ldw	r2,56(r4)
 180d438:	10002f26 	beq	r2,zero,180d4f8 <__swbuf_r+0xe0>
 180d43c:	3080030b 	ldhu	r2,12(r6)
 180d440:	30c00617 	ldw	r3,24(r6)
 180d444:	1080020c 	andi	r2,r2,8
 180d448:	30c00215 	stw	r3,8(r6)
 180d44c:	10002226 	beq	r2,zero,180d4d8 <__swbuf_r+0xc0>
 180d450:	30c00417 	ldw	r3,16(r6)
 180d454:	18002026 	beq	r3,zero,180d4d8 <__swbuf_r+0xc0>
 180d458:	31000017 	ldw	r4,0(r6)
 180d45c:	30800517 	ldw	r2,20(r6)
 180d460:	20c7c83a 	sub	r3,r4,r3
 180d464:	18802f0e 	bge	r3,r2,180d524 <__swbuf_r+0x10c>
 180d468:	19400044 	addi	r5,r3,1
 180d46c:	30800217 	ldw	r2,8(r6)
 180d470:	84003fcc 	andi	r16,r16,255
 180d474:	20c00044 	addi	r3,r4,1
 180d478:	10bfffc4 	addi	r2,r2,-1
 180d47c:	30800215 	stw	r2,8(r6)
 180d480:	24000005 	stb	r16,0(r4)
 180d484:	30800517 	ldw	r2,20(r6)
 180d488:	30c00015 	stw	r3,0(r6)
 180d48c:	11400c26 	beq	r2,r5,180d4c0 <__swbuf_r+0xa8>
 180d490:	3080030b 	ldhu	r2,12(r6)
 180d494:	1080004c 	andi	r2,r2,1
 180d498:	1005003a 	cmpeq	r2,r2,zero
 180d49c:	10000626 	beq	r2,zero,180d4b8 <__swbuf_r+0xa0>
 180d4a0:	8005883a 	mov	r2,r16
 180d4a4:	dfc00317 	ldw	ra,12(sp)
 180d4a8:	dc400217 	ldw	r17,8(sp)
 180d4ac:	dc000117 	ldw	r16,4(sp)
 180d4b0:	dec00404 	addi	sp,sp,16
 180d4b4:	f800283a 	ret
 180d4b8:	00800284 	movi	r2,10
 180d4bc:	80bff81e 	bne	r16,r2,180d4a0 <__swbuf_r+0x88>
 180d4c0:	8809883a 	mov	r4,r17
 180d4c4:	300b883a 	mov	r5,r6
 180d4c8:	18043600 	call	1804360 <_fflush_r>
 180d4cc:	103ff426 	beq	r2,zero,180d4a0 <__swbuf_r+0x88>
 180d4d0:	043fffc4 	movi	r16,-1
 180d4d4:	003ff206 	br	180d4a0 <__swbuf_r+0x88>
 180d4d8:	300b883a 	mov	r5,r6
 180d4dc:	8809883a 	mov	r4,r17
 180d4e0:	d9800015 	stw	r6,0(sp)
 180d4e4:	1802a2c0 	call	1802a2c <__swsetup_r>
 180d4e8:	d9800017 	ldw	r6,0(sp)
 180d4ec:	1000061e 	bne	r2,zero,180d508 <__swbuf_r+0xf0>
 180d4f0:	30c00417 	ldw	r3,16(r6)
 180d4f4:	003fd806 	br	180d458 <__swbuf_r+0x40>
 180d4f8:	d9800015 	stw	r6,0(sp)
 180d4fc:	18045f80 	call	18045f8 <__sinit>
 180d500:	d9800017 	ldw	r6,0(sp)
 180d504:	003fcd06 	br	180d43c <__swbuf_r+0x24>
 180d508:	3080030b 	ldhu	r2,12(r6)
 180d50c:	00c00244 	movi	r3,9
 180d510:	043fffc4 	movi	r16,-1
 180d514:	10801014 	ori	r2,r2,64
 180d518:	3080030d 	sth	r2,12(r6)
 180d51c:	88c00015 	stw	r3,0(r17)
 180d520:	003fdf06 	br	180d4a0 <__swbuf_r+0x88>
 180d524:	300b883a 	mov	r5,r6
 180d528:	8809883a 	mov	r4,r17
 180d52c:	d9800015 	stw	r6,0(sp)
 180d530:	18043600 	call	1804360 <_fflush_r>
 180d534:	d9800017 	ldw	r6,0(sp)
 180d538:	103fe51e 	bne	r2,zero,180d4d0 <__swbuf_r+0xb8>
 180d53c:	31000017 	ldw	r4,0(r6)
 180d540:	01400044 	movi	r5,1
 180d544:	003fc906 	br	180d46c <__swbuf_r+0x54>

0180d548 <__swbuf>:
 180d548:	01806074 	movhi	r6,385
 180d54c:	31be1104 	addi	r6,r6,-1980
 180d550:	2007883a 	mov	r3,r4
 180d554:	31000017 	ldw	r4,0(r6)
 180d558:	280d883a 	mov	r6,r5
 180d55c:	180b883a 	mov	r5,r3
 180d560:	180d4181 	jmpi	180d418 <__swbuf_r>

0180d564 <__register_exitproc>:
 180d564:	defffa04 	addi	sp,sp,-24
 180d568:	00806074 	movhi	r2,385
 180d56c:	10be1204 	addi	r2,r2,-1976
 180d570:	dc000015 	stw	r16,0(sp)
 180d574:	14000017 	ldw	r16,0(r2)
 180d578:	dd000415 	stw	r20,16(sp)
 180d57c:	2829883a 	mov	r20,r5
 180d580:	81405217 	ldw	r5,328(r16)
 180d584:	dcc00315 	stw	r19,12(sp)
 180d588:	dc800215 	stw	r18,8(sp)
 180d58c:	dc400115 	stw	r17,4(sp)
 180d590:	dfc00515 	stw	ra,20(sp)
 180d594:	2023883a 	mov	r17,r4
 180d598:	3027883a 	mov	r19,r6
 180d59c:	3825883a 	mov	r18,r7
 180d5a0:	28002526 	beq	r5,zero,180d638 <__register_exitproc+0xd4>
 180d5a4:	29000117 	ldw	r4,4(r5)
 180d5a8:	008007c4 	movi	r2,31
 180d5ac:	11002716 	blt	r2,r4,180d64c <__register_exitproc+0xe8>
 180d5b0:	8800101e 	bne	r17,zero,180d5f4 <__register_exitproc+0x90>
 180d5b4:	2105883a 	add	r2,r4,r4
 180d5b8:	1085883a 	add	r2,r2,r2
 180d5bc:	20c00044 	addi	r3,r4,1
 180d5c0:	1145883a 	add	r2,r2,r5
 180d5c4:	0009883a 	mov	r4,zero
 180d5c8:	15000215 	stw	r20,8(r2)
 180d5cc:	28c00115 	stw	r3,4(r5)
 180d5d0:	2005883a 	mov	r2,r4
 180d5d4:	dfc00517 	ldw	ra,20(sp)
 180d5d8:	dd000417 	ldw	r20,16(sp)
 180d5dc:	dcc00317 	ldw	r19,12(sp)
 180d5e0:	dc800217 	ldw	r18,8(sp)
 180d5e4:	dc400117 	ldw	r17,4(sp)
 180d5e8:	dc000017 	ldw	r16,0(sp)
 180d5ec:	dec00604 	addi	sp,sp,24
 180d5f0:	f800283a 	ret
 180d5f4:	29802204 	addi	r6,r5,136
 180d5f8:	00800044 	movi	r2,1
 180d5fc:	110e983a 	sll	r7,r2,r4
 180d600:	30c04017 	ldw	r3,256(r6)
 180d604:	2105883a 	add	r2,r4,r4
 180d608:	1085883a 	add	r2,r2,r2
 180d60c:	1185883a 	add	r2,r2,r6
 180d610:	19c6b03a 	or	r3,r3,r7
 180d614:	14802015 	stw	r18,128(r2)
 180d618:	14c00015 	stw	r19,0(r2)
 180d61c:	00800084 	movi	r2,2
 180d620:	30c04015 	stw	r3,256(r6)
 180d624:	88bfe31e 	bne	r17,r2,180d5b4 <__register_exitproc+0x50>
 180d628:	30804117 	ldw	r2,260(r6)
 180d62c:	11c4b03a 	or	r2,r2,r7
 180d630:	30804115 	stw	r2,260(r6)
 180d634:	003fdf06 	br	180d5b4 <__register_exitproc+0x50>
 180d638:	00806074 	movhi	r2,385
 180d63c:	10853b04 	addi	r2,r2,5356
 180d640:	100b883a 	mov	r5,r2
 180d644:	80805215 	stw	r2,328(r16)
 180d648:	003fd606 	br	180d5a4 <__register_exitproc+0x40>
 180d64c:	00800034 	movhi	r2,0
 180d650:	10800004 	addi	r2,r2,0
 180d654:	1000021e 	bne	r2,zero,180d660 <__register_exitproc+0xfc>
 180d658:	013fffc4 	movi	r4,-1
 180d65c:	003fdc06 	br	180d5d0 <__register_exitproc+0x6c>
 180d660:	01006404 	movi	r4,400
 180d664:	103ee83a 	callr	r2
 180d668:	1007883a 	mov	r3,r2
 180d66c:	103ffa26 	beq	r2,zero,180d658 <__register_exitproc+0xf4>
 180d670:	80805217 	ldw	r2,328(r16)
 180d674:	180b883a 	mov	r5,r3
 180d678:	18000115 	stw	zero,4(r3)
 180d67c:	18800015 	stw	r2,0(r3)
 180d680:	80c05215 	stw	r3,328(r16)
 180d684:	18006215 	stw	zero,392(r3)
 180d688:	18006315 	stw	zero,396(r3)
 180d68c:	0009883a 	mov	r4,zero
 180d690:	883fc826 	beq	r17,zero,180d5b4 <__register_exitproc+0x50>
 180d694:	003fd706 	br	180d5f4 <__register_exitproc+0x90>

0180d698 <register_fini>:
 180d698:	f800283a 	ret

0180d69c <__call_exitprocs>:
 180d69c:	00806074 	movhi	r2,385
 180d6a0:	10be1204 	addi	r2,r2,-1976
 180d6a4:	10800017 	ldw	r2,0(r2)
 180d6a8:	defff304 	addi	sp,sp,-52
 180d6ac:	df000b15 	stw	fp,44(sp)
 180d6b0:	d8800115 	stw	r2,4(sp)
 180d6b4:	00800034 	movhi	r2,0
 180d6b8:	10800004 	addi	r2,r2,0
 180d6bc:	1005003a 	cmpeq	r2,r2,zero
 180d6c0:	d8800215 	stw	r2,8(sp)
 180d6c4:	d8800117 	ldw	r2,4(sp)
 180d6c8:	dd400815 	stw	r21,32(sp)
 180d6cc:	dd000715 	stw	r20,28(sp)
 180d6d0:	10805204 	addi	r2,r2,328
 180d6d4:	dfc00c15 	stw	ra,48(sp)
 180d6d8:	ddc00a15 	stw	r23,40(sp)
 180d6dc:	dd800915 	stw	r22,36(sp)
 180d6e0:	dcc00615 	stw	r19,24(sp)
 180d6e4:	dc800515 	stw	r18,20(sp)
 180d6e8:	dc400415 	stw	r17,16(sp)
 180d6ec:	dc000315 	stw	r16,12(sp)
 180d6f0:	282b883a 	mov	r21,r5
 180d6f4:	2039883a 	mov	fp,r4
 180d6f8:	d8800015 	stw	r2,0(sp)
 180d6fc:	2829003a 	cmpeq	r20,r5,zero
 180d700:	d8800117 	ldw	r2,4(sp)
 180d704:	14405217 	ldw	r17,328(r2)
 180d708:	88001026 	beq	r17,zero,180d74c <__call_exitprocs+0xb0>
 180d70c:	ddc00017 	ldw	r23,0(sp)
 180d710:	88800117 	ldw	r2,4(r17)
 180d714:	8c802204 	addi	r18,r17,136
 180d718:	143fffc4 	addi	r16,r2,-1
 180d71c:	80000916 	blt	r16,zero,180d744 <__call_exitprocs+0xa8>
 180d720:	05bfffc4 	movi	r22,-1
 180d724:	a000151e 	bne	r20,zero,180d77c <__call_exitprocs+0xe0>
 180d728:	8409883a 	add	r4,r16,r16
 180d72c:	2105883a 	add	r2,r4,r4
 180d730:	1485883a 	add	r2,r2,r18
 180d734:	10c02017 	ldw	r3,128(r2)
 180d738:	a8c01126 	beq	r21,r3,180d780 <__call_exitprocs+0xe4>
 180d73c:	843fffc4 	addi	r16,r16,-1
 180d740:	85bff81e 	bne	r16,r22,180d724 <__call_exitprocs+0x88>
 180d744:	d8800217 	ldw	r2,8(sp)
 180d748:	10003126 	beq	r2,zero,180d810 <__call_exitprocs+0x174>
 180d74c:	dfc00c17 	ldw	ra,48(sp)
 180d750:	df000b17 	ldw	fp,44(sp)
 180d754:	ddc00a17 	ldw	r23,40(sp)
 180d758:	dd800917 	ldw	r22,36(sp)
 180d75c:	dd400817 	ldw	r21,32(sp)
 180d760:	dd000717 	ldw	r20,28(sp)
 180d764:	dcc00617 	ldw	r19,24(sp)
 180d768:	dc800517 	ldw	r18,20(sp)
 180d76c:	dc400417 	ldw	r17,16(sp)
 180d770:	dc000317 	ldw	r16,12(sp)
 180d774:	dec00d04 	addi	sp,sp,52
 180d778:	f800283a 	ret
 180d77c:	8409883a 	add	r4,r16,r16
 180d780:	88c00117 	ldw	r3,4(r17)
 180d784:	2105883a 	add	r2,r4,r4
 180d788:	1445883a 	add	r2,r2,r17
 180d78c:	18ffffc4 	addi	r3,r3,-1
 180d790:	11800217 	ldw	r6,8(r2)
 180d794:	1c001526 	beq	r3,r16,180d7ec <__call_exitprocs+0x150>
 180d798:	10000215 	stw	zero,8(r2)
 180d79c:	303fe726 	beq	r6,zero,180d73c <__call_exitprocs+0xa0>
 180d7a0:	00c00044 	movi	r3,1
 180d7a4:	1c06983a 	sll	r3,r3,r16
 180d7a8:	90804017 	ldw	r2,256(r18)
 180d7ac:	8cc00117 	ldw	r19,4(r17)
 180d7b0:	1884703a 	and	r2,r3,r2
 180d7b4:	10001426 	beq	r2,zero,180d808 <__call_exitprocs+0x16c>
 180d7b8:	90804117 	ldw	r2,260(r18)
 180d7bc:	1884703a 	and	r2,r3,r2
 180d7c0:	10000c1e 	bne	r2,zero,180d7f4 <__call_exitprocs+0x158>
 180d7c4:	2105883a 	add	r2,r4,r4
 180d7c8:	1485883a 	add	r2,r2,r18
 180d7cc:	11400017 	ldw	r5,0(r2)
 180d7d0:	e009883a 	mov	r4,fp
 180d7d4:	303ee83a 	callr	r6
 180d7d8:	88800117 	ldw	r2,4(r17)
 180d7dc:	98bfc81e 	bne	r19,r2,180d700 <__call_exitprocs+0x64>
 180d7e0:	b8800017 	ldw	r2,0(r23)
 180d7e4:	147fd526 	beq	r2,r17,180d73c <__call_exitprocs+0xa0>
 180d7e8:	003fc506 	br	180d700 <__call_exitprocs+0x64>
 180d7ec:	8c000115 	stw	r16,4(r17)
 180d7f0:	003fea06 	br	180d79c <__call_exitprocs+0x100>
 180d7f4:	2105883a 	add	r2,r4,r4
 180d7f8:	1485883a 	add	r2,r2,r18
 180d7fc:	11000017 	ldw	r4,0(r2)
 180d800:	303ee83a 	callr	r6
 180d804:	003ff406 	br	180d7d8 <__call_exitprocs+0x13c>
 180d808:	303ee83a 	callr	r6
 180d80c:	003ff206 	br	180d7d8 <__call_exitprocs+0x13c>
 180d810:	88800117 	ldw	r2,4(r17)
 180d814:	1000081e 	bne	r2,zero,180d838 <__call_exitprocs+0x19c>
 180d818:	89000017 	ldw	r4,0(r17)
 180d81c:	20000726 	beq	r4,zero,180d83c <__call_exitprocs+0x1a0>
 180d820:	b9000015 	stw	r4,0(r23)
 180d824:	8809883a 	mov	r4,r17
 180d828:	00000000 	call	0 <__alt_mem_Onchip_Memory-0x1004000>
 180d82c:	bc400017 	ldw	r17,0(r23)
 180d830:	883fb71e 	bne	r17,zero,180d710 <__call_exitprocs+0x74>
 180d834:	003fc506 	br	180d74c <__call_exitprocs+0xb0>
 180d838:	89000017 	ldw	r4,0(r17)
 180d83c:	882f883a 	mov	r23,r17
 180d840:	2023883a 	mov	r17,r4
 180d844:	883fb21e 	bne	r17,zero,180d710 <__call_exitprocs+0x74>
 180d848:	003fc006 	br	180d74c <__call_exitprocs+0xb0>

0180d84c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 180d84c:	defffd04 	addi	sp,sp,-12
 180d850:	df000215 	stw	fp,8(sp)
 180d854:	df000204 	addi	fp,sp,8
 180d858:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 180d85c:	e0bfff17 	ldw	r2,-4(fp)
 180d860:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 180d864:	e0bffe17 	ldw	r2,-8(fp)
 180d868:	1005003a 	cmpeq	r2,r2,zero
 180d86c:	1000021e 	bne	r2,zero,180d878 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 180d870:	002af070 	cmpltui	zero,zero,43969
 180d874:	00000106 	br	180d87c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 180d878:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 180d87c:	e037883a 	mov	sp,fp
 180d880:	df000017 	ldw	fp,0(sp)
 180d884:	dec00104 	addi	sp,sp,4
 180d888:	f800283a 	ret

0180d88c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 180d88c:	defffd04 	addi	sp,sp,-12
 180d890:	dfc00215 	stw	ra,8(sp)
 180d894:	df000115 	stw	fp,4(sp)
 180d898:	df000104 	addi	fp,sp,4
 180d89c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 180d8a0:	e13fff17 	ldw	r4,-4(fp)
 180d8a4:	180d84c0 	call	180d84c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 180d8a8:	003fff06 	br	180d8a8 <_exit+0x1c>
 180d8ac:	0180d698 	cmpnei	r6,zero,858
