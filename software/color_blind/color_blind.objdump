
color_blind.elf:     file format elf32-littlenios2
color_blind.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000ccdc memsz 0x0000ccdc flags r-x
    LOAD off    0x0000dcfc vaddr 0x0080ccfc paddr 0x0080e7dc align 2**12
         filesz 0x00001ae0 memsz 0x00001ae0 flags rw-
    LOAD off    0x000102bc vaddr 0x008102bc paddr 0x008102bc align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c798  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003b0  0080c94c  0080c94c  0000d94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ae0  0080ccfc  0080e7dc  0000dcfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  008102bc  008102bc  000102bc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000f7dc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c58  00000000  00000000  0000f808  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001304  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00022d82  00000000  00000000  00011764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007825  00000000  00000000  000344e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001336a  00000000  00000000  0003bd0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001808  00000000  00000000  0004f078  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000224c  00000000  00000000  00050880  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bd46  00000000  00000000  00052acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0005e814  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  0005e828  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00062013  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00062016  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00062019  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006201a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006201b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00062026  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00062031  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0006203c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003e  00000000  00000000  00062048  2**0
                  CONTENTS, READONLY
 26 .jdi          0000510a  00000000  00000000  00062086  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000808e4  00000000  00000000  00067190  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080c94c l    d  .rodata	00000000 .rodata
0080ccfc l    d  .rwdata	00000000 .rwdata
008102bc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00800554 l     F .text	00000058 __sprint_r
0080ca02 l     O .rodata	00000010 blanks.3452
0080c9f2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
008025d0 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00803ff8 l     F .text	00000058 std
00804104 l     F .text	00000008 __fp_lock
0080410c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0080ccfc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0080e7a8 l     O .rwdata	00000004 charset
0080ca38 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0080cb80 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
008084b8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
008095e4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00809f20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00809f80 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080a084 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080a1a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080a288 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080a3e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080a618 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080e7cc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080a8d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080d6b8 l     O .rwdata	00001060 jtag_uart_0
0080e718 l     O .rwdata	00000030 AV_Config
0080e748 l     O .rwdata	00000054 Pixel_Buffer_DMA
0080abac l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080adec l     F .text	00000228 altera_avalon_jtag_uart_irq
0080b014 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080b8b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080bcc4 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080be14 l     F .text	000000f8 alt_file_locked
0080c098 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080c734 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0080c8e8 l     F .text	00000040 alt_sim_halt
00805de8 g     F .text	00000094 _mprec_log10
00805ed4 g     F .text	00000088 __any_on
0080768c g     F .text	00000070 _isatty_r
0080cb58 g     O .rodata	00000028 __mprec_tinytens
0080a448 g     F .text	0000006c alt_main
0080042c g     F .text	000000a0 _puts_r
00810318 g     O .bss	00000100 alt_irq
008076fc g     F .text	00000078 _lseek_r
0080e7dc g       *ABS*	00000000 __flash_rwdata_start
00808fd8 g     F .text	00000088 __eqdf2
008105a8 g       *ABS*	00000000 __alt_heap_start
008003b4 g     F .text	00000044 printf
00807144 g     F .text	00000068 __sseek
00804060 g     F .text	000000a4 __sinit
00804d6c g     F .text	00000084 _setlocale_r
00804160 g     F .text	0000009c __sfmoreglue
0080a4d4 g     F .text	00000020 __malloc_unlock
00805864 g     F .text	000000e0 memmove
00804150 g     F .text	00000010 _cleanup
00805f5c g     F .text	000000bc _Balloc
008090e8 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000000c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00807618 g     F .text	00000074 _fstat_r
008102d4 g     O .bss	00000004 errno
008102dc g     O .bss	00000004 alt_argv
0081679c g       *ABS*	00000000 _gp
0080d538 g     O .rwdata	00000180 alt_fd_list
0080c2bc g     F .text	00000094 alt_find_dev
008057c4 g     F .text	000000a0 memcpy
00804144 g     F .text	0000000c _cleanup_r
00809280 g     F .text	000000f8 __floatsidf
0080bd9c g     F .text	00000078 alt_io_redirect
008091f8 g     F .text	00000088 __ltdf2
0080c94c g       *ABS*	00000000 __DTOR_END__
008004cc g     F .text	00000014 puts
00805d38 g     F .text	000000b0 __ratio
0080b22c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
008003f8 g     F .text	00000034 _printf_r
00809720 g     F .text	00000008 __udivsi3
0080a0e4 g     F .text	000000c4 isatty
0080ca68 g     O .rodata	000000c8 __mprec_tens
00804d48 g     F .text	00000008 __locale_charset
008102c8 g     O .bss	00000004 __malloc_top_pad
0080e7a4 g     O .rwdata	00000004 __mb_cur_max
00804d50 g     F .text	0000000c _localeconv_r
008066c0 g     F .text	0000003c __i2b
0080472c g     F .text	0000049c __sfvwrite_r
008070cc g     F .text	00000070 _sbrk_r
00807774 g     F .text	00000078 _read_r
0080d0fc g     O .rwdata	0000000c __lc_ctype
0080e7c4 g     O .rwdata	00000004 alt_max_fd
00809c20 g     F .text	00000138 __unpack_d
008074f4 g     F .text	00000110 _fclose_r
00803fc4 g     F .text	00000034 fflush
008102cc g     O .bss	00000004 __malloc_max_sbrked_mem
00808948 g     F .text	00000074 __adddf3
00805c18 g     F .text	00000120 __b2d
00807e58 g     F .text	00000660 __umoddi3
0080a2f4 g     F .text	000000f4 lseek
0080e7a0 g     O .rwdata	00000004 _global_impure_ptr
00806a68 g     F .text	000005f4 _realloc_r
008105a8 g       *ABS*	00000000 __bss_end
0080bbcc g     F .text	000000f8 alt_iic_isr_register
0080c190 g     F .text	0000010c alt_tick
008077ec g     F .text	0000066c __udivdi3
0080cb30 g     O .rodata	00000028 __mprec_bigtens
00806948 g     F .text	00000120 __s2b
00809450 g     F .text	00000194 __floatunsidf
00805b38 g     F .text	00000060 __mcmp
0080412c g     F .text	00000018 __fp_lock_all
0080bb84 g     F .text	00000048 alt_ic_irq_enabled
0080c0f8 g     F .text	00000098 alt_alarm_stop
008102e4 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
0080d510 g     O .rwdata	00000028 alt_dev_null
0080b7e4 g     F .text	0000001c alt_dcache_flush_all
00805a04 g     F .text	00000070 __hi0bits
00809378 g     F .text	000000d8 __fixdfsi
0080e7dc g       *ABS*	00000000 __ram_rwdata_end
0080e7bc g     O .rwdata	00000008 alt_dev_list
0080a7ac g     F .text	00000124 write
0080ccfc g       *ABS*	00000000 __ram_rodata_end
00809fac g     F .text	000000d8 fstat
00806828 g     F .text	00000120 __pow5mult
008102bc g     O .bss	00000004 __nlocale_changed
00809728 g     F .text	00000008 __umodsi3
008105a8 g       *ABS*	00000000 end
0080ad2c g     F .text	000000c0 altera_avalon_jtag_uart_init
0080c948 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080988c g     F .text	00000080 __clzsi2
0080b450 g     F .text	00000240 altera_avalon_jtag_uart_write
00804050 g     F .text	00000004 __sfp_lock_acquire
008056e0 g     F .text	000000e4 memchr
008005ac g     F .text	00001ec4 ___vfprintf_internal_r
00804418 g     F .text	00000314 _free_r
0080c738 g     F .text	000001b0 __call_exitprocs
008102c0 g     O .bss	00000004 __mlocale_changed
0080e7b0 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000003c _start
008102e8 g     O .bss	00000004 _alt_tick_rate
00806320 g     F .text	0000014c __lshift
008102ec g     O .bss	00000004 _alt_nticks
0080a4f4 g     F .text	00000124 read
0080a964 g     F .text	00000248 alt_sys_init
0080c600 g     F .text	00000134 __register_exitproc
0080646c g     F .text	00000254 __multiply
0080b0c4 g     F .text	00000074 altera_avalon_jtag_uart_close
00809730 g     F .text	00000038 __mulsi3
0080ccfc g       *ABS*	00000000 __ram_rwdata_start
0080c94c g       *ABS*	00000000 __ram_rodata_start
008102f0 g     O .bss	00000028 __malloc_current_mallinfo
00806018 g     F .text	0000017c __d2b
0080abe4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080c470 g     F .text	000000d0 alt_get_fd
00809d58 g     F .text	000000c8 __fpcmp_parts_d
00807484 g     F .text	00000070 _close_r
0080c58c g     F .text	00000074 memcmp
0080ac94 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008105a8 g       *ABS*	00000000 __alt_stack_base
0080acdc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00802494 g     F .text	0000013c __swsetup_r
00808d80 g     F .text	00000258 __divdf3
008041fc g     F .text	000000f0 __sfp
00805e7c g     F .text	00000058 __copybits
0080d108 g     O .rwdata	00000408 __malloc_av_
0080405c g     F .text	00000004 __sinit_lock_release
008089bc g     F .text	000003c4 __muldf3
00807228 g     F .text	00000060 __sread
0080c350 g     F .text	00000120 alt_find_file
0080b800 g     F .text	000000b4 alt_dev_llist_insert
0080a4b4 g     F .text	00000020 __malloc_lock
0080a6f0 g     F .text	000000bc sbrk
00803dc8 g     F .text	000001fc _fflush_r
008073bc g     F .text	000000c8 _calloc_r
008102bc g       *ABS*	00000000 __bss_start
00805944 g     F .text	00000098 memset
0080023c g     F .text	00000178 main
008102e0 g     O .bss	00000004 alt_envp
008102d0 g     O .bss	00000004 __malloc_max_total_mem
0080ac3c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
008001f0 g     F .text	0000004c write_pixel
0080713c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00807604 g     F .text	00000014 fclose
00810418 g     O .bss	00000190 _atexit0
00802814 g     F .text	000015b4 _dtoa_r
00804fa0 g     F .text	00000740 _malloc_r
0080e7c8 g     O .rwdata	00000004 alt_errno
00804c90 g     F .text	000000b8 _fwalk
00809660 g     F .text	00000060 __divsi3
0080cb8c g     O .rodata	00000014 __thenan_df
008042ec g     F .text	0000012c _malloc_trim_r
0080c94c g       *ABS*	00000000 __CTOR_END__
00807288 g     F .text	000000bc strcmp
0080c94c g       *ABS*	00000000 __flash_rodata_start
0080c94c g       *ABS*	00000000 __DTOR_LIST__
00809060 g     F .text	00000088 __nedf2
0080a930 g     F .text	00000034 alt_irq_init
0080a678 g     F .text	00000078 alt_release_fd
0080cba0 g     O .rodata	00000100 __clz_tab
008102c4 g     O .bss	00000004 _PathLocale
0080c540 g     F .text	00000014 atexit
00807344 g     F .text	00000078 _write_r
00804df0 g     F .text	0000001c setlocale
0080e79c g     O .rwdata	00000004 _impure_ptr
008102d8 g     O .bss	00000004 alt_argc
0080b978 g     F .text	00000064 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00805b98 g     F .text	00000080 __ulp
0080705c g     F .text	00000040 __isinfd
00804114 g     F .text	00000018 __fp_unlock_all
0080e7b4 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00804d5c g     F .text	00000010 localeconv
0080b9f8 g     F .text	00000050 alt_ic_isr_register
0080e7dc g       *ABS*	00000000 _edata
008105a8 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080b138 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080bae4 g     F .text	000000a0 alt_ic_irq_disable
01004000 g       *ABS*	00000000 __alt_mem_Onchip_Memory
008071ac g     F .text	0000007c __swrite
0080e7ac g     O .rwdata	00000004 __malloc_trim_threshold
0080c29c g     F .text	00000020 altera_nios2_qsys_irq_init
0080c554 g     F .text	00000038 exit
00804bc8 g     F .text	000000c8 _fwalk_reent
00806194 g     F .text	0000018c __mdiff
008096c0 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00804054 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080c928 g     F .text	00000020 _exit
0080709c g     F .text	00000030 __isnand
0080b690 g     F .text	00000154 alt_alarm_start
00809768 g     F .text	00000124 __muldi3
00804e0c g     F .text	00000194 __smakebuf_r
008004e0 g     F .text	00000074 strlen
0080bf0c g     F .text	0000018c open
00809170 g     F .text	00000088 __gedf2
0080b9dc g     F .text	0000001c alt_icache_flush_all
0080e7d0 g     O .rwdata	00000004 alt_priority_mask
0080ba48 g     F .text	0000009c alt_ic_irq_enable
00802470 g     F .text	00000024 __vfprintf_internal
008088c8 g     F .text	00000080 __subdf3
00805a74 g     F .text	000000c4 __lo0bits
0080e7d4 g     O .rwdata	00000008 alt_alarm_list
0080b914 g     F .text	00000064 _do_ctors
00809e20 g     F .text	00000100 close
0080a208 g     F .text	00000080 alt_load
0080990c g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00804058 g     F .text	00000004 __sinit_lock_acquire
008066fc g     F .text	0000012c __multadd
008059dc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406d14 	ori	at,at,436
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18c0c604 	addi	r3,r3,792
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18c0c604 	addi	r3,r3,792
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c0:	d699e714 	ori	gp,gp,26524
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c8:	1080af14 	ori	r2,r2,700

    movhi r3, %hi(__bss_end)
  8001cc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001d0:	18c16a14 	ori	r3,r3,1448

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	080a2080 	call	80a208 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	080a4480 	call	80a448 <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <write_pixel>:
#include <unistd.h>
#define PIXEL_BUFFER_BASE (volatile unsigned int ) 0x00000000
// pixel at (319, 119)
#define PIXEL_BUFFER_BASE_OFFSET (volatile unsigned int ) 0x0003BA7E

void write_pixel(int x, int y, short color) {
  8001f0:	defffb04 	addi	sp,sp,-20
  8001f4:	df000415 	stw	fp,16(sp)
  8001f8:	df000404 	addi	fp,sp,16
  8001fc:	e13ffd15 	stw	r4,-12(fp)
  800200:	e17ffe15 	stw	r5,-8(fp)
  800204:	e1bfff0d 	sth	r6,-4(fp)
	volatile short *vga_addr=(volatile short*)(0x00000000 + (y<<10) + (x<<1));
  800208:	e0bffe17 	ldw	r2,-8(fp)
  80020c:	100692ba 	slli	r3,r2,10
  800210:	e0bffd17 	ldw	r2,-12(fp)
  800214:	1085883a 	add	r2,r2,r2
  800218:	1885883a 	add	r2,r3,r2
  80021c:	e0bffc15 	stw	r2,-16(fp)
	*vga_addr=color;
  800220:	e0fffc17 	ldw	r3,-16(fp)
  800224:	e0bfff0b 	ldhu	r2,-4(fp)
  800228:	1880000d 	sth	r2,0(r3)
}
  80022c:	e037883a 	mov	sp,fp
  800230:	df000017 	ldw	fp,0(sp)
  800234:	dec00104 	addi	sp,sp,4
  800238:	f800283a 	ret

0080023c <main>:

int main()
{
  80023c:	defff404 	addi	sp,sp,-48
  800240:	dfc00b15 	stw	ra,44(sp)
  800244:	df000a15 	stw	fp,40(sp)
  800248:	df000a04 	addi	fp,sp,40
	printf("Hello from Nios II!\n");
  80024c:	01002074 	movhi	r4,129
  800250:	21325304 	addi	r4,r4,-14004
  800254:	08004cc0 	call	8004cc <puts>
	int counter = 0;
  800258:	e03ffc15 	stw	zero,-16(fp)
  80025c:	00000006 	br	800260 <main+0x24>

	while(1) {
		// draw the reticle
		// left bar
		write_pixel(314, 240, 0xFFFF);
  800260:	01004e84 	movi	r4,314
  800264:	01403c04 	movi	r5,240
  800268:	01bfffc4 	movi	r6,-1
  80026c:	08001f00 	call	8001f0 <write_pixel>
		write_pixel(315, 240, 0xFFFF);
  800270:	01004ec4 	movi	r4,315
  800274:	01403c04 	movi	r5,240
  800278:	01bfffc4 	movi	r6,-1
  80027c:	08001f00 	call	8001f0 <write_pixel>
		write_pixel(316, 240, 0xFFFF);
  800280:	01004f04 	movi	r4,316
  800284:	01403c04 	movi	r5,240
  800288:	01bfffc4 	movi	r6,-1
  80028c:	08001f00 	call	8001f0 <write_pixel>
		write_pixel(317, 240, 0xFFFF);
  800290:	01004f44 	movi	r4,317
  800294:	01403c04 	movi	r5,240
  800298:	01bfffc4 	movi	r6,-1
  80029c:	08001f00 	call	8001f0 <write_pixel>
		// right bar
		write_pixel(323, 240, 0xFFFF);
  8002a0:	010050c4 	movi	r4,323
  8002a4:	01403c04 	movi	r5,240
  8002a8:	01bfffc4 	movi	r6,-1
  8002ac:	08001f00 	call	8001f0 <write_pixel>
		write_pixel(324, 240, 0xFFFF);
  8002b0:	01005104 	movi	r4,324
  8002b4:	01403c04 	movi	r5,240
  8002b8:	01bfffc4 	movi	r6,-1
  8002bc:	08001f00 	call	8001f0 <write_pixel>
		write_pixel(325, 240, 0xFFFF);
  8002c0:	01005144 	movi	r4,325
  8002c4:	01403c04 	movi	r5,240
  8002c8:	01bfffc4 	movi	r6,-1
  8002cc:	08001f00 	call	8001f0 <write_pixel>
		write_pixel(326, 240, 0xFFFF);
  8002d0:	01005184 	movi	r4,326
  8002d4:	01403c04 	movi	r5,240
  8002d8:	01bfffc4 	movi	r6,-1
  8002dc:	08001f00 	call	8001f0 <write_pixel>
//		write_pixel(320, 243, 0xFFFF);
//		write_pixel(320, 244, 0xFFFF);
//		write_pixel(320, 245, 0xFFFF);
//		write_pixel(320, 246, 0xFFFF);

		counter++;
  8002e0:	e0bffc17 	ldw	r2,-16(fp)
  8002e4:	10800044 	addi	r2,r2,1
  8002e8:	e0bffc15 	stw	r2,-16(fp)
		// Log color info every 10000 iterations
		if (counter > 10000) {
  8002ec:	e0bffc17 	ldw	r2,-16(fp)
  8002f0:	1089c450 	cmplti	r2,r2,10001
  8002f4:	103fda1e 	bne	r2,zero,800260 <main+0x24>
			int x = 319;
  8002f8:	00804fc4 	movi	r2,319
  8002fc:	e0bffb15 	stw	r2,-20(fp)
			int y = 119;
  800300:	00801dc4 	movi	r2,119
  800304:	e0bffa15 	stw	r2,-24(fp)
			volatile unsigned int base = PIXEL_BUFFER_BASE;
  800308:	e03ffd15 	stw	zero,-12(fp)
			volatile unsigned int offset = (x | (y << 10)) << 1;
  80030c:	e0bffa17 	ldw	r2,-24(fp)
  800310:	100692ba 	slli	r3,r2,10
  800314:	e0bffb17 	ldw	r2,-20(fp)
  800318:	1884b03a 	or	r2,r3,r2
  80031c:	1085883a 	add	r2,r2,r2
  800320:	e0bffe15 	stw	r2,-8(fp)
			volatile unsigned int position = base + offset;
  800324:	e0fffd17 	ldw	r3,-12(fp)
  800328:	e0bffe17 	ldw	r2,-8(fp)
  80032c:	1885883a 	add	r2,r3,r2
  800330:	e0bfff15 	stw	r2,-4(fp)
			unsigned int val = IORD_16DIRECT(position, 0);
  800334:	e0bfff17 	ldw	r2,-4(fp)
  800338:	1080002b 	ldhuio	r2,0(r2)
  80033c:	e0bff915 	stw	r2,-28(fp)
			int red = (val & (0x1F << 11)) >> 11;
  800340:	e0bff917 	ldw	r2,-28(fp)
  800344:	10be000c 	andi	r2,r2,63488
  800348:	1004d2fa 	srli	r2,r2,11
  80034c:	e0bff815 	stw	r2,-32(fp)
			// 0x1F is 11111
			int green = (val & (0x3F << 5)) >> 5;
  800350:	e0bff917 	ldw	r2,-28(fp)
  800354:	1081f80c 	andi	r2,r2,2016
  800358:	1004d17a 	srli	r2,r2,5
  80035c:	e0bff715 	stw	r2,-36(fp)
			// 0x3F = 111111
			int blue = (val & 0x1F);
  800360:	e0bff917 	ldw	r2,-28(fp)
  800364:	108007cc 	andi	r2,r2,31
  800368:	e0bff615 	stw	r2,-40(fp)
			// 0x1F is 11111
			counter = 0;
  80036c:	e03ffc15 	stw	zero,-16(fp)
			printf("Pixel: (%d, %d) ", x, y);
  800370:	01002074 	movhi	r4,129
  800374:	21325804 	addi	r4,r4,-13984
  800378:	e17ffb17 	ldw	r5,-20(fp)
  80037c:	e1bffa17 	ldw	r6,-24(fp)
  800380:	08003b40 	call	8003b4 <printf>
			printf("Red: %d Green: %d Blue: %d\n", red * (255/31), green * (255/63), blue * (255/31));
  800384:	e0bff817 	ldw	r2,-32(fp)
  800388:	100a90fa 	slli	r5,r2,3
  80038c:	e0bff717 	ldw	r2,-36(fp)
  800390:	1085883a 	add	r2,r2,r2
  800394:	1085883a 	add	r2,r2,r2
  800398:	100d883a 	mov	r6,r2
  80039c:	e0bff617 	ldw	r2,-40(fp)
  8003a0:	100e90fa 	slli	r7,r2,3
  8003a4:	01002074 	movhi	r4,129
  8003a8:	21325d04 	addi	r4,r4,-13964
  8003ac:	08003b40 	call	8003b4 <printf>
	//		usleep(1000000);
		}
  }
  8003b0:	003fab06 	br	800260 <main+0x24>

008003b4 <printf>:
  8003b4:	defffb04 	addi	sp,sp,-20
  8003b8:	dfc00115 	stw	ra,4(sp)
  8003bc:	d9400215 	stw	r5,8(sp)
  8003c0:	d9800315 	stw	r6,12(sp)
  8003c4:	d9c00415 	stw	r7,16(sp)
  8003c8:	00802074 	movhi	r2,129
  8003cc:	10b9e704 	addi	r2,r2,-6244
  8003d0:	10c00017 	ldw	r3,0(r2)
  8003d4:	200b883a 	mov	r5,r4
  8003d8:	d8800204 	addi	r2,sp,8
  8003dc:	19000217 	ldw	r4,8(r3)
  8003e0:	100d883a 	mov	r6,r2
  8003e4:	d8800015 	stw	r2,0(sp)
  8003e8:	08024700 	call	802470 <__vfprintf_internal>
  8003ec:	dfc00117 	ldw	ra,4(sp)
  8003f0:	dec00504 	addi	sp,sp,20
  8003f4:	f800283a 	ret

008003f8 <_printf_r>:
  8003f8:	defffc04 	addi	sp,sp,-16
  8003fc:	dfc00115 	stw	ra,4(sp)
  800400:	d9800215 	stw	r6,8(sp)
  800404:	d9c00315 	stw	r7,12(sp)
  800408:	280d883a 	mov	r6,r5
  80040c:	21400217 	ldw	r5,8(r4)
  800410:	d8c00204 	addi	r3,sp,8
  800414:	180f883a 	mov	r7,r3
  800418:	d8c00015 	stw	r3,0(sp)
  80041c:	08005ac0 	call	8005ac <___vfprintf_internal_r>
  800420:	dfc00117 	ldw	ra,4(sp)
  800424:	dec00404 	addi	sp,sp,16
  800428:	f800283a 	ret

0080042c <_puts_r>:
  80042c:	defff604 	addi	sp,sp,-40
  800430:	dc400715 	stw	r17,28(sp)
  800434:	2023883a 	mov	r17,r4
  800438:	2809883a 	mov	r4,r5
  80043c:	dfc00915 	stw	ra,36(sp)
  800440:	dcc00815 	stw	r19,32(sp)
  800444:	2827883a 	mov	r19,r5
  800448:	08004e00 	call	8004e0 <strlen>
  80044c:	89400217 	ldw	r5,8(r17)
  800450:	00c02074 	movhi	r3,129
  800454:	18f26404 	addi	r3,r3,-13936
  800458:	01c00044 	movi	r7,1
  80045c:	12000044 	addi	r8,r2,1
  800460:	d8c00515 	stw	r3,20(sp)
  800464:	d9c00615 	stw	r7,24(sp)
  800468:	d8c00304 	addi	r3,sp,12
  80046c:	01c00084 	movi	r7,2
  800470:	8809883a 	mov	r4,r17
  800474:	d80d883a 	mov	r6,sp
  800478:	d8c00015 	stw	r3,0(sp)
  80047c:	dcc00315 	stw	r19,12(sp)
  800480:	da000215 	stw	r8,8(sp)
  800484:	d9c00115 	stw	r7,4(sp)
  800488:	d8800415 	stw	r2,16(sp)
  80048c:	080472c0 	call	80472c <__sfvwrite_r>
  800490:	00ffffc4 	movi	r3,-1
  800494:	10000626 	beq	r2,zero,8004b0 <_puts_r+0x84>
  800498:	1805883a 	mov	r2,r3
  80049c:	dfc00917 	ldw	ra,36(sp)
  8004a0:	dcc00817 	ldw	r19,32(sp)
  8004a4:	dc400717 	ldw	r17,28(sp)
  8004a8:	dec00a04 	addi	sp,sp,40
  8004ac:	f800283a 	ret
  8004b0:	00c00284 	movi	r3,10
  8004b4:	1805883a 	mov	r2,r3
  8004b8:	dfc00917 	ldw	ra,36(sp)
  8004bc:	dcc00817 	ldw	r19,32(sp)
  8004c0:	dc400717 	ldw	r17,28(sp)
  8004c4:	dec00a04 	addi	sp,sp,40
  8004c8:	f800283a 	ret

008004cc <puts>:
  8004cc:	00802074 	movhi	r2,129
  8004d0:	10b9e704 	addi	r2,r2,-6244
  8004d4:	200b883a 	mov	r5,r4
  8004d8:	11000017 	ldw	r4,0(r2)
  8004dc:	080042c1 	jmpi	80042c <_puts_r>

008004e0 <strlen>:
  8004e0:	208000cc 	andi	r2,r4,3
  8004e4:	2011883a 	mov	r8,r4
  8004e8:	1000161e 	bne	r2,zero,800544 <strlen+0x64>
  8004ec:	20c00017 	ldw	r3,0(r4)
  8004f0:	017fbff4 	movhi	r5,65279
  8004f4:	297fbfc4 	addi	r5,r5,-257
  8004f8:	01e02074 	movhi	r7,32897
  8004fc:	39e02004 	addi	r7,r7,-32640
  800500:	1945883a 	add	r2,r3,r5
  800504:	11c4703a 	and	r2,r2,r7
  800508:	00c6303a 	nor	r3,zero,r3
  80050c:	1886703a 	and	r3,r3,r2
  800510:	18000c1e 	bne	r3,zero,800544 <strlen+0x64>
  800514:	280d883a 	mov	r6,r5
  800518:	380b883a 	mov	r5,r7
  80051c:	21000104 	addi	r4,r4,4
  800520:	20800017 	ldw	r2,0(r4)
  800524:	1187883a 	add	r3,r2,r6
  800528:	1946703a 	and	r3,r3,r5
  80052c:	0084303a 	nor	r2,zero,r2
  800530:	10c4703a 	and	r2,r2,r3
  800534:	103ff926 	beq	r2,zero,80051c <strlen+0x3c>
  800538:	20800007 	ldb	r2,0(r4)
  80053c:	10000326 	beq	r2,zero,80054c <strlen+0x6c>
  800540:	21000044 	addi	r4,r4,1
  800544:	20800007 	ldb	r2,0(r4)
  800548:	103ffd1e 	bne	r2,zero,800540 <strlen+0x60>
  80054c:	2205c83a 	sub	r2,r4,r8
  800550:	f800283a 	ret

00800554 <__sprint_r>:
  800554:	30800217 	ldw	r2,8(r6)
  800558:	defffe04 	addi	sp,sp,-8
  80055c:	dc000015 	stw	r16,0(sp)
  800560:	dfc00115 	stw	ra,4(sp)
  800564:	3021883a 	mov	r16,r6
  800568:	0007883a 	mov	r3,zero
  80056c:	1000061e 	bne	r2,zero,800588 <__sprint_r+0x34>
  800570:	1805883a 	mov	r2,r3
  800574:	30000115 	stw	zero,4(r6)
  800578:	dfc00117 	ldw	ra,4(sp)
  80057c:	dc000017 	ldw	r16,0(sp)
  800580:	dec00204 	addi	sp,sp,8
  800584:	f800283a 	ret
  800588:	080472c0 	call	80472c <__sfvwrite_r>
  80058c:	1007883a 	mov	r3,r2
  800590:	1805883a 	mov	r2,r3
  800594:	80000115 	stw	zero,4(r16)
  800598:	80000215 	stw	zero,8(r16)
  80059c:	dfc00117 	ldw	ra,4(sp)
  8005a0:	dc000017 	ldw	r16,0(sp)
  8005a4:	dec00204 	addi	sp,sp,8
  8005a8:	f800283a 	ret

008005ac <___vfprintf_internal_r>:
  8005ac:	defea404 	addi	sp,sp,-1392
  8005b0:	dd815815 	stw	r22,1376(sp)
  8005b4:	dc015215 	stw	r16,1352(sp)
  8005b8:	d9c15115 	stw	r7,1348(sp)
  8005bc:	dfc15b15 	stw	ra,1388(sp)
  8005c0:	df015a15 	stw	fp,1384(sp)
  8005c4:	ddc15915 	stw	r23,1380(sp)
  8005c8:	dd415715 	stw	r21,1372(sp)
  8005cc:	dd015615 	stw	r20,1368(sp)
  8005d0:	dcc15515 	stw	r19,1364(sp)
  8005d4:	dc815415 	stw	r18,1360(sp)
  8005d8:	dc415315 	stw	r17,1356(sp)
  8005dc:	282d883a 	mov	r22,r5
  8005e0:	3021883a 	mov	r16,r6
  8005e4:	d9014f15 	stw	r4,1340(sp)
  8005e8:	0804d500 	call	804d50 <_localeconv_r>
  8005ec:	10800017 	ldw	r2,0(r2)
  8005f0:	d9c15117 	ldw	r7,1348(sp)
  8005f4:	d8814915 	stw	r2,1316(sp)
  8005f8:	d8814f17 	ldw	r2,1340(sp)
  8005fc:	10000226 	beq	r2,zero,800608 <___vfprintf_internal_r+0x5c>
  800600:	10800e17 	ldw	r2,56(r2)
  800604:	10020d26 	beq	r2,zero,800e3c <___vfprintf_internal_r+0x890>
  800608:	b080030b 	ldhu	r2,12(r22)
  80060c:	1080020c 	andi	r2,r2,8
  800610:	10020e26 	beq	r2,zero,800e4c <___vfprintf_internal_r+0x8a0>
  800614:	b0800417 	ldw	r2,16(r22)
  800618:	10020c26 	beq	r2,zero,800e4c <___vfprintf_internal_r+0x8a0>
  80061c:	b200030b 	ldhu	r8,12(r22)
  800620:	00800284 	movi	r2,10
  800624:	40c0068c 	andi	r3,r8,26
  800628:	18802f1e 	bne	r3,r2,8006e8 <___vfprintf_internal_r+0x13c>
  80062c:	b080038f 	ldh	r2,14(r22)
  800630:	10002d16 	blt	r2,zero,8006e8 <___vfprintf_internal_r+0x13c>
  800634:	b240038b 	ldhu	r9,14(r22)
  800638:	b2800717 	ldw	r10,28(r22)
  80063c:	b2c00917 	ldw	r11,36(r22)
  800640:	d9014f17 	ldw	r4,1340(sp)
  800644:	dc402904 	addi	r17,sp,164
  800648:	d8804004 	addi	r2,sp,256
  80064c:	00c10004 	movi	r3,1024
  800650:	423fff4c 	andi	r8,r8,65533
  800654:	800d883a 	mov	r6,r16
  800658:	880b883a 	mov	r5,r17
  80065c:	da002c0d 	sth	r8,176(sp)
  800660:	da402c8d 	sth	r9,178(sp)
  800664:	da803015 	stw	r10,192(sp)
  800668:	dac03215 	stw	r11,200(sp)
  80066c:	d8802d15 	stw	r2,180(sp)
  800670:	d8c02e15 	stw	r3,184(sp)
  800674:	d8802915 	stw	r2,164(sp)
  800678:	d8c02b15 	stw	r3,172(sp)
  80067c:	d8002f15 	stw	zero,188(sp)
  800680:	08005ac0 	call	8005ac <___vfprintf_internal_r>
  800684:	d8814b15 	stw	r2,1324(sp)
  800688:	10000416 	blt	r2,zero,80069c <___vfprintf_internal_r+0xf0>
  80068c:	d9014f17 	ldw	r4,1340(sp)
  800690:	880b883a 	mov	r5,r17
  800694:	0803dc80 	call	803dc8 <_fflush_r>
  800698:	1002321e 	bne	r2,zero,800f64 <___vfprintf_internal_r+0x9b8>
  80069c:	d8802c0b 	ldhu	r2,176(sp)
  8006a0:	1080100c 	andi	r2,r2,64
  8006a4:	10000326 	beq	r2,zero,8006b4 <___vfprintf_internal_r+0x108>
  8006a8:	b080030b 	ldhu	r2,12(r22)
  8006ac:	10801014 	ori	r2,r2,64
  8006b0:	b080030d 	sth	r2,12(r22)
  8006b4:	d8814b17 	ldw	r2,1324(sp)
  8006b8:	dfc15b17 	ldw	ra,1388(sp)
  8006bc:	df015a17 	ldw	fp,1384(sp)
  8006c0:	ddc15917 	ldw	r23,1380(sp)
  8006c4:	dd815817 	ldw	r22,1376(sp)
  8006c8:	dd415717 	ldw	r21,1372(sp)
  8006cc:	dd015617 	ldw	r20,1368(sp)
  8006d0:	dcc15517 	ldw	r19,1364(sp)
  8006d4:	dc815417 	ldw	r18,1360(sp)
  8006d8:	dc415317 	ldw	r17,1356(sp)
  8006dc:	dc015217 	ldw	r16,1352(sp)
  8006e0:	dec15c04 	addi	sp,sp,1392
  8006e4:	f800283a 	ret
  8006e8:	0005883a 	mov	r2,zero
  8006ec:	0007883a 	mov	r3,zero
  8006f0:	dd401904 	addi	r21,sp,100
  8006f4:	d8814215 	stw	r2,1288(sp)
  8006f8:	802f883a 	mov	r23,r16
  8006fc:	d8c14315 	stw	r3,1292(sp)
  800700:	d8014b15 	stw	zero,1324(sp)
  800704:	d8014815 	stw	zero,1312(sp)
  800708:	d8014415 	stw	zero,1296(sp)
  80070c:	d8014715 	stw	zero,1308(sp)
  800710:	dd400c15 	stw	r21,48(sp)
  800714:	d8000e15 	stw	zero,56(sp)
  800718:	d8000d15 	stw	zero,52(sp)
  80071c:	b8800007 	ldb	r2,0(r23)
  800720:	10001926 	beq	r2,zero,800788 <___vfprintf_internal_r+0x1dc>
  800724:	00c00944 	movi	r3,37
  800728:	10c01726 	beq	r2,r3,800788 <___vfprintf_internal_r+0x1dc>
  80072c:	b821883a 	mov	r16,r23
  800730:	00000106 	br	800738 <___vfprintf_internal_r+0x18c>
  800734:	10c00326 	beq	r2,r3,800744 <___vfprintf_internal_r+0x198>
  800738:	84000044 	addi	r16,r16,1
  80073c:	80800007 	ldb	r2,0(r16)
  800740:	103ffc1e 	bne	r2,zero,800734 <___vfprintf_internal_r+0x188>
  800744:	85e7c83a 	sub	r19,r16,r23
  800748:	98000e26 	beq	r19,zero,800784 <___vfprintf_internal_r+0x1d8>
  80074c:	dc800e17 	ldw	r18,56(sp)
  800750:	dc400d17 	ldw	r17,52(sp)
  800754:	008001c4 	movi	r2,7
  800758:	94e5883a 	add	r18,r18,r19
  80075c:	8c400044 	addi	r17,r17,1
  800760:	adc00015 	stw	r23,0(r21)
  800764:	dc800e15 	stw	r18,56(sp)
  800768:	acc00115 	stw	r19,4(r21)
  80076c:	dc400d15 	stw	r17,52(sp)
  800770:	14428b16 	blt	r2,r17,8011a0 <___vfprintf_internal_r+0xbf4>
  800774:	ad400204 	addi	r21,r21,8
  800778:	d9014b17 	ldw	r4,1324(sp)
  80077c:	24c9883a 	add	r4,r4,r19
  800780:	d9014b15 	stw	r4,1324(sp)
  800784:	802f883a 	mov	r23,r16
  800788:	b8800007 	ldb	r2,0(r23)
  80078c:	10013c26 	beq	r2,zero,800c80 <___vfprintf_internal_r+0x6d4>
  800790:	bdc00044 	addi	r23,r23,1
  800794:	d8000405 	stb	zero,16(sp)
  800798:	b8c00007 	ldb	r3,0(r23)
  80079c:	04ffffc4 	movi	r19,-1
  8007a0:	d8014c15 	stw	zero,1328(sp)
  8007a4:	d8014a15 	stw	zero,1320(sp)
  8007a8:	d8c14d15 	stw	r3,1332(sp)
  8007ac:	bdc00044 	addi	r23,r23,1
  8007b0:	d9414d17 	ldw	r5,1332(sp)
  8007b4:	00801604 	movi	r2,88
  8007b8:	28fff804 	addi	r3,r5,-32
  8007bc:	10c06036 	bltu	r2,r3,800940 <___vfprintf_internal_r+0x394>
  8007c0:	18c5883a 	add	r2,r3,r3
  8007c4:	1085883a 	add	r2,r2,r2
  8007c8:	00c02034 	movhi	r3,128
  8007cc:	18c1f704 	addi	r3,r3,2012
  8007d0:	10c5883a 	add	r2,r2,r3
  8007d4:	11000017 	ldw	r4,0(r2)
  8007d8:	2000683a 	jmp	r4
  8007dc:	00801750 	cmplti	r2,zero,93
  8007e0:	00800940 	call	80094 <__reset-0x77ff6c>
  8007e4:	00800940 	call	80094 <__reset-0x77ff6c>
  8007e8:	0080173c 	xorhi	r2,zero,92
  8007ec:	00800940 	call	80094 <__reset-0x77ff6c>
  8007f0:	00800940 	call	80094 <__reset-0x77ff6c>
  8007f4:	00800940 	call	80094 <__reset-0x77ff6c>
  8007f8:	00800940 	call	80094 <__reset-0x77ff6c>
  8007fc:	00800940 	call	80094 <__reset-0x77ff6c>
  800800:	00800940 	call	80094 <__reset-0x77ff6c>
  800804:	0080151c 	xori	r2,zero,84
  800808:	0080172c 	andhi	r2,zero,92
  80080c:	00800940 	call	80094 <__reset-0x77ff6c>
  800810:	00801534 	movhi	r2,84
  800814:	008017d4 	movui	r2,95
  800818:	00800940 	call	80094 <__reset-0x77ff6c>
  80081c:	008017c0 	call	8017c <__reset-0x77fe84>
  800820:	0080177c 	xorhi	r2,zero,93
  800824:	0080177c 	xorhi	r2,zero,93
  800828:	0080177c 	xorhi	r2,zero,93
  80082c:	0080177c 	xorhi	r2,zero,93
  800830:	0080177c 	xorhi	r2,zero,93
  800834:	0080177c 	xorhi	r2,zero,93
  800838:	0080177c 	xorhi	r2,zero,93
  80083c:	0080177c 	xorhi	r2,zero,93
  800840:	0080177c 	xorhi	r2,zero,93
  800844:	00800940 	call	80094 <__reset-0x77ff6c>
  800848:	00800940 	call	80094 <__reset-0x77ff6c>
  80084c:	00800940 	call	80094 <__reset-0x77ff6c>
  800850:	00800940 	call	80094 <__reset-0x77ff6c>
  800854:	00800940 	call	80094 <__reset-0x77ff6c>
  800858:	00800940 	call	80094 <__reset-0x77ff6c>
  80085c:	00800940 	call	80094 <__reset-0x77ff6c>
  800860:	00800940 	call	80094 <__reset-0x77ff6c>
  800864:	00800940 	call	80094 <__reset-0x77ff6c>
  800868:	00800940 	call	80094 <__reset-0x77ff6c>
  80086c:	00800f98 	cmpnei	r2,zero,62
  800870:	00801604 	movi	r2,88
  800874:	00800940 	call	80094 <__reset-0x77ff6c>
  800878:	00801604 	movi	r2,88
  80087c:	00800940 	call	80094 <__reset-0x77ff6c>
  800880:	00800940 	call	80094 <__reset-0x77ff6c>
  800884:	00800940 	call	80094 <__reset-0x77ff6c>
  800888:	00800940 	call	80094 <__reset-0x77ff6c>
  80088c:	00801768 	cmpgeui	r2,zero,93
  800890:	00800940 	call	80094 <__reset-0x77ff6c>
  800894:	00800940 	call	80094 <__reset-0x77ff6c>
  800898:	0080104c 	andi	r2,zero,65
  80089c:	00800940 	call	80094 <__reset-0x77ff6c>
  8008a0:	00800940 	call	80094 <__reset-0x77ff6c>
  8008a4:	00800940 	call	80094 <__reset-0x77ff6c>
  8008a8:	00800940 	call	80094 <__reset-0x77ff6c>
  8008ac:	00800940 	call	80094 <__reset-0x77ff6c>
  8008b0:	00801098 	cmpnei	r2,zero,66
  8008b4:	00800940 	call	80094 <__reset-0x77ff6c>
  8008b8:	00800940 	call	80094 <__reset-0x77ff6c>
  8008bc:	008016b8 	rdprs	r2,zero,90
  8008c0:	00800940 	call	80094 <__reset-0x77ff6c>
  8008c4:	00800940 	call	80094 <__reset-0x77ff6c>
  8008c8:	00800940 	call	80094 <__reset-0x77ff6c>
  8008cc:	00800940 	call	80094 <__reset-0x77ff6c>
  8008d0:	00800940 	call	80094 <__reset-0x77ff6c>
  8008d4:	00800940 	call	80094 <__reset-0x77ff6c>
  8008d8:	00800940 	call	80094 <__reset-0x77ff6c>
  8008dc:	00800940 	call	80094 <__reset-0x77ff6c>
  8008e0:	00800940 	call	80094 <__reset-0x77ff6c>
  8008e4:	00800940 	call	80094 <__reset-0x77ff6c>
  8008e8:	0080168c 	andi	r2,zero,90
  8008ec:	00800fa4 	muli	r2,zero,62
  8008f0:	00801604 	movi	r2,88
  8008f4:	00801604 	movi	r2,88
  8008f8:	00801604 	movi	r2,88
  8008fc:	008015f0 	cmpltui	r2,zero,87
  800900:	00800fa4 	muli	r2,zero,62
  800904:	00800940 	call	80094 <__reset-0x77ff6c>
  800908:	00800940 	call	80094 <__reset-0x77ff6c>
  80090c:	00801578 	rdprs	r2,zero,85
  800910:	00800940 	call	80094 <__reset-0x77ff6c>
  800914:	00801548 	cmpgei	r2,zero,85
  800918:	00801058 	cmpnei	r2,zero,65
  80091c:	008015a8 	cmpgeui	r2,zero,86
  800920:	00801594 	movui	r2,86
  800924:	00800940 	call	80094 <__reset-0x77ff6c>
  800928:	0080183c 	xorhi	r2,zero,96
  80092c:	00800940 	call	80094 <__reset-0x77ff6c>
  800930:	008010a4 	muli	r2,zero,66
  800934:	00800940 	call	80094 <__reset-0x77ff6c>
  800938:	00800940 	call	80094 <__reset-0x77ff6c>
  80093c:	0080171c 	xori	r2,zero,92
  800940:	d9014d17 	ldw	r4,1332(sp)
  800944:	2000ce26 	beq	r4,zero,800c80 <___vfprintf_internal_r+0x6d4>
  800948:	01400044 	movi	r5,1
  80094c:	d9800f04 	addi	r6,sp,60
  800950:	d9c14015 	stw	r7,1280(sp)
  800954:	d9414515 	stw	r5,1300(sp)
  800958:	d9814115 	stw	r6,1284(sp)
  80095c:	280f883a 	mov	r7,r5
  800960:	d9000f05 	stb	r4,60(sp)
  800964:	d8000405 	stb	zero,16(sp)
  800968:	d8014615 	stw	zero,1304(sp)
  80096c:	d8c14c17 	ldw	r3,1328(sp)
  800970:	1880008c 	andi	r2,r3,2
  800974:	1005003a 	cmpeq	r2,r2,zero
  800978:	d8815015 	stw	r2,1344(sp)
  80097c:	1000031e 	bne	r2,zero,80098c <___vfprintf_internal_r+0x3e0>
  800980:	d9014517 	ldw	r4,1300(sp)
  800984:	21000084 	addi	r4,r4,2
  800988:	d9014515 	stw	r4,1300(sp)
  80098c:	d9414c17 	ldw	r5,1328(sp)
  800990:	2940210c 	andi	r5,r5,132
  800994:	d9414e15 	stw	r5,1336(sp)
  800998:	28002d1e 	bne	r5,zero,800a50 <___vfprintf_internal_r+0x4a4>
  80099c:	d9814a17 	ldw	r6,1320(sp)
  8009a0:	d8814517 	ldw	r2,1300(sp)
  8009a4:	30a1c83a 	sub	r16,r6,r2
  8009a8:	0400290e 	bge	zero,r16,800a50 <___vfprintf_internal_r+0x4a4>
  8009ac:	00800404 	movi	r2,16
  8009b0:	14045e0e 	bge	r2,r16,801b2c <___vfprintf_internal_r+0x1580>
  8009b4:	dc800e17 	ldw	r18,56(sp)
  8009b8:	dc400d17 	ldw	r17,52(sp)
  8009bc:	1027883a 	mov	r19,r2
  8009c0:	07002074 	movhi	fp,129
  8009c4:	e7328084 	addi	fp,fp,-13822
  8009c8:	050001c4 	movi	r20,7
  8009cc:	00000306 	br	8009dc <___vfprintf_internal_r+0x430>
  8009d0:	843ffc04 	addi	r16,r16,-16
  8009d4:	ad400204 	addi	r21,r21,8
  8009d8:	9c00130e 	bge	r19,r16,800a28 <___vfprintf_internal_r+0x47c>
  8009dc:	94800404 	addi	r18,r18,16
  8009e0:	8c400044 	addi	r17,r17,1
  8009e4:	af000015 	stw	fp,0(r21)
  8009e8:	acc00115 	stw	r19,4(r21)
  8009ec:	dc800e15 	stw	r18,56(sp)
  8009f0:	dc400d15 	stw	r17,52(sp)
  8009f4:	a47ff60e 	bge	r20,r17,8009d0 <___vfprintf_internal_r+0x424>
  8009f8:	d9014f17 	ldw	r4,1340(sp)
  8009fc:	b00b883a 	mov	r5,r22
  800a00:	d9800c04 	addi	r6,sp,48
  800a04:	d9c15115 	stw	r7,1348(sp)
  800a08:	08005540 	call	800554 <__sprint_r>
  800a0c:	d9c15117 	ldw	r7,1348(sp)
  800a10:	10009e1e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  800a14:	843ffc04 	addi	r16,r16,-16
  800a18:	dc800e17 	ldw	r18,56(sp)
  800a1c:	dc400d17 	ldw	r17,52(sp)
  800a20:	dd401904 	addi	r21,sp,100
  800a24:	9c3fed16 	blt	r19,r16,8009dc <___vfprintf_internal_r+0x430>
  800a28:	9425883a 	add	r18,r18,r16
  800a2c:	8c400044 	addi	r17,r17,1
  800a30:	008001c4 	movi	r2,7
  800a34:	af000015 	stw	fp,0(r21)
  800a38:	ac000115 	stw	r16,4(r21)
  800a3c:	dc800e15 	stw	r18,56(sp)
  800a40:	dc400d15 	stw	r17,52(sp)
  800a44:	1441f516 	blt	r2,r17,80121c <___vfprintf_internal_r+0xc70>
  800a48:	ad400204 	addi	r21,r21,8
  800a4c:	00000206 	br	800a58 <___vfprintf_internal_r+0x4ac>
  800a50:	dc800e17 	ldw	r18,56(sp)
  800a54:	dc400d17 	ldw	r17,52(sp)
  800a58:	d8800407 	ldb	r2,16(sp)
  800a5c:	10000b26 	beq	r2,zero,800a8c <___vfprintf_internal_r+0x4e0>
  800a60:	00800044 	movi	r2,1
  800a64:	94800044 	addi	r18,r18,1
  800a68:	8c400044 	addi	r17,r17,1
  800a6c:	a8800115 	stw	r2,4(r21)
  800a70:	d8c00404 	addi	r3,sp,16
  800a74:	008001c4 	movi	r2,7
  800a78:	a8c00015 	stw	r3,0(r21)
  800a7c:	dc800e15 	stw	r18,56(sp)
  800a80:	dc400d15 	stw	r17,52(sp)
  800a84:	1441da16 	blt	r2,r17,8011f0 <___vfprintf_internal_r+0xc44>
  800a88:	ad400204 	addi	r21,r21,8
  800a8c:	d9015017 	ldw	r4,1344(sp)
  800a90:	20000b1e 	bne	r4,zero,800ac0 <___vfprintf_internal_r+0x514>
  800a94:	d8800444 	addi	r2,sp,17
  800a98:	94800084 	addi	r18,r18,2
  800a9c:	8c400044 	addi	r17,r17,1
  800aa0:	a8800015 	stw	r2,0(r21)
  800aa4:	00c00084 	movi	r3,2
  800aa8:	008001c4 	movi	r2,7
  800aac:	a8c00115 	stw	r3,4(r21)
  800ab0:	dc800e15 	stw	r18,56(sp)
  800ab4:	dc400d15 	stw	r17,52(sp)
  800ab8:	1441c216 	blt	r2,r17,8011c4 <___vfprintf_internal_r+0xc18>
  800abc:	ad400204 	addi	r21,r21,8
  800ac0:	d9414e17 	ldw	r5,1336(sp)
  800ac4:	00802004 	movi	r2,128
  800ac8:	2880b126 	beq	r5,r2,800d90 <___vfprintf_internal_r+0x7e4>
  800acc:	d8c14617 	ldw	r3,1304(sp)
  800ad0:	19e1c83a 	sub	r16,r3,r7
  800ad4:	0400260e 	bge	zero,r16,800b70 <___vfprintf_internal_r+0x5c4>
  800ad8:	00800404 	movi	r2,16
  800adc:	1403cf0e 	bge	r2,r16,801a1c <___vfprintf_internal_r+0x1470>
  800ae0:	1027883a 	mov	r19,r2
  800ae4:	07002074 	movhi	fp,129
  800ae8:	e7327c84 	addi	fp,fp,-13838
  800aec:	050001c4 	movi	r20,7
  800af0:	00000306 	br	800b00 <___vfprintf_internal_r+0x554>
  800af4:	843ffc04 	addi	r16,r16,-16
  800af8:	ad400204 	addi	r21,r21,8
  800afc:	9c00130e 	bge	r19,r16,800b4c <___vfprintf_internal_r+0x5a0>
  800b00:	94800404 	addi	r18,r18,16
  800b04:	8c400044 	addi	r17,r17,1
  800b08:	af000015 	stw	fp,0(r21)
  800b0c:	acc00115 	stw	r19,4(r21)
  800b10:	dc800e15 	stw	r18,56(sp)
  800b14:	dc400d15 	stw	r17,52(sp)
  800b18:	a47ff60e 	bge	r20,r17,800af4 <___vfprintf_internal_r+0x548>
  800b1c:	d9014f17 	ldw	r4,1340(sp)
  800b20:	b00b883a 	mov	r5,r22
  800b24:	d9800c04 	addi	r6,sp,48
  800b28:	d9c15115 	stw	r7,1348(sp)
  800b2c:	08005540 	call	800554 <__sprint_r>
  800b30:	d9c15117 	ldw	r7,1348(sp)
  800b34:	1000551e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  800b38:	843ffc04 	addi	r16,r16,-16
  800b3c:	dc800e17 	ldw	r18,56(sp)
  800b40:	dc400d17 	ldw	r17,52(sp)
  800b44:	dd401904 	addi	r21,sp,100
  800b48:	9c3fed16 	blt	r19,r16,800b00 <___vfprintf_internal_r+0x554>
  800b4c:	9425883a 	add	r18,r18,r16
  800b50:	8c400044 	addi	r17,r17,1
  800b54:	008001c4 	movi	r2,7
  800b58:	af000015 	stw	fp,0(r21)
  800b5c:	ac000115 	stw	r16,4(r21)
  800b60:	dc800e15 	stw	r18,56(sp)
  800b64:	dc400d15 	stw	r17,52(sp)
  800b68:	14418216 	blt	r2,r17,801174 <___vfprintf_internal_r+0xbc8>
  800b6c:	ad400204 	addi	r21,r21,8
  800b70:	d9014c17 	ldw	r4,1328(sp)
  800b74:	2080400c 	andi	r2,r4,256
  800b78:	10004a1e 	bne	r2,zero,800ca4 <___vfprintf_internal_r+0x6f8>
  800b7c:	d9414117 	ldw	r5,1284(sp)
  800b80:	91e5883a 	add	r18,r18,r7
  800b84:	8c400044 	addi	r17,r17,1
  800b88:	008001c4 	movi	r2,7
  800b8c:	a9400015 	stw	r5,0(r21)
  800b90:	a9c00115 	stw	r7,4(r21)
  800b94:	dc800e15 	stw	r18,56(sp)
  800b98:	dc400d15 	stw	r17,52(sp)
  800b9c:	14416716 	blt	r2,r17,80113c <___vfprintf_internal_r+0xb90>
  800ba0:	a8c00204 	addi	r3,r21,8
  800ba4:	d9814c17 	ldw	r6,1328(sp)
  800ba8:	3080010c 	andi	r2,r6,4
  800bac:	10002826 	beq	r2,zero,800c50 <___vfprintf_internal_r+0x6a4>
  800bb0:	d8814a17 	ldw	r2,1320(sp)
  800bb4:	d9014517 	ldw	r4,1300(sp)
  800bb8:	1121c83a 	sub	r16,r2,r4
  800bbc:	0400240e 	bge	zero,r16,800c50 <___vfprintf_internal_r+0x6a4>
  800bc0:	00800404 	movi	r2,16
  800bc4:	1404550e 	bge	r2,r16,801d1c <___vfprintf_internal_r+0x1770>
  800bc8:	dc400d17 	ldw	r17,52(sp)
  800bcc:	1027883a 	mov	r19,r2
  800bd0:	07002074 	movhi	fp,129
  800bd4:	e7328084 	addi	fp,fp,-13822
  800bd8:	050001c4 	movi	r20,7
  800bdc:	00000306 	br	800bec <___vfprintf_internal_r+0x640>
  800be0:	843ffc04 	addi	r16,r16,-16
  800be4:	18c00204 	addi	r3,r3,8
  800be8:	9c00110e 	bge	r19,r16,800c30 <___vfprintf_internal_r+0x684>
  800bec:	94800404 	addi	r18,r18,16
  800bf0:	8c400044 	addi	r17,r17,1
  800bf4:	1f000015 	stw	fp,0(r3)
  800bf8:	1cc00115 	stw	r19,4(r3)
  800bfc:	dc800e15 	stw	r18,56(sp)
  800c00:	dc400d15 	stw	r17,52(sp)
  800c04:	a47ff60e 	bge	r20,r17,800be0 <___vfprintf_internal_r+0x634>
  800c08:	d9014f17 	ldw	r4,1340(sp)
  800c0c:	b00b883a 	mov	r5,r22
  800c10:	d9800c04 	addi	r6,sp,48
  800c14:	08005540 	call	800554 <__sprint_r>
  800c18:	10001c1e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  800c1c:	843ffc04 	addi	r16,r16,-16
  800c20:	dc800e17 	ldw	r18,56(sp)
  800c24:	dc400d17 	ldw	r17,52(sp)
  800c28:	d8c01904 	addi	r3,sp,100
  800c2c:	9c3fef16 	blt	r19,r16,800bec <___vfprintf_internal_r+0x640>
  800c30:	9425883a 	add	r18,r18,r16
  800c34:	8c400044 	addi	r17,r17,1
  800c38:	008001c4 	movi	r2,7
  800c3c:	1f000015 	stw	fp,0(r3)
  800c40:	1c000115 	stw	r16,4(r3)
  800c44:	dc800e15 	stw	r18,56(sp)
  800c48:	dc400d15 	stw	r17,52(sp)
  800c4c:	1440cb16 	blt	r2,r17,800f7c <___vfprintf_internal_r+0x9d0>
  800c50:	d8814a17 	ldw	r2,1320(sp)
  800c54:	d9414517 	ldw	r5,1300(sp)
  800c58:	1140010e 	bge	r2,r5,800c60 <___vfprintf_internal_r+0x6b4>
  800c5c:	2805883a 	mov	r2,r5
  800c60:	d9814b17 	ldw	r6,1324(sp)
  800c64:	308d883a 	add	r6,r6,r2
  800c68:	d9814b15 	stw	r6,1324(sp)
  800c6c:	90013b1e 	bne	r18,zero,80115c <___vfprintf_internal_r+0xbb0>
  800c70:	d9c14017 	ldw	r7,1280(sp)
  800c74:	dd401904 	addi	r21,sp,100
  800c78:	d8000d15 	stw	zero,52(sp)
  800c7c:	003ea706 	br	80071c <___vfprintf_internal_r+0x170>
  800c80:	d8800e17 	ldw	r2,56(sp)
  800c84:	1005451e 	bne	r2,zero,80219c <___vfprintf_internal_r+0x1bf0>
  800c88:	d8000d15 	stw	zero,52(sp)
  800c8c:	b080030b 	ldhu	r2,12(r22)
  800c90:	1080100c 	andi	r2,r2,64
  800c94:	103e8726 	beq	r2,zero,8006b4 <___vfprintf_internal_r+0x108>
  800c98:	00bfffc4 	movi	r2,-1
  800c9c:	d8814b15 	stw	r2,1324(sp)
  800ca0:	003e8406 	br	8006b4 <___vfprintf_internal_r+0x108>
  800ca4:	d9814d17 	ldw	r6,1332(sp)
  800ca8:	00801944 	movi	r2,101
  800cac:	11806e16 	blt	r2,r6,800e68 <___vfprintf_internal_r+0x8bc>
  800cb0:	d9414717 	ldw	r5,1308(sp)
  800cb4:	00c00044 	movi	r3,1
  800cb8:	1943490e 	bge	r3,r5,8019e0 <___vfprintf_internal_r+0x1434>
  800cbc:	d8814117 	ldw	r2,1284(sp)
  800cc0:	94800044 	addi	r18,r18,1
  800cc4:	8c400044 	addi	r17,r17,1
  800cc8:	a8800015 	stw	r2,0(r21)
  800ccc:	008001c4 	movi	r2,7
  800cd0:	a8c00115 	stw	r3,4(r21)
  800cd4:	dc800e15 	stw	r18,56(sp)
  800cd8:	dc400d15 	stw	r17,52(sp)
  800cdc:	1441ca16 	blt	r2,r17,801408 <___vfprintf_internal_r+0xe5c>
  800ce0:	a8c00204 	addi	r3,r21,8
  800ce4:	d9014917 	ldw	r4,1316(sp)
  800ce8:	00800044 	movi	r2,1
  800cec:	94800044 	addi	r18,r18,1
  800cf0:	8c400044 	addi	r17,r17,1
  800cf4:	18800115 	stw	r2,4(r3)
  800cf8:	008001c4 	movi	r2,7
  800cfc:	19000015 	stw	r4,0(r3)
  800d00:	dc800e15 	stw	r18,56(sp)
  800d04:	dc400d15 	stw	r17,52(sp)
  800d08:	1441b616 	blt	r2,r17,8013e4 <___vfprintf_internal_r+0xe38>
  800d0c:	1cc00204 	addi	r19,r3,8
  800d10:	d9014217 	ldw	r4,1288(sp)
  800d14:	d9414317 	ldw	r5,1292(sp)
  800d18:	000d883a 	mov	r6,zero
  800d1c:	000f883a 	mov	r7,zero
  800d20:	08090600 	call	809060 <__nedf2>
  800d24:	10017426 	beq	r2,zero,8012f8 <___vfprintf_internal_r+0xd4c>
  800d28:	d9414717 	ldw	r5,1308(sp)
  800d2c:	d9814117 	ldw	r6,1284(sp)
  800d30:	8c400044 	addi	r17,r17,1
  800d34:	2c85883a 	add	r2,r5,r18
  800d38:	14bfffc4 	addi	r18,r2,-1
  800d3c:	28bfffc4 	addi	r2,r5,-1
  800d40:	30c00044 	addi	r3,r6,1
  800d44:	98800115 	stw	r2,4(r19)
  800d48:	008001c4 	movi	r2,7
  800d4c:	98c00015 	stw	r3,0(r19)
  800d50:	dc800e15 	stw	r18,56(sp)
  800d54:	dc400d15 	stw	r17,52(sp)
  800d58:	14418e16 	blt	r2,r17,801394 <___vfprintf_internal_r+0xde8>
  800d5c:	9cc00204 	addi	r19,r19,8
  800d60:	d9414817 	ldw	r5,1312(sp)
  800d64:	d8800804 	addi	r2,sp,32
  800d68:	8c400044 	addi	r17,r17,1
  800d6c:	9165883a 	add	r18,r18,r5
  800d70:	98800015 	stw	r2,0(r19)
  800d74:	008001c4 	movi	r2,7
  800d78:	99400115 	stw	r5,4(r19)
  800d7c:	dc800e15 	stw	r18,56(sp)
  800d80:	dc400d15 	stw	r17,52(sp)
  800d84:	1440ed16 	blt	r2,r17,80113c <___vfprintf_internal_r+0xb90>
  800d88:	98c00204 	addi	r3,r19,8
  800d8c:	003f8506 	br	800ba4 <___vfprintf_internal_r+0x5f8>
  800d90:	d9814a17 	ldw	r6,1320(sp)
  800d94:	d8814517 	ldw	r2,1300(sp)
  800d98:	30a1c83a 	sub	r16,r6,r2
  800d9c:	043f4b0e 	bge	zero,r16,800acc <___vfprintf_internal_r+0x520>
  800da0:	00800404 	movi	r2,16
  800da4:	14043a0e 	bge	r2,r16,801e90 <___vfprintf_internal_r+0x18e4>
  800da8:	1027883a 	mov	r19,r2
  800dac:	07002074 	movhi	fp,129
  800db0:	e7327c84 	addi	fp,fp,-13838
  800db4:	050001c4 	movi	r20,7
  800db8:	00000306 	br	800dc8 <___vfprintf_internal_r+0x81c>
  800dbc:	843ffc04 	addi	r16,r16,-16
  800dc0:	ad400204 	addi	r21,r21,8
  800dc4:	9c00130e 	bge	r19,r16,800e14 <___vfprintf_internal_r+0x868>
  800dc8:	94800404 	addi	r18,r18,16
  800dcc:	8c400044 	addi	r17,r17,1
  800dd0:	af000015 	stw	fp,0(r21)
  800dd4:	acc00115 	stw	r19,4(r21)
  800dd8:	dc800e15 	stw	r18,56(sp)
  800ddc:	dc400d15 	stw	r17,52(sp)
  800de0:	a47ff60e 	bge	r20,r17,800dbc <___vfprintf_internal_r+0x810>
  800de4:	d9014f17 	ldw	r4,1340(sp)
  800de8:	b00b883a 	mov	r5,r22
  800dec:	d9800c04 	addi	r6,sp,48
  800df0:	d9c15115 	stw	r7,1348(sp)
  800df4:	08005540 	call	800554 <__sprint_r>
  800df8:	d9c15117 	ldw	r7,1348(sp)
  800dfc:	103fa31e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  800e00:	843ffc04 	addi	r16,r16,-16
  800e04:	dc800e17 	ldw	r18,56(sp)
  800e08:	dc400d17 	ldw	r17,52(sp)
  800e0c:	dd401904 	addi	r21,sp,100
  800e10:	9c3fed16 	blt	r19,r16,800dc8 <___vfprintf_internal_r+0x81c>
  800e14:	9425883a 	add	r18,r18,r16
  800e18:	8c400044 	addi	r17,r17,1
  800e1c:	008001c4 	movi	r2,7
  800e20:	af000015 	stw	fp,0(r21)
  800e24:	ac000115 	stw	r16,4(r21)
  800e28:	dc800e15 	stw	r18,56(sp)
  800e2c:	dc400d15 	stw	r17,52(sp)
  800e30:	14416116 	blt	r2,r17,8013b8 <___vfprintf_internal_r+0xe0c>
  800e34:	ad400204 	addi	r21,r21,8
  800e38:	003f2406 	br	800acc <___vfprintf_internal_r+0x520>
  800e3c:	d9014f17 	ldw	r4,1340(sp)
  800e40:	08040600 	call	804060 <__sinit>
  800e44:	d9c15117 	ldw	r7,1348(sp)
  800e48:	003def06 	br	800608 <___vfprintf_internal_r+0x5c>
  800e4c:	d9014f17 	ldw	r4,1340(sp)
  800e50:	b00b883a 	mov	r5,r22
  800e54:	d9c15115 	stw	r7,1348(sp)
  800e58:	08024940 	call	802494 <__swsetup_r>
  800e5c:	d9c15117 	ldw	r7,1348(sp)
  800e60:	103dee26 	beq	r2,zero,80061c <___vfprintf_internal_r+0x70>
  800e64:	003f8c06 	br	800c98 <___vfprintf_internal_r+0x6ec>
  800e68:	d9014217 	ldw	r4,1288(sp)
  800e6c:	d9414317 	ldw	r5,1292(sp)
  800e70:	000d883a 	mov	r6,zero
  800e74:	000f883a 	mov	r7,zero
  800e78:	0808fd80 	call	808fd8 <__eqdf2>
  800e7c:	1000f21e 	bne	r2,zero,801248 <___vfprintf_internal_r+0xc9c>
  800e80:	00802074 	movhi	r2,129
  800e84:	10b27c04 	addi	r2,r2,-13840
  800e88:	94800044 	addi	r18,r18,1
  800e8c:	8c400044 	addi	r17,r17,1
  800e90:	a8800015 	stw	r2,0(r21)
  800e94:	00c00044 	movi	r3,1
  800e98:	008001c4 	movi	r2,7
  800e9c:	a8c00115 	stw	r3,4(r21)
  800ea0:	dc800e15 	stw	r18,56(sp)
  800ea4:	dc400d15 	stw	r17,52(sp)
  800ea8:	14430016 	blt	r2,r17,801aac <___vfprintf_internal_r+0x1500>
  800eac:	a8c00204 	addi	r3,r21,8
  800eb0:	d8800517 	ldw	r2,20(sp)
  800eb4:	d9014717 	ldw	r4,1308(sp)
  800eb8:	11015c0e 	bge	r2,r4,80142c <___vfprintf_internal_r+0xe80>
  800ebc:	dc400d17 	ldw	r17,52(sp)
  800ec0:	d9814917 	ldw	r6,1316(sp)
  800ec4:	00800044 	movi	r2,1
  800ec8:	94800044 	addi	r18,r18,1
  800ecc:	8c400044 	addi	r17,r17,1
  800ed0:	18800115 	stw	r2,4(r3)
  800ed4:	008001c4 	movi	r2,7
  800ed8:	19800015 	stw	r6,0(r3)
  800edc:	dc800e15 	stw	r18,56(sp)
  800ee0:	dc400d15 	stw	r17,52(sp)
  800ee4:	14431616 	blt	r2,r17,801b40 <___vfprintf_internal_r+0x1594>
  800ee8:	18c00204 	addi	r3,r3,8
  800eec:	d8814717 	ldw	r2,1308(sp)
  800ef0:	143fffc4 	addi	r16,r2,-1
  800ef4:	043f2b0e 	bge	zero,r16,800ba4 <___vfprintf_internal_r+0x5f8>
  800ef8:	00800404 	movi	r2,16
  800efc:	1402a80e 	bge	r2,r16,8019a0 <___vfprintf_internal_r+0x13f4>
  800f00:	dc400d17 	ldw	r17,52(sp)
  800f04:	1027883a 	mov	r19,r2
  800f08:	07002074 	movhi	fp,129
  800f0c:	e7327c84 	addi	fp,fp,-13838
  800f10:	050001c4 	movi	r20,7
  800f14:	00000306 	br	800f24 <___vfprintf_internal_r+0x978>
  800f18:	18c00204 	addi	r3,r3,8
  800f1c:	843ffc04 	addi	r16,r16,-16
  800f20:	9c02a20e 	bge	r19,r16,8019ac <___vfprintf_internal_r+0x1400>
  800f24:	94800404 	addi	r18,r18,16
  800f28:	8c400044 	addi	r17,r17,1
  800f2c:	1f000015 	stw	fp,0(r3)
  800f30:	1cc00115 	stw	r19,4(r3)
  800f34:	dc800e15 	stw	r18,56(sp)
  800f38:	dc400d15 	stw	r17,52(sp)
  800f3c:	a47ff60e 	bge	r20,r17,800f18 <___vfprintf_internal_r+0x96c>
  800f40:	d9014f17 	ldw	r4,1340(sp)
  800f44:	b00b883a 	mov	r5,r22
  800f48:	d9800c04 	addi	r6,sp,48
  800f4c:	08005540 	call	800554 <__sprint_r>
  800f50:	103f4e1e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  800f54:	dc800e17 	ldw	r18,56(sp)
  800f58:	dc400d17 	ldw	r17,52(sp)
  800f5c:	d8c01904 	addi	r3,sp,100
  800f60:	003fee06 	br	800f1c <___vfprintf_internal_r+0x970>
  800f64:	d8802c0b 	ldhu	r2,176(sp)
  800f68:	00ffffc4 	movi	r3,-1
  800f6c:	d8c14b15 	stw	r3,1324(sp)
  800f70:	1080100c 	andi	r2,r2,64
  800f74:	103dcc1e 	bne	r2,zero,8006a8 <___vfprintf_internal_r+0xfc>
  800f78:	003dce06 	br	8006b4 <___vfprintf_internal_r+0x108>
  800f7c:	d9014f17 	ldw	r4,1340(sp)
  800f80:	b00b883a 	mov	r5,r22
  800f84:	d9800c04 	addi	r6,sp,48
  800f88:	08005540 	call	800554 <__sprint_r>
  800f8c:	103f3f1e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  800f90:	dc800e17 	ldw	r18,56(sp)
  800f94:	003f2e06 	br	800c50 <___vfprintf_internal_r+0x6a4>
  800f98:	d9414c17 	ldw	r5,1328(sp)
  800f9c:	29400414 	ori	r5,r5,16
  800fa0:	d9414c15 	stw	r5,1328(sp)
  800fa4:	d9814c17 	ldw	r6,1328(sp)
  800fa8:	3080080c 	andi	r2,r6,32
  800fac:	10014f1e 	bne	r2,zero,8014ec <___vfprintf_internal_r+0xf40>
  800fb0:	d8c14c17 	ldw	r3,1328(sp)
  800fb4:	1880040c 	andi	r2,r3,16
  800fb8:	1002f01e 	bne	r2,zero,801b7c <___vfprintf_internal_r+0x15d0>
  800fbc:	d9014c17 	ldw	r4,1328(sp)
  800fc0:	2080100c 	andi	r2,r4,64
  800fc4:	1002ed26 	beq	r2,zero,801b7c <___vfprintf_internal_r+0x15d0>
  800fc8:	3880000f 	ldh	r2,0(r7)
  800fcc:	39c00104 	addi	r7,r7,4
  800fd0:	d9c14015 	stw	r7,1280(sp)
  800fd4:	1023d7fa 	srai	r17,r2,31
  800fd8:	1021883a 	mov	r16,r2
  800fdc:	88037816 	blt	r17,zero,801dc0 <___vfprintf_internal_r+0x1814>
  800fe0:	01000044 	movi	r4,1
  800fe4:	98000416 	blt	r19,zero,800ff8 <___vfprintf_internal_r+0xa4c>
  800fe8:	d8c14c17 	ldw	r3,1328(sp)
  800fec:	00bfdfc4 	movi	r2,-129
  800ff0:	1886703a 	and	r3,r3,r2
  800ff4:	d8c14c15 	stw	r3,1328(sp)
  800ff8:	8444b03a 	or	r2,r16,r17
  800ffc:	10022c1e 	bne	r2,zero,8018b0 <___vfprintf_internal_r+0x1304>
  801000:	98022b1e 	bne	r19,zero,8018b0 <___vfprintf_internal_r+0x1304>
  801004:	20803fcc 	andi	r2,r4,255
  801008:	1002a126 	beq	r2,zero,801a90 <___vfprintf_internal_r+0x14e4>
  80100c:	d8c01904 	addi	r3,sp,100
  801010:	dd000f04 	addi	r20,sp,60
  801014:	d8c14115 	stw	r3,1284(sp)
  801018:	d8c14117 	ldw	r3,1284(sp)
  80101c:	dcc14515 	stw	r19,1300(sp)
  801020:	a0c5c83a 	sub	r2,r20,r3
  801024:	11c00a04 	addi	r7,r2,40
  801028:	99c0010e 	bge	r19,r7,801030 <___vfprintf_internal_r+0xa84>
  80102c:	d9c14515 	stw	r7,1300(sp)
  801030:	dcc14615 	stw	r19,1304(sp)
  801034:	d8800407 	ldb	r2,16(sp)
  801038:	103e4c26 	beq	r2,zero,80096c <___vfprintf_internal_r+0x3c0>
  80103c:	d8814517 	ldw	r2,1300(sp)
  801040:	10800044 	addi	r2,r2,1
  801044:	d8814515 	stw	r2,1300(sp)
  801048:	003e4806 	br	80096c <___vfprintf_internal_r+0x3c0>
  80104c:	d9814c17 	ldw	r6,1328(sp)
  801050:	31800414 	ori	r6,r6,16
  801054:	d9814c15 	stw	r6,1328(sp)
  801058:	d8c14c17 	ldw	r3,1328(sp)
  80105c:	1880080c 	andi	r2,r3,32
  801060:	1001271e 	bne	r2,zero,801500 <___vfprintf_internal_r+0xf54>
  801064:	d9414c17 	ldw	r5,1328(sp)
  801068:	2880040c 	andi	r2,r5,16
  80106c:	1002bc1e 	bne	r2,zero,801b60 <___vfprintf_internal_r+0x15b4>
  801070:	d9814c17 	ldw	r6,1328(sp)
  801074:	3080100c 	andi	r2,r6,64
  801078:	1002b926 	beq	r2,zero,801b60 <___vfprintf_internal_r+0x15b4>
  80107c:	3c00000b 	ldhu	r16,0(r7)
  801080:	0009883a 	mov	r4,zero
  801084:	39c00104 	addi	r7,r7,4
  801088:	0023883a 	mov	r17,zero
  80108c:	d9c14015 	stw	r7,1280(sp)
  801090:	d8000405 	stb	zero,16(sp)
  801094:	003fd306 	br	800fe4 <___vfprintf_internal_r+0xa38>
  801098:	d9014c17 	ldw	r4,1328(sp)
  80109c:	21000414 	ori	r4,r4,16
  8010a0:	d9014c15 	stw	r4,1328(sp)
  8010a4:	d9414c17 	ldw	r5,1328(sp)
  8010a8:	2880080c 	andi	r2,r5,32
  8010ac:	1001081e 	bne	r2,zero,8014d0 <___vfprintf_internal_r+0xf24>
  8010b0:	d8c14c17 	ldw	r3,1328(sp)
  8010b4:	1880040c 	andi	r2,r3,16
  8010b8:	1002b61e 	bne	r2,zero,801b94 <___vfprintf_internal_r+0x15e8>
  8010bc:	d9014c17 	ldw	r4,1328(sp)
  8010c0:	2080100c 	andi	r2,r4,64
  8010c4:	1002b326 	beq	r2,zero,801b94 <___vfprintf_internal_r+0x15e8>
  8010c8:	3c00000b 	ldhu	r16,0(r7)
  8010cc:	01000044 	movi	r4,1
  8010d0:	39c00104 	addi	r7,r7,4
  8010d4:	0023883a 	mov	r17,zero
  8010d8:	d9c14015 	stw	r7,1280(sp)
  8010dc:	d8000405 	stb	zero,16(sp)
  8010e0:	003fc006 	br	800fe4 <___vfprintf_internal_r+0xa38>
  8010e4:	d9014f17 	ldw	r4,1340(sp)
  8010e8:	b00b883a 	mov	r5,r22
  8010ec:	d9800c04 	addi	r6,sp,48
  8010f0:	08005540 	call	800554 <__sprint_r>
  8010f4:	103ee51e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  8010f8:	dc800e17 	ldw	r18,56(sp)
  8010fc:	d8c01904 	addi	r3,sp,100
  801100:	d9814c17 	ldw	r6,1328(sp)
  801104:	3080004c 	andi	r2,r6,1
  801108:	1005003a 	cmpeq	r2,r2,zero
  80110c:	103ea51e 	bne	r2,zero,800ba4 <___vfprintf_internal_r+0x5f8>
  801110:	00800044 	movi	r2,1
  801114:	dc400d17 	ldw	r17,52(sp)
  801118:	18800115 	stw	r2,4(r3)
  80111c:	d8814917 	ldw	r2,1316(sp)
  801120:	94800044 	addi	r18,r18,1
  801124:	8c400044 	addi	r17,r17,1
  801128:	18800015 	stw	r2,0(r3)
  80112c:	008001c4 	movi	r2,7
  801130:	dc800e15 	stw	r18,56(sp)
  801134:	dc400d15 	stw	r17,52(sp)
  801138:	1442240e 	bge	r2,r17,8019cc <___vfprintf_internal_r+0x1420>
  80113c:	d9014f17 	ldw	r4,1340(sp)
  801140:	b00b883a 	mov	r5,r22
  801144:	d9800c04 	addi	r6,sp,48
  801148:	08005540 	call	800554 <__sprint_r>
  80114c:	103ecf1e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  801150:	dc800e17 	ldw	r18,56(sp)
  801154:	d8c01904 	addi	r3,sp,100
  801158:	003e9206 	br	800ba4 <___vfprintf_internal_r+0x5f8>
  80115c:	d9014f17 	ldw	r4,1340(sp)
  801160:	b00b883a 	mov	r5,r22
  801164:	d9800c04 	addi	r6,sp,48
  801168:	08005540 	call	800554 <__sprint_r>
  80116c:	103ec026 	beq	r2,zero,800c70 <___vfprintf_internal_r+0x6c4>
  801170:	003ec606 	br	800c8c <___vfprintf_internal_r+0x6e0>
  801174:	d9014f17 	ldw	r4,1340(sp)
  801178:	b00b883a 	mov	r5,r22
  80117c:	d9800c04 	addi	r6,sp,48
  801180:	d9c15115 	stw	r7,1348(sp)
  801184:	08005540 	call	800554 <__sprint_r>
  801188:	d9c15117 	ldw	r7,1348(sp)
  80118c:	103ebf1e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  801190:	dc800e17 	ldw	r18,56(sp)
  801194:	dc400d17 	ldw	r17,52(sp)
  801198:	dd401904 	addi	r21,sp,100
  80119c:	003e7406 	br	800b70 <___vfprintf_internal_r+0x5c4>
  8011a0:	d9014f17 	ldw	r4,1340(sp)
  8011a4:	b00b883a 	mov	r5,r22
  8011a8:	d9800c04 	addi	r6,sp,48
  8011ac:	d9c15115 	stw	r7,1348(sp)
  8011b0:	08005540 	call	800554 <__sprint_r>
  8011b4:	d9c15117 	ldw	r7,1348(sp)
  8011b8:	103eb41e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  8011bc:	dd401904 	addi	r21,sp,100
  8011c0:	003d6d06 	br	800778 <___vfprintf_internal_r+0x1cc>
  8011c4:	d9014f17 	ldw	r4,1340(sp)
  8011c8:	b00b883a 	mov	r5,r22
  8011cc:	d9800c04 	addi	r6,sp,48
  8011d0:	d9c15115 	stw	r7,1348(sp)
  8011d4:	08005540 	call	800554 <__sprint_r>
  8011d8:	d9c15117 	ldw	r7,1348(sp)
  8011dc:	103eab1e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  8011e0:	dc800e17 	ldw	r18,56(sp)
  8011e4:	dc400d17 	ldw	r17,52(sp)
  8011e8:	dd401904 	addi	r21,sp,100
  8011ec:	003e3406 	br	800ac0 <___vfprintf_internal_r+0x514>
  8011f0:	d9014f17 	ldw	r4,1340(sp)
  8011f4:	b00b883a 	mov	r5,r22
  8011f8:	d9800c04 	addi	r6,sp,48
  8011fc:	d9c15115 	stw	r7,1348(sp)
  801200:	08005540 	call	800554 <__sprint_r>
  801204:	d9c15117 	ldw	r7,1348(sp)
  801208:	103ea01e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  80120c:	dc800e17 	ldw	r18,56(sp)
  801210:	dc400d17 	ldw	r17,52(sp)
  801214:	dd401904 	addi	r21,sp,100
  801218:	003e1c06 	br	800a8c <___vfprintf_internal_r+0x4e0>
  80121c:	d9014f17 	ldw	r4,1340(sp)
  801220:	b00b883a 	mov	r5,r22
  801224:	d9800c04 	addi	r6,sp,48
  801228:	d9c15115 	stw	r7,1348(sp)
  80122c:	08005540 	call	800554 <__sprint_r>
  801230:	d9c15117 	ldw	r7,1348(sp)
  801234:	103e951e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  801238:	dc800e17 	ldw	r18,56(sp)
  80123c:	dc400d17 	ldw	r17,52(sp)
  801240:	dd401904 	addi	r21,sp,100
  801244:	003e0406 	br	800a58 <___vfprintf_internal_r+0x4ac>
  801248:	d9000517 	ldw	r4,20(sp)
  80124c:	0102580e 	bge	zero,r4,801bb0 <___vfprintf_internal_r+0x1604>
  801250:	d9814717 	ldw	r6,1308(sp)
  801254:	21807a16 	blt	r4,r6,801440 <___vfprintf_internal_r+0xe94>
  801258:	d8814117 	ldw	r2,1284(sp)
  80125c:	91a5883a 	add	r18,r18,r6
  801260:	8c400044 	addi	r17,r17,1
  801264:	a8800015 	stw	r2,0(r21)
  801268:	008001c4 	movi	r2,7
  80126c:	a9800115 	stw	r6,4(r21)
  801270:	dc800e15 	stw	r18,56(sp)
  801274:	dc400d15 	stw	r17,52(sp)
  801278:	1442fc16 	blt	r2,r17,801e6c <___vfprintf_internal_r+0x18c0>
  80127c:	a8c00204 	addi	r3,r21,8
  801280:	d9414717 	ldw	r5,1308(sp)
  801284:	2161c83a 	sub	r16,r4,r5
  801288:	043f9d0e 	bge	zero,r16,801100 <___vfprintf_internal_r+0xb54>
  80128c:	00800404 	movi	r2,16
  801290:	1402190e 	bge	r2,r16,801af8 <___vfprintf_internal_r+0x154c>
  801294:	dc400d17 	ldw	r17,52(sp)
  801298:	1027883a 	mov	r19,r2
  80129c:	07002074 	movhi	fp,129
  8012a0:	e7327c84 	addi	fp,fp,-13838
  8012a4:	050001c4 	movi	r20,7
  8012a8:	00000306 	br	8012b8 <___vfprintf_internal_r+0xd0c>
  8012ac:	18c00204 	addi	r3,r3,8
  8012b0:	843ffc04 	addi	r16,r16,-16
  8012b4:	9c02130e 	bge	r19,r16,801b04 <___vfprintf_internal_r+0x1558>
  8012b8:	94800404 	addi	r18,r18,16
  8012bc:	8c400044 	addi	r17,r17,1
  8012c0:	1f000015 	stw	fp,0(r3)
  8012c4:	1cc00115 	stw	r19,4(r3)
  8012c8:	dc800e15 	stw	r18,56(sp)
  8012cc:	dc400d15 	stw	r17,52(sp)
  8012d0:	a47ff60e 	bge	r20,r17,8012ac <___vfprintf_internal_r+0xd00>
  8012d4:	d9014f17 	ldw	r4,1340(sp)
  8012d8:	b00b883a 	mov	r5,r22
  8012dc:	d9800c04 	addi	r6,sp,48
  8012e0:	08005540 	call	800554 <__sprint_r>
  8012e4:	103e691e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  8012e8:	dc800e17 	ldw	r18,56(sp)
  8012ec:	dc400d17 	ldw	r17,52(sp)
  8012f0:	d8c01904 	addi	r3,sp,100
  8012f4:	003fee06 	br	8012b0 <___vfprintf_internal_r+0xd04>
  8012f8:	d8814717 	ldw	r2,1308(sp)
  8012fc:	143fffc4 	addi	r16,r2,-1
  801300:	043e970e 	bge	zero,r16,800d60 <___vfprintf_internal_r+0x7b4>
  801304:	00800404 	movi	r2,16
  801308:	1400180e 	bge	r2,r16,80136c <___vfprintf_internal_r+0xdc0>
  80130c:	1029883a 	mov	r20,r2
  801310:	07002074 	movhi	fp,129
  801314:	e7327c84 	addi	fp,fp,-13838
  801318:	054001c4 	movi	r21,7
  80131c:	00000306 	br	80132c <___vfprintf_internal_r+0xd80>
  801320:	9cc00204 	addi	r19,r19,8
  801324:	843ffc04 	addi	r16,r16,-16
  801328:	a400120e 	bge	r20,r16,801374 <___vfprintf_internal_r+0xdc8>
  80132c:	94800404 	addi	r18,r18,16
  801330:	8c400044 	addi	r17,r17,1
  801334:	9f000015 	stw	fp,0(r19)
  801338:	9d000115 	stw	r20,4(r19)
  80133c:	dc800e15 	stw	r18,56(sp)
  801340:	dc400d15 	stw	r17,52(sp)
  801344:	ac7ff60e 	bge	r21,r17,801320 <___vfprintf_internal_r+0xd74>
  801348:	d9014f17 	ldw	r4,1340(sp)
  80134c:	b00b883a 	mov	r5,r22
  801350:	d9800c04 	addi	r6,sp,48
  801354:	08005540 	call	800554 <__sprint_r>
  801358:	103e4c1e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  80135c:	dc800e17 	ldw	r18,56(sp)
  801360:	dc400d17 	ldw	r17,52(sp)
  801364:	dcc01904 	addi	r19,sp,100
  801368:	003fee06 	br	801324 <___vfprintf_internal_r+0xd78>
  80136c:	07002074 	movhi	fp,129
  801370:	e7327c84 	addi	fp,fp,-13838
  801374:	9425883a 	add	r18,r18,r16
  801378:	8c400044 	addi	r17,r17,1
  80137c:	008001c4 	movi	r2,7
  801380:	9f000015 	stw	fp,0(r19)
  801384:	9c000115 	stw	r16,4(r19)
  801388:	dc800e15 	stw	r18,56(sp)
  80138c:	dc400d15 	stw	r17,52(sp)
  801390:	147e720e 	bge	r2,r17,800d5c <___vfprintf_internal_r+0x7b0>
  801394:	d9014f17 	ldw	r4,1340(sp)
  801398:	b00b883a 	mov	r5,r22
  80139c:	d9800c04 	addi	r6,sp,48
  8013a0:	08005540 	call	800554 <__sprint_r>
  8013a4:	103e391e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  8013a8:	dc800e17 	ldw	r18,56(sp)
  8013ac:	dc400d17 	ldw	r17,52(sp)
  8013b0:	dcc01904 	addi	r19,sp,100
  8013b4:	003e6a06 	br	800d60 <___vfprintf_internal_r+0x7b4>
  8013b8:	d9014f17 	ldw	r4,1340(sp)
  8013bc:	b00b883a 	mov	r5,r22
  8013c0:	d9800c04 	addi	r6,sp,48
  8013c4:	d9c15115 	stw	r7,1348(sp)
  8013c8:	08005540 	call	800554 <__sprint_r>
  8013cc:	d9c15117 	ldw	r7,1348(sp)
  8013d0:	103e2e1e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  8013d4:	dc800e17 	ldw	r18,56(sp)
  8013d8:	dc400d17 	ldw	r17,52(sp)
  8013dc:	dd401904 	addi	r21,sp,100
  8013e0:	003dba06 	br	800acc <___vfprintf_internal_r+0x520>
  8013e4:	d9014f17 	ldw	r4,1340(sp)
  8013e8:	b00b883a 	mov	r5,r22
  8013ec:	d9800c04 	addi	r6,sp,48
  8013f0:	08005540 	call	800554 <__sprint_r>
  8013f4:	103e251e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  8013f8:	dc800e17 	ldw	r18,56(sp)
  8013fc:	dc400d17 	ldw	r17,52(sp)
  801400:	dcc01904 	addi	r19,sp,100
  801404:	003e4206 	br	800d10 <___vfprintf_internal_r+0x764>
  801408:	d9014f17 	ldw	r4,1340(sp)
  80140c:	b00b883a 	mov	r5,r22
  801410:	d9800c04 	addi	r6,sp,48
  801414:	08005540 	call	800554 <__sprint_r>
  801418:	103e1c1e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  80141c:	dc800e17 	ldw	r18,56(sp)
  801420:	dc400d17 	ldw	r17,52(sp)
  801424:	d8c01904 	addi	r3,sp,100
  801428:	003e2e06 	br	800ce4 <___vfprintf_internal_r+0x738>
  80142c:	d9414c17 	ldw	r5,1328(sp)
  801430:	2880004c 	andi	r2,r5,1
  801434:	1005003a 	cmpeq	r2,r2,zero
  801438:	103dda1e 	bne	r2,zero,800ba4 <___vfprintf_internal_r+0x5f8>
  80143c:	003e9f06 	br	800ebc <___vfprintf_internal_r+0x910>
  801440:	d8c14117 	ldw	r3,1284(sp)
  801444:	9125883a 	add	r18,r18,r4
  801448:	8c400044 	addi	r17,r17,1
  80144c:	008001c4 	movi	r2,7
  801450:	a8c00015 	stw	r3,0(r21)
  801454:	a9000115 	stw	r4,4(r21)
  801458:	dc800e15 	stw	r18,56(sp)
  80145c:	dc400d15 	stw	r17,52(sp)
  801460:	14426c16 	blt	r2,r17,801e14 <___vfprintf_internal_r+0x1868>
  801464:	a8c00204 	addi	r3,r21,8
  801468:	d9414917 	ldw	r5,1316(sp)
  80146c:	00800044 	movi	r2,1
  801470:	94800044 	addi	r18,r18,1
  801474:	8c400044 	addi	r17,r17,1
  801478:	18800115 	stw	r2,4(r3)
  80147c:	008001c4 	movi	r2,7
  801480:	19400015 	stw	r5,0(r3)
  801484:	dc800e15 	stw	r18,56(sp)
  801488:	dc400d15 	stw	r17,52(sp)
  80148c:	2021883a 	mov	r16,r4
  801490:	14425616 	blt	r2,r17,801dec <___vfprintf_internal_r+0x1840>
  801494:	19400204 	addi	r5,r3,8
  801498:	d9814717 	ldw	r6,1308(sp)
  80149c:	8c400044 	addi	r17,r17,1
  8014a0:	dc400d15 	stw	r17,52(sp)
  8014a4:	3107c83a 	sub	r3,r6,r4
  8014a8:	d9014117 	ldw	r4,1284(sp)
  8014ac:	90e5883a 	add	r18,r18,r3
  8014b0:	28c00115 	stw	r3,4(r5)
  8014b4:	8105883a 	add	r2,r16,r4
  8014b8:	28800015 	stw	r2,0(r5)
  8014bc:	008001c4 	movi	r2,7
  8014c0:	dc800e15 	stw	r18,56(sp)
  8014c4:	147f1d16 	blt	r2,r17,80113c <___vfprintf_internal_r+0xb90>
  8014c8:	28c00204 	addi	r3,r5,8
  8014cc:	003db506 	br	800ba4 <___vfprintf_internal_r+0x5f8>
  8014d0:	3c000017 	ldw	r16,0(r7)
  8014d4:	3c400117 	ldw	r17,4(r7)
  8014d8:	39800204 	addi	r6,r7,8
  8014dc:	01000044 	movi	r4,1
  8014e0:	d9814015 	stw	r6,1280(sp)
  8014e4:	d8000405 	stb	zero,16(sp)
  8014e8:	003ebe06 	br	800fe4 <___vfprintf_internal_r+0xa38>
  8014ec:	3c000017 	ldw	r16,0(r7)
  8014f0:	3c400117 	ldw	r17,4(r7)
  8014f4:	38800204 	addi	r2,r7,8
  8014f8:	d8814015 	stw	r2,1280(sp)
  8014fc:	003eb706 	br	800fdc <___vfprintf_internal_r+0xa30>
  801500:	3c000017 	ldw	r16,0(r7)
  801504:	3c400117 	ldw	r17,4(r7)
  801508:	39000204 	addi	r4,r7,8
  80150c:	d9014015 	stw	r4,1280(sp)
  801510:	0009883a 	mov	r4,zero
  801514:	d8000405 	stb	zero,16(sp)
  801518:	003eb206 	br	800fe4 <___vfprintf_internal_r+0xa38>
  80151c:	38c00017 	ldw	r3,0(r7)
  801520:	39c00104 	addi	r7,r7,4
  801524:	d8c14a15 	stw	r3,1320(sp)
  801528:	1800d70e 	bge	r3,zero,801888 <___vfprintf_internal_r+0x12dc>
  80152c:	00c7c83a 	sub	r3,zero,r3
  801530:	d8c14a15 	stw	r3,1320(sp)
  801534:	d9014c17 	ldw	r4,1328(sp)
  801538:	b8c00007 	ldb	r3,0(r23)
  80153c:	21000114 	ori	r4,r4,4
  801540:	d9014c15 	stw	r4,1328(sp)
  801544:	003c9806 	br	8007a8 <___vfprintf_internal_r+0x1fc>
  801548:	d9814c17 	ldw	r6,1328(sp)
  80154c:	3080080c 	andi	r2,r6,32
  801550:	1001f626 	beq	r2,zero,801d2c <___vfprintf_internal_r+0x1780>
  801554:	d9014b17 	ldw	r4,1324(sp)
  801558:	38800017 	ldw	r2,0(r7)
  80155c:	39c00104 	addi	r7,r7,4
  801560:	d9c14015 	stw	r7,1280(sp)
  801564:	2007d7fa 	srai	r3,r4,31
  801568:	d9c14017 	ldw	r7,1280(sp)
  80156c:	11000015 	stw	r4,0(r2)
  801570:	10c00115 	stw	r3,4(r2)
  801574:	003c6906 	br	80071c <___vfprintf_internal_r+0x170>
  801578:	b8c00007 	ldb	r3,0(r23)
  80157c:	00801b04 	movi	r2,108
  801580:	18825526 	beq	r3,r2,801ed8 <___vfprintf_internal_r+0x192c>
  801584:	d9414c17 	ldw	r5,1328(sp)
  801588:	29400414 	ori	r5,r5,16
  80158c:	d9414c15 	stw	r5,1328(sp)
  801590:	003c8506 	br	8007a8 <___vfprintf_internal_r+0x1fc>
  801594:	d9814c17 	ldw	r6,1328(sp)
  801598:	b8c00007 	ldb	r3,0(r23)
  80159c:	31800814 	ori	r6,r6,32
  8015a0:	d9814c15 	stw	r6,1328(sp)
  8015a4:	003c8006 	br	8007a8 <___vfprintf_internal_r+0x1fc>
  8015a8:	d8814c17 	ldw	r2,1328(sp)
  8015ac:	3c000017 	ldw	r16,0(r7)
  8015b0:	00c01e04 	movi	r3,120
  8015b4:	10800094 	ori	r2,r2,2
  8015b8:	d8814c15 	stw	r2,1328(sp)
  8015bc:	39c00104 	addi	r7,r7,4
  8015c0:	01402074 	movhi	r5,129
  8015c4:	29726504 	addi	r5,r5,-13932
  8015c8:	00800c04 	movi	r2,48
  8015cc:	0023883a 	mov	r17,zero
  8015d0:	01000084 	movi	r4,2
  8015d4:	d9c14015 	stw	r7,1280(sp)
  8015d8:	d8c14d15 	stw	r3,1332(sp)
  8015dc:	d9414415 	stw	r5,1296(sp)
  8015e0:	d8800445 	stb	r2,17(sp)
  8015e4:	d8c00485 	stb	r3,18(sp)
  8015e8:	d8000405 	stb	zero,16(sp)
  8015ec:	003e7d06 	br	800fe4 <___vfprintf_internal_r+0xa38>
  8015f0:	d8814c17 	ldw	r2,1328(sp)
  8015f4:	b8c00007 	ldb	r3,0(r23)
  8015f8:	10801014 	ori	r2,r2,64
  8015fc:	d8814c15 	stw	r2,1328(sp)
  801600:	003c6906 	br	8007a8 <___vfprintf_internal_r+0x1fc>
  801604:	d9414c17 	ldw	r5,1328(sp)
  801608:	2880020c 	andi	r2,r5,8
  80160c:	1001e526 	beq	r2,zero,801da4 <___vfprintf_internal_r+0x17f8>
  801610:	39800017 	ldw	r6,0(r7)
  801614:	38800204 	addi	r2,r7,8
  801618:	d8814015 	stw	r2,1280(sp)
  80161c:	d9814215 	stw	r6,1288(sp)
  801620:	39c00117 	ldw	r7,4(r7)
  801624:	d9c14315 	stw	r7,1292(sp)
  801628:	d9014217 	ldw	r4,1288(sp)
  80162c:	d9414317 	ldw	r5,1292(sp)
  801630:	080705c0 	call	80705c <__isinfd>
  801634:	10021d26 	beq	r2,zero,801eac <___vfprintf_internal_r+0x1900>
  801638:	d9014217 	ldw	r4,1288(sp)
  80163c:	d9414317 	ldw	r5,1292(sp)
  801640:	000d883a 	mov	r6,zero
  801644:	000f883a 	mov	r7,zero
  801648:	08091f80 	call	8091f8 <__ltdf2>
  80164c:	1002d016 	blt	r2,zero,802190 <___vfprintf_internal_r+0x1be4>
  801650:	d9414d17 	ldw	r5,1332(sp)
  801654:	008011c4 	movi	r2,71
  801658:	11421016 	blt	r2,r5,801e9c <___vfprintf_internal_r+0x18f0>
  80165c:	01802074 	movhi	r6,129
  801660:	31b26a04 	addi	r6,r6,-13912
  801664:	d9814115 	stw	r6,1284(sp)
  801668:	d9014c17 	ldw	r4,1328(sp)
  80166c:	00c000c4 	movi	r3,3
  801670:	00bfdfc4 	movi	r2,-129
  801674:	2088703a 	and	r4,r4,r2
  801678:	180f883a 	mov	r7,r3
  80167c:	d8c14515 	stw	r3,1300(sp)
  801680:	d9014c15 	stw	r4,1328(sp)
  801684:	d8014615 	stw	zero,1304(sp)
  801688:	003e6a06 	br	801034 <___vfprintf_internal_r+0xa88>
  80168c:	38800017 	ldw	r2,0(r7)
  801690:	00c00044 	movi	r3,1
  801694:	39c00104 	addi	r7,r7,4
  801698:	d9c14015 	stw	r7,1280(sp)
  80169c:	d9000f04 	addi	r4,sp,60
  8016a0:	180f883a 	mov	r7,r3
  8016a4:	d8c14515 	stw	r3,1300(sp)
  8016a8:	d9014115 	stw	r4,1284(sp)
  8016ac:	d8800f05 	stb	r2,60(sp)
  8016b0:	d8000405 	stb	zero,16(sp)
  8016b4:	003cac06 	br	800968 <___vfprintf_internal_r+0x3bc>
  8016b8:	01402074 	movhi	r5,129
  8016bc:	29727004 	addi	r5,r5,-13888
  8016c0:	d9414415 	stw	r5,1296(sp)
  8016c4:	d9814c17 	ldw	r6,1328(sp)
  8016c8:	3080080c 	andi	r2,r6,32
  8016cc:	1000ff26 	beq	r2,zero,801acc <___vfprintf_internal_r+0x1520>
  8016d0:	3c000017 	ldw	r16,0(r7)
  8016d4:	3c400117 	ldw	r17,4(r7)
  8016d8:	38800204 	addi	r2,r7,8
  8016dc:	d8814015 	stw	r2,1280(sp)
  8016e0:	d9414c17 	ldw	r5,1328(sp)
  8016e4:	2880004c 	andi	r2,r5,1
  8016e8:	1005003a 	cmpeq	r2,r2,zero
  8016ec:	1000b91e 	bne	r2,zero,8019d4 <___vfprintf_internal_r+0x1428>
  8016f0:	8444b03a 	or	r2,r16,r17
  8016f4:	1000b726 	beq	r2,zero,8019d4 <___vfprintf_internal_r+0x1428>
  8016f8:	d9814d17 	ldw	r6,1332(sp)
  8016fc:	29400094 	ori	r5,r5,2
  801700:	00800c04 	movi	r2,48
  801704:	01000084 	movi	r4,2
  801708:	d9414c15 	stw	r5,1328(sp)
  80170c:	d8800445 	stb	r2,17(sp)
  801710:	d9800485 	stb	r6,18(sp)
  801714:	d8000405 	stb	zero,16(sp)
  801718:	003e3206 	br	800fe4 <___vfprintf_internal_r+0xa38>
  80171c:	01802074 	movhi	r6,129
  801720:	31b26504 	addi	r6,r6,-13932
  801724:	d9814415 	stw	r6,1296(sp)
  801728:	003fe606 	br	8016c4 <___vfprintf_internal_r+0x1118>
  80172c:	00800ac4 	movi	r2,43
  801730:	d8800405 	stb	r2,16(sp)
  801734:	b8c00007 	ldb	r3,0(r23)
  801738:	003c1b06 	br	8007a8 <___vfprintf_internal_r+0x1fc>
  80173c:	d8814c17 	ldw	r2,1328(sp)
  801740:	b8c00007 	ldb	r3,0(r23)
  801744:	10800054 	ori	r2,r2,1
  801748:	d8814c15 	stw	r2,1328(sp)
  80174c:	003c1606 	br	8007a8 <___vfprintf_internal_r+0x1fc>
  801750:	d8800407 	ldb	r2,16(sp)
  801754:	10004c1e 	bne	r2,zero,801888 <___vfprintf_internal_r+0x12dc>
  801758:	00800804 	movi	r2,32
  80175c:	d8800405 	stb	r2,16(sp)
  801760:	b8c00007 	ldb	r3,0(r23)
  801764:	003c1006 	br	8007a8 <___vfprintf_internal_r+0x1fc>
  801768:	d9814c17 	ldw	r6,1328(sp)
  80176c:	b8c00007 	ldb	r3,0(r23)
  801770:	31800214 	ori	r6,r6,8
  801774:	d9814c15 	stw	r6,1328(sp)
  801778:	003c0b06 	br	8007a8 <___vfprintf_internal_r+0x1fc>
  80177c:	0009883a 	mov	r4,zero
  801780:	04000244 	movi	r16,9
  801784:	01400284 	movi	r5,10
  801788:	d9c15115 	stw	r7,1348(sp)
  80178c:	08097300 	call	809730 <__mulsi3>
  801790:	b9000007 	ldb	r4,0(r23)
  801794:	d8c14d17 	ldw	r3,1332(sp)
  801798:	bdc00044 	addi	r23,r23,1
  80179c:	d9014d15 	stw	r4,1332(sp)
  8017a0:	d9414d17 	ldw	r5,1332(sp)
  8017a4:	1885883a 	add	r2,r3,r2
  8017a8:	113ff404 	addi	r4,r2,-48
  8017ac:	28bff404 	addi	r2,r5,-48
  8017b0:	d9c15117 	ldw	r7,1348(sp)
  8017b4:	80bff32e 	bgeu	r16,r2,801784 <___vfprintf_internal_r+0x11d8>
  8017b8:	d9014a15 	stw	r4,1320(sp)
  8017bc:	003bfc06 	br	8007b0 <___vfprintf_internal_r+0x204>
  8017c0:	d8814c17 	ldw	r2,1328(sp)
  8017c4:	b8c00007 	ldb	r3,0(r23)
  8017c8:	10802014 	ori	r2,r2,128
  8017cc:	d8814c15 	stw	r2,1328(sp)
  8017d0:	003bf506 	br	8007a8 <___vfprintf_internal_r+0x1fc>
  8017d4:	b8c00007 	ldb	r3,0(r23)
  8017d8:	00800a84 	movi	r2,42
  8017dc:	bdc00044 	addi	r23,r23,1
  8017e0:	18831826 	beq	r3,r2,802444 <___vfprintf_internal_r+0x1e98>
  8017e4:	d8c14d15 	stw	r3,1332(sp)
  8017e8:	18bff404 	addi	r2,r3,-48
  8017ec:	00c00244 	movi	r3,9
  8017f0:	18827b36 	bltu	r3,r2,8021e0 <___vfprintf_internal_r+0x1c34>
  8017f4:	1821883a 	mov	r16,r3
  8017f8:	0009883a 	mov	r4,zero
  8017fc:	01400284 	movi	r5,10
  801800:	d9c15115 	stw	r7,1348(sp)
  801804:	08097300 	call	809730 <__mulsi3>
  801808:	d9414d17 	ldw	r5,1332(sp)
  80180c:	b9800007 	ldb	r6,0(r23)
  801810:	d9c15117 	ldw	r7,1348(sp)
  801814:	1145883a 	add	r2,r2,r5
  801818:	113ff404 	addi	r4,r2,-48
  80181c:	30bff404 	addi	r2,r6,-48
  801820:	d9814d15 	stw	r6,1332(sp)
  801824:	bdc00044 	addi	r23,r23,1
  801828:	80bff42e 	bgeu	r16,r2,8017fc <___vfprintf_internal_r+0x1250>
  80182c:	2027883a 	mov	r19,r4
  801830:	203bdf0e 	bge	r4,zero,8007b0 <___vfprintf_internal_r+0x204>
  801834:	04ffffc4 	movi	r19,-1
  801838:	003bdd06 	br	8007b0 <___vfprintf_internal_r+0x204>
  80183c:	d8000405 	stb	zero,16(sp)
  801840:	39800017 	ldw	r6,0(r7)
  801844:	39c00104 	addi	r7,r7,4
  801848:	d9c14015 	stw	r7,1280(sp)
  80184c:	d9814115 	stw	r6,1284(sp)
  801850:	3001c926 	beq	r6,zero,801f78 <___vfprintf_internal_r+0x19cc>
  801854:	98000e16 	blt	r19,zero,801890 <___vfprintf_internal_r+0x12e4>
  801858:	d9014117 	ldw	r4,1284(sp)
  80185c:	000b883a 	mov	r5,zero
  801860:	980d883a 	mov	r6,r19
  801864:	08056e00 	call	8056e0 <memchr>
  801868:	10025926 	beq	r2,zero,8021d0 <___vfprintf_internal_r+0x1c24>
  80186c:	d8c14117 	ldw	r3,1284(sp)
  801870:	10cfc83a 	sub	r7,r2,r3
  801874:	99c19e16 	blt	r19,r7,801ef0 <___vfprintf_internal_r+0x1944>
  801878:	d9c14515 	stw	r7,1300(sp)
  80187c:	38000916 	blt	r7,zero,8018a4 <___vfprintf_internal_r+0x12f8>
  801880:	d8014615 	stw	zero,1304(sp)
  801884:	003deb06 	br	801034 <___vfprintf_internal_r+0xa88>
  801888:	b8c00007 	ldb	r3,0(r23)
  80188c:	003bc606 	br	8007a8 <___vfprintf_internal_r+0x1fc>
  801890:	d9014117 	ldw	r4,1284(sp)
  801894:	08004e00 	call	8004e0 <strlen>
  801898:	d8814515 	stw	r2,1300(sp)
  80189c:	100f883a 	mov	r7,r2
  8018a0:	103ff70e 	bge	r2,zero,801880 <___vfprintf_internal_r+0x12d4>
  8018a4:	d8014515 	stw	zero,1300(sp)
  8018a8:	d8014615 	stw	zero,1304(sp)
  8018ac:	003de106 	br	801034 <___vfprintf_internal_r+0xa88>
  8018b0:	20c03fcc 	andi	r3,r4,255
  8018b4:	00800044 	movi	r2,1
  8018b8:	18802d26 	beq	r3,r2,801970 <___vfprintf_internal_r+0x13c4>
  8018bc:	18800e36 	bltu	r3,r2,8018f8 <___vfprintf_internal_r+0x134c>
  8018c0:	00800084 	movi	r2,2
  8018c4:	1880fa26 	beq	r3,r2,801cb0 <___vfprintf_internal_r+0x1704>
  8018c8:	01002074 	movhi	r4,129
  8018cc:	21327504 	addi	r4,r4,-13868
  8018d0:	08004e00 	call	8004e0 <strlen>
  8018d4:	100f883a 	mov	r7,r2
  8018d8:	dcc14515 	stw	r19,1300(sp)
  8018dc:	9880010e 	bge	r19,r2,8018e4 <___vfprintf_internal_r+0x1338>
  8018e0:	d8814515 	stw	r2,1300(sp)
  8018e4:	00802074 	movhi	r2,129
  8018e8:	10b27504 	addi	r2,r2,-13868
  8018ec:	dcc14615 	stw	r19,1304(sp)
  8018f0:	d8814115 	stw	r2,1284(sp)
  8018f4:	003dcf06 	br	801034 <___vfprintf_internal_r+0xa88>
  8018f8:	d9401904 	addi	r5,sp,100
  8018fc:	dd000f04 	addi	r20,sp,60
  801900:	d9414115 	stw	r5,1284(sp)
  801904:	880a977a 	slli	r5,r17,29
  801908:	d9814117 	ldw	r6,1284(sp)
  80190c:	8004d0fa 	srli	r2,r16,3
  801910:	8806d0fa 	srli	r3,r17,3
  801914:	810001cc 	andi	r4,r16,7
  801918:	2884b03a 	or	r2,r5,r2
  80191c:	31bfffc4 	addi	r6,r6,-1
  801920:	21000c04 	addi	r4,r4,48
  801924:	d9814115 	stw	r6,1284(sp)
  801928:	10cab03a 	or	r5,r2,r3
  80192c:	31000005 	stb	r4,0(r6)
  801930:	1021883a 	mov	r16,r2
  801934:	1823883a 	mov	r17,r3
  801938:	283ff21e 	bne	r5,zero,801904 <___vfprintf_internal_r+0x1358>
  80193c:	d8c14c17 	ldw	r3,1328(sp)
  801940:	1880004c 	andi	r2,r3,1
  801944:	1005003a 	cmpeq	r2,r2,zero
  801948:	103db31e 	bne	r2,zero,801018 <___vfprintf_internal_r+0xa6c>
  80194c:	20803fcc 	andi	r2,r4,255
  801950:	1080201c 	xori	r2,r2,128
  801954:	10bfe004 	addi	r2,r2,-128
  801958:	00c00c04 	movi	r3,48
  80195c:	10fdae26 	beq	r2,r3,801018 <___vfprintf_internal_r+0xa6c>
  801960:	31bfffc4 	addi	r6,r6,-1
  801964:	d9814115 	stw	r6,1284(sp)
  801968:	30c00005 	stb	r3,0(r6)
  80196c:	003daa06 	br	801018 <___vfprintf_internal_r+0xa6c>
  801970:	88800068 	cmpgeui	r2,r17,1
  801974:	10002c1e 	bne	r2,zero,801a28 <___vfprintf_internal_r+0x147c>
  801978:	8800021e 	bne	r17,zero,801984 <___vfprintf_internal_r+0x13d8>
  80197c:	00800244 	movi	r2,9
  801980:	14002936 	bltu	r2,r16,801a28 <___vfprintf_internal_r+0x147c>
  801984:	d90018c4 	addi	r4,sp,99
  801988:	dd000f04 	addi	r20,sp,60
  80198c:	d9014115 	stw	r4,1284(sp)
  801990:	d9014117 	ldw	r4,1284(sp)
  801994:	80800c04 	addi	r2,r16,48
  801998:	20800005 	stb	r2,0(r4)
  80199c:	003d9e06 	br	801018 <___vfprintf_internal_r+0xa6c>
  8019a0:	dc400d17 	ldw	r17,52(sp)
  8019a4:	07002074 	movhi	fp,129
  8019a8:	e7327c84 	addi	fp,fp,-13838
  8019ac:	9425883a 	add	r18,r18,r16
  8019b0:	8c400044 	addi	r17,r17,1
  8019b4:	008001c4 	movi	r2,7
  8019b8:	1f000015 	stw	fp,0(r3)
  8019bc:	1c000115 	stw	r16,4(r3)
  8019c0:	dc800e15 	stw	r18,56(sp)
  8019c4:	dc400d15 	stw	r17,52(sp)
  8019c8:	147ddc16 	blt	r2,r17,80113c <___vfprintf_internal_r+0xb90>
  8019cc:	18c00204 	addi	r3,r3,8
  8019d0:	003c7406 	br	800ba4 <___vfprintf_internal_r+0x5f8>
  8019d4:	01000084 	movi	r4,2
  8019d8:	d8000405 	stb	zero,16(sp)
  8019dc:	003d8106 	br	800fe4 <___vfprintf_internal_r+0xa38>
  8019e0:	d9814c17 	ldw	r6,1328(sp)
  8019e4:	30c4703a 	and	r2,r6,r3
  8019e8:	1005003a 	cmpeq	r2,r2,zero
  8019ec:	103cb326 	beq	r2,zero,800cbc <___vfprintf_internal_r+0x710>
  8019f0:	d9014117 	ldw	r4,1284(sp)
  8019f4:	94800044 	addi	r18,r18,1
  8019f8:	8c400044 	addi	r17,r17,1
  8019fc:	008001c4 	movi	r2,7
  801a00:	a9000015 	stw	r4,0(r21)
  801a04:	a8c00115 	stw	r3,4(r21)
  801a08:	dc800e15 	stw	r18,56(sp)
  801a0c:	dc400d15 	stw	r17,52(sp)
  801a10:	147e6016 	blt	r2,r17,801394 <___vfprintf_internal_r+0xde8>
  801a14:	acc00204 	addi	r19,r21,8
  801a18:	003cd106 	br	800d60 <___vfprintf_internal_r+0x7b4>
  801a1c:	07002074 	movhi	fp,129
  801a20:	e7327c84 	addi	fp,fp,-13838
  801a24:	003c4906 	br	800b4c <___vfprintf_internal_r+0x5a0>
  801a28:	dd000f04 	addi	r20,sp,60
  801a2c:	dc801904 	addi	r18,sp,100
  801a30:	8009883a 	mov	r4,r16
  801a34:	880b883a 	mov	r5,r17
  801a38:	01800284 	movi	r6,10
  801a3c:	000f883a 	mov	r7,zero
  801a40:	0807e580 	call	807e58 <__umoddi3>
  801a44:	12000c04 	addi	r8,r2,48
  801a48:	94bfffc4 	addi	r18,r18,-1
  801a4c:	8009883a 	mov	r4,r16
  801a50:	880b883a 	mov	r5,r17
  801a54:	01800284 	movi	r6,10
  801a58:	000f883a 	mov	r7,zero
  801a5c:	92000005 	stb	r8,0(r18)
  801a60:	08077ec0 	call	8077ec <__udivdi3>
  801a64:	1009883a 	mov	r4,r2
  801a68:	1021883a 	mov	r16,r2
  801a6c:	18800068 	cmpgeui	r2,r3,1
  801a70:	1823883a 	mov	r17,r3
  801a74:	103fee1e 	bne	r2,zero,801a30 <___vfprintf_internal_r+0x1484>
  801a78:	1800021e 	bne	r3,zero,801a84 <___vfprintf_internal_r+0x14d8>
  801a7c:	00800244 	movi	r2,9
  801a80:	113feb36 	bltu	r2,r4,801a30 <___vfprintf_internal_r+0x1484>
  801a84:	94bfffc4 	addi	r18,r18,-1
  801a88:	dc814115 	stw	r18,1284(sp)
  801a8c:	003fc006 	br	801990 <___vfprintf_internal_r+0x13e4>
  801a90:	d9014c17 	ldw	r4,1328(sp)
  801a94:	2080004c 	andi	r2,r4,1
  801a98:	10009a1e 	bne	r2,zero,801d04 <___vfprintf_internal_r+0x1758>
  801a9c:	d9401904 	addi	r5,sp,100
  801aa0:	dd000f04 	addi	r20,sp,60
  801aa4:	d9414115 	stw	r5,1284(sp)
  801aa8:	003d5b06 	br	801018 <___vfprintf_internal_r+0xa6c>
  801aac:	d9014f17 	ldw	r4,1340(sp)
  801ab0:	b00b883a 	mov	r5,r22
  801ab4:	d9800c04 	addi	r6,sp,48
  801ab8:	08005540 	call	800554 <__sprint_r>
  801abc:	103c731e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  801ac0:	dc800e17 	ldw	r18,56(sp)
  801ac4:	d8c01904 	addi	r3,sp,100
  801ac8:	003cf906 	br	800eb0 <___vfprintf_internal_r+0x904>
  801acc:	d8c14c17 	ldw	r3,1328(sp)
  801ad0:	1880040c 	andi	r2,r3,16
  801ad4:	1000711e 	bne	r2,zero,801c9c <___vfprintf_internal_r+0x16f0>
  801ad8:	d9014c17 	ldw	r4,1328(sp)
  801adc:	2080100c 	andi	r2,r4,64
  801ae0:	10006e26 	beq	r2,zero,801c9c <___vfprintf_internal_r+0x16f0>
  801ae4:	3c00000b 	ldhu	r16,0(r7)
  801ae8:	0023883a 	mov	r17,zero
  801aec:	39c00104 	addi	r7,r7,4
  801af0:	d9c14015 	stw	r7,1280(sp)
  801af4:	003efa06 	br	8016e0 <___vfprintf_internal_r+0x1134>
  801af8:	dc400d17 	ldw	r17,52(sp)
  801afc:	07002074 	movhi	fp,129
  801b00:	e7327c84 	addi	fp,fp,-13838
  801b04:	9425883a 	add	r18,r18,r16
  801b08:	8c400044 	addi	r17,r17,1
  801b0c:	008001c4 	movi	r2,7
  801b10:	1f000015 	stw	fp,0(r3)
  801b14:	1c000115 	stw	r16,4(r3)
  801b18:	dc800e15 	stw	r18,56(sp)
  801b1c:	dc400d15 	stw	r17,52(sp)
  801b20:	147d7016 	blt	r2,r17,8010e4 <___vfprintf_internal_r+0xb38>
  801b24:	18c00204 	addi	r3,r3,8
  801b28:	003d7506 	br	801100 <___vfprintf_internal_r+0xb54>
  801b2c:	dc800e17 	ldw	r18,56(sp)
  801b30:	dc400d17 	ldw	r17,52(sp)
  801b34:	07002074 	movhi	fp,129
  801b38:	e7328084 	addi	fp,fp,-13822
  801b3c:	003bba06 	br	800a28 <___vfprintf_internal_r+0x47c>
  801b40:	d9014f17 	ldw	r4,1340(sp)
  801b44:	b00b883a 	mov	r5,r22
  801b48:	d9800c04 	addi	r6,sp,48
  801b4c:	08005540 	call	800554 <__sprint_r>
  801b50:	103c4e1e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  801b54:	dc800e17 	ldw	r18,56(sp)
  801b58:	d8c01904 	addi	r3,sp,100
  801b5c:	003ce306 	br	800eec <___vfprintf_internal_r+0x940>
  801b60:	3c000017 	ldw	r16,0(r7)
  801b64:	0009883a 	mov	r4,zero
  801b68:	39c00104 	addi	r7,r7,4
  801b6c:	0023883a 	mov	r17,zero
  801b70:	d9c14015 	stw	r7,1280(sp)
  801b74:	d8000405 	stb	zero,16(sp)
  801b78:	003d1a06 	br	800fe4 <___vfprintf_internal_r+0xa38>
  801b7c:	38800017 	ldw	r2,0(r7)
  801b80:	39c00104 	addi	r7,r7,4
  801b84:	d9c14015 	stw	r7,1280(sp)
  801b88:	1023d7fa 	srai	r17,r2,31
  801b8c:	1021883a 	mov	r16,r2
  801b90:	003d1206 	br	800fdc <___vfprintf_internal_r+0xa30>
  801b94:	3c000017 	ldw	r16,0(r7)
  801b98:	01000044 	movi	r4,1
  801b9c:	39c00104 	addi	r7,r7,4
  801ba0:	0023883a 	mov	r17,zero
  801ba4:	d9c14015 	stw	r7,1280(sp)
  801ba8:	d8000405 	stb	zero,16(sp)
  801bac:	003d0d06 	br	800fe4 <___vfprintf_internal_r+0xa38>
  801bb0:	00802074 	movhi	r2,129
  801bb4:	10b27c04 	addi	r2,r2,-13840
  801bb8:	94800044 	addi	r18,r18,1
  801bbc:	8c400044 	addi	r17,r17,1
  801bc0:	a8800015 	stw	r2,0(r21)
  801bc4:	00c00044 	movi	r3,1
  801bc8:	008001c4 	movi	r2,7
  801bcc:	a8c00115 	stw	r3,4(r21)
  801bd0:	dc800e15 	stw	r18,56(sp)
  801bd4:	dc400d15 	stw	r17,52(sp)
  801bd8:	1440ca16 	blt	r2,r17,801f04 <___vfprintf_internal_r+0x1958>
  801bdc:	a8c00204 	addi	r3,r21,8
  801be0:	2000061e 	bne	r4,zero,801bfc <___vfprintf_internal_r+0x1650>
  801be4:	d9414717 	ldw	r5,1308(sp)
  801be8:	2800041e 	bne	r5,zero,801bfc <___vfprintf_internal_r+0x1650>
  801bec:	d9814c17 	ldw	r6,1328(sp)
  801bf0:	3080004c 	andi	r2,r6,1
  801bf4:	1005003a 	cmpeq	r2,r2,zero
  801bf8:	103bea1e 	bne	r2,zero,800ba4 <___vfprintf_internal_r+0x5f8>
  801bfc:	00800044 	movi	r2,1
  801c00:	dc400d17 	ldw	r17,52(sp)
  801c04:	18800115 	stw	r2,4(r3)
  801c08:	d8814917 	ldw	r2,1316(sp)
  801c0c:	94800044 	addi	r18,r18,1
  801c10:	8c400044 	addi	r17,r17,1
  801c14:	18800015 	stw	r2,0(r3)
  801c18:	008001c4 	movi	r2,7
  801c1c:	dc800e15 	stw	r18,56(sp)
  801c20:	dc400d15 	stw	r17,52(sp)
  801c24:	1440ca16 	blt	r2,r17,801f50 <___vfprintf_internal_r+0x19a4>
  801c28:	18c00204 	addi	r3,r3,8
  801c2c:	0121c83a 	sub	r16,zero,r4
  801c30:	0400500e 	bge	zero,r16,801d74 <___vfprintf_internal_r+0x17c8>
  801c34:	00800404 	movi	r2,16
  801c38:	1400800e 	bge	r2,r16,801e3c <___vfprintf_internal_r+0x1890>
  801c3c:	1027883a 	mov	r19,r2
  801c40:	07002074 	movhi	fp,129
  801c44:	e7327c84 	addi	fp,fp,-13838
  801c48:	050001c4 	movi	r20,7
  801c4c:	00000306 	br	801c5c <___vfprintf_internal_r+0x16b0>
  801c50:	18c00204 	addi	r3,r3,8
  801c54:	843ffc04 	addi	r16,r16,-16
  801c58:	9c007a0e 	bge	r19,r16,801e44 <___vfprintf_internal_r+0x1898>
  801c5c:	94800404 	addi	r18,r18,16
  801c60:	8c400044 	addi	r17,r17,1
  801c64:	1f000015 	stw	fp,0(r3)
  801c68:	1cc00115 	stw	r19,4(r3)
  801c6c:	dc800e15 	stw	r18,56(sp)
  801c70:	dc400d15 	stw	r17,52(sp)
  801c74:	a47ff60e 	bge	r20,r17,801c50 <___vfprintf_internal_r+0x16a4>
  801c78:	d9014f17 	ldw	r4,1340(sp)
  801c7c:	b00b883a 	mov	r5,r22
  801c80:	d9800c04 	addi	r6,sp,48
  801c84:	08005540 	call	800554 <__sprint_r>
  801c88:	103c001e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  801c8c:	dc800e17 	ldw	r18,56(sp)
  801c90:	dc400d17 	ldw	r17,52(sp)
  801c94:	d8c01904 	addi	r3,sp,100
  801c98:	003fee06 	br	801c54 <___vfprintf_internal_r+0x16a8>
  801c9c:	3c000017 	ldw	r16,0(r7)
  801ca0:	0023883a 	mov	r17,zero
  801ca4:	39c00104 	addi	r7,r7,4
  801ca8:	d9c14015 	stw	r7,1280(sp)
  801cac:	003e8c06 	br	8016e0 <___vfprintf_internal_r+0x1134>
  801cb0:	d9401904 	addi	r5,sp,100
  801cb4:	dd000f04 	addi	r20,sp,60
  801cb8:	d9414115 	stw	r5,1284(sp)
  801cbc:	d9814417 	ldw	r6,1296(sp)
  801cc0:	880a973a 	slli	r5,r17,28
  801cc4:	8004d13a 	srli	r2,r16,4
  801cc8:	810003cc 	andi	r4,r16,15
  801ccc:	3109883a 	add	r4,r6,r4
  801cd0:	2884b03a 	or	r2,r5,r2
  801cd4:	21400003 	ldbu	r5,0(r4)
  801cd8:	d9014117 	ldw	r4,1284(sp)
  801cdc:	8806d13a 	srli	r3,r17,4
  801ce0:	1021883a 	mov	r16,r2
  801ce4:	213fffc4 	addi	r4,r4,-1
  801ce8:	d9014115 	stw	r4,1284(sp)
  801cec:	d9814117 	ldw	r6,1284(sp)
  801cf0:	10c8b03a 	or	r4,r2,r3
  801cf4:	1823883a 	mov	r17,r3
  801cf8:	31400005 	stb	r5,0(r6)
  801cfc:	203fef1e 	bne	r4,zero,801cbc <___vfprintf_internal_r+0x1710>
  801d00:	003cc506 	br	801018 <___vfprintf_internal_r+0xa6c>
  801d04:	00800c04 	movi	r2,48
  801d08:	d98018c4 	addi	r6,sp,99
  801d0c:	dd000f04 	addi	r20,sp,60
  801d10:	d88018c5 	stb	r2,99(sp)
  801d14:	d9814115 	stw	r6,1284(sp)
  801d18:	003cbf06 	br	801018 <___vfprintf_internal_r+0xa6c>
  801d1c:	dc400d17 	ldw	r17,52(sp)
  801d20:	07002074 	movhi	fp,129
  801d24:	e7328084 	addi	fp,fp,-13822
  801d28:	003bc106 	br	800c30 <___vfprintf_internal_r+0x684>
  801d2c:	d9414c17 	ldw	r5,1328(sp)
  801d30:	2880040c 	andi	r2,r5,16
  801d34:	10007c26 	beq	r2,zero,801f28 <___vfprintf_internal_r+0x197c>
  801d38:	38800017 	ldw	r2,0(r7)
  801d3c:	39c00104 	addi	r7,r7,4
  801d40:	d9c14015 	stw	r7,1280(sp)
  801d44:	d9814b17 	ldw	r6,1324(sp)
  801d48:	d9c14017 	ldw	r7,1280(sp)
  801d4c:	11800015 	stw	r6,0(r2)
  801d50:	003a7206 	br	80071c <___vfprintf_internal_r+0x170>
  801d54:	d9014f17 	ldw	r4,1340(sp)
  801d58:	b00b883a 	mov	r5,r22
  801d5c:	d9800c04 	addi	r6,sp,48
  801d60:	08005540 	call	800554 <__sprint_r>
  801d64:	103bc91e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  801d68:	dc800e17 	ldw	r18,56(sp)
  801d6c:	dc400d17 	ldw	r17,52(sp)
  801d70:	d8c01904 	addi	r3,sp,100
  801d74:	d9014717 	ldw	r4,1308(sp)
  801d78:	d9414117 	ldw	r5,1284(sp)
  801d7c:	8c400044 	addi	r17,r17,1
  801d80:	9125883a 	add	r18,r18,r4
  801d84:	008001c4 	movi	r2,7
  801d88:	19400015 	stw	r5,0(r3)
  801d8c:	19000115 	stw	r4,4(r3)
  801d90:	dc800e15 	stw	r18,56(sp)
  801d94:	dc400d15 	stw	r17,52(sp)
  801d98:	147ce816 	blt	r2,r17,80113c <___vfprintf_internal_r+0xb90>
  801d9c:	18c00204 	addi	r3,r3,8
  801da0:	003b8006 	br	800ba4 <___vfprintf_internal_r+0x5f8>
  801da4:	38c00017 	ldw	r3,0(r7)
  801da8:	39000204 	addi	r4,r7,8
  801dac:	d9014015 	stw	r4,1280(sp)
  801db0:	d8c14215 	stw	r3,1288(sp)
  801db4:	39c00117 	ldw	r7,4(r7)
  801db8:	d9c14315 	stw	r7,1292(sp)
  801dbc:	003e1a06 	br	801628 <___vfprintf_internal_r+0x107c>
  801dc0:	0005883a 	mov	r2,zero
  801dc4:	1409c83a 	sub	r4,r2,r16
  801dc8:	1105803a 	cmpltu	r2,r2,r4
  801dcc:	044bc83a 	sub	r5,zero,r17
  801dd0:	2885c83a 	sub	r2,r5,r2
  801dd4:	2021883a 	mov	r16,r4
  801dd8:	1023883a 	mov	r17,r2
  801ddc:	01000044 	movi	r4,1
  801de0:	00800b44 	movi	r2,45
  801de4:	d8800405 	stb	r2,16(sp)
  801de8:	003c7e06 	br	800fe4 <___vfprintf_internal_r+0xa38>
  801dec:	d9014f17 	ldw	r4,1340(sp)
  801df0:	b00b883a 	mov	r5,r22
  801df4:	d9800c04 	addi	r6,sp,48
  801df8:	08005540 	call	800554 <__sprint_r>
  801dfc:	103ba31e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  801e00:	dc800e17 	ldw	r18,56(sp)
  801e04:	dc400d17 	ldw	r17,52(sp)
  801e08:	d9000517 	ldw	r4,20(sp)
  801e0c:	d9401904 	addi	r5,sp,100
  801e10:	003da106 	br	801498 <___vfprintf_internal_r+0xeec>
  801e14:	d9014f17 	ldw	r4,1340(sp)
  801e18:	b00b883a 	mov	r5,r22
  801e1c:	d9800c04 	addi	r6,sp,48
  801e20:	08005540 	call	800554 <__sprint_r>
  801e24:	103b991e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  801e28:	dc800e17 	ldw	r18,56(sp)
  801e2c:	dc400d17 	ldw	r17,52(sp)
  801e30:	d9000517 	ldw	r4,20(sp)
  801e34:	d8c01904 	addi	r3,sp,100
  801e38:	003d8b06 	br	801468 <___vfprintf_internal_r+0xebc>
  801e3c:	07002074 	movhi	fp,129
  801e40:	e7327c84 	addi	fp,fp,-13838
  801e44:	9425883a 	add	r18,r18,r16
  801e48:	8c400044 	addi	r17,r17,1
  801e4c:	008001c4 	movi	r2,7
  801e50:	1f000015 	stw	fp,0(r3)
  801e54:	1c000115 	stw	r16,4(r3)
  801e58:	dc800e15 	stw	r18,56(sp)
  801e5c:	dc400d15 	stw	r17,52(sp)
  801e60:	147fbc16 	blt	r2,r17,801d54 <___vfprintf_internal_r+0x17a8>
  801e64:	18c00204 	addi	r3,r3,8
  801e68:	003fc206 	br	801d74 <___vfprintf_internal_r+0x17c8>
  801e6c:	d9014f17 	ldw	r4,1340(sp)
  801e70:	b00b883a 	mov	r5,r22
  801e74:	d9800c04 	addi	r6,sp,48
  801e78:	08005540 	call	800554 <__sprint_r>
  801e7c:	103b831e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  801e80:	dc800e17 	ldw	r18,56(sp)
  801e84:	d9000517 	ldw	r4,20(sp)
  801e88:	d8c01904 	addi	r3,sp,100
  801e8c:	003cfc06 	br	801280 <___vfprintf_internal_r+0xcd4>
  801e90:	07002074 	movhi	fp,129
  801e94:	e7327c84 	addi	fp,fp,-13838
  801e98:	003bde06 	br	800e14 <___vfprintf_internal_r+0x868>
  801e9c:	00802074 	movhi	r2,129
  801ea0:	10b26b04 	addi	r2,r2,-13908
  801ea4:	d8814115 	stw	r2,1284(sp)
  801ea8:	003def06 	br	801668 <___vfprintf_internal_r+0x10bc>
  801eac:	d9014217 	ldw	r4,1288(sp)
  801eb0:	d9414317 	ldw	r5,1292(sp)
  801eb4:	080709c0 	call	80709c <__isnand>
  801eb8:	10003926 	beq	r2,zero,801fa0 <___vfprintf_internal_r+0x19f4>
  801ebc:	d9414d17 	ldw	r5,1332(sp)
  801ec0:	008011c4 	movi	r2,71
  801ec4:	1140ce16 	blt	r2,r5,802200 <___vfprintf_internal_r+0x1c54>
  801ec8:	01802074 	movhi	r6,129
  801ecc:	31b26c04 	addi	r6,r6,-13904
  801ed0:	d9814115 	stw	r6,1284(sp)
  801ed4:	003de406 	br	801668 <___vfprintf_internal_r+0x10bc>
  801ed8:	d9014c17 	ldw	r4,1328(sp)
  801edc:	bdc00044 	addi	r23,r23,1
  801ee0:	b8c00007 	ldb	r3,0(r23)
  801ee4:	21000814 	ori	r4,r4,32
  801ee8:	d9014c15 	stw	r4,1328(sp)
  801eec:	003a2e06 	br	8007a8 <___vfprintf_internal_r+0x1fc>
  801ef0:	dcc14515 	stw	r19,1300(sp)
  801ef4:	98011016 	blt	r19,zero,802338 <___vfprintf_internal_r+0x1d8c>
  801ef8:	980f883a 	mov	r7,r19
  801efc:	d8014615 	stw	zero,1304(sp)
  801f00:	003c4c06 	br	801034 <___vfprintf_internal_r+0xa88>
  801f04:	d9014f17 	ldw	r4,1340(sp)
  801f08:	b00b883a 	mov	r5,r22
  801f0c:	d9800c04 	addi	r6,sp,48
  801f10:	08005540 	call	800554 <__sprint_r>
  801f14:	103b5d1e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  801f18:	dc800e17 	ldw	r18,56(sp)
  801f1c:	d9000517 	ldw	r4,20(sp)
  801f20:	d8c01904 	addi	r3,sp,100
  801f24:	003f2e06 	br	801be0 <___vfprintf_internal_r+0x1634>
  801f28:	d8c14c17 	ldw	r3,1328(sp)
  801f2c:	1880100c 	andi	r2,r3,64
  801f30:	1000a026 	beq	r2,zero,8021b4 <___vfprintf_internal_r+0x1c08>
  801f34:	38800017 	ldw	r2,0(r7)
  801f38:	39c00104 	addi	r7,r7,4
  801f3c:	d9c14015 	stw	r7,1280(sp)
  801f40:	d9014b17 	ldw	r4,1324(sp)
  801f44:	d9c14017 	ldw	r7,1280(sp)
  801f48:	1100000d 	sth	r4,0(r2)
  801f4c:	0039f306 	br	80071c <___vfprintf_internal_r+0x170>
  801f50:	d9014f17 	ldw	r4,1340(sp)
  801f54:	b00b883a 	mov	r5,r22
  801f58:	d9800c04 	addi	r6,sp,48
  801f5c:	08005540 	call	800554 <__sprint_r>
  801f60:	103b4a1e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  801f64:	dc800e17 	ldw	r18,56(sp)
  801f68:	dc400d17 	ldw	r17,52(sp)
  801f6c:	d9000517 	ldw	r4,20(sp)
  801f70:	d8c01904 	addi	r3,sp,100
  801f74:	003f2d06 	br	801c2c <___vfprintf_internal_r+0x1680>
  801f78:	00800184 	movi	r2,6
  801f7c:	14c09a36 	bltu	r2,r19,8021e8 <___vfprintf_internal_r+0x1c3c>
  801f80:	dcc14515 	stw	r19,1300(sp)
  801f84:	9800010e 	bge	r19,zero,801f8c <___vfprintf_internal_r+0x19e0>
  801f88:	d8014515 	stw	zero,1300(sp)
  801f8c:	00802074 	movhi	r2,129
  801f90:	10b26e04 	addi	r2,r2,-13896
  801f94:	980f883a 	mov	r7,r19
  801f98:	d8814115 	stw	r2,1284(sp)
  801f9c:	003a7206 	br	800968 <___vfprintf_internal_r+0x3bc>
  801fa0:	00bfffc4 	movi	r2,-1
  801fa4:	9880e226 	beq	r19,r2,802330 <___vfprintf_internal_r+0x1d84>
  801fa8:	d9414d17 	ldw	r5,1332(sp)
  801fac:	008019c4 	movi	r2,103
  801fb0:	2880dc26 	beq	r5,r2,802324 <___vfprintf_internal_r+0x1d78>
  801fb4:	008011c4 	movi	r2,71
  801fb8:	2880da26 	beq	r5,r2,802324 <___vfprintf_internal_r+0x1d78>
  801fbc:	d9414c17 	ldw	r5,1328(sp)
  801fc0:	d9014317 	ldw	r4,1292(sp)
  801fc4:	d9814217 	ldw	r6,1288(sp)
  801fc8:	29404014 	ori	r5,r5,256
  801fcc:	d9414c15 	stw	r5,1328(sp)
  801fd0:	2000cc16 	blt	r4,zero,802304 <___vfprintf_internal_r+0x1d58>
  801fd4:	3021883a 	mov	r16,r6
  801fd8:	2023883a 	mov	r17,r4
  801fdc:	0039883a 	mov	fp,zero
  801fe0:	d9414d17 	ldw	r5,1332(sp)
  801fe4:	00801984 	movi	r2,102
  801fe8:	2880b726 	beq	r5,r2,8022c8 <___vfprintf_internal_r+0x1d1c>
  801fec:	00801184 	movi	r2,70
  801ff0:	2880b526 	beq	r5,r2,8022c8 <___vfprintf_internal_r+0x1d1c>
  801ff4:	00801944 	movi	r2,101
  801ff8:	2880c826 	beq	r5,r2,80231c <___vfprintf_internal_r+0x1d70>
  801ffc:	00801144 	movi	r2,69
  802000:	2880c626 	beq	r5,r2,80231c <___vfprintf_internal_r+0x1d70>
  802004:	9829883a 	mov	r20,r19
  802008:	d9014f17 	ldw	r4,1340(sp)
  80200c:	d8800504 	addi	r2,sp,20
  802010:	880d883a 	mov	r6,r17
  802014:	d8800115 	stw	r2,4(sp)
  802018:	d8c00604 	addi	r3,sp,24
  80201c:	d8800704 	addi	r2,sp,28
  802020:	800b883a 	mov	r5,r16
  802024:	01c00084 	movi	r7,2
  802028:	d8c00215 	stw	r3,8(sp)
  80202c:	d8800315 	stw	r2,12(sp)
  802030:	dd000015 	stw	r20,0(sp)
  802034:	08028140 	call	802814 <_dtoa_r>
  802038:	d9814d17 	ldw	r6,1332(sp)
  80203c:	d8814115 	stw	r2,1284(sp)
  802040:	008019c4 	movi	r2,103
  802044:	30809526 	beq	r6,r2,80229c <___vfprintf_internal_r+0x1cf0>
  802048:	d8c14d17 	ldw	r3,1332(sp)
  80204c:	008011c4 	movi	r2,71
  802050:	18809226 	beq	r3,r2,80229c <___vfprintf_internal_r+0x1cf0>
  802054:	d9414117 	ldw	r5,1284(sp)
  802058:	d9814d17 	ldw	r6,1332(sp)
  80205c:	00801984 	movi	r2,102
  802060:	2d25883a 	add	r18,r5,r20
  802064:	30808626 	beq	r6,r2,802280 <___vfprintf_internal_r+0x1cd4>
  802068:	00801184 	movi	r2,70
  80206c:	30808426 	beq	r6,r2,802280 <___vfprintf_internal_r+0x1cd4>
  802070:	000d883a 	mov	r6,zero
  802074:	000f883a 	mov	r7,zero
  802078:	880b883a 	mov	r5,r17
  80207c:	8009883a 	mov	r4,r16
  802080:	0808fd80 	call	808fd8 <__eqdf2>
  802084:	1000751e 	bne	r2,zero,80225c <___vfprintf_internal_r+0x1cb0>
  802088:	9005883a 	mov	r2,r18
  80208c:	dc800715 	stw	r18,28(sp)
  802090:	d9014117 	ldw	r4,1284(sp)
  802094:	d9414d17 	ldw	r5,1332(sp)
  802098:	00c019c4 	movi	r3,103
  80209c:	1125c83a 	sub	r18,r2,r4
  8020a0:	28c06826 	beq	r5,r3,802244 <___vfprintf_internal_r+0x1c98>
  8020a4:	008011c4 	movi	r2,71
  8020a8:	28806626 	beq	r5,r2,802244 <___vfprintf_internal_r+0x1c98>
  8020ac:	d9000517 	ldw	r4,20(sp)
  8020b0:	d8c14d17 	ldw	r3,1332(sp)
  8020b4:	00801944 	movi	r2,101
  8020b8:	10c05516 	blt	r2,r3,802210 <___vfprintf_internal_r+0x1c64>
  8020bc:	213fffc4 	addi	r4,r4,-1
  8020c0:	d9000515 	stw	r4,20(sp)
  8020c4:	d8c00805 	stb	r3,32(sp)
  8020c8:	2021883a 	mov	r16,r4
  8020cc:	2000c116 	blt	r4,zero,8023d4 <___vfprintf_internal_r+0x1e28>
  8020d0:	00800ac4 	movi	r2,43
  8020d4:	d8800845 	stb	r2,33(sp)
  8020d8:	00800244 	movi	r2,9
  8020dc:	1400af0e 	bge	r2,r16,80239c <___vfprintf_internal_r+0x1df0>
  8020e0:	1027883a 	mov	r19,r2
  8020e4:	dc400b84 	addi	r17,sp,46
  8020e8:	8009883a 	mov	r4,r16
  8020ec:	01400284 	movi	r5,10
  8020f0:	08096c00 	call	8096c0 <__modsi3>
  8020f4:	10800c04 	addi	r2,r2,48
  8020f8:	8c7fffc4 	addi	r17,r17,-1
  8020fc:	8009883a 	mov	r4,r16
  802100:	01400284 	movi	r5,10
  802104:	88800005 	stb	r2,0(r17)
  802108:	08096600 	call	809660 <__divsi3>
  80210c:	1021883a 	mov	r16,r2
  802110:	98bff516 	blt	r19,r2,8020e8 <___vfprintf_internal_r+0x1b3c>
  802114:	10c00c04 	addi	r3,r2,48
  802118:	d88009c4 	addi	r2,sp,39
  80211c:	108001c4 	addi	r2,r2,7
  802120:	897fffc4 	addi	r5,r17,-1
  802124:	88ffffc5 	stb	r3,-1(r17)
  802128:	2880a72e 	bgeu	r5,r2,8023c8 <___vfprintf_internal_r+0x1e1c>
  80212c:	1009883a 	mov	r4,r2
  802130:	d9800804 	addi	r6,sp,32
  802134:	d8c00884 	addi	r3,sp,34
  802138:	28800003 	ldbu	r2,0(r5)
  80213c:	29400044 	addi	r5,r5,1
  802140:	18800005 	stb	r2,0(r3)
  802144:	18c00044 	addi	r3,r3,1
  802148:	293ffb36 	bltu	r5,r4,802138 <___vfprintf_internal_r+0x1b8c>
  80214c:	1987c83a 	sub	r3,r3,r6
  802150:	00800044 	movi	r2,1
  802154:	d8c14815 	stw	r3,1312(sp)
  802158:	90cf883a 	add	r7,r18,r3
  80215c:	1480960e 	bge	r2,r18,8023b8 <___vfprintf_internal_r+0x1e0c>
  802160:	39c00044 	addi	r7,r7,1
  802164:	d9c14515 	stw	r7,1300(sp)
  802168:	38003416 	blt	r7,zero,80223c <___vfprintf_internal_r+0x1c90>
  80216c:	e0803fcc 	andi	r2,fp,255
  802170:	1080201c 	xori	r2,r2,128
  802174:	10bfe004 	addi	r2,r2,-128
  802178:	10004e26 	beq	r2,zero,8022b4 <___vfprintf_internal_r+0x1d08>
  80217c:	00800b44 	movi	r2,45
  802180:	dc814715 	stw	r18,1308(sp)
  802184:	d8014615 	stw	zero,1304(sp)
  802188:	d8800405 	stb	r2,16(sp)
  80218c:	003bab06 	br	80103c <___vfprintf_internal_r+0xa90>
  802190:	00800b44 	movi	r2,45
  802194:	d8800405 	stb	r2,16(sp)
  802198:	003d2d06 	br	801650 <___vfprintf_internal_r+0x10a4>
  80219c:	d9014f17 	ldw	r4,1340(sp)
  8021a0:	b00b883a 	mov	r5,r22
  8021a4:	d9800c04 	addi	r6,sp,48
  8021a8:	08005540 	call	800554 <__sprint_r>
  8021ac:	103ab71e 	bne	r2,zero,800c8c <___vfprintf_internal_r+0x6e0>
  8021b0:	003ab506 	br	800c88 <___vfprintf_internal_r+0x6dc>
  8021b4:	38800017 	ldw	r2,0(r7)
  8021b8:	39c00104 	addi	r7,r7,4
  8021bc:	d9c14015 	stw	r7,1280(sp)
  8021c0:	d9414b17 	ldw	r5,1324(sp)
  8021c4:	d9c14017 	ldw	r7,1280(sp)
  8021c8:	11400015 	stw	r5,0(r2)
  8021cc:	00395306 	br	80071c <___vfprintf_internal_r+0x170>
  8021d0:	980f883a 	mov	r7,r19
  8021d4:	dcc14515 	stw	r19,1300(sp)
  8021d8:	d8014615 	stw	zero,1304(sp)
  8021dc:	003b9506 	br	801034 <___vfprintf_internal_r+0xa88>
  8021e0:	0027883a 	mov	r19,zero
  8021e4:	00397206 	br	8007b0 <___vfprintf_internal_r+0x204>
  8021e8:	00c02074 	movhi	r3,129
  8021ec:	18f26e04 	addi	r3,r3,-13896
  8021f0:	100f883a 	mov	r7,r2
  8021f4:	d8814515 	stw	r2,1300(sp)
  8021f8:	d8c14115 	stw	r3,1284(sp)
  8021fc:	0039da06 	br	800968 <___vfprintf_internal_r+0x3bc>
  802200:	00802074 	movhi	r2,129
  802204:	10b26d04 	addi	r2,r2,-13900
  802208:	d8814115 	stw	r2,1284(sp)
  80220c:	003d1606 	br	801668 <___vfprintf_internal_r+0x10bc>
  802210:	d9414d17 	ldw	r5,1332(sp)
  802214:	00801984 	movi	r2,102
  802218:	28804926 	beq	r5,r2,802340 <___vfprintf_internal_r+0x1d94>
  80221c:	200f883a 	mov	r7,r4
  802220:	24805716 	blt	r4,r18,802380 <___vfprintf_internal_r+0x1dd4>
  802224:	d9414c17 	ldw	r5,1328(sp)
  802228:	2880004c 	andi	r2,r5,1
  80222c:	10000126 	beq	r2,zero,802234 <___vfprintf_internal_r+0x1c88>
  802230:	21c00044 	addi	r7,r4,1
  802234:	d9c14515 	stw	r7,1300(sp)
  802238:	383fcc0e 	bge	r7,zero,80216c <___vfprintf_internal_r+0x1bc0>
  80223c:	d8014515 	stw	zero,1300(sp)
  802240:	003fca06 	br	80216c <___vfprintf_internal_r+0x1bc0>
  802244:	d9000517 	ldw	r4,20(sp)
  802248:	00bfff04 	movi	r2,-4
  80224c:	1100480e 	bge	r2,r4,802370 <___vfprintf_internal_r+0x1dc4>
  802250:	99004716 	blt	r19,r4,802370 <___vfprintf_internal_r+0x1dc4>
  802254:	d8c14d15 	stw	r3,1332(sp)
  802258:	003ff006 	br	80221c <___vfprintf_internal_r+0x1c70>
  80225c:	d8800717 	ldw	r2,28(sp)
  802260:	14bf8b2e 	bgeu	r2,r18,802090 <___vfprintf_internal_r+0x1ae4>
  802264:	9007883a 	mov	r3,r18
  802268:	01000c04 	movi	r4,48
  80226c:	11000005 	stb	r4,0(r2)
  802270:	10800044 	addi	r2,r2,1
  802274:	d8800715 	stw	r2,28(sp)
  802278:	18bffc1e 	bne	r3,r2,80226c <___vfprintf_internal_r+0x1cc0>
  80227c:	003f8406 	br	802090 <___vfprintf_internal_r+0x1ae4>
  802280:	d8814117 	ldw	r2,1284(sp)
  802284:	10c00007 	ldb	r3,0(r2)
  802288:	00800c04 	movi	r2,48
  80228c:	18805b26 	beq	r3,r2,8023fc <___vfprintf_internal_r+0x1e50>
  802290:	d9000517 	ldw	r4,20(sp)
  802294:	9125883a 	add	r18,r18,r4
  802298:	003f7506 	br	802070 <___vfprintf_internal_r+0x1ac4>
  80229c:	d9014c17 	ldw	r4,1328(sp)
  8022a0:	2080004c 	andi	r2,r4,1
  8022a4:	1005003a 	cmpeq	r2,r2,zero
  8022a8:	103f6a26 	beq	r2,zero,802054 <___vfprintf_internal_r+0x1aa8>
  8022ac:	d8800717 	ldw	r2,28(sp)
  8022b0:	003f7706 	br	802090 <___vfprintf_internal_r+0x1ae4>
  8022b4:	d9c14515 	stw	r7,1300(sp)
  8022b8:	38004d16 	blt	r7,zero,8023f0 <___vfprintf_internal_r+0x1e44>
  8022bc:	dc814715 	stw	r18,1308(sp)
  8022c0:	d8014615 	stw	zero,1304(sp)
  8022c4:	003b5b06 	br	801034 <___vfprintf_internal_r+0xa88>
  8022c8:	d9014f17 	ldw	r4,1340(sp)
  8022cc:	d8800504 	addi	r2,sp,20
  8022d0:	d8800115 	stw	r2,4(sp)
  8022d4:	d8c00604 	addi	r3,sp,24
  8022d8:	d8800704 	addi	r2,sp,28
  8022dc:	800b883a 	mov	r5,r16
  8022e0:	880d883a 	mov	r6,r17
  8022e4:	01c000c4 	movi	r7,3
  8022e8:	d8c00215 	stw	r3,8(sp)
  8022ec:	d8800315 	stw	r2,12(sp)
  8022f0:	dcc00015 	stw	r19,0(sp)
  8022f4:	9829883a 	mov	r20,r19
  8022f8:	08028140 	call	802814 <_dtoa_r>
  8022fc:	d8814115 	stw	r2,1284(sp)
  802300:	003f5106 	br	802048 <___vfprintf_internal_r+0x1a9c>
  802304:	d8c14217 	ldw	r3,1288(sp)
  802308:	d9014317 	ldw	r4,1292(sp)
  80230c:	07000b44 	movi	fp,45
  802310:	1821883a 	mov	r16,r3
  802314:	2460003c 	xorhi	r17,r4,32768
  802318:	003f3106 	br	801fe0 <___vfprintf_internal_r+0x1a34>
  80231c:	9d000044 	addi	r20,r19,1
  802320:	003f3906 	br	802008 <___vfprintf_internal_r+0x1a5c>
  802324:	983f251e 	bne	r19,zero,801fbc <___vfprintf_internal_r+0x1a10>
  802328:	04c00044 	movi	r19,1
  80232c:	003f2306 	br	801fbc <___vfprintf_internal_r+0x1a10>
  802330:	04c00184 	movi	r19,6
  802334:	003f2106 	br	801fbc <___vfprintf_internal_r+0x1a10>
  802338:	d8014515 	stw	zero,1300(sp)
  80233c:	003eee06 	br	801ef8 <___vfprintf_internal_r+0x194c>
  802340:	200f883a 	mov	r7,r4
  802344:	0100370e 	bge	zero,r4,802424 <___vfprintf_internal_r+0x1e78>
  802348:	9800031e 	bne	r19,zero,802358 <___vfprintf_internal_r+0x1dac>
  80234c:	d9814c17 	ldw	r6,1328(sp)
  802350:	3080004c 	andi	r2,r6,1
  802354:	103fb726 	beq	r2,zero,802234 <___vfprintf_internal_r+0x1c88>
  802358:	20800044 	addi	r2,r4,1
  80235c:	98a7883a 	add	r19,r19,r2
  802360:	dcc14515 	stw	r19,1300(sp)
  802364:	980f883a 	mov	r7,r19
  802368:	983f800e 	bge	r19,zero,80216c <___vfprintf_internal_r+0x1bc0>
  80236c:	003fb306 	br	80223c <___vfprintf_internal_r+0x1c90>
  802370:	d9814d17 	ldw	r6,1332(sp)
  802374:	31bfff84 	addi	r6,r6,-2
  802378:	d9814d15 	stw	r6,1332(sp)
  80237c:	003f4c06 	br	8020b0 <___vfprintf_internal_r+0x1b04>
  802380:	0100180e 	bge	zero,r4,8023e4 <___vfprintf_internal_r+0x1e38>
  802384:	00800044 	movi	r2,1
  802388:	1485883a 	add	r2,r2,r18
  80238c:	d8814515 	stw	r2,1300(sp)
  802390:	100f883a 	mov	r7,r2
  802394:	103f750e 	bge	r2,zero,80216c <___vfprintf_internal_r+0x1bc0>
  802398:	003fa806 	br	80223c <___vfprintf_internal_r+0x1c90>
  80239c:	80c00c04 	addi	r3,r16,48
  8023a0:	00800c04 	movi	r2,48
  8023a4:	d8c008c5 	stb	r3,35(sp)
  8023a8:	d9800804 	addi	r6,sp,32
  8023ac:	d8c00904 	addi	r3,sp,36
  8023b0:	d8800885 	stb	r2,34(sp)
  8023b4:	003f6506 	br	80214c <___vfprintf_internal_r+0x1ba0>
  8023b8:	d9014c17 	ldw	r4,1328(sp)
  8023bc:	2084703a 	and	r2,r4,r2
  8023c0:	103f9c26 	beq	r2,zero,802234 <___vfprintf_internal_r+0x1c88>
  8023c4:	003f6606 	br	802160 <___vfprintf_internal_r+0x1bb4>
  8023c8:	d9800804 	addi	r6,sp,32
  8023cc:	d8c00884 	addi	r3,sp,34
  8023d0:	003f5e06 	br	80214c <___vfprintf_internal_r+0x1ba0>
  8023d4:	00800b44 	movi	r2,45
  8023d8:	0121c83a 	sub	r16,zero,r4
  8023dc:	d8800845 	stb	r2,33(sp)
  8023e0:	003f3d06 	br	8020d8 <___vfprintf_internal_r+0x1b2c>
  8023e4:	00800084 	movi	r2,2
  8023e8:	1105c83a 	sub	r2,r2,r4
  8023ec:	003fe606 	br	802388 <___vfprintf_internal_r+0x1ddc>
  8023f0:	d8014515 	stw	zero,1300(sp)
  8023f4:	dc814715 	stw	r18,1308(sp)
  8023f8:	003fb106 	br	8022c0 <___vfprintf_internal_r+0x1d14>
  8023fc:	000d883a 	mov	r6,zero
  802400:	000f883a 	mov	r7,zero
  802404:	8009883a 	mov	r4,r16
  802408:	880b883a 	mov	r5,r17
  80240c:	08090600 	call	809060 <__nedf2>
  802410:	103f9f26 	beq	r2,zero,802290 <___vfprintf_internal_r+0x1ce4>
  802414:	00800044 	movi	r2,1
  802418:	1509c83a 	sub	r4,r2,r20
  80241c:	d9000515 	stw	r4,20(sp)
  802420:	003f9b06 	br	802290 <___vfprintf_internal_r+0x1ce4>
  802424:	98000d1e 	bne	r19,zero,80245c <___vfprintf_internal_r+0x1eb0>
  802428:	d8c14c17 	ldw	r3,1328(sp)
  80242c:	1880004c 	andi	r2,r3,1
  802430:	10000a1e 	bne	r2,zero,80245c <___vfprintf_internal_r+0x1eb0>
  802434:	01000044 	movi	r4,1
  802438:	200f883a 	mov	r7,r4
  80243c:	d9014515 	stw	r4,1300(sp)
  802440:	003f4a06 	br	80216c <___vfprintf_internal_r+0x1bc0>
  802444:	3cc00017 	ldw	r19,0(r7)
  802448:	39c00104 	addi	r7,r7,4
  80244c:	983d0e0e 	bge	r19,zero,801888 <___vfprintf_internal_r+0x12dc>
  802450:	b8c00007 	ldb	r3,0(r23)
  802454:	04ffffc4 	movi	r19,-1
  802458:	0038d306 	br	8007a8 <___vfprintf_internal_r+0x1fc>
  80245c:	9cc00084 	addi	r19,r19,2
  802460:	dcc14515 	stw	r19,1300(sp)
  802464:	980f883a 	mov	r7,r19
  802468:	983f400e 	bge	r19,zero,80216c <___vfprintf_internal_r+0x1bc0>
  80246c:	003f7306 	br	80223c <___vfprintf_internal_r+0x1c90>

00802470 <__vfprintf_internal>:
  802470:	00802074 	movhi	r2,129
  802474:	10b9e704 	addi	r2,r2,-6244
  802478:	2013883a 	mov	r9,r4
  80247c:	11000017 	ldw	r4,0(r2)
  802480:	2805883a 	mov	r2,r5
  802484:	300f883a 	mov	r7,r6
  802488:	480b883a 	mov	r5,r9
  80248c:	100d883a 	mov	r6,r2
  802490:	08005ac1 	jmpi	8005ac <___vfprintf_internal_r>

00802494 <__swsetup_r>:
  802494:	00802074 	movhi	r2,129
  802498:	10b9e704 	addi	r2,r2,-6244
  80249c:	10c00017 	ldw	r3,0(r2)
  8024a0:	defffd04 	addi	sp,sp,-12
  8024a4:	dc400115 	stw	r17,4(sp)
  8024a8:	dc000015 	stw	r16,0(sp)
  8024ac:	dfc00215 	stw	ra,8(sp)
  8024b0:	2023883a 	mov	r17,r4
  8024b4:	2821883a 	mov	r16,r5
  8024b8:	18000226 	beq	r3,zero,8024c4 <__swsetup_r+0x30>
  8024bc:	18800e17 	ldw	r2,56(r3)
  8024c0:	10001f26 	beq	r2,zero,802540 <__swsetup_r+0xac>
  8024c4:	8100030b 	ldhu	r4,12(r16)
  8024c8:	2080020c 	andi	r2,r4,8
  8024cc:	10002826 	beq	r2,zero,802570 <__swsetup_r+0xdc>
  8024d0:	81400417 	ldw	r5,16(r16)
  8024d4:	28001d26 	beq	r5,zero,80254c <__swsetup_r+0xb8>
  8024d8:	2080004c 	andi	r2,r4,1
  8024dc:	1005003a 	cmpeq	r2,r2,zero
  8024e0:	10000b26 	beq	r2,zero,802510 <__swsetup_r+0x7c>
  8024e4:	2080008c 	andi	r2,r4,2
  8024e8:	10001226 	beq	r2,zero,802534 <__swsetup_r+0xa0>
  8024ec:	0005883a 	mov	r2,zero
  8024f0:	80800215 	stw	r2,8(r16)
  8024f4:	28000b26 	beq	r5,zero,802524 <__swsetup_r+0x90>
  8024f8:	0005883a 	mov	r2,zero
  8024fc:	dfc00217 	ldw	ra,8(sp)
  802500:	dc400117 	ldw	r17,4(sp)
  802504:	dc000017 	ldw	r16,0(sp)
  802508:	dec00304 	addi	sp,sp,12
  80250c:	f800283a 	ret
  802510:	80800517 	ldw	r2,20(r16)
  802514:	80000215 	stw	zero,8(r16)
  802518:	0085c83a 	sub	r2,zero,r2
  80251c:	80800615 	stw	r2,24(r16)
  802520:	283ff51e 	bne	r5,zero,8024f8 <__swsetup_r+0x64>
  802524:	2080200c 	andi	r2,r4,128
  802528:	103ff326 	beq	r2,zero,8024f8 <__swsetup_r+0x64>
  80252c:	00bfffc4 	movi	r2,-1
  802530:	003ff206 	br	8024fc <__swsetup_r+0x68>
  802534:	80800517 	ldw	r2,20(r16)
  802538:	80800215 	stw	r2,8(r16)
  80253c:	003fed06 	br	8024f4 <__swsetup_r+0x60>
  802540:	1809883a 	mov	r4,r3
  802544:	08040600 	call	804060 <__sinit>
  802548:	003fde06 	br	8024c4 <__swsetup_r+0x30>
  80254c:	20c0a00c 	andi	r3,r4,640
  802550:	00808004 	movi	r2,512
  802554:	18bfe026 	beq	r3,r2,8024d8 <__swsetup_r+0x44>
  802558:	8809883a 	mov	r4,r17
  80255c:	800b883a 	mov	r5,r16
  802560:	0804e0c0 	call	804e0c <__smakebuf_r>
  802564:	8100030b 	ldhu	r4,12(r16)
  802568:	81400417 	ldw	r5,16(r16)
  80256c:	003fda06 	br	8024d8 <__swsetup_r+0x44>
  802570:	2080040c 	andi	r2,r4,16
  802574:	103fed26 	beq	r2,zero,80252c <__swsetup_r+0x98>
  802578:	2080010c 	andi	r2,r4,4
  80257c:	10001226 	beq	r2,zero,8025c8 <__swsetup_r+0x134>
  802580:	81400c17 	ldw	r5,48(r16)
  802584:	28000526 	beq	r5,zero,80259c <__swsetup_r+0x108>
  802588:	80801004 	addi	r2,r16,64
  80258c:	28800226 	beq	r5,r2,802598 <__swsetup_r+0x104>
  802590:	8809883a 	mov	r4,r17
  802594:	08044180 	call	804418 <_free_r>
  802598:	80000c15 	stw	zero,48(r16)
  80259c:	8080030b 	ldhu	r2,12(r16)
  8025a0:	81400417 	ldw	r5,16(r16)
  8025a4:	80000115 	stw	zero,4(r16)
  8025a8:	10bff6cc 	andi	r2,r2,65499
  8025ac:	8080030d 	sth	r2,12(r16)
  8025b0:	81400015 	stw	r5,0(r16)
  8025b4:	8080030b 	ldhu	r2,12(r16)
  8025b8:	10800214 	ori	r2,r2,8
  8025bc:	113fffcc 	andi	r4,r2,65535
  8025c0:	8080030d 	sth	r2,12(r16)
  8025c4:	003fc306 	br	8024d4 <__swsetup_r+0x40>
  8025c8:	81400417 	ldw	r5,16(r16)
  8025cc:	003ff906 	br	8025b4 <__swsetup_r+0x120>

008025d0 <quorem>:
  8025d0:	28c00417 	ldw	r3,16(r5)
  8025d4:	20800417 	ldw	r2,16(r4)
  8025d8:	defff104 	addi	sp,sp,-60
  8025dc:	dfc00e15 	stw	ra,56(sp)
  8025e0:	df000d15 	stw	fp,52(sp)
  8025e4:	ddc00c15 	stw	r23,48(sp)
  8025e8:	dd800b15 	stw	r22,44(sp)
  8025ec:	dd400a15 	stw	r21,40(sp)
  8025f0:	dd000915 	stw	r20,36(sp)
  8025f4:	dcc00815 	stw	r19,32(sp)
  8025f8:	dc800715 	stw	r18,28(sp)
  8025fc:	dc400615 	stw	r17,24(sp)
  802600:	dc000515 	stw	r16,20(sp)
  802604:	d9000315 	stw	r4,12(sp)
  802608:	d9400415 	stw	r5,16(sp)
  80260c:	10c07f16 	blt	r2,r3,80280c <quorem+0x23c>
  802610:	1d3fffc4 	addi	r20,r3,-1
  802614:	d8c00417 	ldw	r3,16(sp)
  802618:	d9000317 	ldw	r4,12(sp)
  80261c:	a505883a 	add	r2,r20,r20
  802620:	1085883a 	add	r2,r2,r2
  802624:	1cc00504 	addi	r19,r3,20
  802628:	25c00504 	addi	r23,r4,20
  80262c:	98ad883a 	add	r22,r19,r2
  802630:	15c7883a 	add	r3,r2,r23
  802634:	b1400017 	ldw	r5,0(r22)
  802638:	19000017 	ldw	r4,0(r3)
  80263c:	d8c00015 	stw	r3,0(sp)
  802640:	29400044 	addi	r5,r5,1
  802644:	d9000215 	stw	r4,8(sp)
  802648:	08097200 	call	809720 <__udivsi3>
  80264c:	1039883a 	mov	fp,r2
  802650:	10003d1e 	bne	r2,zero,802748 <quorem+0x178>
  802654:	d9400417 	ldw	r5,16(sp)
  802658:	d9000317 	ldw	r4,12(sp)
  80265c:	0805b380 	call	805b38 <__mcmp>
  802660:	10002c16 	blt	r2,zero,802714 <quorem+0x144>
  802664:	e7000044 	addi	fp,fp,1
  802668:	b80f883a 	mov	r7,r23
  80266c:	0011883a 	mov	r8,zero
  802670:	0009883a 	mov	r4,zero
  802674:	99400017 	ldw	r5,0(r19)
  802678:	38c00017 	ldw	r3,0(r7)
  80267c:	9cc00104 	addi	r19,r19,4
  802680:	28bfffcc 	andi	r2,r5,65535
  802684:	2085883a 	add	r2,r4,r2
  802688:	11bfffcc 	andi	r6,r2,65535
  80268c:	193fffcc 	andi	r4,r3,65535
  802690:	1004d43a 	srli	r2,r2,16
  802694:	280ad43a 	srli	r5,r5,16
  802698:	2189c83a 	sub	r4,r4,r6
  80269c:	2209883a 	add	r4,r4,r8
  8026a0:	1806d43a 	srli	r3,r3,16
  8026a4:	288b883a 	add	r5,r5,r2
  8026a8:	200dd43a 	srai	r6,r4,16
  8026ac:	28bfffcc 	andi	r2,r5,65535
  8026b0:	1887c83a 	sub	r3,r3,r2
  8026b4:	1987883a 	add	r3,r3,r6
  8026b8:	3900000d 	sth	r4,0(r7)
  8026bc:	38c0008d 	sth	r3,2(r7)
  8026c0:	2808d43a 	srli	r4,r5,16
  8026c4:	39c00104 	addi	r7,r7,4
  8026c8:	1811d43a 	srai	r8,r3,16
  8026cc:	b4ffe92e 	bgeu	r22,r19,802674 <quorem+0xa4>
  8026d0:	a505883a 	add	r2,r20,r20
  8026d4:	1085883a 	add	r2,r2,r2
  8026d8:	b885883a 	add	r2,r23,r2
  8026dc:	10c00017 	ldw	r3,0(r2)
  8026e0:	18000c1e 	bne	r3,zero,802714 <quorem+0x144>
  8026e4:	113fff04 	addi	r4,r2,-4
  8026e8:	b900082e 	bgeu	r23,r4,80270c <quorem+0x13c>
  8026ec:	10bfff17 	ldw	r2,-4(r2)
  8026f0:	10000326 	beq	r2,zero,802700 <quorem+0x130>
  8026f4:	00000506 	br	80270c <quorem+0x13c>
  8026f8:	20800017 	ldw	r2,0(r4)
  8026fc:	1000031e 	bne	r2,zero,80270c <quorem+0x13c>
  802700:	213fff04 	addi	r4,r4,-4
  802704:	a53fffc4 	addi	r20,r20,-1
  802708:	b93ffb36 	bltu	r23,r4,8026f8 <quorem+0x128>
  80270c:	d9000317 	ldw	r4,12(sp)
  802710:	25000415 	stw	r20,16(r4)
  802714:	e005883a 	mov	r2,fp
  802718:	dfc00e17 	ldw	ra,56(sp)
  80271c:	df000d17 	ldw	fp,52(sp)
  802720:	ddc00c17 	ldw	r23,48(sp)
  802724:	dd800b17 	ldw	r22,44(sp)
  802728:	dd400a17 	ldw	r21,40(sp)
  80272c:	dd000917 	ldw	r20,36(sp)
  802730:	dcc00817 	ldw	r19,32(sp)
  802734:	dc800717 	ldw	r18,28(sp)
  802738:	dc400617 	ldw	r17,24(sp)
  80273c:	dc000517 	ldw	r16,20(sp)
  802740:	dec00f04 	addi	sp,sp,60
  802744:	f800283a 	ret
  802748:	b823883a 	mov	r17,r23
  80274c:	9825883a 	mov	r18,r19
  802750:	d8000115 	stw	zero,4(sp)
  802754:	002b883a 	mov	r21,zero
  802758:	94000017 	ldw	r16,0(r18)
  80275c:	e009883a 	mov	r4,fp
  802760:	94800104 	addi	r18,r18,4
  802764:	817fffcc 	andi	r5,r16,65535
  802768:	08097300 	call	809730 <__mulsi3>
  80276c:	800ad43a 	srli	r5,r16,16
  802770:	e009883a 	mov	r4,fp
  802774:	a8a1883a 	add	r16,r21,r2
  802778:	08097300 	call	809730 <__mulsi3>
  80277c:	89000017 	ldw	r4,0(r17)
  802780:	80ffffcc 	andi	r3,r16,65535
  802784:	8020d43a 	srli	r16,r16,16
  802788:	217fffcc 	andi	r5,r4,65535
  80278c:	28cbc83a 	sub	r5,r5,r3
  802790:	d8c00117 	ldw	r3,4(sp)
  802794:	2008d43a 	srli	r4,r4,16
  802798:	1405883a 	add	r2,r2,r16
  80279c:	28cb883a 	add	r5,r5,r3
  8027a0:	280dd43a 	srai	r6,r5,16
  8027a4:	10ffffcc 	andi	r3,r2,65535
  8027a8:	20c9c83a 	sub	r4,r4,r3
  8027ac:	2189883a 	add	r4,r4,r6
  8027b0:	8900008d 	sth	r4,2(r17)
  8027b4:	2009d43a 	srai	r4,r4,16
  8027b8:	8940000d 	sth	r5,0(r17)
  8027bc:	102ad43a 	srli	r21,r2,16
  8027c0:	8c400104 	addi	r17,r17,4
  8027c4:	d9000115 	stw	r4,4(sp)
  8027c8:	b4bfe32e 	bgeu	r22,r18,802758 <quorem+0x188>
  8027cc:	d9000217 	ldw	r4,8(sp)
  8027d0:	203fa01e 	bne	r4,zero,802654 <quorem+0x84>
  8027d4:	d8800017 	ldw	r2,0(sp)
  8027d8:	10ffff04 	addi	r3,r2,-4
  8027dc:	b8c0082e 	bgeu	r23,r3,802800 <quorem+0x230>
  8027e0:	10bfff17 	ldw	r2,-4(r2)
  8027e4:	10000326 	beq	r2,zero,8027f4 <quorem+0x224>
  8027e8:	00000506 	br	802800 <quorem+0x230>
  8027ec:	18800017 	ldw	r2,0(r3)
  8027f0:	1000031e 	bne	r2,zero,802800 <quorem+0x230>
  8027f4:	18ffff04 	addi	r3,r3,-4
  8027f8:	a53fffc4 	addi	r20,r20,-1
  8027fc:	b8fffb36 	bltu	r23,r3,8027ec <quorem+0x21c>
  802800:	d8c00317 	ldw	r3,12(sp)
  802804:	1d000415 	stw	r20,16(r3)
  802808:	003f9206 	br	802654 <quorem+0x84>
  80280c:	0005883a 	mov	r2,zero
  802810:	003fc106 	br	802718 <quorem+0x148>

00802814 <_dtoa_r>:
  802814:	22001017 	ldw	r8,64(r4)
  802818:	deffda04 	addi	sp,sp,-152
  80281c:	dd402115 	stw	r21,132(sp)
  802820:	dd002015 	stw	r20,128(sp)
  802824:	dc801e15 	stw	r18,120(sp)
  802828:	dc401d15 	stw	r17,116(sp)
  80282c:	dfc02515 	stw	ra,148(sp)
  802830:	df002415 	stw	fp,144(sp)
  802834:	ddc02315 	stw	r23,140(sp)
  802838:	dd802215 	stw	r22,136(sp)
  80283c:	dcc01f15 	stw	r19,124(sp)
  802840:	dc001c15 	stw	r16,112(sp)
  802844:	d9001615 	stw	r4,88(sp)
  802848:	3023883a 	mov	r17,r6
  80284c:	2829883a 	mov	r20,r5
  802850:	d9c01715 	stw	r7,92(sp)
  802854:	dc802817 	ldw	r18,160(sp)
  802858:	302b883a 	mov	r21,r6
  80285c:	40000a26 	beq	r8,zero,802888 <_dtoa_r+0x74>
  802860:	20801117 	ldw	r2,68(r4)
  802864:	400b883a 	mov	r5,r8
  802868:	40800115 	stw	r2,4(r8)
  80286c:	20c01117 	ldw	r3,68(r4)
  802870:	00800044 	movi	r2,1
  802874:	10c4983a 	sll	r2,r2,r3
  802878:	40800215 	stw	r2,8(r8)
  80287c:	08059dc0 	call	8059dc <_Bfree>
  802880:	d8c01617 	ldw	r3,88(sp)
  802884:	18001015 	stw	zero,64(r3)
  802888:	8800a316 	blt	r17,zero,802b18 <_dtoa_r+0x304>
  80288c:	90000015 	stw	zero,0(r18)
  802890:	a8dffc2c 	andhi	r3,r21,32752
  802894:	009ffc34 	movhi	r2,32752
  802898:	18809126 	beq	r3,r2,802ae0 <_dtoa_r+0x2cc>
  80289c:	000d883a 	mov	r6,zero
  8028a0:	000f883a 	mov	r7,zero
  8028a4:	a009883a 	mov	r4,r20
  8028a8:	a80b883a 	mov	r5,r21
  8028ac:	dd001215 	stw	r20,72(sp)
  8028b0:	dd401315 	stw	r21,76(sp)
  8028b4:	08090600 	call	809060 <__nedf2>
  8028b8:	1000171e 	bne	r2,zero,802918 <_dtoa_r+0x104>
  8028bc:	d9802717 	ldw	r6,156(sp)
  8028c0:	00800044 	movi	r2,1
  8028c4:	30800015 	stw	r2,0(r6)
  8028c8:	d8802917 	ldw	r2,164(sp)
  8028cc:	10029b26 	beq	r2,zero,80333c <_dtoa_r+0xb28>
  8028d0:	d9002917 	ldw	r4,164(sp)
  8028d4:	00802074 	movhi	r2,129
  8028d8:	10b27c44 	addi	r2,r2,-13839
  8028dc:	10ffffc4 	addi	r3,r2,-1
  8028e0:	20800015 	stw	r2,0(r4)
  8028e4:	1805883a 	mov	r2,r3
  8028e8:	dfc02517 	ldw	ra,148(sp)
  8028ec:	df002417 	ldw	fp,144(sp)
  8028f0:	ddc02317 	ldw	r23,140(sp)
  8028f4:	dd802217 	ldw	r22,136(sp)
  8028f8:	dd402117 	ldw	r21,132(sp)
  8028fc:	dd002017 	ldw	r20,128(sp)
  802900:	dcc01f17 	ldw	r19,124(sp)
  802904:	dc801e17 	ldw	r18,120(sp)
  802908:	dc401d17 	ldw	r17,116(sp)
  80290c:	dc001c17 	ldw	r16,112(sp)
  802910:	dec02604 	addi	sp,sp,152
  802914:	f800283a 	ret
  802918:	d9001617 	ldw	r4,88(sp)
  80291c:	d9401217 	ldw	r5,72(sp)
  802920:	d8800104 	addi	r2,sp,4
  802924:	a80d883a 	mov	r6,r21
  802928:	d9c00204 	addi	r7,sp,8
  80292c:	d8800015 	stw	r2,0(sp)
  802930:	08060180 	call	806018 <__d2b>
  802934:	d8800715 	stw	r2,28(sp)
  802938:	a804d53a 	srli	r2,r21,20
  80293c:	1101ffcc 	andi	r4,r2,2047
  802940:	20008626 	beq	r4,zero,802b5c <_dtoa_r+0x348>
  802944:	d8c01217 	ldw	r3,72(sp)
  802948:	00800434 	movhi	r2,16
  80294c:	10bfffc4 	addi	r2,r2,-1
  802950:	ddc00117 	ldw	r23,4(sp)
  802954:	a884703a 	and	r2,r21,r2
  802958:	1811883a 	mov	r8,r3
  80295c:	124ffc34 	orhi	r9,r2,16368
  802960:	25bf0044 	addi	r22,r4,-1023
  802964:	d8000815 	stw	zero,32(sp)
  802968:	0005883a 	mov	r2,zero
  80296c:	00cffe34 	movhi	r3,16376
  802970:	480b883a 	mov	r5,r9
  802974:	4009883a 	mov	r4,r8
  802978:	180f883a 	mov	r7,r3
  80297c:	100d883a 	mov	r6,r2
  802980:	08088c80 	call	8088c8 <__subdf3>
  802984:	0218dbf4 	movhi	r8,25455
  802988:	4210d844 	addi	r8,r8,17249
  80298c:	024ff4f4 	movhi	r9,16339
  802990:	4a61e9c4 	addi	r9,r9,-30809
  802994:	480f883a 	mov	r7,r9
  802998:	400d883a 	mov	r6,r8
  80299c:	180b883a 	mov	r5,r3
  8029a0:	1009883a 	mov	r4,r2
  8029a4:	08089bc0 	call	8089bc <__muldf3>
  8029a8:	0222d874 	movhi	r8,35681
  8029ac:	42322cc4 	addi	r8,r8,-14157
  8029b0:	024ff1f4 	movhi	r9,16327
  8029b4:	4a628a04 	addi	r9,r9,-30168
  8029b8:	480f883a 	mov	r7,r9
  8029bc:	400d883a 	mov	r6,r8
  8029c0:	180b883a 	mov	r5,r3
  8029c4:	1009883a 	mov	r4,r2
  8029c8:	08089480 	call	808948 <__adddf3>
  8029cc:	b009883a 	mov	r4,r22
  8029d0:	1021883a 	mov	r16,r2
  8029d4:	1823883a 	mov	r17,r3
  8029d8:	08092800 	call	809280 <__floatsidf>
  8029dc:	021427f4 	movhi	r8,20639
  8029e0:	421e7ec4 	addi	r8,r8,31227
  8029e4:	024ff4f4 	movhi	r9,16339
  8029e8:	4a5104c4 	addi	r9,r9,17427
  8029ec:	480f883a 	mov	r7,r9
  8029f0:	400d883a 	mov	r6,r8
  8029f4:	180b883a 	mov	r5,r3
  8029f8:	1009883a 	mov	r4,r2
  8029fc:	08089bc0 	call	8089bc <__muldf3>
  802a00:	180f883a 	mov	r7,r3
  802a04:	880b883a 	mov	r5,r17
  802a08:	100d883a 	mov	r6,r2
  802a0c:	8009883a 	mov	r4,r16
  802a10:	08089480 	call	808948 <__adddf3>
  802a14:	1009883a 	mov	r4,r2
  802a18:	180b883a 	mov	r5,r3
  802a1c:	1021883a 	mov	r16,r2
  802a20:	1823883a 	mov	r17,r3
  802a24:	08093780 	call	809378 <__fixdfsi>
  802a28:	000d883a 	mov	r6,zero
  802a2c:	000f883a 	mov	r7,zero
  802a30:	8009883a 	mov	r4,r16
  802a34:	880b883a 	mov	r5,r17
  802a38:	d8800d15 	stw	r2,52(sp)
  802a3c:	08091f80 	call	8091f8 <__ltdf2>
  802a40:	10031716 	blt	r2,zero,8036a0 <_dtoa_r+0xe8c>
  802a44:	d8c00d17 	ldw	r3,52(sp)
  802a48:	00800584 	movi	r2,22
  802a4c:	10c1482e 	bgeu	r2,r3,802f70 <_dtoa_r+0x75c>
  802a50:	01000044 	movi	r4,1
  802a54:	d9000c15 	stw	r4,48(sp)
  802a58:	bd85c83a 	sub	r2,r23,r22
  802a5c:	11bfffc4 	addi	r6,r2,-1
  802a60:	30030b16 	blt	r6,zero,803690 <_dtoa_r+0xe7c>
  802a64:	d9800a15 	stw	r6,40(sp)
  802a68:	d8001115 	stw	zero,68(sp)
  802a6c:	d8c00d17 	ldw	r3,52(sp)
  802a70:	1802ff16 	blt	r3,zero,803670 <_dtoa_r+0xe5c>
  802a74:	d9000a17 	ldw	r4,40(sp)
  802a78:	d8c00915 	stw	r3,36(sp)
  802a7c:	d8001015 	stw	zero,64(sp)
  802a80:	20c9883a 	add	r4,r4,r3
  802a84:	d9000a15 	stw	r4,40(sp)
  802a88:	d9001717 	ldw	r4,92(sp)
  802a8c:	00800244 	movi	r2,9
  802a90:	11004636 	bltu	r2,r4,802bac <_dtoa_r+0x398>
  802a94:	00800144 	movi	r2,5
  802a98:	11020416 	blt	r2,r4,8032ac <_dtoa_r+0xa98>
  802a9c:	04400044 	movi	r17,1
  802aa0:	d8c01717 	ldw	r3,92(sp)
  802aa4:	00800144 	movi	r2,5
  802aa8:	10c1ed36 	bltu	r2,r3,803260 <_dtoa_r+0xa4c>
  802aac:	18c5883a 	add	r2,r3,r3
  802ab0:	1085883a 	add	r2,r2,r2
  802ab4:	00c02034 	movhi	r3,128
  802ab8:	18cab204 	addi	r3,r3,10952
  802abc:	10c5883a 	add	r2,r2,r3
  802ac0:	11000017 	ldw	r4,0(r2)
  802ac4:	2000683a 	jmp	r4
  802ac8:	00802bb4 	movhi	r2,174
  802acc:	00802bb4 	movhi	r2,174
  802ad0:	008035b4 	movhi	r2,214
  802ad4:	0080358c 	andi	r2,zero,214
  802ad8:	008035d0 	cmplti	r2,zero,215
  802adc:	008035dc 	xori	r2,zero,215
  802ae0:	d9002717 	ldw	r4,156(sp)
  802ae4:	0089c3c4 	movi	r2,9999
  802ae8:	20800015 	stw	r2,0(r4)
  802aec:	a0001026 	beq	r20,zero,802b30 <_dtoa_r+0x31c>
  802af0:	00c02074 	movhi	r3,129
  802af4:	18f28804 	addi	r3,r3,-13792
  802af8:	d9802917 	ldw	r6,164(sp)
  802afc:	303f7926 	beq	r6,zero,8028e4 <_dtoa_r+0xd0>
  802b00:	188000c7 	ldb	r2,3(r3)
  802b04:	190000c4 	addi	r4,r3,3
  802b08:	1000101e 	bne	r2,zero,802b4c <_dtoa_r+0x338>
  802b0c:	d8802917 	ldw	r2,164(sp)
  802b10:	11000015 	stw	r4,0(r2)
  802b14:	003f7306 	br	8028e4 <_dtoa_r+0xd0>
  802b18:	00a00034 	movhi	r2,32768
  802b1c:	10bfffc4 	addi	r2,r2,-1
  802b20:	00c00044 	movi	r3,1
  802b24:	88aa703a 	and	r21,r17,r2
  802b28:	90c00015 	stw	r3,0(r18)
  802b2c:	003f5806 	br	802890 <_dtoa_r+0x7c>
  802b30:	00800434 	movhi	r2,16
  802b34:	10bfffc4 	addi	r2,r2,-1
  802b38:	a884703a 	and	r2,r21,r2
  802b3c:	103fec1e 	bne	r2,zero,802af0 <_dtoa_r+0x2dc>
  802b40:	00c02074 	movhi	r3,129
  802b44:	18f28504 	addi	r3,r3,-13804
  802b48:	003feb06 	br	802af8 <_dtoa_r+0x2e4>
  802b4c:	d8802917 	ldw	r2,164(sp)
  802b50:	19000204 	addi	r4,r3,8
  802b54:	11000015 	stw	r4,0(r2)
  802b58:	003f6206 	br	8028e4 <_dtoa_r+0xd0>
  802b5c:	ddc00117 	ldw	r23,4(sp)
  802b60:	d8800217 	ldw	r2,8(sp)
  802b64:	01000804 	movi	r4,32
  802b68:	b8c10c84 	addi	r3,r23,1074
  802b6c:	18a3883a 	add	r17,r3,r2
  802b70:	2441b80e 	bge	r4,r17,803254 <_dtoa_r+0xa40>
  802b74:	00c01004 	movi	r3,64
  802b78:	1c47c83a 	sub	r3,r3,r17
  802b7c:	88bff804 	addi	r2,r17,-32
  802b80:	a8c6983a 	sll	r3,r21,r3
  802b84:	a084d83a 	srl	r2,r20,r2
  802b88:	1888b03a 	or	r4,r3,r2
  802b8c:	08094500 	call	809450 <__floatunsidf>
  802b90:	1011883a 	mov	r8,r2
  802b94:	00bf8434 	movhi	r2,65040
  802b98:	01000044 	movi	r4,1
  802b9c:	10d3883a 	add	r9,r2,r3
  802ba0:	8dbef344 	addi	r22,r17,-1075
  802ba4:	d9000815 	stw	r4,32(sp)
  802ba8:	003f6f06 	br	802968 <_dtoa_r+0x154>
  802bac:	d8001715 	stw	zero,92(sp)
  802bb0:	04400044 	movi	r17,1
  802bb4:	00bfffc4 	movi	r2,-1
  802bb8:	00c00044 	movi	r3,1
  802bbc:	d8800e15 	stw	r2,56(sp)
  802bc0:	d8002615 	stw	zero,152(sp)
  802bc4:	d8800f15 	stw	r2,60(sp)
  802bc8:	d8c00b15 	stw	r3,44(sp)
  802bcc:	1021883a 	mov	r16,r2
  802bd0:	d8801617 	ldw	r2,88(sp)
  802bd4:	10001115 	stw	zero,68(r2)
  802bd8:	d8801617 	ldw	r2,88(sp)
  802bdc:	11401117 	ldw	r5,68(r2)
  802be0:	1009883a 	mov	r4,r2
  802be4:	0805f5c0 	call	805f5c <_Balloc>
  802be8:	d8c01617 	ldw	r3,88(sp)
  802bec:	d8800515 	stw	r2,20(sp)
  802bf0:	18801015 	stw	r2,64(r3)
  802bf4:	00800384 	movi	r2,14
  802bf8:	14006836 	bltu	r2,r16,802d9c <_dtoa_r+0x588>
  802bfc:	8805003a 	cmpeq	r2,r17,zero
  802c00:	1000661e 	bne	r2,zero,802d9c <_dtoa_r+0x588>
  802c04:	d9000d17 	ldw	r4,52(sp)
  802c08:	0102300e 	bge	zero,r4,8034cc <_dtoa_r+0xcb8>
  802c0c:	208003cc 	andi	r2,r4,15
  802c10:	100490fa 	slli	r2,r2,3
  802c14:	2025d13a 	srai	r18,r4,4
  802c18:	00c02074 	movhi	r3,129
  802c1c:	18f29a04 	addi	r3,r3,-13720
  802c20:	10c5883a 	add	r2,r2,r3
  802c24:	90c0040c 	andi	r3,r18,16
  802c28:	14000017 	ldw	r16,0(r2)
  802c2c:	14400117 	ldw	r17,4(r2)
  802c30:	18036a1e 	bne	r3,zero,8039dc <_dtoa_r+0x11c8>
  802c34:	05800084 	movi	r22,2
  802c38:	90001026 	beq	r18,zero,802c7c <_dtoa_r+0x468>
  802c3c:	04c02074 	movhi	r19,129
  802c40:	9cf2cc04 	addi	r19,r19,-13520
  802c44:	9080004c 	andi	r2,r18,1
  802c48:	1005003a 	cmpeq	r2,r2,zero
  802c4c:	1000081e 	bne	r2,zero,802c70 <_dtoa_r+0x45c>
  802c50:	99800017 	ldw	r6,0(r19)
  802c54:	99c00117 	ldw	r7,4(r19)
  802c58:	880b883a 	mov	r5,r17
  802c5c:	8009883a 	mov	r4,r16
  802c60:	08089bc0 	call	8089bc <__muldf3>
  802c64:	1021883a 	mov	r16,r2
  802c68:	b5800044 	addi	r22,r22,1
  802c6c:	1823883a 	mov	r17,r3
  802c70:	9025d07a 	srai	r18,r18,1
  802c74:	9cc00204 	addi	r19,r19,8
  802c78:	903ff21e 	bne	r18,zero,802c44 <_dtoa_r+0x430>
  802c7c:	a80b883a 	mov	r5,r21
  802c80:	a009883a 	mov	r4,r20
  802c84:	880f883a 	mov	r7,r17
  802c88:	800d883a 	mov	r6,r16
  802c8c:	0808d800 	call	808d80 <__divdf3>
  802c90:	1029883a 	mov	r20,r2
  802c94:	182b883a 	mov	r21,r3
  802c98:	d8c00c17 	ldw	r3,48(sp)
  802c9c:	1805003a 	cmpeq	r2,r3,zero
  802ca0:	1000081e 	bne	r2,zero,802cc4 <_dtoa_r+0x4b0>
  802ca4:	0005883a 	mov	r2,zero
  802ca8:	00cffc34 	movhi	r3,16368
  802cac:	180f883a 	mov	r7,r3
  802cb0:	a009883a 	mov	r4,r20
  802cb4:	a80b883a 	mov	r5,r21
  802cb8:	100d883a 	mov	r6,r2
  802cbc:	08091f80 	call	8091f8 <__ltdf2>
  802cc0:	1003fe16 	blt	r2,zero,803cbc <_dtoa_r+0x14a8>
  802cc4:	b009883a 	mov	r4,r22
  802cc8:	08092800 	call	809280 <__floatsidf>
  802ccc:	180b883a 	mov	r5,r3
  802cd0:	1009883a 	mov	r4,r2
  802cd4:	a00d883a 	mov	r6,r20
  802cd8:	a80f883a 	mov	r7,r21
  802cdc:	08089bc0 	call	8089bc <__muldf3>
  802ce0:	0011883a 	mov	r8,zero
  802ce4:	02500734 	movhi	r9,16412
  802ce8:	1009883a 	mov	r4,r2
  802cec:	180b883a 	mov	r5,r3
  802cf0:	480f883a 	mov	r7,r9
  802cf4:	400d883a 	mov	r6,r8
  802cf8:	08089480 	call	808948 <__adddf3>
  802cfc:	d9000f17 	ldw	r4,60(sp)
  802d00:	102d883a 	mov	r22,r2
  802d04:	00bf3034 	movhi	r2,64704
  802d08:	18b9883a 	add	fp,r3,r2
  802d0c:	e02f883a 	mov	r23,fp
  802d10:	20028f1e 	bne	r4,zero,803750 <_dtoa_r+0xf3c>
  802d14:	0005883a 	mov	r2,zero
  802d18:	00d00534 	movhi	r3,16404
  802d1c:	a009883a 	mov	r4,r20
  802d20:	a80b883a 	mov	r5,r21
  802d24:	180f883a 	mov	r7,r3
  802d28:	100d883a 	mov	r6,r2
  802d2c:	08088c80 	call	8088c8 <__subdf3>
  802d30:	1009883a 	mov	r4,r2
  802d34:	e00f883a 	mov	r7,fp
  802d38:	180b883a 	mov	r5,r3
  802d3c:	b00d883a 	mov	r6,r22
  802d40:	1025883a 	mov	r18,r2
  802d44:	1827883a 	mov	r19,r3
  802d48:	08090e80 	call	8090e8 <__gtdf2>
  802d4c:	00834f16 	blt	zero,r2,803a8c <_dtoa_r+0x1278>
  802d50:	e0e0003c 	xorhi	r3,fp,32768
  802d54:	9009883a 	mov	r4,r18
  802d58:	980b883a 	mov	r5,r19
  802d5c:	180f883a 	mov	r7,r3
  802d60:	b00d883a 	mov	r6,r22
  802d64:	08091f80 	call	8091f8 <__ltdf2>
  802d68:	1000080e 	bge	r2,zero,802d8c <_dtoa_r+0x578>
  802d6c:	0027883a 	mov	r19,zero
  802d70:	0025883a 	mov	r18,zero
  802d74:	d8802617 	ldw	r2,152(sp)
  802d78:	df000517 	ldw	fp,20(sp)
  802d7c:	d8000615 	stw	zero,24(sp)
  802d80:	0084303a 	nor	r2,zero,r2
  802d84:	d8800d15 	stw	r2,52(sp)
  802d88:	00019b06 	br	8033f8 <_dtoa_r+0xbe4>
  802d8c:	d9801217 	ldw	r6,72(sp)
  802d90:	d8801317 	ldw	r2,76(sp)
  802d94:	3029883a 	mov	r20,r6
  802d98:	102b883a 	mov	r21,r2
  802d9c:	d8c00217 	ldw	r3,8(sp)
  802da0:	18008516 	blt	r3,zero,802fb8 <_dtoa_r+0x7a4>
  802da4:	d9000d17 	ldw	r4,52(sp)
  802da8:	00800384 	movi	r2,14
  802dac:	11008216 	blt	r2,r4,802fb8 <_dtoa_r+0x7a4>
  802db0:	200490fa 	slli	r2,r4,3
  802db4:	d9802617 	ldw	r6,152(sp)
  802db8:	00c02074 	movhi	r3,129
  802dbc:	18f29a04 	addi	r3,r3,-13720
  802dc0:	10c5883a 	add	r2,r2,r3
  802dc4:	14800017 	ldw	r18,0(r2)
  802dc8:	14c00117 	ldw	r19,4(r2)
  802dcc:	30031e16 	blt	r6,zero,803a48 <_dtoa_r+0x1234>
  802dd0:	d9000517 	ldw	r4,20(sp)
  802dd4:	d8c00f17 	ldw	r3,60(sp)
  802dd8:	a823883a 	mov	r17,r21
  802ddc:	a021883a 	mov	r16,r20
  802de0:	192b883a 	add	r21,r3,r4
  802de4:	2039883a 	mov	fp,r4
  802de8:	00000f06 	br	802e28 <_dtoa_r+0x614>
  802dec:	0005883a 	mov	r2,zero
  802df0:	00d00934 	movhi	r3,16420
  802df4:	5009883a 	mov	r4,r10
  802df8:	580b883a 	mov	r5,r11
  802dfc:	180f883a 	mov	r7,r3
  802e00:	100d883a 	mov	r6,r2
  802e04:	08089bc0 	call	8089bc <__muldf3>
  802e08:	180b883a 	mov	r5,r3
  802e0c:	000d883a 	mov	r6,zero
  802e10:	000f883a 	mov	r7,zero
  802e14:	1009883a 	mov	r4,r2
  802e18:	1021883a 	mov	r16,r2
  802e1c:	1823883a 	mov	r17,r3
  802e20:	08090600 	call	809060 <__nedf2>
  802e24:	10004526 	beq	r2,zero,802f3c <_dtoa_r+0x728>
  802e28:	900d883a 	mov	r6,r18
  802e2c:	980f883a 	mov	r7,r19
  802e30:	8009883a 	mov	r4,r16
  802e34:	880b883a 	mov	r5,r17
  802e38:	0808d800 	call	808d80 <__divdf3>
  802e3c:	180b883a 	mov	r5,r3
  802e40:	1009883a 	mov	r4,r2
  802e44:	08093780 	call	809378 <__fixdfsi>
  802e48:	1009883a 	mov	r4,r2
  802e4c:	1029883a 	mov	r20,r2
  802e50:	08092800 	call	809280 <__floatsidf>
  802e54:	180f883a 	mov	r7,r3
  802e58:	9009883a 	mov	r4,r18
  802e5c:	980b883a 	mov	r5,r19
  802e60:	100d883a 	mov	r6,r2
  802e64:	08089bc0 	call	8089bc <__muldf3>
  802e68:	180f883a 	mov	r7,r3
  802e6c:	880b883a 	mov	r5,r17
  802e70:	8009883a 	mov	r4,r16
  802e74:	100d883a 	mov	r6,r2
  802e78:	08088c80 	call	8088c8 <__subdf3>
  802e7c:	1015883a 	mov	r10,r2
  802e80:	a0800c04 	addi	r2,r20,48
  802e84:	e0800005 	stb	r2,0(fp)
  802e88:	e7000044 	addi	fp,fp,1
  802e8c:	1817883a 	mov	r11,r3
  802e90:	e57fd61e 	bne	fp,r21,802dec <_dtoa_r+0x5d8>
  802e94:	500d883a 	mov	r6,r10
  802e98:	180f883a 	mov	r7,r3
  802e9c:	5009883a 	mov	r4,r10
  802ea0:	180b883a 	mov	r5,r3
  802ea4:	08089480 	call	808948 <__adddf3>
  802ea8:	100d883a 	mov	r6,r2
  802eac:	9009883a 	mov	r4,r18
  802eb0:	980b883a 	mov	r5,r19
  802eb4:	180f883a 	mov	r7,r3
  802eb8:	1021883a 	mov	r16,r2
  802ebc:	1823883a 	mov	r17,r3
  802ec0:	08091f80 	call	8091f8 <__ltdf2>
  802ec4:	10000816 	blt	r2,zero,802ee8 <_dtoa_r+0x6d4>
  802ec8:	980b883a 	mov	r5,r19
  802ecc:	800d883a 	mov	r6,r16
  802ed0:	880f883a 	mov	r7,r17
  802ed4:	9009883a 	mov	r4,r18
  802ed8:	0808fd80 	call	808fd8 <__eqdf2>
  802edc:	1000171e 	bne	r2,zero,802f3c <_dtoa_r+0x728>
  802ee0:	a080004c 	andi	r2,r20,1
  802ee4:	10001526 	beq	r2,zero,802f3c <_dtoa_r+0x728>
  802ee8:	d8800d17 	ldw	r2,52(sp)
  802eec:	d8800415 	stw	r2,16(sp)
  802ef0:	e009883a 	mov	r4,fp
  802ef4:	213fffc4 	addi	r4,r4,-1
  802ef8:	20c00007 	ldb	r3,0(r4)
  802efc:	00800e44 	movi	r2,57
  802f00:	1880081e 	bne	r3,r2,802f24 <_dtoa_r+0x710>
  802f04:	d8800517 	ldw	r2,20(sp)
  802f08:	113ffa1e 	bne	r2,r4,802ef4 <_dtoa_r+0x6e0>
  802f0c:	d8c00417 	ldw	r3,16(sp)
  802f10:	d9800517 	ldw	r6,20(sp)
  802f14:	00800c04 	movi	r2,48
  802f18:	18c00044 	addi	r3,r3,1
  802f1c:	d8c00415 	stw	r3,16(sp)
  802f20:	30800005 	stb	r2,0(r6)
  802f24:	20800003 	ldbu	r2,0(r4)
  802f28:	d8c00417 	ldw	r3,16(sp)
  802f2c:	27000044 	addi	fp,r4,1
  802f30:	10800044 	addi	r2,r2,1
  802f34:	d8c00d15 	stw	r3,52(sp)
  802f38:	20800005 	stb	r2,0(r4)
  802f3c:	d9001617 	ldw	r4,88(sp)
  802f40:	d9400717 	ldw	r5,28(sp)
  802f44:	08059dc0 	call	8059dc <_Bfree>
  802f48:	e0000005 	stb	zero,0(fp)
  802f4c:	d9800d17 	ldw	r6,52(sp)
  802f50:	d8c02717 	ldw	r3,156(sp)
  802f54:	d9002917 	ldw	r4,164(sp)
  802f58:	30800044 	addi	r2,r6,1
  802f5c:	18800015 	stw	r2,0(r3)
  802f60:	20029c26 	beq	r4,zero,8039d4 <_dtoa_r+0x11c0>
  802f64:	d8c00517 	ldw	r3,20(sp)
  802f68:	27000015 	stw	fp,0(r4)
  802f6c:	003e5d06 	br	8028e4 <_dtoa_r+0xd0>
  802f70:	d9800d17 	ldw	r6,52(sp)
  802f74:	00c02074 	movhi	r3,129
  802f78:	18f29a04 	addi	r3,r3,-13720
  802f7c:	d9001217 	ldw	r4,72(sp)
  802f80:	300490fa 	slli	r2,r6,3
  802f84:	d9401317 	ldw	r5,76(sp)
  802f88:	10c5883a 	add	r2,r2,r3
  802f8c:	12000017 	ldw	r8,0(r2)
  802f90:	12400117 	ldw	r9,4(r2)
  802f94:	400d883a 	mov	r6,r8
  802f98:	480f883a 	mov	r7,r9
  802f9c:	08091f80 	call	8091f8 <__ltdf2>
  802fa0:	1000030e 	bge	r2,zero,802fb0 <_dtoa_r+0x79c>
  802fa4:	d8800d17 	ldw	r2,52(sp)
  802fa8:	10bfffc4 	addi	r2,r2,-1
  802fac:	d8800d15 	stw	r2,52(sp)
  802fb0:	d8000c15 	stw	zero,48(sp)
  802fb4:	003ea806 	br	802a58 <_dtoa_r+0x244>
  802fb8:	d9000b17 	ldw	r4,44(sp)
  802fbc:	202cc03a 	cmpne	r22,r4,zero
  802fc0:	b000c71e 	bne	r22,zero,8032e0 <_dtoa_r+0xacc>
  802fc4:	dc001117 	ldw	r16,68(sp)
  802fc8:	dc801017 	ldw	r18,64(sp)
  802fcc:	0027883a 	mov	r19,zero
  802fd0:	04000b0e 	bge	zero,r16,803000 <_dtoa_r+0x7ec>
  802fd4:	d8c00a17 	ldw	r3,40(sp)
  802fd8:	00c0090e 	bge	zero,r3,803000 <_dtoa_r+0x7ec>
  802fdc:	8005883a 	mov	r2,r16
  802fe0:	1c011316 	blt	r3,r16,803430 <_dtoa_r+0xc1c>
  802fe4:	d9000a17 	ldw	r4,40(sp)
  802fe8:	d9801117 	ldw	r6,68(sp)
  802fec:	80a1c83a 	sub	r16,r16,r2
  802ff0:	2089c83a 	sub	r4,r4,r2
  802ff4:	308dc83a 	sub	r6,r6,r2
  802ff8:	d9000a15 	stw	r4,40(sp)
  802ffc:	d9801115 	stw	r6,68(sp)
  803000:	d8801017 	ldw	r2,64(sp)
  803004:	0080150e 	bge	zero,r2,80305c <_dtoa_r+0x848>
  803008:	d8c00b17 	ldw	r3,44(sp)
  80300c:	1805003a 	cmpeq	r2,r3,zero
  803010:	1001c91e 	bne	r2,zero,803738 <_dtoa_r+0xf24>
  803014:	04800e0e 	bge	zero,r18,803050 <_dtoa_r+0x83c>
  803018:	d9001617 	ldw	r4,88(sp)
  80301c:	980b883a 	mov	r5,r19
  803020:	900d883a 	mov	r6,r18
  803024:	08068280 	call	806828 <__pow5mult>
  803028:	d9001617 	ldw	r4,88(sp)
  80302c:	d9800717 	ldw	r6,28(sp)
  803030:	100b883a 	mov	r5,r2
  803034:	1027883a 	mov	r19,r2
  803038:	080646c0 	call	80646c <__multiply>
  80303c:	d9001617 	ldw	r4,88(sp)
  803040:	d9400717 	ldw	r5,28(sp)
  803044:	1023883a 	mov	r17,r2
  803048:	08059dc0 	call	8059dc <_Bfree>
  80304c:	dc400715 	stw	r17,28(sp)
  803050:	d9001017 	ldw	r4,64(sp)
  803054:	248dc83a 	sub	r6,r4,r18
  803058:	30010e1e 	bne	r6,zero,803494 <_dtoa_r+0xc80>
  80305c:	d9001617 	ldw	r4,88(sp)
  803060:	04400044 	movi	r17,1
  803064:	880b883a 	mov	r5,r17
  803068:	08066c00 	call	8066c0 <__i2b>
  80306c:	d9800917 	ldw	r6,36(sp)
  803070:	1025883a 	mov	r18,r2
  803074:	0180040e 	bge	zero,r6,803088 <_dtoa_r+0x874>
  803078:	d9001617 	ldw	r4,88(sp)
  80307c:	100b883a 	mov	r5,r2
  803080:	08068280 	call	806828 <__pow5mult>
  803084:	1025883a 	mov	r18,r2
  803088:	d8801717 	ldw	r2,92(sp)
  80308c:	8880f30e 	bge	r17,r2,80345c <_dtoa_r+0xc48>
  803090:	0023883a 	mov	r17,zero
  803094:	d9800917 	ldw	r6,36(sp)
  803098:	30019e1e 	bne	r6,zero,803714 <_dtoa_r+0xf00>
  80309c:	00c00044 	movi	r3,1
  8030a0:	d9000a17 	ldw	r4,40(sp)
  8030a4:	20c5883a 	add	r2,r4,r3
  8030a8:	10c007cc 	andi	r3,r2,31
  8030ac:	1800841e 	bne	r3,zero,8032c0 <_dtoa_r+0xaac>
  8030b0:	00800704 	movi	r2,28
  8030b4:	d9000a17 	ldw	r4,40(sp)
  8030b8:	d9801117 	ldw	r6,68(sp)
  8030bc:	80a1883a 	add	r16,r16,r2
  8030c0:	2089883a 	add	r4,r4,r2
  8030c4:	308d883a 	add	r6,r6,r2
  8030c8:	d9000a15 	stw	r4,40(sp)
  8030cc:	d9801115 	stw	r6,68(sp)
  8030d0:	d8801117 	ldw	r2,68(sp)
  8030d4:	0080050e 	bge	zero,r2,8030ec <_dtoa_r+0x8d8>
  8030d8:	d9400717 	ldw	r5,28(sp)
  8030dc:	d9001617 	ldw	r4,88(sp)
  8030e0:	100d883a 	mov	r6,r2
  8030e4:	08063200 	call	806320 <__lshift>
  8030e8:	d8800715 	stw	r2,28(sp)
  8030ec:	d8c00a17 	ldw	r3,40(sp)
  8030f0:	00c0050e 	bge	zero,r3,803108 <_dtoa_r+0x8f4>
  8030f4:	d9001617 	ldw	r4,88(sp)
  8030f8:	900b883a 	mov	r5,r18
  8030fc:	180d883a 	mov	r6,r3
  803100:	08063200 	call	806320 <__lshift>
  803104:	1025883a 	mov	r18,r2
  803108:	d9000c17 	ldw	r4,48(sp)
  80310c:	2005003a 	cmpeq	r2,r4,zero
  803110:	10016f26 	beq	r2,zero,8036d0 <_dtoa_r+0xebc>
  803114:	d9000f17 	ldw	r4,60(sp)
  803118:	0102170e 	bge	zero,r4,803978 <_dtoa_r+0x1164>
  80311c:	d9800b17 	ldw	r6,44(sp)
  803120:	3005003a 	cmpeq	r2,r6,zero
  803124:	1000881e 	bne	r2,zero,803348 <_dtoa_r+0xb34>
  803128:	0400050e 	bge	zero,r16,803140 <_dtoa_r+0x92c>
  80312c:	d9001617 	ldw	r4,88(sp)
  803130:	980b883a 	mov	r5,r19
  803134:	800d883a 	mov	r6,r16
  803138:	08063200 	call	806320 <__lshift>
  80313c:	1027883a 	mov	r19,r2
  803140:	8804c03a 	cmpne	r2,r17,zero
  803144:	1002541e 	bne	r2,zero,803a98 <_dtoa_r+0x1284>
  803148:	980b883a 	mov	r5,r19
  80314c:	dd800517 	ldw	r22,20(sp)
  803150:	dcc00615 	stw	r19,24(sp)
  803154:	a700004c 	andi	fp,r20,1
  803158:	2827883a 	mov	r19,r5
  80315c:	d9000717 	ldw	r4,28(sp)
  803160:	900b883a 	mov	r5,r18
  803164:	08025d00 	call	8025d0 <quorem>
  803168:	d9000717 	ldw	r4,28(sp)
  80316c:	d9400617 	ldw	r5,24(sp)
  803170:	1023883a 	mov	r17,r2
  803174:	8dc00c04 	addi	r23,r17,48
  803178:	0805b380 	call	805b38 <__mcmp>
  80317c:	d9001617 	ldw	r4,88(sp)
  803180:	900b883a 	mov	r5,r18
  803184:	980d883a 	mov	r6,r19
  803188:	1029883a 	mov	r20,r2
  80318c:	08061940 	call	806194 <__mdiff>
  803190:	102b883a 	mov	r21,r2
  803194:	10800317 	ldw	r2,12(r2)
  803198:	1001281e 	bne	r2,zero,80363c <_dtoa_r+0xe28>
  80319c:	d9000717 	ldw	r4,28(sp)
  8031a0:	a80b883a 	mov	r5,r21
  8031a4:	0805b380 	call	805b38 <__mcmp>
  8031a8:	d9001617 	ldw	r4,88(sp)
  8031ac:	1021883a 	mov	r16,r2
  8031b0:	a80b883a 	mov	r5,r21
  8031b4:	08059dc0 	call	8059dc <_Bfree>
  8031b8:	8000041e 	bne	r16,zero,8031cc <_dtoa_r+0x9b8>
  8031bc:	d8801717 	ldw	r2,92(sp)
  8031c0:	1000021e 	bne	r2,zero,8031cc <_dtoa_r+0x9b8>
  8031c4:	e004c03a 	cmpne	r2,fp,zero
  8031c8:	10011726 	beq	r2,zero,803628 <_dtoa_r+0xe14>
  8031cc:	a0010616 	blt	r20,zero,8035e8 <_dtoa_r+0xdd4>
  8031d0:	a000041e 	bne	r20,zero,8031e4 <_dtoa_r+0x9d0>
  8031d4:	d8c01717 	ldw	r3,92(sp)
  8031d8:	1800021e 	bne	r3,zero,8031e4 <_dtoa_r+0x9d0>
  8031dc:	e004c03a 	cmpne	r2,fp,zero
  8031e0:	10010126 	beq	r2,zero,8035e8 <_dtoa_r+0xdd4>
  8031e4:	04023d16 	blt	zero,r16,803adc <_dtoa_r+0x12c8>
  8031e8:	b5c00005 	stb	r23,0(r22)
  8031ec:	d9800517 	ldw	r6,20(sp)
  8031f0:	d9000f17 	ldw	r4,60(sp)
  8031f4:	b5800044 	addi	r22,r22,1
  8031f8:	3105883a 	add	r2,r6,r4
  8031fc:	b0806526 	beq	r22,r2,803394 <_dtoa_r+0xb80>
  803200:	d9400717 	ldw	r5,28(sp)
  803204:	d9001617 	ldw	r4,88(sp)
  803208:	01800284 	movi	r6,10
  80320c:	000f883a 	mov	r7,zero
  803210:	08066fc0 	call	8066fc <__multadd>
  803214:	d8800715 	stw	r2,28(sp)
  803218:	d8800617 	ldw	r2,24(sp)
  80321c:	14c10c26 	beq	r2,r19,803650 <_dtoa_r+0xe3c>
  803220:	d9400617 	ldw	r5,24(sp)
  803224:	d9001617 	ldw	r4,88(sp)
  803228:	01800284 	movi	r6,10
  80322c:	000f883a 	mov	r7,zero
  803230:	08066fc0 	call	8066fc <__multadd>
  803234:	d9001617 	ldw	r4,88(sp)
  803238:	980b883a 	mov	r5,r19
  80323c:	01800284 	movi	r6,10
  803240:	000f883a 	mov	r7,zero
  803244:	d8800615 	stw	r2,24(sp)
  803248:	08066fc0 	call	8066fc <__multadd>
  80324c:	1027883a 	mov	r19,r2
  803250:	003fc206 	br	80315c <_dtoa_r+0x948>
  803254:	2445c83a 	sub	r2,r4,r17
  803258:	a088983a 	sll	r4,r20,r2
  80325c:	003e4b06 	br	802b8c <_dtoa_r+0x378>
  803260:	01bfffc4 	movi	r6,-1
  803264:	00800044 	movi	r2,1
  803268:	d9800e15 	stw	r6,56(sp)
  80326c:	d9800f15 	stw	r6,60(sp)
  803270:	d8800b15 	stw	r2,44(sp)
  803274:	d8c01617 	ldw	r3,88(sp)
  803278:	008005c4 	movi	r2,23
  80327c:	18001115 	stw	zero,68(r3)
  803280:	1580082e 	bgeu	r2,r22,8032a4 <_dtoa_r+0xa90>
  803284:	00c00104 	movi	r3,4
  803288:	0009883a 	mov	r4,zero
  80328c:	18c7883a 	add	r3,r3,r3
  803290:	18800504 	addi	r2,r3,20
  803294:	21000044 	addi	r4,r4,1
  803298:	b0bffc2e 	bgeu	r22,r2,80328c <_dtoa_r+0xa78>
  80329c:	d9801617 	ldw	r6,88(sp)
  8032a0:	31001115 	stw	r4,68(r6)
  8032a4:	dc000f17 	ldw	r16,60(sp)
  8032a8:	003e4b06 	br	802bd8 <_dtoa_r+0x3c4>
  8032ac:	d9801717 	ldw	r6,92(sp)
  8032b0:	0023883a 	mov	r17,zero
  8032b4:	31bfff04 	addi	r6,r6,-4
  8032b8:	d9801715 	stw	r6,92(sp)
  8032bc:	003df806 	br	802aa0 <_dtoa_r+0x28c>
  8032c0:	00800804 	movi	r2,32
  8032c4:	10c9c83a 	sub	r4,r2,r3
  8032c8:	00c00104 	movi	r3,4
  8032cc:	19005a16 	blt	r3,r4,803438 <_dtoa_r+0xc24>
  8032d0:	008000c4 	movi	r2,3
  8032d4:	113f7e16 	blt	r2,r4,8030d0 <_dtoa_r+0x8bc>
  8032d8:	20800704 	addi	r2,r4,28
  8032dc:	003f7506 	br	8030b4 <_dtoa_r+0x8a0>
  8032e0:	d9801717 	ldw	r6,92(sp)
  8032e4:	00800044 	movi	r2,1
  8032e8:	1180a10e 	bge	r2,r6,803570 <_dtoa_r+0xd5c>
  8032ec:	d9800f17 	ldw	r6,60(sp)
  8032f0:	d8c01017 	ldw	r3,64(sp)
  8032f4:	30bfffc4 	addi	r2,r6,-1
  8032f8:	1881c616 	blt	r3,r2,803a14 <_dtoa_r+0x1200>
  8032fc:	18a5c83a 	sub	r18,r3,r2
  803300:	d8800f17 	ldw	r2,60(sp)
  803304:	10026216 	blt	r2,zero,803c90 <_dtoa_r+0x147c>
  803308:	dc001117 	ldw	r16,68(sp)
  80330c:	1007883a 	mov	r3,r2
  803310:	d9800a17 	ldw	r6,40(sp)
  803314:	d8801117 	ldw	r2,68(sp)
  803318:	d9001617 	ldw	r4,88(sp)
  80331c:	30cd883a 	add	r6,r6,r3
  803320:	10c5883a 	add	r2,r2,r3
  803324:	01400044 	movi	r5,1
  803328:	d9800a15 	stw	r6,40(sp)
  80332c:	d8801115 	stw	r2,68(sp)
  803330:	08066c00 	call	8066c0 <__i2b>
  803334:	1027883a 	mov	r19,r2
  803338:	003f2506 	br	802fd0 <_dtoa_r+0x7bc>
  80333c:	00c02074 	movhi	r3,129
  803340:	18f27c04 	addi	r3,r3,-13840
  803344:	003d6706 	br	8028e4 <_dtoa_r+0xd0>
  803348:	dd800517 	ldw	r22,20(sp)
  80334c:	04000044 	movi	r16,1
  803350:	00000706 	br	803370 <_dtoa_r+0xb5c>
  803354:	d9400717 	ldw	r5,28(sp)
  803358:	d9001617 	ldw	r4,88(sp)
  80335c:	01800284 	movi	r6,10
  803360:	000f883a 	mov	r7,zero
  803364:	08066fc0 	call	8066fc <__multadd>
  803368:	d8800715 	stw	r2,28(sp)
  80336c:	84000044 	addi	r16,r16,1
  803370:	d9000717 	ldw	r4,28(sp)
  803374:	900b883a 	mov	r5,r18
  803378:	08025d00 	call	8025d0 <quorem>
  80337c:	15c00c04 	addi	r23,r2,48
  803380:	b5c00005 	stb	r23,0(r22)
  803384:	d8c00f17 	ldw	r3,60(sp)
  803388:	b5800044 	addi	r22,r22,1
  80338c:	80fff116 	blt	r16,r3,803354 <_dtoa_r+0xb40>
  803390:	d8000615 	stw	zero,24(sp)
  803394:	d9400717 	ldw	r5,28(sp)
  803398:	d9001617 	ldw	r4,88(sp)
  80339c:	01800044 	movi	r6,1
  8033a0:	08063200 	call	806320 <__lshift>
  8033a4:	1009883a 	mov	r4,r2
  8033a8:	900b883a 	mov	r5,r18
  8033ac:	d8800715 	stw	r2,28(sp)
  8033b0:	0805b380 	call	805b38 <__mcmp>
  8033b4:	00803c0e 	bge	zero,r2,8034a8 <_dtoa_r+0xc94>
  8033b8:	b009883a 	mov	r4,r22
  8033bc:	213fffc4 	addi	r4,r4,-1
  8033c0:	21400003 	ldbu	r5,0(r4)
  8033c4:	00800e44 	movi	r2,57
  8033c8:	28c03fcc 	andi	r3,r5,255
  8033cc:	18c0201c 	xori	r3,r3,128
  8033d0:	18ffe004 	addi	r3,r3,-128
  8033d4:	1881981e 	bne	r3,r2,803a38 <_dtoa_r+0x1224>
  8033d8:	d9800517 	ldw	r6,20(sp)
  8033dc:	21bff71e 	bne	r4,r6,8033bc <_dtoa_r+0xba8>
  8033e0:	d8800d17 	ldw	r2,52(sp)
  8033e4:	37000044 	addi	fp,r6,1
  8033e8:	10800044 	addi	r2,r2,1
  8033ec:	d8800d15 	stw	r2,52(sp)
  8033f0:	00800c44 	movi	r2,49
  8033f4:	30800005 	stb	r2,0(r6)
  8033f8:	d9001617 	ldw	r4,88(sp)
  8033fc:	900b883a 	mov	r5,r18
  803400:	08059dc0 	call	8059dc <_Bfree>
  803404:	983ecd26 	beq	r19,zero,802f3c <_dtoa_r+0x728>
  803408:	d8c00617 	ldw	r3,24(sp)
  80340c:	18000426 	beq	r3,zero,803420 <_dtoa_r+0xc0c>
  803410:	1cc00326 	beq	r3,r19,803420 <_dtoa_r+0xc0c>
  803414:	d9001617 	ldw	r4,88(sp)
  803418:	180b883a 	mov	r5,r3
  80341c:	08059dc0 	call	8059dc <_Bfree>
  803420:	d9001617 	ldw	r4,88(sp)
  803424:	980b883a 	mov	r5,r19
  803428:	08059dc0 	call	8059dc <_Bfree>
  80342c:	003ec306 	br	802f3c <_dtoa_r+0x728>
  803430:	1805883a 	mov	r2,r3
  803434:	003eeb06 	br	802fe4 <_dtoa_r+0x7d0>
  803438:	d9800a17 	ldw	r6,40(sp)
  80343c:	d8c01117 	ldw	r3,68(sp)
  803440:	20bfff04 	addi	r2,r4,-4
  803444:	308d883a 	add	r6,r6,r2
  803448:	1887883a 	add	r3,r3,r2
  80344c:	80a1883a 	add	r16,r16,r2
  803450:	d9800a15 	stw	r6,40(sp)
  803454:	d8c01115 	stw	r3,68(sp)
  803458:	003f1d06 	br	8030d0 <_dtoa_r+0x8bc>
  80345c:	a03f0c1e 	bne	r20,zero,803090 <_dtoa_r+0x87c>
  803460:	00800434 	movhi	r2,16
  803464:	10bfffc4 	addi	r2,r2,-1
  803468:	a884703a 	and	r2,r21,r2
  80346c:	103f081e 	bne	r2,zero,803090 <_dtoa_r+0x87c>
  803470:	a89ffc2c 	andhi	r2,r21,32752
  803474:	103f0626 	beq	r2,zero,803090 <_dtoa_r+0x87c>
  803478:	d8c01117 	ldw	r3,68(sp)
  80347c:	d9000a17 	ldw	r4,40(sp)
  803480:	18c00044 	addi	r3,r3,1
  803484:	21000044 	addi	r4,r4,1
  803488:	d8c01115 	stw	r3,68(sp)
  80348c:	d9000a15 	stw	r4,40(sp)
  803490:	003f0006 	br	803094 <_dtoa_r+0x880>
  803494:	d9400717 	ldw	r5,28(sp)
  803498:	d9001617 	ldw	r4,88(sp)
  80349c:	08068280 	call	806828 <__pow5mult>
  8034a0:	d8800715 	stw	r2,28(sp)
  8034a4:	003eed06 	br	80305c <_dtoa_r+0x848>
  8034a8:	1000021e 	bne	r2,zero,8034b4 <_dtoa_r+0xca0>
  8034ac:	b880004c 	andi	r2,r23,1
  8034b0:	103fc11e 	bne	r2,zero,8033b8 <_dtoa_r+0xba4>
  8034b4:	b5bfffc4 	addi	r22,r22,-1
  8034b8:	b0c00007 	ldb	r3,0(r22)
  8034bc:	00800c04 	movi	r2,48
  8034c0:	18bffc26 	beq	r3,r2,8034b4 <_dtoa_r+0xca0>
  8034c4:	b7000044 	addi	fp,r22,1
  8034c8:	003fcb06 	br	8033f8 <_dtoa_r+0xbe4>
  8034cc:	d9800d17 	ldw	r6,52(sp)
  8034d0:	018fc83a 	sub	r7,zero,r6
  8034d4:	3801f726 	beq	r7,zero,803cb4 <_dtoa_r+0x14a0>
  8034d8:	398003cc 	andi	r6,r7,15
  8034dc:	300c90fa 	slli	r6,r6,3
  8034e0:	01402074 	movhi	r5,129
  8034e4:	29729a04 	addi	r5,r5,-13720
  8034e8:	d9001217 	ldw	r4,72(sp)
  8034ec:	314d883a 	add	r6,r6,r5
  8034f0:	30c00117 	ldw	r3,4(r6)
  8034f4:	30800017 	ldw	r2,0(r6)
  8034f8:	d9401317 	ldw	r5,76(sp)
  8034fc:	3821d13a 	srai	r16,r7,4
  803500:	100d883a 	mov	r6,r2
  803504:	180f883a 	mov	r7,r3
  803508:	08089bc0 	call	8089bc <__muldf3>
  80350c:	1011883a 	mov	r8,r2
  803510:	1813883a 	mov	r9,r3
  803514:	1029883a 	mov	r20,r2
  803518:	182b883a 	mov	r21,r3
  80351c:	8001e526 	beq	r16,zero,803cb4 <_dtoa_r+0x14a0>
  803520:	05800084 	movi	r22,2
  803524:	04402074 	movhi	r17,129
  803528:	8c72cc04 	addi	r17,r17,-13520
  80352c:	8080004c 	andi	r2,r16,1
  803530:	1005003a 	cmpeq	r2,r2,zero
  803534:	1000081e 	bne	r2,zero,803558 <_dtoa_r+0xd44>
  803538:	89800017 	ldw	r6,0(r17)
  80353c:	89c00117 	ldw	r7,4(r17)
  803540:	480b883a 	mov	r5,r9
  803544:	4009883a 	mov	r4,r8
  803548:	08089bc0 	call	8089bc <__muldf3>
  80354c:	1011883a 	mov	r8,r2
  803550:	b5800044 	addi	r22,r22,1
  803554:	1813883a 	mov	r9,r3
  803558:	8021d07a 	srai	r16,r16,1
  80355c:	8c400204 	addi	r17,r17,8
  803560:	803ff21e 	bne	r16,zero,80352c <_dtoa_r+0xd18>
  803564:	4029883a 	mov	r20,r8
  803568:	482b883a 	mov	r21,r9
  80356c:	003dca06 	br	802c98 <_dtoa_r+0x484>
  803570:	d9000817 	ldw	r4,32(sp)
  803574:	2005003a 	cmpeq	r2,r4,zero
  803578:	1001f61e 	bne	r2,zero,803d54 <_dtoa_r+0x1540>
  80357c:	dc001117 	ldw	r16,68(sp)
  803580:	dc801017 	ldw	r18,64(sp)
  803584:	18c10cc4 	addi	r3,r3,1075
  803588:	003f6106 	br	803310 <_dtoa_r+0xafc>
  80358c:	d8000b15 	stw	zero,44(sp)
  803590:	d9802617 	ldw	r6,152(sp)
  803594:	d8c00d17 	ldw	r3,52(sp)
  803598:	30800044 	addi	r2,r6,1
  80359c:	18ad883a 	add	r22,r3,r2
  8035a0:	b13fffc4 	addi	r4,r22,-1
  8035a4:	d9000e15 	stw	r4,56(sp)
  8035a8:	0581f60e 	bge	zero,r22,803d84 <_dtoa_r+0x1570>
  8035ac:	dd800f15 	stw	r22,60(sp)
  8035b0:	003f3006 	br	803274 <_dtoa_r+0xa60>
  8035b4:	d8000b15 	stw	zero,44(sp)
  8035b8:	d9002617 	ldw	r4,152(sp)
  8035bc:	0101eb0e 	bge	zero,r4,803d6c <_dtoa_r+0x1558>
  8035c0:	202d883a 	mov	r22,r4
  8035c4:	d9000e15 	stw	r4,56(sp)
  8035c8:	d9000f15 	stw	r4,60(sp)
  8035cc:	003f2906 	br	803274 <_dtoa_r+0xa60>
  8035d0:	01800044 	movi	r6,1
  8035d4:	d9800b15 	stw	r6,44(sp)
  8035d8:	003ff706 	br	8035b8 <_dtoa_r+0xda4>
  8035dc:	01000044 	movi	r4,1
  8035e0:	d9000b15 	stw	r4,44(sp)
  8035e4:	003fea06 	br	803590 <_dtoa_r+0xd7c>
  8035e8:	04000c0e 	bge	zero,r16,80361c <_dtoa_r+0xe08>
  8035ec:	d9400717 	ldw	r5,28(sp)
  8035f0:	d9001617 	ldw	r4,88(sp)
  8035f4:	01800044 	movi	r6,1
  8035f8:	08063200 	call	806320 <__lshift>
  8035fc:	1009883a 	mov	r4,r2
  803600:	900b883a 	mov	r5,r18
  803604:	d8800715 	stw	r2,28(sp)
  803608:	0805b380 	call	805b38 <__mcmp>
  80360c:	0081e00e 	bge	zero,r2,803d90 <_dtoa_r+0x157c>
  803610:	bdc00044 	addi	r23,r23,1
  803614:	00800e84 	movi	r2,58
  803618:	b881a226 	beq	r23,r2,803ca4 <_dtoa_r+0x1490>
  80361c:	b7000044 	addi	fp,r22,1
  803620:	b5c00005 	stb	r23,0(r22)
  803624:	003f7406 	br	8033f8 <_dtoa_r+0xbe4>
  803628:	00800e44 	movi	r2,57
  80362c:	b8819d26 	beq	r23,r2,803ca4 <_dtoa_r+0x1490>
  803630:	053ffa0e 	bge	zero,r20,80361c <_dtoa_r+0xe08>
  803634:	8dc00c44 	addi	r23,r17,49
  803638:	003ff806 	br	80361c <_dtoa_r+0xe08>
  80363c:	d9001617 	ldw	r4,88(sp)
  803640:	a80b883a 	mov	r5,r21
  803644:	04000044 	movi	r16,1
  803648:	08059dc0 	call	8059dc <_Bfree>
  80364c:	003edf06 	br	8031cc <_dtoa_r+0x9b8>
  803650:	d9001617 	ldw	r4,88(sp)
  803654:	980b883a 	mov	r5,r19
  803658:	01800284 	movi	r6,10
  80365c:	000f883a 	mov	r7,zero
  803660:	08066fc0 	call	8066fc <__multadd>
  803664:	1027883a 	mov	r19,r2
  803668:	d8800615 	stw	r2,24(sp)
  80366c:	003ebb06 	br	80315c <_dtoa_r+0x948>
  803670:	d9801117 	ldw	r6,68(sp)
  803674:	d8800d17 	ldw	r2,52(sp)
  803678:	d8000915 	stw	zero,36(sp)
  80367c:	308dc83a 	sub	r6,r6,r2
  803680:	0087c83a 	sub	r3,zero,r2
  803684:	d9801115 	stw	r6,68(sp)
  803688:	d8c01015 	stw	r3,64(sp)
  80368c:	003cfe06 	br	802a88 <_dtoa_r+0x274>
  803690:	018dc83a 	sub	r6,zero,r6
  803694:	d9801115 	stw	r6,68(sp)
  803698:	d8000a15 	stw	zero,40(sp)
  80369c:	003cf306 	br	802a6c <_dtoa_r+0x258>
  8036a0:	d9000d17 	ldw	r4,52(sp)
  8036a4:	08092800 	call	809280 <__floatsidf>
  8036a8:	880b883a 	mov	r5,r17
  8036ac:	8009883a 	mov	r4,r16
  8036b0:	180f883a 	mov	r7,r3
  8036b4:	100d883a 	mov	r6,r2
  8036b8:	08090600 	call	809060 <__nedf2>
  8036bc:	103ce126 	beq	r2,zero,802a44 <_dtoa_r+0x230>
  8036c0:	d9800d17 	ldw	r6,52(sp)
  8036c4:	31bfffc4 	addi	r6,r6,-1
  8036c8:	d9800d15 	stw	r6,52(sp)
  8036cc:	003cdd06 	br	802a44 <_dtoa_r+0x230>
  8036d0:	d9000717 	ldw	r4,28(sp)
  8036d4:	900b883a 	mov	r5,r18
  8036d8:	0805b380 	call	805b38 <__mcmp>
  8036dc:	103e8d0e 	bge	r2,zero,803114 <_dtoa_r+0x900>
  8036e0:	d9400717 	ldw	r5,28(sp)
  8036e4:	d9001617 	ldw	r4,88(sp)
  8036e8:	01800284 	movi	r6,10
  8036ec:	000f883a 	mov	r7,zero
  8036f0:	08066fc0 	call	8066fc <__multadd>
  8036f4:	d9800d17 	ldw	r6,52(sp)
  8036f8:	d8800715 	stw	r2,28(sp)
  8036fc:	31bfffc4 	addi	r6,r6,-1
  803700:	d9800d15 	stw	r6,52(sp)
  803704:	b001a71e 	bne	r22,zero,803da4 <_dtoa_r+0x1590>
  803708:	d8800e17 	ldw	r2,56(sp)
  80370c:	d8800f15 	stw	r2,60(sp)
  803710:	003e8006 	br	803114 <_dtoa_r+0x900>
  803714:	90800417 	ldw	r2,16(r18)
  803718:	1085883a 	add	r2,r2,r2
  80371c:	1085883a 	add	r2,r2,r2
  803720:	1485883a 	add	r2,r2,r18
  803724:	11000417 	ldw	r4,16(r2)
  803728:	0805a040 	call	805a04 <__hi0bits>
  80372c:	00c00804 	movi	r3,32
  803730:	1887c83a 	sub	r3,r3,r2
  803734:	003e5a06 	br	8030a0 <_dtoa_r+0x88c>
  803738:	d9400717 	ldw	r5,28(sp)
  80373c:	d9801017 	ldw	r6,64(sp)
  803740:	d9001617 	ldw	r4,88(sp)
  803744:	08068280 	call	806828 <__pow5mult>
  803748:	d8800715 	stw	r2,28(sp)
  80374c:	003e4306 	br	80305c <_dtoa_r+0x848>
  803750:	d9800f17 	ldw	r6,60(sp)
  803754:	d8800d17 	ldw	r2,52(sp)
  803758:	d9800315 	stw	r6,12(sp)
  80375c:	d8800415 	stw	r2,16(sp)
  803760:	d8c00b17 	ldw	r3,44(sp)
  803764:	1805003a 	cmpeq	r2,r3,zero
  803768:	1000e21e 	bne	r2,zero,803af4 <_dtoa_r+0x12e0>
  80376c:	d9000317 	ldw	r4,12(sp)
  803770:	0005883a 	mov	r2,zero
  803774:	00cff834 	movhi	r3,16352
  803778:	200c90fa 	slli	r6,r4,3
  80377c:	01002074 	movhi	r4,129
  803780:	21329a04 	addi	r4,r4,-13720
  803784:	180b883a 	mov	r5,r3
  803788:	310d883a 	add	r6,r6,r4
  80378c:	327fff17 	ldw	r9,-4(r6)
  803790:	323ffe17 	ldw	r8,-8(r6)
  803794:	1009883a 	mov	r4,r2
  803798:	480f883a 	mov	r7,r9
  80379c:	400d883a 	mov	r6,r8
  8037a0:	0808d800 	call	808d80 <__divdf3>
  8037a4:	180b883a 	mov	r5,r3
  8037a8:	b00d883a 	mov	r6,r22
  8037ac:	b80f883a 	mov	r7,r23
  8037b0:	1009883a 	mov	r4,r2
  8037b4:	08088c80 	call	8088c8 <__subdf3>
  8037b8:	a80b883a 	mov	r5,r21
  8037bc:	a009883a 	mov	r4,r20
  8037c0:	d8c01915 	stw	r3,100(sp)
  8037c4:	d8801815 	stw	r2,96(sp)
  8037c8:	08093780 	call	809378 <__fixdfsi>
  8037cc:	1009883a 	mov	r4,r2
  8037d0:	1027883a 	mov	r19,r2
  8037d4:	08092800 	call	809280 <__floatsidf>
  8037d8:	a80b883a 	mov	r5,r21
  8037dc:	a009883a 	mov	r4,r20
  8037e0:	180f883a 	mov	r7,r3
  8037e4:	100d883a 	mov	r6,r2
  8037e8:	08088c80 	call	8088c8 <__subdf3>
  8037ec:	d9801817 	ldw	r6,96(sp)
  8037f0:	1823883a 	mov	r17,r3
  8037f4:	d8801415 	stw	r2,80(sp)
  8037f8:	302d883a 	mov	r22,r6
  8037fc:	d9800517 	ldw	r6,20(sp)
  803800:	9cc00c04 	addi	r19,r19,48
  803804:	dc401515 	stw	r17,84(sp)
  803808:	d8c01917 	ldw	r3,100(sp)
  80380c:	34c00005 	stb	r19,0(r6)
  803810:	d8800517 	ldw	r2,20(sp)
  803814:	d9401917 	ldw	r5,100(sp)
  803818:	d9801417 	ldw	r6,80(sp)
  80381c:	b009883a 	mov	r4,r22
  803820:	880f883a 	mov	r7,r17
  803824:	182f883a 	mov	r23,r3
  803828:	17000044 	addi	fp,r2,1
  80382c:	08090e80 	call	8090e8 <__gtdf2>
  803830:	00804e16 	blt	zero,r2,80396c <_dtoa_r+0x1158>
  803834:	d9801417 	ldw	r6,80(sp)
  803838:	0005883a 	mov	r2,zero
  80383c:	00cffc34 	movhi	r3,16368
  803840:	180b883a 	mov	r5,r3
  803844:	880f883a 	mov	r7,r17
  803848:	1009883a 	mov	r4,r2
  80384c:	08088c80 	call	8088c8 <__subdf3>
  803850:	d9401917 	ldw	r5,100(sp)
  803854:	180f883a 	mov	r7,r3
  803858:	b009883a 	mov	r4,r22
  80385c:	100d883a 	mov	r6,r2
  803860:	08090e80 	call	8090e8 <__gtdf2>
  803864:	00bda216 	blt	zero,r2,802ef0 <_dtoa_r+0x6dc>
  803868:	d8c00317 	ldw	r3,12(sp)
  80386c:	00800044 	movi	r2,1
  803870:	10c01216 	blt	r2,r3,8038bc <_dtoa_r+0x10a8>
  803874:	003d4506 	br	802d8c <_dtoa_r+0x578>
  803878:	d9801417 	ldw	r6,80(sp)
  80387c:	0005883a 	mov	r2,zero
  803880:	00cffc34 	movhi	r3,16368
  803884:	180b883a 	mov	r5,r3
  803888:	880f883a 	mov	r7,r17
  80388c:	1009883a 	mov	r4,r2
  803890:	08088c80 	call	8088c8 <__subdf3>
  803894:	d9c01b17 	ldw	r7,108(sp)
  803898:	180b883a 	mov	r5,r3
  80389c:	1009883a 	mov	r4,r2
  8038a0:	b00d883a 	mov	r6,r22
  8038a4:	08091f80 	call	8091f8 <__ltdf2>
  8038a8:	103d9116 	blt	r2,zero,802ef0 <_dtoa_r+0x6dc>
  8038ac:	d9800517 	ldw	r6,20(sp)
  8038b0:	d9000317 	ldw	r4,12(sp)
  8038b4:	3105883a 	add	r2,r6,r4
  8038b8:	e0bd3426 	beq	fp,r2,802d8c <_dtoa_r+0x578>
  8038bc:	04500934 	movhi	r17,16420
  8038c0:	0021883a 	mov	r16,zero
  8038c4:	b80b883a 	mov	r5,r23
  8038c8:	b009883a 	mov	r4,r22
  8038cc:	800d883a 	mov	r6,r16
  8038d0:	880f883a 	mov	r7,r17
  8038d4:	08089bc0 	call	8089bc <__muldf3>
  8038d8:	d9401517 	ldw	r5,84(sp)
  8038dc:	d9001417 	ldw	r4,80(sp)
  8038e0:	880f883a 	mov	r7,r17
  8038e4:	000d883a 	mov	r6,zero
  8038e8:	d8801a15 	stw	r2,104(sp)
  8038ec:	d8c01b15 	stw	r3,108(sp)
  8038f0:	08089bc0 	call	8089bc <__muldf3>
  8038f4:	180b883a 	mov	r5,r3
  8038f8:	1009883a 	mov	r4,r2
  8038fc:	1823883a 	mov	r17,r3
  803900:	1021883a 	mov	r16,r2
  803904:	08093780 	call	809378 <__fixdfsi>
  803908:	1009883a 	mov	r4,r2
  80390c:	102b883a 	mov	r21,r2
  803910:	08092800 	call	809280 <__floatsidf>
  803914:	880b883a 	mov	r5,r17
  803918:	8009883a 	mov	r4,r16
  80391c:	180f883a 	mov	r7,r3
  803920:	100d883a 	mov	r6,r2
  803924:	08088c80 	call	8088c8 <__subdf3>
  803928:	1021883a 	mov	r16,r2
  80392c:	d9001b17 	ldw	r4,108(sp)
  803930:	1823883a 	mov	r17,r3
  803934:	dc001415 	stw	r16,80(sp)
  803938:	ad400c04 	addi	r21,r21,48
  80393c:	dc401515 	stw	r17,84(sp)
  803940:	d8801a17 	ldw	r2,104(sp)
  803944:	e5400005 	stb	r21,0(fp)
  803948:	202f883a 	mov	r23,r4
  80394c:	d9c01b17 	ldw	r7,108(sp)
  803950:	d9001417 	ldw	r4,80(sp)
  803954:	880b883a 	mov	r5,r17
  803958:	100d883a 	mov	r6,r2
  80395c:	102d883a 	mov	r22,r2
  803960:	e7000044 	addi	fp,fp,1
  803964:	08091f80 	call	8091f8 <__ltdf2>
  803968:	103fc30e 	bge	r2,zero,803878 <_dtoa_r+0x1064>
  80396c:	d9000417 	ldw	r4,16(sp)
  803970:	d9000d15 	stw	r4,52(sp)
  803974:	003d7106 	br	802f3c <_dtoa_r+0x728>
  803978:	d9801717 	ldw	r6,92(sp)
  80397c:	00800084 	movi	r2,2
  803980:	11bde60e 	bge	r2,r6,80311c <_dtoa_r+0x908>
  803984:	203cfb1e 	bne	r4,zero,802d74 <_dtoa_r+0x560>
  803988:	d9001617 	ldw	r4,88(sp)
  80398c:	900b883a 	mov	r5,r18
  803990:	01800144 	movi	r6,5
  803994:	000f883a 	mov	r7,zero
  803998:	08066fc0 	call	8066fc <__multadd>
  80399c:	d9000717 	ldw	r4,28(sp)
  8039a0:	100b883a 	mov	r5,r2
  8039a4:	1025883a 	mov	r18,r2
  8039a8:	0805b380 	call	805b38 <__mcmp>
  8039ac:	00bcf10e 	bge	zero,r2,802d74 <_dtoa_r+0x560>
  8039b0:	d8c00d17 	ldw	r3,52(sp)
  8039b4:	d9000517 	ldw	r4,20(sp)
  8039b8:	d8000615 	stw	zero,24(sp)
  8039bc:	18c00044 	addi	r3,r3,1
  8039c0:	d8c00d15 	stw	r3,52(sp)
  8039c4:	00800c44 	movi	r2,49
  8039c8:	27000044 	addi	fp,r4,1
  8039cc:	20800005 	stb	r2,0(r4)
  8039d0:	003e8906 	br	8033f8 <_dtoa_r+0xbe4>
  8039d4:	d8c00517 	ldw	r3,20(sp)
  8039d8:	003bc206 	br	8028e4 <_dtoa_r+0xd0>
  8039dc:	01802074 	movhi	r6,129
  8039e0:	31b2cc04 	addi	r6,r6,-13520
  8039e4:	30c00917 	ldw	r3,36(r6)
  8039e8:	30800817 	ldw	r2,32(r6)
  8039ec:	d9001217 	ldw	r4,72(sp)
  8039f0:	d9401317 	ldw	r5,76(sp)
  8039f4:	180f883a 	mov	r7,r3
  8039f8:	100d883a 	mov	r6,r2
  8039fc:	0808d800 	call	808d80 <__divdf3>
  803a00:	948003cc 	andi	r18,r18,15
  803a04:	058000c4 	movi	r22,3
  803a08:	1029883a 	mov	r20,r2
  803a0c:	182b883a 	mov	r21,r3
  803a10:	003c8906 	br	802c38 <_dtoa_r+0x424>
  803a14:	d9001017 	ldw	r4,64(sp)
  803a18:	d9800917 	ldw	r6,36(sp)
  803a1c:	0025883a 	mov	r18,zero
  803a20:	1105c83a 	sub	r2,r2,r4
  803a24:	2089883a 	add	r4,r4,r2
  803a28:	308d883a 	add	r6,r6,r2
  803a2c:	d9001015 	stw	r4,64(sp)
  803a30:	d9800915 	stw	r6,36(sp)
  803a34:	003e3206 	br	803300 <_dtoa_r+0xaec>
  803a38:	28800044 	addi	r2,r5,1
  803a3c:	27000044 	addi	fp,r4,1
  803a40:	20800005 	stb	r2,0(r4)
  803a44:	003e6c06 	br	8033f8 <_dtoa_r+0xbe4>
  803a48:	d8800f17 	ldw	r2,60(sp)
  803a4c:	00bce016 	blt	zero,r2,802dd0 <_dtoa_r+0x5bc>
  803a50:	d9800f17 	ldw	r6,60(sp)
  803a54:	303cc51e 	bne	r6,zero,802d6c <_dtoa_r+0x558>
  803a58:	0005883a 	mov	r2,zero
  803a5c:	00d00534 	movhi	r3,16404
  803a60:	980b883a 	mov	r5,r19
  803a64:	180f883a 	mov	r7,r3
  803a68:	9009883a 	mov	r4,r18
  803a6c:	100d883a 	mov	r6,r2
  803a70:	08089bc0 	call	8089bc <__muldf3>
  803a74:	180b883a 	mov	r5,r3
  803a78:	a80f883a 	mov	r7,r21
  803a7c:	1009883a 	mov	r4,r2
  803a80:	a00d883a 	mov	r6,r20
  803a84:	08091700 	call	809170 <__gedf2>
  803a88:	103cb80e 	bge	r2,zero,802d6c <_dtoa_r+0x558>
  803a8c:	0027883a 	mov	r19,zero
  803a90:	0025883a 	mov	r18,zero
  803a94:	003fc606 	br	8039b0 <_dtoa_r+0x119c>
  803a98:	99400117 	ldw	r5,4(r19)
  803a9c:	d9001617 	ldw	r4,88(sp)
  803aa0:	0805f5c0 	call	805f5c <_Balloc>
  803aa4:	99800417 	ldw	r6,16(r19)
  803aa8:	11000304 	addi	r4,r2,12
  803aac:	99400304 	addi	r5,r19,12
  803ab0:	318d883a 	add	r6,r6,r6
  803ab4:	318d883a 	add	r6,r6,r6
  803ab8:	31800204 	addi	r6,r6,8
  803abc:	1023883a 	mov	r17,r2
  803ac0:	08057c40 	call	8057c4 <memcpy>
  803ac4:	d9001617 	ldw	r4,88(sp)
  803ac8:	880b883a 	mov	r5,r17
  803acc:	01800044 	movi	r6,1
  803ad0:	08063200 	call	806320 <__lshift>
  803ad4:	100b883a 	mov	r5,r2
  803ad8:	003d9c06 	br	80314c <_dtoa_r+0x938>
  803adc:	00800e44 	movi	r2,57
  803ae0:	b8807026 	beq	r23,r2,803ca4 <_dtoa_r+0x1490>
  803ae4:	b8800044 	addi	r2,r23,1
  803ae8:	b7000044 	addi	fp,r22,1
  803aec:	b0800005 	stb	r2,0(r22)
  803af0:	003e4106 	br	8033f8 <_dtoa_r+0xbe4>
  803af4:	d8800317 	ldw	r2,12(sp)
  803af8:	01802074 	movhi	r6,129
  803afc:	31b29a04 	addi	r6,r6,-13720
  803b00:	b009883a 	mov	r4,r22
  803b04:	100e90fa 	slli	r7,r2,3
  803b08:	b80b883a 	mov	r5,r23
  803b0c:	398f883a 	add	r7,r7,r6
  803b10:	38bffe17 	ldw	r2,-8(r7)
  803b14:	d9800517 	ldw	r6,20(sp)
  803b18:	38ffff17 	ldw	r3,-4(r7)
  803b1c:	37000044 	addi	fp,r6,1
  803b20:	180f883a 	mov	r7,r3
  803b24:	100d883a 	mov	r6,r2
  803b28:	08089bc0 	call	8089bc <__muldf3>
  803b2c:	a80b883a 	mov	r5,r21
  803b30:	a009883a 	mov	r4,r20
  803b34:	182f883a 	mov	r23,r3
  803b38:	102d883a 	mov	r22,r2
  803b3c:	08093780 	call	809378 <__fixdfsi>
  803b40:	1009883a 	mov	r4,r2
  803b44:	1027883a 	mov	r19,r2
  803b48:	08092800 	call	809280 <__floatsidf>
  803b4c:	a80b883a 	mov	r5,r21
  803b50:	a009883a 	mov	r4,r20
  803b54:	180f883a 	mov	r7,r3
  803b58:	100d883a 	mov	r6,r2
  803b5c:	08088c80 	call	8088c8 <__subdf3>
  803b60:	180b883a 	mov	r5,r3
  803b64:	d8c00517 	ldw	r3,20(sp)
  803b68:	9cc00c04 	addi	r19,r19,48
  803b6c:	1009883a 	mov	r4,r2
  803b70:	1cc00005 	stb	r19,0(r3)
  803b74:	2021883a 	mov	r16,r4
  803b78:	d9000317 	ldw	r4,12(sp)
  803b7c:	00800044 	movi	r2,1
  803b80:	2823883a 	mov	r17,r5
  803b84:	20802226 	beq	r4,r2,803c10 <_dtoa_r+0x13fc>
  803b88:	1029883a 	mov	r20,r2
  803b8c:	0005883a 	mov	r2,zero
  803b90:	00d00934 	movhi	r3,16420
  803b94:	180f883a 	mov	r7,r3
  803b98:	100d883a 	mov	r6,r2
  803b9c:	880b883a 	mov	r5,r17
  803ba0:	8009883a 	mov	r4,r16
  803ba4:	08089bc0 	call	8089bc <__muldf3>
  803ba8:	180b883a 	mov	r5,r3
  803bac:	1009883a 	mov	r4,r2
  803bb0:	1823883a 	mov	r17,r3
  803bb4:	1021883a 	mov	r16,r2
  803bb8:	08093780 	call	809378 <__fixdfsi>
  803bbc:	1009883a 	mov	r4,r2
  803bc0:	102b883a 	mov	r21,r2
  803bc4:	08092800 	call	809280 <__floatsidf>
  803bc8:	880b883a 	mov	r5,r17
  803bcc:	8009883a 	mov	r4,r16
  803bd0:	180f883a 	mov	r7,r3
  803bd4:	100d883a 	mov	r6,r2
  803bd8:	08088c80 	call	8088c8 <__subdf3>
  803bdc:	180b883a 	mov	r5,r3
  803be0:	d8c00517 	ldw	r3,20(sp)
  803be4:	1009883a 	mov	r4,r2
  803be8:	ad400c04 	addi	r21,r21,48
  803bec:	1d05883a 	add	r2,r3,r20
  803bf0:	15400005 	stb	r21,0(r2)
  803bf4:	2021883a 	mov	r16,r4
  803bf8:	d9000317 	ldw	r4,12(sp)
  803bfc:	a5000044 	addi	r20,r20,1
  803c00:	2823883a 	mov	r17,r5
  803c04:	a13fe11e 	bne	r20,r4,803b8c <_dtoa_r+0x1378>
  803c08:	e505883a 	add	r2,fp,r20
  803c0c:	173fffc4 	addi	fp,r2,-1
  803c10:	0025883a 	mov	r18,zero
  803c14:	04cff834 	movhi	r19,16352
  803c18:	b009883a 	mov	r4,r22
  803c1c:	b80b883a 	mov	r5,r23
  803c20:	900d883a 	mov	r6,r18
  803c24:	980f883a 	mov	r7,r19
  803c28:	08089480 	call	808948 <__adddf3>
  803c2c:	180b883a 	mov	r5,r3
  803c30:	1009883a 	mov	r4,r2
  803c34:	800d883a 	mov	r6,r16
  803c38:	880f883a 	mov	r7,r17
  803c3c:	08091f80 	call	8091f8 <__ltdf2>
  803c40:	103cab16 	blt	r2,zero,802ef0 <_dtoa_r+0x6dc>
  803c44:	0009883a 	mov	r4,zero
  803c48:	980b883a 	mov	r5,r19
  803c4c:	b80f883a 	mov	r7,r23
  803c50:	b00d883a 	mov	r6,r22
  803c54:	08088c80 	call	8088c8 <__subdf3>
  803c58:	180b883a 	mov	r5,r3
  803c5c:	880f883a 	mov	r7,r17
  803c60:	1009883a 	mov	r4,r2
  803c64:	800d883a 	mov	r6,r16
  803c68:	08090e80 	call	8090e8 <__gtdf2>
  803c6c:	00bc470e 	bge	zero,r2,802d8c <_dtoa_r+0x578>
  803c70:	00c00c04 	movi	r3,48
  803c74:	e73fffc4 	addi	fp,fp,-1
  803c78:	e0800007 	ldb	r2,0(fp)
  803c7c:	10fffd26 	beq	r2,r3,803c74 <_dtoa_r+0x1460>
  803c80:	d9800417 	ldw	r6,16(sp)
  803c84:	e7000044 	addi	fp,fp,1
  803c88:	d9800d15 	stw	r6,52(sp)
  803c8c:	003cab06 	br	802f3c <_dtoa_r+0x728>
  803c90:	d8c00f17 	ldw	r3,60(sp)
  803c94:	d9001117 	ldw	r4,68(sp)
  803c98:	20e1c83a 	sub	r16,r4,r3
  803c9c:	0007883a 	mov	r3,zero
  803ca0:	003d9b06 	br	803310 <_dtoa_r+0xafc>
  803ca4:	00800e44 	movi	r2,57
  803ca8:	b0800005 	stb	r2,0(r22)
  803cac:	b5800044 	addi	r22,r22,1
  803cb0:	003dc106 	br	8033b8 <_dtoa_r+0xba4>
  803cb4:	05800084 	movi	r22,2
  803cb8:	003bf706 	br	802c98 <_dtoa_r+0x484>
  803cbc:	d9000f17 	ldw	r4,60(sp)
  803cc0:	013c000e 	bge	zero,r4,802cc4 <_dtoa_r+0x4b0>
  803cc4:	d9800e17 	ldw	r6,56(sp)
  803cc8:	01bc300e 	bge	zero,r6,802d8c <_dtoa_r+0x578>
  803ccc:	0005883a 	mov	r2,zero
  803cd0:	00d00934 	movhi	r3,16420
  803cd4:	a80b883a 	mov	r5,r21
  803cd8:	180f883a 	mov	r7,r3
  803cdc:	a009883a 	mov	r4,r20
  803ce0:	100d883a 	mov	r6,r2
  803ce4:	08089bc0 	call	8089bc <__muldf3>
  803ce8:	b1000044 	addi	r4,r22,1
  803cec:	1021883a 	mov	r16,r2
  803cf0:	1823883a 	mov	r17,r3
  803cf4:	08092800 	call	809280 <__floatsidf>
  803cf8:	880b883a 	mov	r5,r17
  803cfc:	8009883a 	mov	r4,r16
  803d00:	180f883a 	mov	r7,r3
  803d04:	100d883a 	mov	r6,r2
  803d08:	08089bc0 	call	8089bc <__muldf3>
  803d0c:	0011883a 	mov	r8,zero
  803d10:	02500734 	movhi	r9,16412
  803d14:	180b883a 	mov	r5,r3
  803d18:	480f883a 	mov	r7,r9
  803d1c:	1009883a 	mov	r4,r2
  803d20:	400d883a 	mov	r6,r8
  803d24:	08089480 	call	808948 <__adddf3>
  803d28:	102d883a 	mov	r22,r2
  803d2c:	00bf3034 	movhi	r2,64704
  803d30:	10ef883a 	add	r23,r2,r3
  803d34:	d8800d17 	ldw	r2,52(sp)
  803d38:	d8c00e17 	ldw	r3,56(sp)
  803d3c:	8029883a 	mov	r20,r16
  803d40:	10bfffc4 	addi	r2,r2,-1
  803d44:	882b883a 	mov	r21,r17
  803d48:	d8800415 	stw	r2,16(sp)
  803d4c:	d8c00315 	stw	r3,12(sp)
  803d50:	003e8306 	br	803760 <_dtoa_r+0xf4c>
  803d54:	d8800117 	ldw	r2,4(sp)
  803d58:	dc001117 	ldw	r16,68(sp)
  803d5c:	dc801017 	ldw	r18,64(sp)
  803d60:	00c00d84 	movi	r3,54
  803d64:	1887c83a 	sub	r3,r3,r2
  803d68:	003d6906 	br	803310 <_dtoa_r+0xafc>
  803d6c:	01800044 	movi	r6,1
  803d70:	3021883a 	mov	r16,r6
  803d74:	d9800f15 	stw	r6,60(sp)
  803d78:	d9802615 	stw	r6,152(sp)
  803d7c:	d9800e15 	stw	r6,56(sp)
  803d80:	003b9306 	br	802bd0 <_dtoa_r+0x3bc>
  803d84:	b021883a 	mov	r16,r22
  803d88:	dd800f15 	stw	r22,60(sp)
  803d8c:	003b9006 	br	802bd0 <_dtoa_r+0x3bc>
  803d90:	103e221e 	bne	r2,zero,80361c <_dtoa_r+0xe08>
  803d94:	b880004c 	andi	r2,r23,1
  803d98:	1005003a 	cmpeq	r2,r2,zero
  803d9c:	103e1f1e 	bne	r2,zero,80361c <_dtoa_r+0xe08>
  803da0:	003e1b06 	br	803610 <_dtoa_r+0xdfc>
  803da4:	d9001617 	ldw	r4,88(sp)
  803da8:	980b883a 	mov	r5,r19
  803dac:	01800284 	movi	r6,10
  803db0:	000f883a 	mov	r7,zero
  803db4:	08066fc0 	call	8066fc <__multadd>
  803db8:	d8c00e17 	ldw	r3,56(sp)
  803dbc:	1027883a 	mov	r19,r2
  803dc0:	d8c00f15 	stw	r3,60(sp)
  803dc4:	003cd306 	br	803114 <_dtoa_r+0x900>

00803dc8 <_fflush_r>:
  803dc8:	defffb04 	addi	sp,sp,-20
  803dcc:	dcc00315 	stw	r19,12(sp)
  803dd0:	dc800215 	stw	r18,8(sp)
  803dd4:	dfc00415 	stw	ra,16(sp)
  803dd8:	dc400115 	stw	r17,4(sp)
  803ddc:	dc000015 	stw	r16,0(sp)
  803de0:	2027883a 	mov	r19,r4
  803de4:	2825883a 	mov	r18,r5
  803de8:	20000226 	beq	r4,zero,803df4 <_fflush_r+0x2c>
  803dec:	20800e17 	ldw	r2,56(r4)
  803df0:	10005626 	beq	r2,zero,803f4c <_fflush_r+0x184>
  803df4:	9100030b 	ldhu	r4,12(r18)
  803df8:	20ffffcc 	andi	r3,r4,65535
  803dfc:	18e0001c 	xori	r3,r3,32768
  803e00:	18e00004 	addi	r3,r3,-32768
  803e04:	1880020c 	andi	r2,r3,8
  803e08:	1000261e 	bne	r2,zero,803ea4 <_fflush_r+0xdc>
  803e0c:	90c00117 	ldw	r3,4(r18)
  803e10:	20820014 	ori	r2,r4,2048
  803e14:	9080030d 	sth	r2,12(r18)
  803e18:	1009883a 	mov	r4,r2
  803e1c:	00c0400e 	bge	zero,r3,803f20 <_fflush_r+0x158>
  803e20:	92000a17 	ldw	r8,40(r18)
  803e24:	40004026 	beq	r8,zero,803f28 <_fflush_r+0x160>
  803e28:	2084000c 	andi	r2,r4,4096
  803e2c:	10005326 	beq	r2,zero,803f7c <_fflush_r+0x1b4>
  803e30:	94001417 	ldw	r16,80(r18)
  803e34:	9080030b 	ldhu	r2,12(r18)
  803e38:	1080010c 	andi	r2,r2,4
  803e3c:	1000481e 	bne	r2,zero,803f60 <_fflush_r+0x198>
  803e40:	91400717 	ldw	r5,28(r18)
  803e44:	9809883a 	mov	r4,r19
  803e48:	800d883a 	mov	r6,r16
  803e4c:	000f883a 	mov	r7,zero
  803e50:	403ee83a 	callr	r8
  803e54:	8080261e 	bne	r16,r2,803ef0 <_fflush_r+0x128>
  803e58:	9080030b 	ldhu	r2,12(r18)
  803e5c:	91000417 	ldw	r4,16(r18)
  803e60:	90000115 	stw	zero,4(r18)
  803e64:	10bdffcc 	andi	r2,r2,63487
  803e68:	10ffffcc 	andi	r3,r2,65535
  803e6c:	18c4000c 	andi	r3,r3,4096
  803e70:	9080030d 	sth	r2,12(r18)
  803e74:	91000015 	stw	r4,0(r18)
  803e78:	18002b26 	beq	r3,zero,803f28 <_fflush_r+0x160>
  803e7c:	0007883a 	mov	r3,zero
  803e80:	1805883a 	mov	r2,r3
  803e84:	94001415 	stw	r16,80(r18)
  803e88:	dfc00417 	ldw	ra,16(sp)
  803e8c:	dcc00317 	ldw	r19,12(sp)
  803e90:	dc800217 	ldw	r18,8(sp)
  803e94:	dc400117 	ldw	r17,4(sp)
  803e98:	dc000017 	ldw	r16,0(sp)
  803e9c:	dec00504 	addi	sp,sp,20
  803ea0:	f800283a 	ret
  803ea4:	94400417 	ldw	r17,16(r18)
  803ea8:	88001f26 	beq	r17,zero,803f28 <_fflush_r+0x160>
  803eac:	90800017 	ldw	r2,0(r18)
  803eb0:	18c000cc 	andi	r3,r3,3
  803eb4:	94400015 	stw	r17,0(r18)
  803eb8:	1461c83a 	sub	r16,r2,r17
  803ebc:	18002526 	beq	r3,zero,803f54 <_fflush_r+0x18c>
  803ec0:	0005883a 	mov	r2,zero
  803ec4:	90800215 	stw	r2,8(r18)
  803ec8:	0400170e 	bge	zero,r16,803f28 <_fflush_r+0x160>
  803ecc:	90c00917 	ldw	r3,36(r18)
  803ed0:	91400717 	ldw	r5,28(r18)
  803ed4:	880d883a 	mov	r6,r17
  803ed8:	800f883a 	mov	r7,r16
  803edc:	9809883a 	mov	r4,r19
  803ee0:	183ee83a 	callr	r3
  803ee4:	88a3883a 	add	r17,r17,r2
  803ee8:	80a1c83a 	sub	r16,r16,r2
  803eec:	00bff616 	blt	zero,r2,803ec8 <_fflush_r+0x100>
  803ef0:	9080030b 	ldhu	r2,12(r18)
  803ef4:	00ffffc4 	movi	r3,-1
  803ef8:	10801014 	ori	r2,r2,64
  803efc:	9080030d 	sth	r2,12(r18)
  803f00:	1805883a 	mov	r2,r3
  803f04:	dfc00417 	ldw	ra,16(sp)
  803f08:	dcc00317 	ldw	r19,12(sp)
  803f0c:	dc800217 	ldw	r18,8(sp)
  803f10:	dc400117 	ldw	r17,4(sp)
  803f14:	dc000017 	ldw	r16,0(sp)
  803f18:	dec00504 	addi	sp,sp,20
  803f1c:	f800283a 	ret
  803f20:	90800f17 	ldw	r2,60(r18)
  803f24:	00bfbe16 	blt	zero,r2,803e20 <_fflush_r+0x58>
  803f28:	0007883a 	mov	r3,zero
  803f2c:	1805883a 	mov	r2,r3
  803f30:	dfc00417 	ldw	ra,16(sp)
  803f34:	dcc00317 	ldw	r19,12(sp)
  803f38:	dc800217 	ldw	r18,8(sp)
  803f3c:	dc400117 	ldw	r17,4(sp)
  803f40:	dc000017 	ldw	r16,0(sp)
  803f44:	dec00504 	addi	sp,sp,20
  803f48:	f800283a 	ret
  803f4c:	08040600 	call	804060 <__sinit>
  803f50:	003fa806 	br	803df4 <_fflush_r+0x2c>
  803f54:	90800517 	ldw	r2,20(r18)
  803f58:	90800215 	stw	r2,8(r18)
  803f5c:	003fda06 	br	803ec8 <_fflush_r+0x100>
  803f60:	90800117 	ldw	r2,4(r18)
  803f64:	90c00c17 	ldw	r3,48(r18)
  803f68:	80a1c83a 	sub	r16,r16,r2
  803f6c:	183fb426 	beq	r3,zero,803e40 <_fflush_r+0x78>
  803f70:	90800f17 	ldw	r2,60(r18)
  803f74:	80a1c83a 	sub	r16,r16,r2
  803f78:	003fb106 	br	803e40 <_fflush_r+0x78>
  803f7c:	91400717 	ldw	r5,28(r18)
  803f80:	9809883a 	mov	r4,r19
  803f84:	000d883a 	mov	r6,zero
  803f88:	01c00044 	movi	r7,1
  803f8c:	403ee83a 	callr	r8
  803f90:	1021883a 	mov	r16,r2
  803f94:	00bfffc4 	movi	r2,-1
  803f98:	80800226 	beq	r16,r2,803fa4 <_fflush_r+0x1dc>
  803f9c:	92000a17 	ldw	r8,40(r18)
  803fa0:	003fa406 	br	803e34 <_fflush_r+0x6c>
  803fa4:	98c00017 	ldw	r3,0(r19)
  803fa8:	00800744 	movi	r2,29
  803fac:	18bfde26 	beq	r3,r2,803f28 <_fflush_r+0x160>
  803fb0:	9080030b 	ldhu	r2,12(r18)
  803fb4:	8007883a 	mov	r3,r16
  803fb8:	10801014 	ori	r2,r2,64
  803fbc:	9080030d 	sth	r2,12(r18)
  803fc0:	003fcf06 	br	803f00 <_fflush_r+0x138>

00803fc4 <fflush>:
  803fc4:	01402034 	movhi	r5,128
  803fc8:	294f7204 	addi	r5,r5,15816
  803fcc:	2007883a 	mov	r3,r4
  803fd0:	20000526 	beq	r4,zero,803fe8 <fflush+0x24>
  803fd4:	00802074 	movhi	r2,129
  803fd8:	10b9e704 	addi	r2,r2,-6244
  803fdc:	11000017 	ldw	r4,0(r2)
  803fe0:	180b883a 	mov	r5,r3
  803fe4:	0803dc81 	jmpi	803dc8 <_fflush_r>
  803fe8:	00802074 	movhi	r2,129
  803fec:	10b9e804 	addi	r2,r2,-6240
  803ff0:	11000017 	ldw	r4,0(r2)
  803ff4:	0804bc81 	jmpi	804bc8 <_fwalk_reent>

00803ff8 <std>:
  803ff8:	00802034 	movhi	r2,128
  803ffc:	109c4f04 	addi	r2,r2,28988
  804000:	20800b15 	stw	r2,44(r4)
  804004:	00802034 	movhi	r2,128
  804008:	109c8a04 	addi	r2,r2,29224
  80400c:	20800815 	stw	r2,32(r4)
  804010:	00c02034 	movhi	r3,128
  804014:	18dc6b04 	addi	r3,r3,29100
  804018:	00802034 	movhi	r2,128
  80401c:	109c5104 	addi	r2,r2,28996
  804020:	2140030d 	sth	r5,12(r4)
  804024:	2180038d 	sth	r6,14(r4)
  804028:	20c00915 	stw	r3,36(r4)
  80402c:	20800a15 	stw	r2,40(r4)
  804030:	20000015 	stw	zero,0(r4)
  804034:	20000115 	stw	zero,4(r4)
  804038:	20000215 	stw	zero,8(r4)
  80403c:	20000415 	stw	zero,16(r4)
  804040:	20000515 	stw	zero,20(r4)
  804044:	20000615 	stw	zero,24(r4)
  804048:	21000715 	stw	r4,28(r4)
  80404c:	f800283a 	ret

00804050 <__sfp_lock_acquire>:
  804050:	f800283a 	ret

00804054 <__sfp_lock_release>:
  804054:	f800283a 	ret

00804058 <__sinit_lock_acquire>:
  804058:	f800283a 	ret

0080405c <__sinit_lock_release>:
  80405c:	f800283a 	ret

00804060 <__sinit>:
  804060:	20800e17 	ldw	r2,56(r4)
  804064:	defffd04 	addi	sp,sp,-12
  804068:	dc400115 	stw	r17,4(sp)
  80406c:	dc000015 	stw	r16,0(sp)
  804070:	dfc00215 	stw	ra,8(sp)
  804074:	04400044 	movi	r17,1
  804078:	01400104 	movi	r5,4
  80407c:	000d883a 	mov	r6,zero
  804080:	2021883a 	mov	r16,r4
  804084:	2200bb04 	addi	r8,r4,748
  804088:	200f883a 	mov	r7,r4
  80408c:	10000526 	beq	r2,zero,8040a4 <__sinit+0x44>
  804090:	dfc00217 	ldw	ra,8(sp)
  804094:	dc400117 	ldw	r17,4(sp)
  804098:	dc000017 	ldw	r16,0(sp)
  80409c:	dec00304 	addi	sp,sp,12
  8040a0:	f800283a 	ret
  8040a4:	21000117 	ldw	r4,4(r4)
  8040a8:	00802034 	movhi	r2,128
  8040ac:	10905104 	addi	r2,r2,16708
  8040b0:	00c000c4 	movi	r3,3
  8040b4:	80800f15 	stw	r2,60(r16)
  8040b8:	80c0b915 	stw	r3,740(r16)
  8040bc:	8200ba15 	stw	r8,744(r16)
  8040c0:	84400e15 	stw	r17,56(r16)
  8040c4:	8000b815 	stw	zero,736(r16)
  8040c8:	0803ff80 	call	803ff8 <std>
  8040cc:	81000217 	ldw	r4,8(r16)
  8040d0:	880d883a 	mov	r6,r17
  8040d4:	800f883a 	mov	r7,r16
  8040d8:	01400284 	movi	r5,10
  8040dc:	0803ff80 	call	803ff8 <std>
  8040e0:	81000317 	ldw	r4,12(r16)
  8040e4:	800f883a 	mov	r7,r16
  8040e8:	01400484 	movi	r5,18
  8040ec:	01800084 	movi	r6,2
  8040f0:	dfc00217 	ldw	ra,8(sp)
  8040f4:	dc400117 	ldw	r17,4(sp)
  8040f8:	dc000017 	ldw	r16,0(sp)
  8040fc:	dec00304 	addi	sp,sp,12
  804100:	0803ff81 	jmpi	803ff8 <std>

00804104 <__fp_lock>:
  804104:	0005883a 	mov	r2,zero
  804108:	f800283a 	ret

0080410c <__fp_unlock>:
  80410c:	0005883a 	mov	r2,zero
  804110:	f800283a 	ret

00804114 <__fp_unlock_all>:
  804114:	00802074 	movhi	r2,129
  804118:	10b9e704 	addi	r2,r2,-6244
  80411c:	11000017 	ldw	r4,0(r2)
  804120:	01402034 	movhi	r5,128
  804124:	29504304 	addi	r5,r5,16652
  804128:	0804c901 	jmpi	804c90 <_fwalk>

0080412c <__fp_lock_all>:
  80412c:	00802074 	movhi	r2,129
  804130:	10b9e704 	addi	r2,r2,-6244
  804134:	11000017 	ldw	r4,0(r2)
  804138:	01402034 	movhi	r5,128
  80413c:	29504104 	addi	r5,r5,16644
  804140:	0804c901 	jmpi	804c90 <_fwalk>

00804144 <_cleanup_r>:
  804144:	01402034 	movhi	r5,128
  804148:	295d8104 	addi	r5,r5,30212
  80414c:	0804c901 	jmpi	804c90 <_fwalk>

00804150 <_cleanup>:
  804150:	00802074 	movhi	r2,129
  804154:	10b9e804 	addi	r2,r2,-6240
  804158:	11000017 	ldw	r4,0(r2)
  80415c:	08041441 	jmpi	804144 <_cleanup_r>

00804160 <__sfmoreglue>:
  804160:	defffc04 	addi	sp,sp,-16
  804164:	dc000015 	stw	r16,0(sp)
  804168:	2821883a 	mov	r16,r5
  80416c:	dc400115 	stw	r17,4(sp)
  804170:	01401704 	movi	r5,92
  804174:	2023883a 	mov	r17,r4
  804178:	8009883a 	mov	r4,r16
  80417c:	dfc00315 	stw	ra,12(sp)
  804180:	dcc00215 	stw	r19,8(sp)
  804184:	08097300 	call	809730 <__mulsi3>
  804188:	11400304 	addi	r5,r2,12
  80418c:	8809883a 	mov	r4,r17
  804190:	1027883a 	mov	r19,r2
  804194:	0804fa00 	call	804fa0 <_malloc_r>
  804198:	10c00304 	addi	r3,r2,12
  80419c:	1023883a 	mov	r17,r2
  8041a0:	1809883a 	mov	r4,r3
  8041a4:	980d883a 	mov	r6,r19
  8041a8:	000b883a 	mov	r5,zero
  8041ac:	10000b26 	beq	r2,zero,8041dc <__sfmoreglue+0x7c>
  8041b0:	14000115 	stw	r16,4(r2)
  8041b4:	10c00215 	stw	r3,8(r2)
  8041b8:	10000015 	stw	zero,0(r2)
  8041bc:	08059440 	call	805944 <memset>
  8041c0:	8805883a 	mov	r2,r17
  8041c4:	dfc00317 	ldw	ra,12(sp)
  8041c8:	dcc00217 	ldw	r19,8(sp)
  8041cc:	dc400117 	ldw	r17,4(sp)
  8041d0:	dc000017 	ldw	r16,0(sp)
  8041d4:	dec00404 	addi	sp,sp,16
  8041d8:	f800283a 	ret
  8041dc:	0023883a 	mov	r17,zero
  8041e0:	8805883a 	mov	r2,r17
  8041e4:	dfc00317 	ldw	ra,12(sp)
  8041e8:	dcc00217 	ldw	r19,8(sp)
  8041ec:	dc400117 	ldw	r17,4(sp)
  8041f0:	dc000017 	ldw	r16,0(sp)
  8041f4:	dec00404 	addi	sp,sp,16
  8041f8:	f800283a 	ret

008041fc <__sfp>:
  8041fc:	defffd04 	addi	sp,sp,-12
  804200:	00802074 	movhi	r2,129
  804204:	10b9e804 	addi	r2,r2,-6240
  804208:	dc000015 	stw	r16,0(sp)
  80420c:	14000017 	ldw	r16,0(r2)
  804210:	dc400115 	stw	r17,4(sp)
  804214:	dfc00215 	stw	ra,8(sp)
  804218:	80800e17 	ldw	r2,56(r16)
  80421c:	2023883a 	mov	r17,r4
  804220:	10002626 	beq	r2,zero,8042bc <__sfp+0xc0>
  804224:	8400b804 	addi	r16,r16,736
  804228:	80800117 	ldw	r2,4(r16)
  80422c:	81000217 	ldw	r4,8(r16)
  804230:	10ffffc4 	addi	r3,r2,-1
  804234:	18000916 	blt	r3,zero,80425c <__sfp+0x60>
  804238:	2080030f 	ldh	r2,12(r4)
  80423c:	10000b26 	beq	r2,zero,80426c <__sfp+0x70>
  804240:	017fffc4 	movi	r5,-1
  804244:	00000206 	br	804250 <__sfp+0x54>
  804248:	2080030f 	ldh	r2,12(r4)
  80424c:	10000726 	beq	r2,zero,80426c <__sfp+0x70>
  804250:	18ffffc4 	addi	r3,r3,-1
  804254:	21001704 	addi	r4,r4,92
  804258:	197ffb1e 	bne	r3,r5,804248 <__sfp+0x4c>
  80425c:	80800017 	ldw	r2,0(r16)
  804260:	10001926 	beq	r2,zero,8042c8 <__sfp+0xcc>
  804264:	1021883a 	mov	r16,r2
  804268:	003fef06 	br	804228 <__sfp+0x2c>
  80426c:	00bfffc4 	movi	r2,-1
  804270:	00c00044 	movi	r3,1
  804274:	2080038d 	sth	r2,14(r4)
  804278:	20c0030d 	sth	r3,12(r4)
  80427c:	20000015 	stw	zero,0(r4)
  804280:	20000215 	stw	zero,8(r4)
  804284:	20000115 	stw	zero,4(r4)
  804288:	20000415 	stw	zero,16(r4)
  80428c:	20000515 	stw	zero,20(r4)
  804290:	20000615 	stw	zero,24(r4)
  804294:	20000c15 	stw	zero,48(r4)
  804298:	20000d15 	stw	zero,52(r4)
  80429c:	20001115 	stw	zero,68(r4)
  8042a0:	20001215 	stw	zero,72(r4)
  8042a4:	2005883a 	mov	r2,r4
  8042a8:	dfc00217 	ldw	ra,8(sp)
  8042ac:	dc400117 	ldw	r17,4(sp)
  8042b0:	dc000017 	ldw	r16,0(sp)
  8042b4:	dec00304 	addi	sp,sp,12
  8042b8:	f800283a 	ret
  8042bc:	8009883a 	mov	r4,r16
  8042c0:	08040600 	call	804060 <__sinit>
  8042c4:	003fd706 	br	804224 <__sfp+0x28>
  8042c8:	8809883a 	mov	r4,r17
  8042cc:	01400104 	movi	r5,4
  8042d0:	08041600 	call	804160 <__sfmoreglue>
  8042d4:	80800015 	stw	r2,0(r16)
  8042d8:	103fe21e 	bne	r2,zero,804264 <__sfp+0x68>
  8042dc:	00800304 	movi	r2,12
  8042e0:	0009883a 	mov	r4,zero
  8042e4:	88800015 	stw	r2,0(r17)
  8042e8:	003fee06 	br	8042a4 <__sfp+0xa8>

008042ec <_malloc_trim_r>:
  8042ec:	defffb04 	addi	sp,sp,-20
  8042f0:	dcc00315 	stw	r19,12(sp)
  8042f4:	04c02074 	movhi	r19,129
  8042f8:	9cf44204 	addi	r19,r19,-12024
  8042fc:	dc800215 	stw	r18,8(sp)
  804300:	dc400115 	stw	r17,4(sp)
  804304:	dc000015 	stw	r16,0(sp)
  804308:	2823883a 	mov	r17,r5
  80430c:	2025883a 	mov	r18,r4
  804310:	dfc00415 	stw	ra,16(sp)
  804314:	080a4b40 	call	80a4b4 <__malloc_lock>
  804318:	98800217 	ldw	r2,8(r19)
  80431c:	9009883a 	mov	r4,r18
  804320:	000b883a 	mov	r5,zero
  804324:	10c00117 	ldw	r3,4(r2)
  804328:	00bfff04 	movi	r2,-4
  80432c:	18a0703a 	and	r16,r3,r2
  804330:	8463c83a 	sub	r17,r16,r17
  804334:	8c43fbc4 	addi	r17,r17,4079
  804338:	8822d33a 	srli	r17,r17,12
  80433c:	0083ffc4 	movi	r2,4095
  804340:	8c7fffc4 	addi	r17,r17,-1
  804344:	8822933a 	slli	r17,r17,12
  804348:	1440060e 	bge	r2,r17,804364 <_malloc_trim_r+0x78>
  80434c:	08070cc0 	call	8070cc <_sbrk_r>
  804350:	98c00217 	ldw	r3,8(r19)
  804354:	9009883a 	mov	r4,r18
  804358:	044bc83a 	sub	r5,zero,r17
  80435c:	80c7883a 	add	r3,r16,r3
  804360:	10c00926 	beq	r2,r3,804388 <_malloc_trim_r+0x9c>
  804364:	080a4d40 	call	80a4d4 <__malloc_unlock>
  804368:	0005883a 	mov	r2,zero
  80436c:	dfc00417 	ldw	ra,16(sp)
  804370:	dcc00317 	ldw	r19,12(sp)
  804374:	dc800217 	ldw	r18,8(sp)
  804378:	dc400117 	ldw	r17,4(sp)
  80437c:	dc000017 	ldw	r16,0(sp)
  804380:	dec00504 	addi	sp,sp,20
  804384:	f800283a 	ret
  804388:	9009883a 	mov	r4,r18
  80438c:	08070cc0 	call	8070cc <_sbrk_r>
  804390:	844dc83a 	sub	r6,r16,r17
  804394:	00ffffc4 	movi	r3,-1
  804398:	9009883a 	mov	r4,r18
  80439c:	000b883a 	mov	r5,zero
  8043a0:	01c02074 	movhi	r7,129
  8043a4:	39c0bc04 	addi	r7,r7,752
  8043a8:	31800054 	ori	r6,r6,1
  8043ac:	10c00926 	beq	r2,r3,8043d4 <_malloc_trim_r+0xe8>
  8043b0:	38800017 	ldw	r2,0(r7)
  8043b4:	98c00217 	ldw	r3,8(r19)
  8043b8:	9009883a 	mov	r4,r18
  8043bc:	1445c83a 	sub	r2,r2,r17
  8043c0:	38800015 	stw	r2,0(r7)
  8043c4:	19800115 	stw	r6,4(r3)
  8043c8:	080a4d40 	call	80a4d4 <__malloc_unlock>
  8043cc:	00800044 	movi	r2,1
  8043d0:	003fe606 	br	80436c <_malloc_trim_r+0x80>
  8043d4:	08070cc0 	call	8070cc <_sbrk_r>
  8043d8:	99800217 	ldw	r6,8(r19)
  8043dc:	100f883a 	mov	r7,r2
  8043e0:	9009883a 	mov	r4,r18
  8043e4:	1187c83a 	sub	r3,r2,r6
  8043e8:	008003c4 	movi	r2,15
  8043ec:	19400054 	ori	r5,r3,1
  8043f0:	10ffdc0e 	bge	r2,r3,804364 <_malloc_trim_r+0x78>
  8043f4:	00802074 	movhi	r2,129
  8043f8:	10b9ec04 	addi	r2,r2,-6224
  8043fc:	10c00017 	ldw	r3,0(r2)
  804400:	00802074 	movhi	r2,129
  804404:	1080bc04 	addi	r2,r2,752
  804408:	31400115 	stw	r5,4(r6)
  80440c:	38c7c83a 	sub	r3,r7,r3
  804410:	10c00015 	stw	r3,0(r2)
  804414:	003fd306 	br	804364 <_malloc_trim_r+0x78>

00804418 <_free_r>:
  804418:	defffd04 	addi	sp,sp,-12
  80441c:	dc400115 	stw	r17,4(sp)
  804420:	dc000015 	stw	r16,0(sp)
  804424:	dfc00215 	stw	ra,8(sp)
  804428:	2821883a 	mov	r16,r5
  80442c:	2023883a 	mov	r17,r4
  804430:	28005a26 	beq	r5,zero,80459c <_free_r+0x184>
  804434:	080a4b40 	call	80a4b4 <__malloc_lock>
  804438:	823ffe04 	addi	r8,r16,-8
  80443c:	41400117 	ldw	r5,4(r8)
  804440:	00bfff84 	movi	r2,-2
  804444:	02802074 	movhi	r10,129
  804448:	52b44204 	addi	r10,r10,-12024
  80444c:	288e703a 	and	r7,r5,r2
  804450:	41cd883a 	add	r6,r8,r7
  804454:	30c00117 	ldw	r3,4(r6)
  804458:	51000217 	ldw	r4,8(r10)
  80445c:	00bfff04 	movi	r2,-4
  804460:	1892703a 	and	r9,r3,r2
  804464:	5017883a 	mov	r11,r10
  804468:	31006726 	beq	r6,r4,804608 <_free_r+0x1f0>
  80446c:	2880004c 	andi	r2,r5,1
  804470:	1005003a 	cmpeq	r2,r2,zero
  804474:	32400115 	stw	r9,4(r6)
  804478:	10001a1e 	bne	r2,zero,8044e4 <_free_r+0xcc>
  80447c:	000b883a 	mov	r5,zero
  804480:	3247883a 	add	r3,r6,r9
  804484:	18800117 	ldw	r2,4(r3)
  804488:	1080004c 	andi	r2,r2,1
  80448c:	1000231e 	bne	r2,zero,80451c <_free_r+0x104>
  804490:	280ac03a 	cmpne	r5,r5,zero
  804494:	3a4f883a 	add	r7,r7,r9
  804498:	2800451e 	bne	r5,zero,8045b0 <_free_r+0x198>
  80449c:	31000217 	ldw	r4,8(r6)
  8044a0:	00802074 	movhi	r2,129
  8044a4:	10b44404 	addi	r2,r2,-12016
  8044a8:	20807b26 	beq	r4,r2,804698 <_free_r+0x280>
  8044ac:	30800317 	ldw	r2,12(r6)
  8044b0:	3a07883a 	add	r3,r7,r8
  8044b4:	19c00015 	stw	r7,0(r3)
  8044b8:	11000215 	stw	r4,8(r2)
  8044bc:	20800315 	stw	r2,12(r4)
  8044c0:	38800054 	ori	r2,r7,1
  8044c4:	40800115 	stw	r2,4(r8)
  8044c8:	28001a26 	beq	r5,zero,804534 <_free_r+0x11c>
  8044cc:	8809883a 	mov	r4,r17
  8044d0:	dfc00217 	ldw	ra,8(sp)
  8044d4:	dc400117 	ldw	r17,4(sp)
  8044d8:	dc000017 	ldw	r16,0(sp)
  8044dc:	dec00304 	addi	sp,sp,12
  8044e0:	080a4d41 	jmpi	80a4d4 <__malloc_unlock>
  8044e4:	80bffe17 	ldw	r2,-8(r16)
  8044e8:	50c00204 	addi	r3,r10,8
  8044ec:	4091c83a 	sub	r8,r8,r2
  8044f0:	41000217 	ldw	r4,8(r8)
  8044f4:	388f883a 	add	r7,r7,r2
  8044f8:	20c06126 	beq	r4,r3,804680 <_free_r+0x268>
  8044fc:	40800317 	ldw	r2,12(r8)
  804500:	3247883a 	add	r3,r6,r9
  804504:	000b883a 	mov	r5,zero
  804508:	11000215 	stw	r4,8(r2)
  80450c:	20800315 	stw	r2,12(r4)
  804510:	18800117 	ldw	r2,4(r3)
  804514:	1080004c 	andi	r2,r2,1
  804518:	103fdd26 	beq	r2,zero,804490 <_free_r+0x78>
  80451c:	38800054 	ori	r2,r7,1
  804520:	3a07883a 	add	r3,r7,r8
  804524:	280ac03a 	cmpne	r5,r5,zero
  804528:	40800115 	stw	r2,4(r8)
  80452c:	19c00015 	stw	r7,0(r3)
  804530:	283fe61e 	bne	r5,zero,8044cc <_free_r+0xb4>
  804534:	00807fc4 	movi	r2,511
  804538:	11c01f2e 	bgeu	r2,r7,8045b8 <_free_r+0x1a0>
  80453c:	3806d27a 	srli	r3,r7,9
  804540:	1800481e 	bne	r3,zero,804664 <_free_r+0x24c>
  804544:	3804d0fa 	srli	r2,r7,3
  804548:	100690fa 	slli	r3,r2,3
  80454c:	1acd883a 	add	r6,r3,r11
  804550:	31400217 	ldw	r5,8(r6)
  804554:	31405926 	beq	r6,r5,8046bc <_free_r+0x2a4>
  804558:	28800117 	ldw	r2,4(r5)
  80455c:	00ffff04 	movi	r3,-4
  804560:	10c4703a 	and	r2,r2,r3
  804564:	3880022e 	bgeu	r7,r2,804570 <_free_r+0x158>
  804568:	29400217 	ldw	r5,8(r5)
  80456c:	317ffa1e 	bne	r6,r5,804558 <_free_r+0x140>
  804570:	29800317 	ldw	r6,12(r5)
  804574:	41800315 	stw	r6,12(r8)
  804578:	41400215 	stw	r5,8(r8)
  80457c:	8809883a 	mov	r4,r17
  804580:	2a000315 	stw	r8,12(r5)
  804584:	32000215 	stw	r8,8(r6)
  804588:	dfc00217 	ldw	ra,8(sp)
  80458c:	dc400117 	ldw	r17,4(sp)
  804590:	dc000017 	ldw	r16,0(sp)
  804594:	dec00304 	addi	sp,sp,12
  804598:	080a4d41 	jmpi	80a4d4 <__malloc_unlock>
  80459c:	dfc00217 	ldw	ra,8(sp)
  8045a0:	dc400117 	ldw	r17,4(sp)
  8045a4:	dc000017 	ldw	r16,0(sp)
  8045a8:	dec00304 	addi	sp,sp,12
  8045ac:	f800283a 	ret
  8045b0:	31000217 	ldw	r4,8(r6)
  8045b4:	003fbd06 	br	8044ac <_free_r+0x94>
  8045b8:	3806d0fa 	srli	r3,r7,3
  8045bc:	00800044 	movi	r2,1
  8045c0:	51400117 	ldw	r5,4(r10)
  8045c4:	180890fa 	slli	r4,r3,3
  8045c8:	1807d0ba 	srai	r3,r3,2
  8045cc:	22c9883a 	add	r4,r4,r11
  8045d0:	21800217 	ldw	r6,8(r4)
  8045d4:	10c4983a 	sll	r2,r2,r3
  8045d8:	41000315 	stw	r4,12(r8)
  8045dc:	41800215 	stw	r6,8(r8)
  8045e0:	288ab03a 	or	r5,r5,r2
  8045e4:	22000215 	stw	r8,8(r4)
  8045e8:	8809883a 	mov	r4,r17
  8045ec:	51400115 	stw	r5,4(r10)
  8045f0:	32000315 	stw	r8,12(r6)
  8045f4:	dfc00217 	ldw	ra,8(sp)
  8045f8:	dc400117 	ldw	r17,4(sp)
  8045fc:	dc000017 	ldw	r16,0(sp)
  804600:	dec00304 	addi	sp,sp,12
  804604:	080a4d41 	jmpi	80a4d4 <__malloc_unlock>
  804608:	2880004c 	andi	r2,r5,1
  80460c:	3a4d883a 	add	r6,r7,r9
  804610:	1000071e 	bne	r2,zero,804630 <_free_r+0x218>
  804614:	80bffe17 	ldw	r2,-8(r16)
  804618:	4091c83a 	sub	r8,r8,r2
  80461c:	41000317 	ldw	r4,12(r8)
  804620:	40c00217 	ldw	r3,8(r8)
  804624:	308d883a 	add	r6,r6,r2
  804628:	20c00215 	stw	r3,8(r4)
  80462c:	19000315 	stw	r4,12(r3)
  804630:	00802074 	movhi	r2,129
  804634:	10b9eb04 	addi	r2,r2,-6228
  804638:	11000017 	ldw	r4,0(r2)
  80463c:	30c00054 	ori	r3,r6,1
  804640:	52000215 	stw	r8,8(r10)
  804644:	40c00115 	stw	r3,4(r8)
  804648:	313fa036 	bltu	r6,r4,8044cc <_free_r+0xb4>
  80464c:	00802074 	movhi	r2,129
  804650:	1080b204 	addi	r2,r2,712
  804654:	11400017 	ldw	r5,0(r2)
  804658:	8809883a 	mov	r4,r17
  80465c:	08042ec0 	call	8042ec <_malloc_trim_r>
  804660:	003f9a06 	br	8044cc <_free_r+0xb4>
  804664:	00800104 	movi	r2,4
  804668:	10c0072e 	bgeu	r2,r3,804688 <_free_r+0x270>
  80466c:	00800504 	movi	r2,20
  804670:	10c01936 	bltu	r2,r3,8046d8 <_free_r+0x2c0>
  804674:	188016c4 	addi	r2,r3,91
  804678:	100690fa 	slli	r3,r2,3
  80467c:	003fb306 	br	80454c <_free_r+0x134>
  804680:	01400044 	movi	r5,1
  804684:	003f7e06 	br	804480 <_free_r+0x68>
  804688:	3804d1ba 	srli	r2,r7,6
  80468c:	10800e04 	addi	r2,r2,56
  804690:	100690fa 	slli	r3,r2,3
  804694:	003fad06 	br	80454c <_free_r+0x134>
  804698:	22000315 	stw	r8,12(r4)
  80469c:	22000215 	stw	r8,8(r4)
  8046a0:	3a05883a 	add	r2,r7,r8
  8046a4:	38c00054 	ori	r3,r7,1
  8046a8:	11c00015 	stw	r7,0(r2)
  8046ac:	41000215 	stw	r4,8(r8)
  8046b0:	40c00115 	stw	r3,4(r8)
  8046b4:	41000315 	stw	r4,12(r8)
  8046b8:	003f8406 	br	8044cc <_free_r+0xb4>
  8046bc:	1005d0ba 	srai	r2,r2,2
  8046c0:	00c00044 	movi	r3,1
  8046c4:	51000117 	ldw	r4,4(r10)
  8046c8:	1886983a 	sll	r3,r3,r2
  8046cc:	20c8b03a 	or	r4,r4,r3
  8046d0:	51000115 	stw	r4,4(r10)
  8046d4:	003fa706 	br	804574 <_free_r+0x15c>
  8046d8:	00801504 	movi	r2,84
  8046dc:	10c00436 	bltu	r2,r3,8046f0 <_free_r+0x2d8>
  8046e0:	3804d33a 	srli	r2,r7,12
  8046e4:	10801b84 	addi	r2,r2,110
  8046e8:	100690fa 	slli	r3,r2,3
  8046ec:	003f9706 	br	80454c <_free_r+0x134>
  8046f0:	00805504 	movi	r2,340
  8046f4:	10c00436 	bltu	r2,r3,804708 <_free_r+0x2f0>
  8046f8:	3804d3fa 	srli	r2,r7,15
  8046fc:	10801dc4 	addi	r2,r2,119
  804700:	100690fa 	slli	r3,r2,3
  804704:	003f9106 	br	80454c <_free_r+0x134>
  804708:	00815504 	movi	r2,1364
  80470c:	10c0032e 	bgeu	r2,r3,80471c <_free_r+0x304>
  804710:	00801f84 	movi	r2,126
  804714:	00c0fc04 	movi	r3,1008
  804718:	003f8c06 	br	80454c <_free_r+0x134>
  80471c:	3804d4ba 	srli	r2,r7,18
  804720:	10801f04 	addi	r2,r2,124
  804724:	100690fa 	slli	r3,r2,3
  804728:	003f8806 	br	80454c <_free_r+0x134>

0080472c <__sfvwrite_r>:
  80472c:	30800217 	ldw	r2,8(r6)
  804730:	defff504 	addi	sp,sp,-44
  804734:	df000915 	stw	fp,36(sp)
  804738:	dd800715 	stw	r22,28(sp)
  80473c:	dc800315 	stw	r18,12(sp)
  804740:	dfc00a15 	stw	ra,40(sp)
  804744:	ddc00815 	stw	r23,32(sp)
  804748:	dd400615 	stw	r21,24(sp)
  80474c:	dd000515 	stw	r20,20(sp)
  804750:	dcc00415 	stw	r19,16(sp)
  804754:	dc400215 	stw	r17,8(sp)
  804758:	dc000115 	stw	r16,4(sp)
  80475c:	302d883a 	mov	r22,r6
  804760:	2039883a 	mov	fp,r4
  804764:	2825883a 	mov	r18,r5
  804768:	10001c26 	beq	r2,zero,8047dc <__sfvwrite_r+0xb0>
  80476c:	29c0030b 	ldhu	r7,12(r5)
  804770:	3880020c 	andi	r2,r7,8
  804774:	10002726 	beq	r2,zero,804814 <__sfvwrite_r+0xe8>
  804778:	28800417 	ldw	r2,16(r5)
  80477c:	10002526 	beq	r2,zero,804814 <__sfvwrite_r+0xe8>
  804780:	3880008c 	andi	r2,r7,2
  804784:	b5400017 	ldw	r21,0(r22)
  804788:	10002826 	beq	r2,zero,80482c <__sfvwrite_r+0x100>
  80478c:	0021883a 	mov	r16,zero
  804790:	0023883a 	mov	r17,zero
  804794:	880d883a 	mov	r6,r17
  804798:	e009883a 	mov	r4,fp
  80479c:	00810004 	movi	r2,1024
  8047a0:	80006e26 	beq	r16,zero,80495c <__sfvwrite_r+0x230>
  8047a4:	800f883a 	mov	r7,r16
  8047a8:	91400717 	ldw	r5,28(r18)
  8047ac:	1400012e 	bgeu	r2,r16,8047b4 <__sfvwrite_r+0x88>
  8047b0:	100f883a 	mov	r7,r2
  8047b4:	90c00917 	ldw	r3,36(r18)
  8047b8:	183ee83a 	callr	r3
  8047bc:	1007883a 	mov	r3,r2
  8047c0:	80a1c83a 	sub	r16,r16,r2
  8047c4:	88a3883a 	add	r17,r17,r2
  8047c8:	00806d0e 	bge	zero,r2,804980 <__sfvwrite_r+0x254>
  8047cc:	b0800217 	ldw	r2,8(r22)
  8047d0:	10c5c83a 	sub	r2,r2,r3
  8047d4:	b0800215 	stw	r2,8(r22)
  8047d8:	103fee1e 	bne	r2,zero,804794 <__sfvwrite_r+0x68>
  8047dc:	0009883a 	mov	r4,zero
  8047e0:	2005883a 	mov	r2,r4
  8047e4:	dfc00a17 	ldw	ra,40(sp)
  8047e8:	df000917 	ldw	fp,36(sp)
  8047ec:	ddc00817 	ldw	r23,32(sp)
  8047f0:	dd800717 	ldw	r22,28(sp)
  8047f4:	dd400617 	ldw	r21,24(sp)
  8047f8:	dd000517 	ldw	r20,20(sp)
  8047fc:	dcc00417 	ldw	r19,16(sp)
  804800:	dc800317 	ldw	r18,12(sp)
  804804:	dc400217 	ldw	r17,8(sp)
  804808:	dc000117 	ldw	r16,4(sp)
  80480c:	dec00b04 	addi	sp,sp,44
  804810:	f800283a 	ret
  804814:	08024940 	call	802494 <__swsetup_r>
  804818:	1000e41e 	bne	r2,zero,804bac <__sfvwrite_r+0x480>
  80481c:	91c0030b 	ldhu	r7,12(r18)
  804820:	b5400017 	ldw	r21,0(r22)
  804824:	3880008c 	andi	r2,r7,2
  804828:	103fd81e 	bne	r2,zero,80478c <__sfvwrite_r+0x60>
  80482c:	3880004c 	andi	r2,r7,1
  804830:	1005003a 	cmpeq	r2,r2,zero
  804834:	10005726 	beq	r2,zero,804994 <__sfvwrite_r+0x268>
  804838:	0029883a 	mov	r20,zero
  80483c:	002f883a 	mov	r23,zero
  804840:	a0004226 	beq	r20,zero,80494c <__sfvwrite_r+0x220>
  804844:	3880800c 	andi	r2,r7,512
  804848:	94000217 	ldw	r16,8(r18)
  80484c:	10008b26 	beq	r2,zero,804a7c <__sfvwrite_r+0x350>
  804850:	800d883a 	mov	r6,r16
  804854:	a400a536 	bltu	r20,r16,804aec <__sfvwrite_r+0x3c0>
  804858:	3881200c 	andi	r2,r7,1152
  80485c:	10002726 	beq	r2,zero,8048fc <__sfvwrite_r+0x1d0>
  804860:	90800517 	ldw	r2,20(r18)
  804864:	92000417 	ldw	r8,16(r18)
  804868:	91400017 	ldw	r5,0(r18)
  80486c:	1087883a 	add	r3,r2,r2
  804870:	1887883a 	add	r3,r3,r2
  804874:	1808d7fa 	srli	r4,r3,31
  804878:	2a21c83a 	sub	r16,r5,r8
  80487c:	80800044 	addi	r2,r16,1
  804880:	20c9883a 	add	r4,r4,r3
  804884:	2027d07a 	srai	r19,r4,1
  804888:	a085883a 	add	r2,r20,r2
  80488c:	980d883a 	mov	r6,r19
  804890:	9880022e 	bgeu	r19,r2,80489c <__sfvwrite_r+0x170>
  804894:	1027883a 	mov	r19,r2
  804898:	100d883a 	mov	r6,r2
  80489c:	3881000c 	andi	r2,r7,1024
  8048a0:	1000b826 	beq	r2,zero,804b84 <__sfvwrite_r+0x458>
  8048a4:	300b883a 	mov	r5,r6
  8048a8:	e009883a 	mov	r4,fp
  8048ac:	0804fa00 	call	804fa0 <_malloc_r>
  8048b0:	10003126 	beq	r2,zero,804978 <__sfvwrite_r+0x24c>
  8048b4:	91400417 	ldw	r5,16(r18)
  8048b8:	1009883a 	mov	r4,r2
  8048bc:	800d883a 	mov	r6,r16
  8048c0:	1023883a 	mov	r17,r2
  8048c4:	08057c40 	call	8057c4 <memcpy>
  8048c8:	90c0030b 	ldhu	r3,12(r18)
  8048cc:	00beffc4 	movi	r2,-1025
  8048d0:	1886703a 	and	r3,r3,r2
  8048d4:	18c02014 	ori	r3,r3,128
  8048d8:	90c0030d 	sth	r3,12(r18)
  8048dc:	9c07c83a 	sub	r3,r19,r16
  8048e0:	8c05883a 	add	r2,r17,r16
  8048e4:	a00d883a 	mov	r6,r20
  8048e8:	a021883a 	mov	r16,r20
  8048ec:	90800015 	stw	r2,0(r18)
  8048f0:	90c00215 	stw	r3,8(r18)
  8048f4:	94400415 	stw	r17,16(r18)
  8048f8:	94c00515 	stw	r19,20(r18)
  8048fc:	91000017 	ldw	r4,0(r18)
  804900:	b80b883a 	mov	r5,r23
  804904:	a023883a 	mov	r17,r20
  804908:	08058640 	call	805864 <memmove>
  80490c:	90c00217 	ldw	r3,8(r18)
  804910:	90800017 	ldw	r2,0(r18)
  804914:	a027883a 	mov	r19,r20
  804918:	1c07c83a 	sub	r3,r3,r16
  80491c:	1405883a 	add	r2,r2,r16
  804920:	90c00215 	stw	r3,8(r18)
  804924:	a021883a 	mov	r16,r20
  804928:	90800015 	stw	r2,0(r18)
  80492c:	b0800217 	ldw	r2,8(r22)
  804930:	1405c83a 	sub	r2,r2,r16
  804934:	b0800215 	stw	r2,8(r22)
  804938:	103fa826 	beq	r2,zero,8047dc <__sfvwrite_r+0xb0>
  80493c:	a469c83a 	sub	r20,r20,r17
  804940:	91c0030b 	ldhu	r7,12(r18)
  804944:	bcef883a 	add	r23,r23,r19
  804948:	a03fbe1e 	bne	r20,zero,804844 <__sfvwrite_r+0x118>
  80494c:	adc00017 	ldw	r23,0(r21)
  804950:	ad000117 	ldw	r20,4(r21)
  804954:	ad400204 	addi	r21,r21,8
  804958:	003fb906 	br	804840 <__sfvwrite_r+0x114>
  80495c:	ac400017 	ldw	r17,0(r21)
  804960:	ac000117 	ldw	r16,4(r21)
  804964:	ad400204 	addi	r21,r21,8
  804968:	003f8a06 	br	804794 <__sfvwrite_r+0x68>
  80496c:	91400417 	ldw	r5,16(r18)
  804970:	e009883a 	mov	r4,fp
  804974:	08044180 	call	804418 <_free_r>
  804978:	00800304 	movi	r2,12
  80497c:	e0800015 	stw	r2,0(fp)
  804980:	9080030b 	ldhu	r2,12(r18)
  804984:	013fffc4 	movi	r4,-1
  804988:	10801014 	ori	r2,r2,64
  80498c:	9080030d 	sth	r2,12(r18)
  804990:	003f9306 	br	8047e0 <__sfvwrite_r+0xb4>
  804994:	0027883a 	mov	r19,zero
  804998:	002f883a 	mov	r23,zero
  80499c:	d8000015 	stw	zero,0(sp)
  8049a0:	0029883a 	mov	r20,zero
  8049a4:	98001e26 	beq	r19,zero,804a20 <__sfvwrite_r+0x2f4>
  8049a8:	d8c00017 	ldw	r3,0(sp)
  8049ac:	1804c03a 	cmpne	r2,r3,zero
  8049b0:	10005e26 	beq	r2,zero,804b2c <__sfvwrite_r+0x400>
  8049b4:	9821883a 	mov	r16,r19
  8049b8:	a4c0012e 	bgeu	r20,r19,8049c0 <__sfvwrite_r+0x294>
  8049bc:	a021883a 	mov	r16,r20
  8049c0:	91000017 	ldw	r4,0(r18)
  8049c4:	90800417 	ldw	r2,16(r18)
  8049c8:	91800217 	ldw	r6,8(r18)
  8049cc:	91c00517 	ldw	r7,20(r18)
  8049d0:	1100022e 	bgeu	r2,r4,8049dc <__sfvwrite_r+0x2b0>
  8049d4:	31e3883a 	add	r17,r6,r7
  8049d8:	8c001616 	blt	r17,r16,804a34 <__sfvwrite_r+0x308>
  8049dc:	81c03816 	blt	r16,r7,804ac0 <__sfvwrite_r+0x394>
  8049e0:	90c00917 	ldw	r3,36(r18)
  8049e4:	91400717 	ldw	r5,28(r18)
  8049e8:	e009883a 	mov	r4,fp
  8049ec:	b80d883a 	mov	r6,r23
  8049f0:	183ee83a 	callr	r3
  8049f4:	1023883a 	mov	r17,r2
  8049f8:	00bfe10e 	bge	zero,r2,804980 <__sfvwrite_r+0x254>
  8049fc:	a469c83a 	sub	r20,r20,r17
  804a00:	a0001826 	beq	r20,zero,804a64 <__sfvwrite_r+0x338>
  804a04:	b0800217 	ldw	r2,8(r22)
  804a08:	1445c83a 	sub	r2,r2,r17
  804a0c:	b0800215 	stw	r2,8(r22)
  804a10:	103f7226 	beq	r2,zero,8047dc <__sfvwrite_r+0xb0>
  804a14:	9c67c83a 	sub	r19,r19,r17
  804a18:	bc6f883a 	add	r23,r23,r17
  804a1c:	983fe21e 	bne	r19,zero,8049a8 <__sfvwrite_r+0x27c>
  804a20:	adc00017 	ldw	r23,0(r21)
  804a24:	acc00117 	ldw	r19,4(r21)
  804a28:	ad400204 	addi	r21,r21,8
  804a2c:	d8000015 	stw	zero,0(sp)
  804a30:	003fdc06 	br	8049a4 <__sfvwrite_r+0x278>
  804a34:	b80b883a 	mov	r5,r23
  804a38:	880d883a 	mov	r6,r17
  804a3c:	08058640 	call	805864 <memmove>
  804a40:	90c00017 	ldw	r3,0(r18)
  804a44:	e009883a 	mov	r4,fp
  804a48:	900b883a 	mov	r5,r18
  804a4c:	1c47883a 	add	r3,r3,r17
  804a50:	90c00015 	stw	r3,0(r18)
  804a54:	0803dc80 	call	803dc8 <_fflush_r>
  804a58:	103fc91e 	bne	r2,zero,804980 <__sfvwrite_r+0x254>
  804a5c:	a469c83a 	sub	r20,r20,r17
  804a60:	a03fe81e 	bne	r20,zero,804a04 <__sfvwrite_r+0x2d8>
  804a64:	e009883a 	mov	r4,fp
  804a68:	900b883a 	mov	r5,r18
  804a6c:	0803dc80 	call	803dc8 <_fflush_r>
  804a70:	103fc31e 	bne	r2,zero,804980 <__sfvwrite_r+0x254>
  804a74:	d8000015 	stw	zero,0(sp)
  804a78:	003fe206 	br	804a04 <__sfvwrite_r+0x2d8>
  804a7c:	91000017 	ldw	r4,0(r18)
  804a80:	90800417 	ldw	r2,16(r18)
  804a84:	1100022e 	bgeu	r2,r4,804a90 <__sfvwrite_r+0x364>
  804a88:	8023883a 	mov	r17,r16
  804a8c:	85003136 	bltu	r16,r20,804b54 <__sfvwrite_r+0x428>
  804a90:	91c00517 	ldw	r7,20(r18)
  804a94:	a1c01836 	bltu	r20,r7,804af8 <__sfvwrite_r+0x3cc>
  804a98:	90c00917 	ldw	r3,36(r18)
  804a9c:	91400717 	ldw	r5,28(r18)
  804aa0:	e009883a 	mov	r4,fp
  804aa4:	b80d883a 	mov	r6,r23
  804aa8:	183ee83a 	callr	r3
  804aac:	1021883a 	mov	r16,r2
  804ab0:	00bfb30e 	bge	zero,r2,804980 <__sfvwrite_r+0x254>
  804ab4:	1023883a 	mov	r17,r2
  804ab8:	1027883a 	mov	r19,r2
  804abc:	003f9b06 	br	80492c <__sfvwrite_r+0x200>
  804ac0:	b80b883a 	mov	r5,r23
  804ac4:	800d883a 	mov	r6,r16
  804ac8:	08058640 	call	805864 <memmove>
  804acc:	90c00217 	ldw	r3,8(r18)
  804ad0:	90800017 	ldw	r2,0(r18)
  804ad4:	8023883a 	mov	r17,r16
  804ad8:	1c07c83a 	sub	r3,r3,r16
  804adc:	1405883a 	add	r2,r2,r16
  804ae0:	90c00215 	stw	r3,8(r18)
  804ae4:	90800015 	stw	r2,0(r18)
  804ae8:	003fc406 	br	8049fc <__sfvwrite_r+0x2d0>
  804aec:	a00d883a 	mov	r6,r20
  804af0:	a021883a 	mov	r16,r20
  804af4:	003f8106 	br	8048fc <__sfvwrite_r+0x1d0>
  804af8:	b80b883a 	mov	r5,r23
  804afc:	a00d883a 	mov	r6,r20
  804b00:	08058640 	call	805864 <memmove>
  804b04:	90c00217 	ldw	r3,8(r18)
  804b08:	90800017 	ldw	r2,0(r18)
  804b0c:	a021883a 	mov	r16,r20
  804b10:	1d07c83a 	sub	r3,r3,r20
  804b14:	1505883a 	add	r2,r2,r20
  804b18:	a023883a 	mov	r17,r20
  804b1c:	a027883a 	mov	r19,r20
  804b20:	90c00215 	stw	r3,8(r18)
  804b24:	90800015 	stw	r2,0(r18)
  804b28:	003f8006 	br	80492c <__sfvwrite_r+0x200>
  804b2c:	b809883a 	mov	r4,r23
  804b30:	01400284 	movi	r5,10
  804b34:	980d883a 	mov	r6,r19
  804b38:	08056e00 	call	8056e0 <memchr>
  804b3c:	10001726 	beq	r2,zero,804b9c <__sfvwrite_r+0x470>
  804b40:	15c5c83a 	sub	r2,r2,r23
  804b44:	15000044 	addi	r20,r2,1
  804b48:	00800044 	movi	r2,1
  804b4c:	d8800015 	stw	r2,0(sp)
  804b50:	003f9806 	br	8049b4 <__sfvwrite_r+0x288>
  804b54:	b80b883a 	mov	r5,r23
  804b58:	800d883a 	mov	r6,r16
  804b5c:	08058640 	call	805864 <memmove>
  804b60:	90c00017 	ldw	r3,0(r18)
  804b64:	e009883a 	mov	r4,fp
  804b68:	900b883a 	mov	r5,r18
  804b6c:	1c07883a 	add	r3,r3,r16
  804b70:	90c00015 	stw	r3,0(r18)
  804b74:	8027883a 	mov	r19,r16
  804b78:	0803dc80 	call	803dc8 <_fflush_r>
  804b7c:	103f6b26 	beq	r2,zero,80492c <__sfvwrite_r+0x200>
  804b80:	003f7f06 	br	804980 <__sfvwrite_r+0x254>
  804b84:	400b883a 	mov	r5,r8
  804b88:	e009883a 	mov	r4,fp
  804b8c:	0806a680 	call	806a68 <_realloc_r>
  804b90:	103f7626 	beq	r2,zero,80496c <__sfvwrite_r+0x240>
  804b94:	1023883a 	mov	r17,r2
  804b98:	003f5006 	br	8048dc <__sfvwrite_r+0x1b0>
  804b9c:	00c00044 	movi	r3,1
  804ba0:	9d000044 	addi	r20,r19,1
  804ba4:	d8c00015 	stw	r3,0(sp)
  804ba8:	003f8206 	br	8049b4 <__sfvwrite_r+0x288>
  804bac:	9080030b 	ldhu	r2,12(r18)
  804bb0:	00c00244 	movi	r3,9
  804bb4:	013fffc4 	movi	r4,-1
  804bb8:	10801014 	ori	r2,r2,64
  804bbc:	9080030d 	sth	r2,12(r18)
  804bc0:	e0c00015 	stw	r3,0(fp)
  804bc4:	003f0606 	br	8047e0 <__sfvwrite_r+0xb4>

00804bc8 <_fwalk_reent>:
  804bc8:	defff704 	addi	sp,sp,-36
  804bcc:	dcc00315 	stw	r19,12(sp)
  804bd0:	24c0b804 	addi	r19,r4,736
  804bd4:	dd800615 	stw	r22,24(sp)
  804bd8:	dd400515 	stw	r21,20(sp)
  804bdc:	dfc00815 	stw	ra,32(sp)
  804be0:	ddc00715 	stw	r23,28(sp)
  804be4:	dd000415 	stw	r20,16(sp)
  804be8:	dc800215 	stw	r18,8(sp)
  804bec:	dc400115 	stw	r17,4(sp)
  804bf0:	dc000015 	stw	r16,0(sp)
  804bf4:	202b883a 	mov	r21,r4
  804bf8:	282d883a 	mov	r22,r5
  804bfc:	08040500 	call	804050 <__sfp_lock_acquire>
  804c00:	98002126 	beq	r19,zero,804c88 <_fwalk_reent+0xc0>
  804c04:	002f883a 	mov	r23,zero
  804c08:	9c800117 	ldw	r18,4(r19)
  804c0c:	9c000217 	ldw	r16,8(r19)
  804c10:	90bfffc4 	addi	r2,r18,-1
  804c14:	10000d16 	blt	r2,zero,804c4c <_fwalk_reent+0x84>
  804c18:	0023883a 	mov	r17,zero
  804c1c:	053fffc4 	movi	r20,-1
  804c20:	8080030f 	ldh	r2,12(r16)
  804c24:	8c400044 	addi	r17,r17,1
  804c28:	10000626 	beq	r2,zero,804c44 <_fwalk_reent+0x7c>
  804c2c:	8080038f 	ldh	r2,14(r16)
  804c30:	800b883a 	mov	r5,r16
  804c34:	a809883a 	mov	r4,r21
  804c38:	15000226 	beq	r2,r20,804c44 <_fwalk_reent+0x7c>
  804c3c:	b03ee83a 	callr	r22
  804c40:	b8aeb03a 	or	r23,r23,r2
  804c44:	84001704 	addi	r16,r16,92
  804c48:	947ff51e 	bne	r18,r17,804c20 <_fwalk_reent+0x58>
  804c4c:	9cc00017 	ldw	r19,0(r19)
  804c50:	983fed1e 	bne	r19,zero,804c08 <_fwalk_reent+0x40>
  804c54:	08040540 	call	804054 <__sfp_lock_release>
  804c58:	b805883a 	mov	r2,r23
  804c5c:	dfc00817 	ldw	ra,32(sp)
  804c60:	ddc00717 	ldw	r23,28(sp)
  804c64:	dd800617 	ldw	r22,24(sp)
  804c68:	dd400517 	ldw	r21,20(sp)
  804c6c:	dd000417 	ldw	r20,16(sp)
  804c70:	dcc00317 	ldw	r19,12(sp)
  804c74:	dc800217 	ldw	r18,8(sp)
  804c78:	dc400117 	ldw	r17,4(sp)
  804c7c:	dc000017 	ldw	r16,0(sp)
  804c80:	dec00904 	addi	sp,sp,36
  804c84:	f800283a 	ret
  804c88:	002f883a 	mov	r23,zero
  804c8c:	003ff106 	br	804c54 <_fwalk_reent+0x8c>

00804c90 <_fwalk>:
  804c90:	defff804 	addi	sp,sp,-32
  804c94:	dcc00315 	stw	r19,12(sp)
  804c98:	24c0b804 	addi	r19,r4,736
  804c9c:	dd400515 	stw	r21,20(sp)
  804ca0:	dfc00715 	stw	ra,28(sp)
  804ca4:	dd800615 	stw	r22,24(sp)
  804ca8:	dd000415 	stw	r20,16(sp)
  804cac:	dc800215 	stw	r18,8(sp)
  804cb0:	dc400115 	stw	r17,4(sp)
  804cb4:	dc000015 	stw	r16,0(sp)
  804cb8:	282b883a 	mov	r21,r5
  804cbc:	08040500 	call	804050 <__sfp_lock_acquire>
  804cc0:	98001f26 	beq	r19,zero,804d40 <_fwalk+0xb0>
  804cc4:	002d883a 	mov	r22,zero
  804cc8:	9c800117 	ldw	r18,4(r19)
  804ccc:	9c000217 	ldw	r16,8(r19)
  804cd0:	90bfffc4 	addi	r2,r18,-1
  804cd4:	10000c16 	blt	r2,zero,804d08 <_fwalk+0x78>
  804cd8:	0023883a 	mov	r17,zero
  804cdc:	053fffc4 	movi	r20,-1
  804ce0:	8080030f 	ldh	r2,12(r16)
  804ce4:	8c400044 	addi	r17,r17,1
  804ce8:	10000526 	beq	r2,zero,804d00 <_fwalk+0x70>
  804cec:	8080038f 	ldh	r2,14(r16)
  804cf0:	8009883a 	mov	r4,r16
  804cf4:	15000226 	beq	r2,r20,804d00 <_fwalk+0x70>
  804cf8:	a83ee83a 	callr	r21
  804cfc:	b0acb03a 	or	r22,r22,r2
  804d00:	84001704 	addi	r16,r16,92
  804d04:	947ff61e 	bne	r18,r17,804ce0 <_fwalk+0x50>
  804d08:	9cc00017 	ldw	r19,0(r19)
  804d0c:	983fee1e 	bne	r19,zero,804cc8 <_fwalk+0x38>
  804d10:	08040540 	call	804054 <__sfp_lock_release>
  804d14:	b005883a 	mov	r2,r22
  804d18:	dfc00717 	ldw	ra,28(sp)
  804d1c:	dd800617 	ldw	r22,24(sp)
  804d20:	dd400517 	ldw	r21,20(sp)
  804d24:	dd000417 	ldw	r20,16(sp)
  804d28:	dcc00317 	ldw	r19,12(sp)
  804d2c:	dc800217 	ldw	r18,8(sp)
  804d30:	dc400117 	ldw	r17,4(sp)
  804d34:	dc000017 	ldw	r16,0(sp)
  804d38:	dec00804 	addi	sp,sp,32
  804d3c:	f800283a 	ret
  804d40:	002d883a 	mov	r22,zero
  804d44:	003ff206 	br	804d10 <_fwalk+0x80>

00804d48 <__locale_charset>:
  804d48:	d0a00317 	ldw	r2,-32756(gp)
  804d4c:	f800283a 	ret

00804d50 <_localeconv_r>:
  804d50:	00802074 	movhi	r2,129
  804d54:	10b28e04 	addi	r2,r2,-13768
  804d58:	f800283a 	ret

00804d5c <localeconv>:
  804d5c:	00802074 	movhi	r2,129
  804d60:	10b9e704 	addi	r2,r2,-6244
  804d64:	11000017 	ldw	r4,0(r2)
  804d68:	0804d501 	jmpi	804d50 <_localeconv_r>

00804d6c <_setlocale_r>:
  804d6c:	defffc04 	addi	sp,sp,-16
  804d70:	00c02074 	movhi	r3,129
  804d74:	18f28904 	addi	r3,r3,-13788
  804d78:	dc800215 	stw	r18,8(sp)
  804d7c:	dc400115 	stw	r17,4(sp)
  804d80:	dc000015 	stw	r16,0(sp)
  804d84:	2023883a 	mov	r17,r4
  804d88:	2825883a 	mov	r18,r5
  804d8c:	dfc00315 	stw	ra,12(sp)
  804d90:	3021883a 	mov	r16,r6
  804d94:	3009883a 	mov	r4,r6
  804d98:	180b883a 	mov	r5,r3
  804d9c:	30000926 	beq	r6,zero,804dc4 <_setlocale_r+0x58>
  804da0:	08072880 	call	807288 <strcmp>
  804da4:	8009883a 	mov	r4,r16
  804da8:	01402074 	movhi	r5,129
  804dac:	29727404 	addi	r5,r5,-13872
  804db0:	10000b1e 	bne	r2,zero,804de0 <_setlocale_r+0x74>
  804db4:	8c000d15 	stw	r16,52(r17)
  804db8:	8c800c15 	stw	r18,48(r17)
  804dbc:	00c02074 	movhi	r3,129
  804dc0:	18f28904 	addi	r3,r3,-13788
  804dc4:	1805883a 	mov	r2,r3
  804dc8:	dfc00317 	ldw	ra,12(sp)
  804dcc:	dc800217 	ldw	r18,8(sp)
  804dd0:	dc400117 	ldw	r17,4(sp)
  804dd4:	dc000017 	ldw	r16,0(sp)
  804dd8:	dec00404 	addi	sp,sp,16
  804ddc:	f800283a 	ret
  804de0:	08072880 	call	807288 <strcmp>
  804de4:	0007883a 	mov	r3,zero
  804de8:	103ff226 	beq	r2,zero,804db4 <_setlocale_r+0x48>
  804dec:	003ff506 	br	804dc4 <_setlocale_r+0x58>

00804df0 <setlocale>:
  804df0:	01802074 	movhi	r6,129
  804df4:	31b9e704 	addi	r6,r6,-6244
  804df8:	2007883a 	mov	r3,r4
  804dfc:	31000017 	ldw	r4,0(r6)
  804e00:	280d883a 	mov	r6,r5
  804e04:	180b883a 	mov	r5,r3
  804e08:	0804d6c1 	jmpi	804d6c <_setlocale_r>

00804e0c <__smakebuf_r>:
  804e0c:	2880030b 	ldhu	r2,12(r5)
  804e10:	deffed04 	addi	sp,sp,-76
  804e14:	dc401015 	stw	r17,64(sp)
  804e18:	1080008c 	andi	r2,r2,2
  804e1c:	dc000f15 	stw	r16,60(sp)
  804e20:	dfc01215 	stw	ra,72(sp)
  804e24:	dc801115 	stw	r18,68(sp)
  804e28:	2821883a 	mov	r16,r5
  804e2c:	2023883a 	mov	r17,r4
  804e30:	10000b26 	beq	r2,zero,804e60 <__smakebuf_r+0x54>
  804e34:	28c010c4 	addi	r3,r5,67
  804e38:	00800044 	movi	r2,1
  804e3c:	28800515 	stw	r2,20(r5)
  804e40:	28c00415 	stw	r3,16(r5)
  804e44:	28c00015 	stw	r3,0(r5)
  804e48:	dfc01217 	ldw	ra,72(sp)
  804e4c:	dc801117 	ldw	r18,68(sp)
  804e50:	dc401017 	ldw	r17,64(sp)
  804e54:	dc000f17 	ldw	r16,60(sp)
  804e58:	dec01304 	addi	sp,sp,76
  804e5c:	f800283a 	ret
  804e60:	2940038f 	ldh	r5,14(r5)
  804e64:	28002116 	blt	r5,zero,804eec <__smakebuf_r+0xe0>
  804e68:	d80d883a 	mov	r6,sp
  804e6c:	08076180 	call	807618 <_fstat_r>
  804e70:	10001e16 	blt	r2,zero,804eec <__smakebuf_r+0xe0>
  804e74:	d8800117 	ldw	r2,4(sp)
  804e78:	00e00014 	movui	r3,32768
  804e7c:	113c000c 	andi	r4,r2,61440
  804e80:	20c03126 	beq	r4,r3,804f48 <__smakebuf_r+0x13c>
  804e84:	8080030b 	ldhu	r2,12(r16)
  804e88:	00c80004 	movi	r3,8192
  804e8c:	10820014 	ori	r2,r2,2048
  804e90:	8080030d 	sth	r2,12(r16)
  804e94:	20c01e26 	beq	r4,r3,804f10 <__smakebuf_r+0x104>
  804e98:	04810004 	movi	r18,1024
  804e9c:	8809883a 	mov	r4,r17
  804ea0:	900b883a 	mov	r5,r18
  804ea4:	0804fa00 	call	804fa0 <_malloc_r>
  804ea8:	1009883a 	mov	r4,r2
  804eac:	10003126 	beq	r2,zero,804f74 <__smakebuf_r+0x168>
  804eb0:	80c0030b 	ldhu	r3,12(r16)
  804eb4:	00802034 	movhi	r2,128
  804eb8:	10905104 	addi	r2,r2,16708
  804ebc:	88800f15 	stw	r2,60(r17)
  804ec0:	18c02014 	ori	r3,r3,128
  804ec4:	84800515 	stw	r18,20(r16)
  804ec8:	80c0030d 	sth	r3,12(r16)
  804ecc:	81000415 	stw	r4,16(r16)
  804ed0:	81000015 	stw	r4,0(r16)
  804ed4:	dfc01217 	ldw	ra,72(sp)
  804ed8:	dc801117 	ldw	r18,68(sp)
  804edc:	dc401017 	ldw	r17,64(sp)
  804ee0:	dc000f17 	ldw	r16,60(sp)
  804ee4:	dec01304 	addi	sp,sp,76
  804ee8:	f800283a 	ret
  804eec:	80c0030b 	ldhu	r3,12(r16)
  804ef0:	1880200c 	andi	r2,r3,128
  804ef4:	10000426 	beq	r2,zero,804f08 <__smakebuf_r+0xfc>
  804ef8:	04801004 	movi	r18,64
  804efc:	18820014 	ori	r2,r3,2048
  804f00:	8080030d 	sth	r2,12(r16)
  804f04:	003fe506 	br	804e9c <__smakebuf_r+0x90>
  804f08:	04810004 	movi	r18,1024
  804f0c:	003ffb06 	br	804efc <__smakebuf_r+0xf0>
  804f10:	8140038f 	ldh	r5,14(r16)
  804f14:	8809883a 	mov	r4,r17
  804f18:	080768c0 	call	80768c <_isatty_r>
  804f1c:	103fde26 	beq	r2,zero,804e98 <__smakebuf_r+0x8c>
  804f20:	8080030b 	ldhu	r2,12(r16)
  804f24:	80c010c4 	addi	r3,r16,67
  804f28:	04810004 	movi	r18,1024
  804f2c:	10800054 	ori	r2,r2,1
  804f30:	8080030d 	sth	r2,12(r16)
  804f34:	00800044 	movi	r2,1
  804f38:	80c00415 	stw	r3,16(r16)
  804f3c:	80800515 	stw	r2,20(r16)
  804f40:	80c00015 	stw	r3,0(r16)
  804f44:	003fd506 	br	804e9c <__smakebuf_r+0x90>
  804f48:	80c00a17 	ldw	r3,40(r16)
  804f4c:	00802034 	movhi	r2,128
  804f50:	109c5104 	addi	r2,r2,28996
  804f54:	18bfcb1e 	bne	r3,r2,804e84 <__smakebuf_r+0x78>
  804f58:	8080030b 	ldhu	r2,12(r16)
  804f5c:	00c10004 	movi	r3,1024
  804f60:	1825883a 	mov	r18,r3
  804f64:	10c4b03a 	or	r2,r2,r3
  804f68:	8080030d 	sth	r2,12(r16)
  804f6c:	80c01315 	stw	r3,76(r16)
  804f70:	003fca06 	br	804e9c <__smakebuf_r+0x90>
  804f74:	8100030b 	ldhu	r4,12(r16)
  804f78:	2080800c 	andi	r2,r4,512
  804f7c:	103fb21e 	bne	r2,zero,804e48 <__smakebuf_r+0x3c>
  804f80:	80c010c4 	addi	r3,r16,67
  804f84:	21000094 	ori	r4,r4,2
  804f88:	00800044 	movi	r2,1
  804f8c:	80800515 	stw	r2,20(r16)
  804f90:	8100030d 	sth	r4,12(r16)
  804f94:	80c00415 	stw	r3,16(r16)
  804f98:	80c00015 	stw	r3,0(r16)
  804f9c:	003faa06 	br	804e48 <__smakebuf_r+0x3c>

00804fa0 <_malloc_r>:
  804fa0:	defff604 	addi	sp,sp,-40
  804fa4:	28c002c4 	addi	r3,r5,11
  804fa8:	00800584 	movi	r2,22
  804fac:	dc800215 	stw	r18,8(sp)
  804fb0:	dfc00915 	stw	ra,36(sp)
  804fb4:	df000815 	stw	fp,32(sp)
  804fb8:	ddc00715 	stw	r23,28(sp)
  804fbc:	dd800615 	stw	r22,24(sp)
  804fc0:	dd400515 	stw	r21,20(sp)
  804fc4:	dd000415 	stw	r20,16(sp)
  804fc8:	dcc00315 	stw	r19,12(sp)
  804fcc:	dc400115 	stw	r17,4(sp)
  804fd0:	dc000015 	stw	r16,0(sp)
  804fd4:	2025883a 	mov	r18,r4
  804fd8:	10c01236 	bltu	r2,r3,805024 <_malloc_r+0x84>
  804fdc:	04400404 	movi	r17,16
  804fe0:	8940142e 	bgeu	r17,r5,805034 <_malloc_r+0x94>
  804fe4:	00800304 	movi	r2,12
  804fe8:	0007883a 	mov	r3,zero
  804fec:	90800015 	stw	r2,0(r18)
  804ff0:	1805883a 	mov	r2,r3
  804ff4:	dfc00917 	ldw	ra,36(sp)
  804ff8:	df000817 	ldw	fp,32(sp)
  804ffc:	ddc00717 	ldw	r23,28(sp)
  805000:	dd800617 	ldw	r22,24(sp)
  805004:	dd400517 	ldw	r21,20(sp)
  805008:	dd000417 	ldw	r20,16(sp)
  80500c:	dcc00317 	ldw	r19,12(sp)
  805010:	dc800217 	ldw	r18,8(sp)
  805014:	dc400117 	ldw	r17,4(sp)
  805018:	dc000017 	ldw	r16,0(sp)
  80501c:	dec00a04 	addi	sp,sp,40
  805020:	f800283a 	ret
  805024:	00bffe04 	movi	r2,-8
  805028:	18a2703a 	and	r17,r3,r2
  80502c:	883fed16 	blt	r17,zero,804fe4 <_malloc_r+0x44>
  805030:	897fec36 	bltu	r17,r5,804fe4 <_malloc_r+0x44>
  805034:	9009883a 	mov	r4,r18
  805038:	080a4b40 	call	80a4b4 <__malloc_lock>
  80503c:	00807dc4 	movi	r2,503
  805040:	14402b2e 	bgeu	r2,r17,8050f0 <_malloc_r+0x150>
  805044:	8806d27a 	srli	r3,r17,9
  805048:	18003f1e 	bne	r3,zero,805148 <_malloc_r+0x1a8>
  80504c:	880cd0fa 	srli	r6,r17,3
  805050:	300490fa 	slli	r2,r6,3
  805054:	02c02074 	movhi	r11,129
  805058:	5af44204 	addi	r11,r11,-12024
  80505c:	12cb883a 	add	r5,r2,r11
  805060:	2c000317 	ldw	r16,12(r5)
  805064:	580f883a 	mov	r7,r11
  805068:	2c00041e 	bne	r5,r16,80507c <_malloc_r+0xdc>
  80506c:	00000a06 	br	805098 <_malloc_r+0xf8>
  805070:	1800860e 	bge	r3,zero,80528c <_malloc_r+0x2ec>
  805074:	84000317 	ldw	r16,12(r16)
  805078:	2c000726 	beq	r5,r16,805098 <_malloc_r+0xf8>
  80507c:	80800117 	ldw	r2,4(r16)
  805080:	00ffff04 	movi	r3,-4
  805084:	10c8703a 	and	r4,r2,r3
  805088:	2447c83a 	sub	r3,r4,r17
  80508c:	008003c4 	movi	r2,15
  805090:	10fff70e 	bge	r2,r3,805070 <_malloc_r+0xd0>
  805094:	31bfffc4 	addi	r6,r6,-1
  805098:	32400044 	addi	r9,r6,1
  80509c:	02802074 	movhi	r10,129
  8050a0:	52b44404 	addi	r10,r10,-12016
  8050a4:	54000217 	ldw	r16,8(r10)
  8050a8:	8280a026 	beq	r16,r10,80532c <_malloc_r+0x38c>
  8050ac:	80800117 	ldw	r2,4(r16)
  8050b0:	00ffff04 	movi	r3,-4
  8050b4:	10ca703a 	and	r5,r2,r3
  8050b8:	2c4dc83a 	sub	r6,r5,r17
  8050bc:	008003c4 	movi	r2,15
  8050c0:	11808316 	blt	r2,r6,8052d0 <_malloc_r+0x330>
  8050c4:	52800315 	stw	r10,12(r10)
  8050c8:	52800215 	stw	r10,8(r10)
  8050cc:	30002916 	blt	r6,zero,805174 <_malloc_r+0x1d4>
  8050d0:	8147883a 	add	r3,r16,r5
  8050d4:	18800117 	ldw	r2,4(r3)
  8050d8:	9009883a 	mov	r4,r18
  8050dc:	10800054 	ori	r2,r2,1
  8050e0:	18800115 	stw	r2,4(r3)
  8050e4:	080a4d40 	call	80a4d4 <__malloc_unlock>
  8050e8:	80c00204 	addi	r3,r16,8
  8050ec:	003fc006 	br	804ff0 <_malloc_r+0x50>
  8050f0:	02c02074 	movhi	r11,129
  8050f4:	5af44204 	addi	r11,r11,-12024
  8050f8:	8ac5883a 	add	r2,r17,r11
  8050fc:	14000317 	ldw	r16,12(r2)
  805100:	580f883a 	mov	r7,r11
  805104:	8806d0fa 	srli	r3,r17,3
  805108:	14006c26 	beq	r2,r16,8052bc <_malloc_r+0x31c>
  80510c:	80c00117 	ldw	r3,4(r16)
  805110:	00bfff04 	movi	r2,-4
  805114:	81800317 	ldw	r6,12(r16)
  805118:	1886703a 	and	r3,r3,r2
  80511c:	80c7883a 	add	r3,r16,r3
  805120:	18800117 	ldw	r2,4(r3)
  805124:	81400217 	ldw	r5,8(r16)
  805128:	9009883a 	mov	r4,r18
  80512c:	10800054 	ori	r2,r2,1
  805130:	18800115 	stw	r2,4(r3)
  805134:	31400215 	stw	r5,8(r6)
  805138:	29800315 	stw	r6,12(r5)
  80513c:	080a4d40 	call	80a4d4 <__malloc_unlock>
  805140:	80c00204 	addi	r3,r16,8
  805144:	003faa06 	br	804ff0 <_malloc_r+0x50>
  805148:	00800104 	movi	r2,4
  80514c:	10c0052e 	bgeu	r2,r3,805164 <_malloc_r+0x1c4>
  805150:	00800504 	movi	r2,20
  805154:	10c07836 	bltu	r2,r3,805338 <_malloc_r+0x398>
  805158:	198016c4 	addi	r6,r3,91
  80515c:	300490fa 	slli	r2,r6,3
  805160:	003fbc06 	br	805054 <_malloc_r+0xb4>
  805164:	8804d1ba 	srli	r2,r17,6
  805168:	11800e04 	addi	r6,r2,56
  80516c:	300490fa 	slli	r2,r6,3
  805170:	003fb806 	br	805054 <_malloc_r+0xb4>
  805174:	00807fc4 	movi	r2,511
  805178:	1140bb36 	bltu	r2,r5,805468 <_malloc_r+0x4c8>
  80517c:	2806d0fa 	srli	r3,r5,3
  805180:	573ffe04 	addi	fp,r10,-8
  805184:	00800044 	movi	r2,1
  805188:	180890fa 	slli	r4,r3,3
  80518c:	1807d0ba 	srai	r3,r3,2
  805190:	e1c00117 	ldw	r7,4(fp)
  805194:	5909883a 	add	r4,r11,r4
  805198:	21400217 	ldw	r5,8(r4)
  80519c:	10c4983a 	sll	r2,r2,r3
  8051a0:	81000315 	stw	r4,12(r16)
  8051a4:	81400215 	stw	r5,8(r16)
  8051a8:	388eb03a 	or	r7,r7,r2
  8051ac:	2c000315 	stw	r16,12(r5)
  8051b0:	24000215 	stw	r16,8(r4)
  8051b4:	e1c00115 	stw	r7,4(fp)
  8051b8:	4807883a 	mov	r3,r9
  8051bc:	4800cd16 	blt	r9,zero,8054f4 <_malloc_r+0x554>
  8051c0:	1807d0ba 	srai	r3,r3,2
  8051c4:	00800044 	movi	r2,1
  8051c8:	10c8983a 	sll	r4,r2,r3
  8051cc:	39004436 	bltu	r7,r4,8052e0 <_malloc_r+0x340>
  8051d0:	21c4703a 	and	r2,r4,r7
  8051d4:	10000a1e 	bne	r2,zero,805200 <_malloc_r+0x260>
  8051d8:	2109883a 	add	r4,r4,r4
  8051dc:	00bfff04 	movi	r2,-4
  8051e0:	4884703a 	and	r2,r9,r2
  8051e4:	3906703a 	and	r3,r7,r4
  8051e8:	12400104 	addi	r9,r2,4
  8051ec:	1800041e 	bne	r3,zero,805200 <_malloc_r+0x260>
  8051f0:	2109883a 	add	r4,r4,r4
  8051f4:	3904703a 	and	r2,r7,r4
  8051f8:	4a400104 	addi	r9,r9,4
  8051fc:	103ffc26 	beq	r2,zero,8051f0 <_malloc_r+0x250>
  805200:	480490fa 	slli	r2,r9,3
  805204:	4819883a 	mov	r12,r9
  805208:	023fff04 	movi	r8,-4
  80520c:	589b883a 	add	r13,r11,r2
  805210:	6807883a 	mov	r3,r13
  805214:	014003c4 	movi	r5,15
  805218:	1c000317 	ldw	r16,12(r3)
  80521c:	1c00041e 	bne	r3,r16,805230 <_malloc_r+0x290>
  805220:	0000a706 	br	8054c0 <_malloc_r+0x520>
  805224:	3000ab0e 	bge	r6,zero,8054d4 <_malloc_r+0x534>
  805228:	84000317 	ldw	r16,12(r16)
  80522c:	1c00a426 	beq	r3,r16,8054c0 <_malloc_r+0x520>
  805230:	80800117 	ldw	r2,4(r16)
  805234:	1204703a 	and	r2,r2,r8
  805238:	144dc83a 	sub	r6,r2,r17
  80523c:	29bff90e 	bge	r5,r6,805224 <_malloc_r+0x284>
  805240:	81000317 	ldw	r4,12(r16)
  805244:	80c00217 	ldw	r3,8(r16)
  805248:	89400054 	ori	r5,r17,1
  80524c:	8445883a 	add	r2,r16,r17
  805250:	20c00215 	stw	r3,8(r4)
  805254:	19000315 	stw	r4,12(r3)
  805258:	81400115 	stw	r5,4(r16)
  80525c:	1187883a 	add	r3,r2,r6
  805260:	31000054 	ori	r4,r6,1
  805264:	50800315 	stw	r2,12(r10)
  805268:	50800215 	stw	r2,8(r10)
  80526c:	19800015 	stw	r6,0(r3)
  805270:	11000115 	stw	r4,4(r2)
  805274:	12800215 	stw	r10,8(r2)
  805278:	12800315 	stw	r10,12(r2)
  80527c:	9009883a 	mov	r4,r18
  805280:	080a4d40 	call	80a4d4 <__malloc_unlock>
  805284:	80c00204 	addi	r3,r16,8
  805288:	003f5906 	br	804ff0 <_malloc_r+0x50>
  80528c:	8109883a 	add	r4,r16,r4
  805290:	20800117 	ldw	r2,4(r4)
  805294:	80c00217 	ldw	r3,8(r16)
  805298:	81400317 	ldw	r5,12(r16)
  80529c:	10800054 	ori	r2,r2,1
  8052a0:	20800115 	stw	r2,4(r4)
  8052a4:	28c00215 	stw	r3,8(r5)
  8052a8:	19400315 	stw	r5,12(r3)
  8052ac:	9009883a 	mov	r4,r18
  8052b0:	080a4d40 	call	80a4d4 <__malloc_unlock>
  8052b4:	80c00204 	addi	r3,r16,8
  8052b8:	003f4d06 	br	804ff0 <_malloc_r+0x50>
  8052bc:	80800204 	addi	r2,r16,8
  8052c0:	14000317 	ldw	r16,12(r2)
  8052c4:	143f911e 	bne	r2,r16,80510c <_malloc_r+0x16c>
  8052c8:	1a400084 	addi	r9,r3,2
  8052cc:	003f7306 	br	80509c <_malloc_r+0xfc>
  8052d0:	88c00054 	ori	r3,r17,1
  8052d4:	8445883a 	add	r2,r16,r17
  8052d8:	80c00115 	stw	r3,4(r16)
  8052dc:	003fdf06 	br	80525c <_malloc_r+0x2bc>
  8052e0:	e4000217 	ldw	r16,8(fp)
  8052e4:	00bfff04 	movi	r2,-4
  8052e8:	80c00117 	ldw	r3,4(r16)
  8052ec:	802d883a 	mov	r22,r16
  8052f0:	18aa703a 	and	r21,r3,r2
  8052f4:	ac401636 	bltu	r21,r17,805350 <_malloc_r+0x3b0>
  8052f8:	ac49c83a 	sub	r4,r21,r17
  8052fc:	008003c4 	movi	r2,15
  805300:	1100130e 	bge	r2,r4,805350 <_malloc_r+0x3b0>
  805304:	88800054 	ori	r2,r17,1
  805308:	8447883a 	add	r3,r16,r17
  80530c:	80800115 	stw	r2,4(r16)
  805310:	20800054 	ori	r2,r4,1
  805314:	18800115 	stw	r2,4(r3)
  805318:	e0c00215 	stw	r3,8(fp)
  80531c:	9009883a 	mov	r4,r18
  805320:	080a4d40 	call	80a4d4 <__malloc_unlock>
  805324:	80c00204 	addi	r3,r16,8
  805328:	003f3106 	br	804ff0 <_malloc_r+0x50>
  80532c:	39c00117 	ldw	r7,4(r7)
  805330:	573ffe04 	addi	fp,r10,-8
  805334:	003fa006 	br	8051b8 <_malloc_r+0x218>
  805338:	00801504 	movi	r2,84
  80533c:	10c06736 	bltu	r2,r3,8054dc <_malloc_r+0x53c>
  805340:	8804d33a 	srli	r2,r17,12
  805344:	11801b84 	addi	r6,r2,110
  805348:	300490fa 	slli	r2,r6,3
  80534c:	003f4106 	br	805054 <_malloc_r+0xb4>
  805350:	d0a6cb17 	ldw	r2,-25812(gp)
  805354:	d0e00517 	ldw	r3,-32748(gp)
  805358:	053fffc4 	movi	r20,-1
  80535c:	10800404 	addi	r2,r2,16
  805360:	88a7883a 	add	r19,r17,r2
  805364:	1d000326 	beq	r3,r20,805374 <_malloc_r+0x3d4>
  805368:	98c3ffc4 	addi	r3,r19,4095
  80536c:	00bc0004 	movi	r2,-4096
  805370:	18a6703a 	and	r19,r3,r2
  805374:	9009883a 	mov	r4,r18
  805378:	980b883a 	mov	r5,r19
  80537c:	08070cc0 	call	8070cc <_sbrk_r>
  805380:	1009883a 	mov	r4,r2
  805384:	15000426 	beq	r2,r20,805398 <_malloc_r+0x3f8>
  805388:	854b883a 	add	r5,r16,r21
  80538c:	1029883a 	mov	r20,r2
  805390:	11405a2e 	bgeu	r2,r5,8054fc <_malloc_r+0x55c>
  805394:	87000c26 	beq	r16,fp,8053c8 <_malloc_r+0x428>
  805398:	e4000217 	ldw	r16,8(fp)
  80539c:	80c00117 	ldw	r3,4(r16)
  8053a0:	00bfff04 	movi	r2,-4
  8053a4:	1884703a 	and	r2,r3,r2
  8053a8:	14400336 	bltu	r2,r17,8053b8 <_malloc_r+0x418>
  8053ac:	1449c83a 	sub	r4,r2,r17
  8053b0:	008003c4 	movi	r2,15
  8053b4:	113fd316 	blt	r2,r4,805304 <_malloc_r+0x364>
  8053b8:	9009883a 	mov	r4,r18
  8053bc:	080a4d40 	call	80a4d4 <__malloc_unlock>
  8053c0:	0007883a 	mov	r3,zero
  8053c4:	003f0a06 	br	804ff0 <_malloc_r+0x50>
  8053c8:	05c02074 	movhi	r23,129
  8053cc:	bdc0bc04 	addi	r23,r23,752
  8053d0:	b8800017 	ldw	r2,0(r23)
  8053d4:	988d883a 	add	r6,r19,r2
  8053d8:	b9800015 	stw	r6,0(r23)
  8053dc:	d0e00517 	ldw	r3,-32748(gp)
  8053e0:	00bfffc4 	movi	r2,-1
  8053e4:	18808e26 	beq	r3,r2,805620 <_malloc_r+0x680>
  8053e8:	2145c83a 	sub	r2,r4,r5
  8053ec:	3085883a 	add	r2,r6,r2
  8053f0:	b8800015 	stw	r2,0(r23)
  8053f4:	20c001cc 	andi	r3,r4,7
  8053f8:	18005f1e 	bne	r3,zero,805578 <_malloc_r+0x5d8>
  8053fc:	000b883a 	mov	r5,zero
  805400:	a4c5883a 	add	r2,r20,r19
  805404:	1083ffcc 	andi	r2,r2,4095
  805408:	00c40004 	movi	r3,4096
  80540c:	1887c83a 	sub	r3,r3,r2
  805410:	28e7883a 	add	r19,r5,r3
  805414:	9009883a 	mov	r4,r18
  805418:	980b883a 	mov	r5,r19
  80541c:	08070cc0 	call	8070cc <_sbrk_r>
  805420:	1007883a 	mov	r3,r2
  805424:	00bfffc4 	movi	r2,-1
  805428:	18807a26 	beq	r3,r2,805614 <_malloc_r+0x674>
  80542c:	1d05c83a 	sub	r2,r3,r20
  805430:	9885883a 	add	r2,r19,r2
  805434:	10c00054 	ori	r3,r2,1
  805438:	b8800017 	ldw	r2,0(r23)
  80543c:	a021883a 	mov	r16,r20
  805440:	a0c00115 	stw	r3,4(r20)
  805444:	9885883a 	add	r2,r19,r2
  805448:	b8800015 	stw	r2,0(r23)
  80544c:	e5000215 	stw	r20,8(fp)
  805450:	b7003626 	beq	r22,fp,80552c <_malloc_r+0x58c>
  805454:	018003c4 	movi	r6,15
  805458:	35404b36 	bltu	r6,r21,805588 <_malloc_r+0x5e8>
  80545c:	00800044 	movi	r2,1
  805460:	a0800115 	stw	r2,4(r20)
  805464:	003fcd06 	br	80539c <_malloc_r+0x3fc>
  805468:	2808d27a 	srli	r4,r5,9
  80546c:	2000371e 	bne	r4,zero,80554c <_malloc_r+0x5ac>
  805470:	2808d0fa 	srli	r4,r5,3
  805474:	200690fa 	slli	r3,r4,3
  805478:	1ad1883a 	add	r8,r3,r11
  80547c:	41800217 	ldw	r6,8(r8)
  805480:	41805b26 	beq	r8,r6,8055f0 <_malloc_r+0x650>
  805484:	30800117 	ldw	r2,4(r6)
  805488:	00ffff04 	movi	r3,-4
  80548c:	10c4703a 	and	r2,r2,r3
  805490:	2880022e 	bgeu	r5,r2,80549c <_malloc_r+0x4fc>
  805494:	31800217 	ldw	r6,8(r6)
  805498:	41bffa1e 	bne	r8,r6,805484 <_malloc_r+0x4e4>
  80549c:	32000317 	ldw	r8,12(r6)
  8054a0:	39c00117 	ldw	r7,4(r7)
  8054a4:	82000315 	stw	r8,12(r16)
  8054a8:	81800215 	stw	r6,8(r16)
  8054ac:	07002074 	movhi	fp,129
  8054b0:	e7344204 	addi	fp,fp,-12024
  8054b4:	34000315 	stw	r16,12(r6)
  8054b8:	44000215 	stw	r16,8(r8)
  8054bc:	003f3e06 	br	8051b8 <_malloc_r+0x218>
  8054c0:	63000044 	addi	r12,r12,1
  8054c4:	608000cc 	andi	r2,r12,3
  8054c8:	10005d26 	beq	r2,zero,805640 <_malloc_r+0x6a0>
  8054cc:	18c00204 	addi	r3,r3,8
  8054d0:	003f5106 	br	805218 <_malloc_r+0x278>
  8054d4:	8089883a 	add	r4,r16,r2
  8054d8:	003f6d06 	br	805290 <_malloc_r+0x2f0>
  8054dc:	00805504 	movi	r2,340
  8054e0:	10c02036 	bltu	r2,r3,805564 <_malloc_r+0x5c4>
  8054e4:	8804d3fa 	srli	r2,r17,15
  8054e8:	11801dc4 	addi	r6,r2,119
  8054ec:	300490fa 	slli	r2,r6,3
  8054f0:	003ed806 	br	805054 <_malloc_r+0xb4>
  8054f4:	48c000c4 	addi	r3,r9,3
  8054f8:	003f3106 	br	8051c0 <_malloc_r+0x220>
  8054fc:	05c02074 	movhi	r23,129
  805500:	bdc0bc04 	addi	r23,r23,752
  805504:	b8800017 	ldw	r2,0(r23)
  805508:	988d883a 	add	r6,r19,r2
  80550c:	b9800015 	stw	r6,0(r23)
  805510:	293fb21e 	bne	r5,r4,8053dc <_malloc_r+0x43c>
  805514:	2083ffcc 	andi	r2,r4,4095
  805518:	103fb01e 	bne	r2,zero,8053dc <_malloc_r+0x43c>
  80551c:	e4000217 	ldw	r16,8(fp)
  805520:	9d45883a 	add	r2,r19,r21
  805524:	10800054 	ori	r2,r2,1
  805528:	80800115 	stw	r2,4(r16)
  80552c:	b8c00017 	ldw	r3,0(r23)
  805530:	d0a6cc17 	ldw	r2,-25808(gp)
  805534:	10c0012e 	bgeu	r2,r3,80553c <_malloc_r+0x59c>
  805538:	d0e6cc15 	stw	r3,-25808(gp)
  80553c:	d0a6cd17 	ldw	r2,-25804(gp)
  805540:	10ff962e 	bgeu	r2,r3,80539c <_malloc_r+0x3fc>
  805544:	d0e6cd15 	stw	r3,-25804(gp)
  805548:	003f9406 	br	80539c <_malloc_r+0x3fc>
  80554c:	00800104 	movi	r2,4
  805550:	11001e36 	bltu	r2,r4,8055cc <_malloc_r+0x62c>
  805554:	2804d1ba 	srli	r2,r5,6
  805558:	11000e04 	addi	r4,r2,56
  80555c:	200690fa 	slli	r3,r4,3
  805560:	003fc506 	br	805478 <_malloc_r+0x4d8>
  805564:	00815504 	movi	r2,1364
  805568:	10c01d2e 	bgeu	r2,r3,8055e0 <_malloc_r+0x640>
  80556c:	01801f84 	movi	r6,126
  805570:	0080fc04 	movi	r2,1008
  805574:	003eb706 	br	805054 <_malloc_r+0xb4>
  805578:	00800204 	movi	r2,8
  80557c:	10cbc83a 	sub	r5,r2,r3
  805580:	2169883a 	add	r20,r4,r5
  805584:	003f9e06 	br	805400 <_malloc_r+0x460>
  805588:	00bffe04 	movi	r2,-8
  80558c:	a93ffd04 	addi	r4,r21,-12
  805590:	2088703a 	and	r4,r4,r2
  805594:	b10b883a 	add	r5,r22,r4
  805598:	00c00144 	movi	r3,5
  80559c:	28c00215 	stw	r3,8(r5)
  8055a0:	28c00115 	stw	r3,4(r5)
  8055a4:	b0800117 	ldw	r2,4(r22)
  8055a8:	1080004c 	andi	r2,r2,1
  8055ac:	2084b03a 	or	r2,r4,r2
  8055b0:	b0800115 	stw	r2,4(r22)
  8055b4:	313fdd2e 	bgeu	r6,r4,80552c <_malloc_r+0x58c>
  8055b8:	b1400204 	addi	r5,r22,8
  8055bc:	9009883a 	mov	r4,r18
  8055c0:	08044180 	call	804418 <_free_r>
  8055c4:	e4000217 	ldw	r16,8(fp)
  8055c8:	003fd806 	br	80552c <_malloc_r+0x58c>
  8055cc:	00800504 	movi	r2,20
  8055d0:	11001536 	bltu	r2,r4,805628 <_malloc_r+0x688>
  8055d4:	210016c4 	addi	r4,r4,91
  8055d8:	200690fa 	slli	r3,r4,3
  8055dc:	003fa606 	br	805478 <_malloc_r+0x4d8>
  8055e0:	8804d4ba 	srli	r2,r17,18
  8055e4:	11801f04 	addi	r6,r2,124
  8055e8:	300490fa 	slli	r2,r6,3
  8055ec:	003e9906 	br	805054 <_malloc_r+0xb4>
  8055f0:	2009d0ba 	srai	r4,r4,2
  8055f4:	01402074 	movhi	r5,129
  8055f8:	29744204 	addi	r5,r5,-12024
  8055fc:	00c00044 	movi	r3,1
  805600:	28800117 	ldw	r2,4(r5)
  805604:	1906983a 	sll	r3,r3,r4
  805608:	10c4b03a 	or	r2,r2,r3
  80560c:	28800115 	stw	r2,4(r5)
  805610:	003fa306 	br	8054a0 <_malloc_r+0x500>
  805614:	0027883a 	mov	r19,zero
  805618:	00c00044 	movi	r3,1
  80561c:	003f8606 	br	805438 <_malloc_r+0x498>
  805620:	d1200515 	stw	r4,-32748(gp)
  805624:	003f7306 	br	8053f4 <_malloc_r+0x454>
  805628:	00801504 	movi	r2,84
  80562c:	11001936 	bltu	r2,r4,805694 <_malloc_r+0x6f4>
  805630:	2804d33a 	srli	r2,r5,12
  805634:	11001b84 	addi	r4,r2,110
  805638:	200690fa 	slli	r3,r4,3
  80563c:	003f8e06 	br	805478 <_malloc_r+0x4d8>
  805640:	480b883a 	mov	r5,r9
  805644:	6807883a 	mov	r3,r13
  805648:	288000cc 	andi	r2,r5,3
  80564c:	18fffe04 	addi	r3,r3,-8
  805650:	297fffc4 	addi	r5,r5,-1
  805654:	10001526 	beq	r2,zero,8056ac <_malloc_r+0x70c>
  805658:	18800217 	ldw	r2,8(r3)
  80565c:	10fffa26 	beq	r2,r3,805648 <_malloc_r+0x6a8>
  805660:	2109883a 	add	r4,r4,r4
  805664:	393f1e36 	bltu	r7,r4,8052e0 <_malloc_r+0x340>
  805668:	203f1d26 	beq	r4,zero,8052e0 <_malloc_r+0x340>
  80566c:	21c4703a 	and	r2,r4,r7
  805670:	10000226 	beq	r2,zero,80567c <_malloc_r+0x6dc>
  805674:	6013883a 	mov	r9,r12
  805678:	003ee106 	br	805200 <_malloc_r+0x260>
  80567c:	2109883a 	add	r4,r4,r4
  805680:	3904703a 	and	r2,r7,r4
  805684:	63000104 	addi	r12,r12,4
  805688:	103ffc26 	beq	r2,zero,80567c <_malloc_r+0x6dc>
  80568c:	6013883a 	mov	r9,r12
  805690:	003edb06 	br	805200 <_malloc_r+0x260>
  805694:	00805504 	movi	r2,340
  805698:	11000836 	bltu	r2,r4,8056bc <_malloc_r+0x71c>
  80569c:	2804d3fa 	srli	r2,r5,15
  8056a0:	11001dc4 	addi	r4,r2,119
  8056a4:	200690fa 	slli	r3,r4,3
  8056a8:	003f7306 	br	805478 <_malloc_r+0x4d8>
  8056ac:	0104303a 	nor	r2,zero,r4
  8056b0:	388e703a 	and	r7,r7,r2
  8056b4:	e1c00115 	stw	r7,4(fp)
  8056b8:	003fe906 	br	805660 <_malloc_r+0x6c0>
  8056bc:	00815504 	movi	r2,1364
  8056c0:	1100032e 	bgeu	r2,r4,8056d0 <_malloc_r+0x730>
  8056c4:	01001f84 	movi	r4,126
  8056c8:	00c0fc04 	movi	r3,1008
  8056cc:	003f6a06 	br	805478 <_malloc_r+0x4d8>
  8056d0:	2804d4ba 	srli	r2,r5,18
  8056d4:	11001f04 	addi	r4,r2,124
  8056d8:	200690fa 	slli	r3,r4,3
  8056dc:	003f6606 	br	805478 <_malloc_r+0x4d8>

008056e0 <memchr>:
  8056e0:	008000c4 	movi	r2,3
  8056e4:	29403fcc 	andi	r5,r5,255
  8056e8:	2007883a 	mov	r3,r4
  8056ec:	1180022e 	bgeu	r2,r6,8056f8 <memchr+0x18>
  8056f0:	2084703a 	and	r2,r4,r2
  8056f4:	10000b26 	beq	r2,zero,805724 <memchr+0x44>
  8056f8:	313fffc4 	addi	r4,r6,-1
  8056fc:	3000051e 	bne	r6,zero,805714 <memchr+0x34>
  805700:	00002c06 	br	8057b4 <memchr+0xd4>
  805704:	213fffc4 	addi	r4,r4,-1
  805708:	00bfffc4 	movi	r2,-1
  80570c:	18c00044 	addi	r3,r3,1
  805710:	20802826 	beq	r4,r2,8057b4 <memchr+0xd4>
  805714:	18800003 	ldbu	r2,0(r3)
  805718:	28bffa1e 	bne	r5,r2,805704 <memchr+0x24>
  80571c:	1805883a 	mov	r2,r3
  805720:	f800283a 	ret
  805724:	0011883a 	mov	r8,zero
  805728:	0007883a 	mov	r3,zero
  80572c:	01c00104 	movi	r7,4
  805730:	4004923a 	slli	r2,r8,8
  805734:	18c00044 	addi	r3,r3,1
  805738:	1151883a 	add	r8,r2,r5
  80573c:	19fffc1e 	bne	r3,r7,805730 <memchr+0x50>
  805740:	02bfbff4 	movhi	r10,65279
  805744:	52bfbfc4 	addi	r10,r10,-257
  805748:	02602074 	movhi	r9,32897
  80574c:	4a602004 	addi	r9,r9,-32640
  805750:	02c000c4 	movi	r11,3
  805754:	20800017 	ldw	r2,0(r4)
  805758:	31bfff04 	addi	r6,r6,-4
  80575c:	200f883a 	mov	r7,r4
  805760:	1204f03a 	xor	r2,r2,r8
  805764:	1287883a 	add	r3,r2,r10
  805768:	1a46703a 	and	r3,r3,r9
  80576c:	0084303a 	nor	r2,zero,r2
  805770:	10c4703a 	and	r2,r2,r3
  805774:	10000b26 	beq	r2,zero,8057a4 <memchr+0xc4>
  805778:	20800003 	ldbu	r2,0(r4)
  80577c:	28800f26 	beq	r5,r2,8057bc <memchr+0xdc>
  805780:	20800043 	ldbu	r2,1(r4)
  805784:	21c00044 	addi	r7,r4,1
  805788:	28800c26 	beq	r5,r2,8057bc <memchr+0xdc>
  80578c:	20800083 	ldbu	r2,2(r4)
  805790:	21c00084 	addi	r7,r4,2
  805794:	28800926 	beq	r5,r2,8057bc <memchr+0xdc>
  805798:	208000c3 	ldbu	r2,3(r4)
  80579c:	21c000c4 	addi	r7,r4,3
  8057a0:	28800626 	beq	r5,r2,8057bc <memchr+0xdc>
  8057a4:	21000104 	addi	r4,r4,4
  8057a8:	59bfea36 	bltu	r11,r6,805754 <memchr+0x74>
  8057ac:	2007883a 	mov	r3,r4
  8057b0:	003fd106 	br	8056f8 <memchr+0x18>
  8057b4:	0005883a 	mov	r2,zero
  8057b8:	f800283a 	ret
  8057bc:	3805883a 	mov	r2,r7
  8057c0:	f800283a 	ret

008057c4 <memcpy>:
  8057c4:	01c003c4 	movi	r7,15
  8057c8:	2007883a 	mov	r3,r4
  8057cc:	3980032e 	bgeu	r7,r6,8057dc <memcpy+0x18>
  8057d0:	2904b03a 	or	r2,r5,r4
  8057d4:	108000cc 	andi	r2,r2,3
  8057d8:	10000926 	beq	r2,zero,805800 <memcpy+0x3c>
  8057dc:	30000626 	beq	r6,zero,8057f8 <memcpy+0x34>
  8057e0:	30cd883a 	add	r6,r6,r3
  8057e4:	28800003 	ldbu	r2,0(r5)
  8057e8:	29400044 	addi	r5,r5,1
  8057ec:	18800005 	stb	r2,0(r3)
  8057f0:	18c00044 	addi	r3,r3,1
  8057f4:	30fffb1e 	bne	r6,r3,8057e4 <memcpy+0x20>
  8057f8:	2005883a 	mov	r2,r4
  8057fc:	f800283a 	ret
  805800:	3811883a 	mov	r8,r7
  805804:	200f883a 	mov	r7,r4
  805808:	28c00017 	ldw	r3,0(r5)
  80580c:	31bffc04 	addi	r6,r6,-16
  805810:	38c00015 	stw	r3,0(r7)
  805814:	28800117 	ldw	r2,4(r5)
  805818:	38800115 	stw	r2,4(r7)
  80581c:	28c00217 	ldw	r3,8(r5)
  805820:	38c00215 	stw	r3,8(r7)
  805824:	28800317 	ldw	r2,12(r5)
  805828:	29400404 	addi	r5,r5,16
  80582c:	38800315 	stw	r2,12(r7)
  805830:	39c00404 	addi	r7,r7,16
  805834:	41bff436 	bltu	r8,r6,805808 <memcpy+0x44>
  805838:	008000c4 	movi	r2,3
  80583c:	1180072e 	bgeu	r2,r6,80585c <memcpy+0x98>
  805840:	1007883a 	mov	r3,r2
  805844:	28800017 	ldw	r2,0(r5)
  805848:	31bfff04 	addi	r6,r6,-4
  80584c:	29400104 	addi	r5,r5,4
  805850:	38800015 	stw	r2,0(r7)
  805854:	39c00104 	addi	r7,r7,4
  805858:	19bffa36 	bltu	r3,r6,805844 <memcpy+0x80>
  80585c:	3807883a 	mov	r3,r7
  805860:	003fde06 	br	8057dc <memcpy+0x18>

00805864 <memmove>:
  805864:	2807883a 	mov	r3,r5
  805868:	2011883a 	mov	r8,r4
  80586c:	29000c2e 	bgeu	r5,r4,8058a0 <memmove+0x3c>
  805870:	298f883a 	add	r7,r5,r6
  805874:	21c00a2e 	bgeu	r4,r7,8058a0 <memmove+0x3c>
  805878:	30000726 	beq	r6,zero,805898 <memmove+0x34>
  80587c:	2187883a 	add	r3,r4,r6
  805880:	198dc83a 	sub	r6,r3,r6
  805884:	39ffffc4 	addi	r7,r7,-1
  805888:	38800003 	ldbu	r2,0(r7)
  80588c:	18ffffc4 	addi	r3,r3,-1
  805890:	18800005 	stb	r2,0(r3)
  805894:	19bffb1e 	bne	r3,r6,805884 <memmove+0x20>
  805898:	2005883a 	mov	r2,r4
  80589c:	f800283a 	ret
  8058a0:	01c003c4 	movi	r7,15
  8058a4:	39800a36 	bltu	r7,r6,8058d0 <memmove+0x6c>
  8058a8:	303ffb26 	beq	r6,zero,805898 <memmove+0x34>
  8058ac:	400f883a 	mov	r7,r8
  8058b0:	320d883a 	add	r6,r6,r8
  8058b4:	28800003 	ldbu	r2,0(r5)
  8058b8:	29400044 	addi	r5,r5,1
  8058bc:	38800005 	stb	r2,0(r7)
  8058c0:	39c00044 	addi	r7,r7,1
  8058c4:	39bffb1e 	bne	r7,r6,8058b4 <memmove+0x50>
  8058c8:	2005883a 	mov	r2,r4
  8058cc:	f800283a 	ret
  8058d0:	1904b03a 	or	r2,r3,r4
  8058d4:	108000cc 	andi	r2,r2,3
  8058d8:	103ff31e 	bne	r2,zero,8058a8 <memmove+0x44>
  8058dc:	3811883a 	mov	r8,r7
  8058e0:	180b883a 	mov	r5,r3
  8058e4:	200f883a 	mov	r7,r4
  8058e8:	28c00017 	ldw	r3,0(r5)
  8058ec:	31bffc04 	addi	r6,r6,-16
  8058f0:	38c00015 	stw	r3,0(r7)
  8058f4:	28800117 	ldw	r2,4(r5)
  8058f8:	38800115 	stw	r2,4(r7)
  8058fc:	28c00217 	ldw	r3,8(r5)
  805900:	38c00215 	stw	r3,8(r7)
  805904:	28800317 	ldw	r2,12(r5)
  805908:	29400404 	addi	r5,r5,16
  80590c:	38800315 	stw	r2,12(r7)
  805910:	39c00404 	addi	r7,r7,16
  805914:	41bff436 	bltu	r8,r6,8058e8 <memmove+0x84>
  805918:	008000c4 	movi	r2,3
  80591c:	1180072e 	bgeu	r2,r6,80593c <memmove+0xd8>
  805920:	1007883a 	mov	r3,r2
  805924:	28800017 	ldw	r2,0(r5)
  805928:	31bfff04 	addi	r6,r6,-4
  80592c:	29400104 	addi	r5,r5,4
  805930:	38800015 	stw	r2,0(r7)
  805934:	39c00104 	addi	r7,r7,4
  805938:	19bffa36 	bltu	r3,r6,805924 <memmove+0xc0>
  80593c:	3811883a 	mov	r8,r7
  805940:	003fd906 	br	8058a8 <memmove+0x44>

00805944 <memset>:
  805944:	008000c4 	movi	r2,3
  805948:	29403fcc 	andi	r5,r5,255
  80594c:	2007883a 	mov	r3,r4
  805950:	1180022e 	bgeu	r2,r6,80595c <memset+0x18>
  805954:	2084703a 	and	r2,r4,r2
  805958:	10000826 	beq	r2,zero,80597c <memset+0x38>
  80595c:	30000526 	beq	r6,zero,805974 <memset+0x30>
  805960:	2805883a 	mov	r2,r5
  805964:	30cd883a 	add	r6,r6,r3
  805968:	18800005 	stb	r2,0(r3)
  80596c:	18c00044 	addi	r3,r3,1
  805970:	19bffd1e 	bne	r3,r6,805968 <memset+0x24>
  805974:	2005883a 	mov	r2,r4
  805978:	f800283a 	ret
  80597c:	2804923a 	slli	r2,r5,8
  805980:	020003c4 	movi	r8,15
  805984:	200f883a 	mov	r7,r4
  805988:	2884b03a 	or	r2,r5,r2
  80598c:	1006943a 	slli	r3,r2,16
  805990:	10c6b03a 	or	r3,r2,r3
  805994:	41800a2e 	bgeu	r8,r6,8059c0 <memset+0x7c>
  805998:	4005883a 	mov	r2,r8
  80599c:	31bffc04 	addi	r6,r6,-16
  8059a0:	38c00015 	stw	r3,0(r7)
  8059a4:	38c00115 	stw	r3,4(r7)
  8059a8:	38c00215 	stw	r3,8(r7)
  8059ac:	38c00315 	stw	r3,12(r7)
  8059b0:	39c00404 	addi	r7,r7,16
  8059b4:	11bff936 	bltu	r2,r6,80599c <memset+0x58>
  8059b8:	008000c4 	movi	r2,3
  8059bc:	1180052e 	bgeu	r2,r6,8059d4 <memset+0x90>
  8059c0:	31bfff04 	addi	r6,r6,-4
  8059c4:	008000c4 	movi	r2,3
  8059c8:	38c00015 	stw	r3,0(r7)
  8059cc:	39c00104 	addi	r7,r7,4
  8059d0:	11bffb36 	bltu	r2,r6,8059c0 <memset+0x7c>
  8059d4:	3807883a 	mov	r3,r7
  8059d8:	003fe006 	br	80595c <memset+0x18>

008059dc <_Bfree>:
  8059dc:	28000826 	beq	r5,zero,805a00 <_Bfree+0x24>
  8059e0:	28800117 	ldw	r2,4(r5)
  8059e4:	21001317 	ldw	r4,76(r4)
  8059e8:	1085883a 	add	r2,r2,r2
  8059ec:	1085883a 	add	r2,r2,r2
  8059f0:	1105883a 	add	r2,r2,r4
  8059f4:	10c00017 	ldw	r3,0(r2)
  8059f8:	28c00015 	stw	r3,0(r5)
  8059fc:	11400015 	stw	r5,0(r2)
  805a00:	f800283a 	ret

00805a04 <__hi0bits>:
  805a04:	20bfffec 	andhi	r2,r4,65535
  805a08:	10001426 	beq	r2,zero,805a5c <__hi0bits+0x58>
  805a0c:	0007883a 	mov	r3,zero
  805a10:	20bfc02c 	andhi	r2,r4,65280
  805a14:	1000021e 	bne	r2,zero,805a20 <__hi0bits+0x1c>
  805a18:	2008923a 	slli	r4,r4,8
  805a1c:	18c00204 	addi	r3,r3,8
  805a20:	20bc002c 	andhi	r2,r4,61440
  805a24:	1000021e 	bne	r2,zero,805a30 <__hi0bits+0x2c>
  805a28:	2008913a 	slli	r4,r4,4
  805a2c:	18c00104 	addi	r3,r3,4
  805a30:	20b0002c 	andhi	r2,r4,49152
  805a34:	1000031e 	bne	r2,zero,805a44 <__hi0bits+0x40>
  805a38:	2105883a 	add	r2,r4,r4
  805a3c:	18c00084 	addi	r3,r3,2
  805a40:	1089883a 	add	r4,r2,r2
  805a44:	20000316 	blt	r4,zero,805a54 <__hi0bits+0x50>
  805a48:	2090002c 	andhi	r2,r4,16384
  805a4c:	10000626 	beq	r2,zero,805a68 <__hi0bits+0x64>
  805a50:	18c00044 	addi	r3,r3,1
  805a54:	1805883a 	mov	r2,r3
  805a58:	f800283a 	ret
  805a5c:	2008943a 	slli	r4,r4,16
  805a60:	00c00404 	movi	r3,16
  805a64:	003fea06 	br	805a10 <__hi0bits+0xc>
  805a68:	00c00804 	movi	r3,32
  805a6c:	1805883a 	mov	r2,r3
  805a70:	f800283a 	ret

00805a74 <__lo0bits>:
  805a74:	20c00017 	ldw	r3,0(r4)
  805a78:	188001cc 	andi	r2,r3,7
  805a7c:	10000a26 	beq	r2,zero,805aa8 <__lo0bits+0x34>
  805a80:	1880004c 	andi	r2,r3,1
  805a84:	1005003a 	cmpeq	r2,r2,zero
  805a88:	10002126 	beq	r2,zero,805b10 <__lo0bits+0x9c>
  805a8c:	1880008c 	andi	r2,r3,2
  805a90:	1000251e 	bne	r2,zero,805b28 <__lo0bits+0xb4>
  805a94:	1804d0ba 	srli	r2,r3,2
  805a98:	01400084 	movi	r5,2
  805a9c:	20800015 	stw	r2,0(r4)
  805aa0:	2805883a 	mov	r2,r5
  805aa4:	f800283a 	ret
  805aa8:	18bfffcc 	andi	r2,r3,65535
  805aac:	10001526 	beq	r2,zero,805b04 <__lo0bits+0x90>
  805ab0:	000b883a 	mov	r5,zero
  805ab4:	18803fcc 	andi	r2,r3,255
  805ab8:	1000021e 	bne	r2,zero,805ac4 <__lo0bits+0x50>
  805abc:	1806d23a 	srli	r3,r3,8
  805ac0:	29400204 	addi	r5,r5,8
  805ac4:	188003cc 	andi	r2,r3,15
  805ac8:	1000021e 	bne	r2,zero,805ad4 <__lo0bits+0x60>
  805acc:	1806d13a 	srli	r3,r3,4
  805ad0:	29400104 	addi	r5,r5,4
  805ad4:	188000cc 	andi	r2,r3,3
  805ad8:	1000021e 	bne	r2,zero,805ae4 <__lo0bits+0x70>
  805adc:	1806d0ba 	srli	r3,r3,2
  805ae0:	29400084 	addi	r5,r5,2
  805ae4:	1880004c 	andi	r2,r3,1
  805ae8:	1000031e 	bne	r2,zero,805af8 <__lo0bits+0x84>
  805aec:	1806d07a 	srli	r3,r3,1
  805af0:	18000a26 	beq	r3,zero,805b1c <__lo0bits+0xa8>
  805af4:	29400044 	addi	r5,r5,1
  805af8:	2805883a 	mov	r2,r5
  805afc:	20c00015 	stw	r3,0(r4)
  805b00:	f800283a 	ret
  805b04:	1806d43a 	srli	r3,r3,16
  805b08:	01400404 	movi	r5,16
  805b0c:	003fe906 	br	805ab4 <__lo0bits+0x40>
  805b10:	000b883a 	mov	r5,zero
  805b14:	2805883a 	mov	r2,r5
  805b18:	f800283a 	ret
  805b1c:	01400804 	movi	r5,32
  805b20:	2805883a 	mov	r2,r5
  805b24:	f800283a 	ret
  805b28:	1804d07a 	srli	r2,r3,1
  805b2c:	01400044 	movi	r5,1
  805b30:	20800015 	stw	r2,0(r4)
  805b34:	003fda06 	br	805aa0 <__lo0bits+0x2c>

00805b38 <__mcmp>:
  805b38:	20800417 	ldw	r2,16(r4)
  805b3c:	28c00417 	ldw	r3,16(r5)
  805b40:	10cfc83a 	sub	r7,r2,r3
  805b44:	38000c1e 	bne	r7,zero,805b78 <__mcmp+0x40>
  805b48:	18c5883a 	add	r2,r3,r3
  805b4c:	1085883a 	add	r2,r2,r2
  805b50:	10c00504 	addi	r3,r2,20
  805b54:	21000504 	addi	r4,r4,20
  805b58:	28cb883a 	add	r5,r5,r3
  805b5c:	2085883a 	add	r2,r4,r2
  805b60:	10bfff04 	addi	r2,r2,-4
  805b64:	297fff04 	addi	r5,r5,-4
  805b68:	11800017 	ldw	r6,0(r2)
  805b6c:	28c00017 	ldw	r3,0(r5)
  805b70:	30c0031e 	bne	r6,r3,805b80 <__mcmp+0x48>
  805b74:	20bffa36 	bltu	r4,r2,805b60 <__mcmp+0x28>
  805b78:	3805883a 	mov	r2,r7
  805b7c:	f800283a 	ret
  805b80:	30c00336 	bltu	r6,r3,805b90 <__mcmp+0x58>
  805b84:	01c00044 	movi	r7,1
  805b88:	3805883a 	mov	r2,r7
  805b8c:	f800283a 	ret
  805b90:	01ffffc4 	movi	r7,-1
  805b94:	003ff806 	br	805b78 <__mcmp+0x40>

00805b98 <__ulp>:
  805b98:	295ffc2c 	andhi	r5,r5,32752
  805b9c:	013f3034 	movhi	r4,64704
  805ba0:	290b883a 	add	r5,r5,r4
  805ba4:	0145c83a 	sub	r2,zero,r5
  805ba8:	1007d53a 	srai	r3,r2,20
  805bac:	000d883a 	mov	r6,zero
  805bb0:	0140040e 	bge	zero,r5,805bc4 <__ulp+0x2c>
  805bb4:	280f883a 	mov	r7,r5
  805bb8:	3807883a 	mov	r3,r7
  805bbc:	3005883a 	mov	r2,r6
  805bc0:	f800283a 	ret
  805bc4:	008004c4 	movi	r2,19
  805bc8:	193ffb04 	addi	r4,r3,-20
  805bcc:	10c00c0e 	bge	r2,r3,805c00 <__ulp+0x68>
  805bd0:	008007c4 	movi	r2,31
  805bd4:	1107c83a 	sub	r3,r2,r4
  805bd8:	00800784 	movi	r2,30
  805bdc:	01400044 	movi	r5,1
  805be0:	11000216 	blt	r2,r4,805bec <__ulp+0x54>
  805be4:	00800044 	movi	r2,1
  805be8:	10ca983a 	sll	r5,r2,r3
  805bec:	000f883a 	mov	r7,zero
  805bf0:	280d883a 	mov	r6,r5
  805bf4:	3807883a 	mov	r3,r7
  805bf8:	3005883a 	mov	r2,r6
  805bfc:	f800283a 	ret
  805c00:	00800234 	movhi	r2,8
  805c04:	10cfd83a 	sra	r7,r2,r3
  805c08:	000d883a 	mov	r6,zero
  805c0c:	3005883a 	mov	r2,r6
  805c10:	3807883a 	mov	r3,r7
  805c14:	f800283a 	ret

00805c18 <__b2d>:
  805c18:	20800417 	ldw	r2,16(r4)
  805c1c:	defff904 	addi	sp,sp,-28
  805c20:	dd000415 	stw	r20,16(sp)
  805c24:	1085883a 	add	r2,r2,r2
  805c28:	25000504 	addi	r20,r4,20
  805c2c:	1085883a 	add	r2,r2,r2
  805c30:	dc000015 	stw	r16,0(sp)
  805c34:	a0a1883a 	add	r16,r20,r2
  805c38:	dd400515 	stw	r21,20(sp)
  805c3c:	857fff17 	ldw	r21,-4(r16)
  805c40:	dc400115 	stw	r17,4(sp)
  805c44:	dfc00615 	stw	ra,24(sp)
  805c48:	a809883a 	mov	r4,r21
  805c4c:	2823883a 	mov	r17,r5
  805c50:	dcc00315 	stw	r19,12(sp)
  805c54:	dc800215 	stw	r18,8(sp)
  805c58:	0805a040 	call	805a04 <__hi0bits>
  805c5c:	100b883a 	mov	r5,r2
  805c60:	00800804 	movi	r2,32
  805c64:	1145c83a 	sub	r2,r2,r5
  805c68:	88800015 	stw	r2,0(r17)
  805c6c:	00800284 	movi	r2,10
  805c70:	80ffff04 	addi	r3,r16,-4
  805c74:	11401416 	blt	r2,r5,805cc8 <__b2d+0xb0>
  805c78:	008002c4 	movi	r2,11
  805c7c:	1149c83a 	sub	r4,r2,r5
  805c80:	a0c02736 	bltu	r20,r3,805d20 <__b2d+0x108>
  805c84:	000d883a 	mov	r6,zero
  805c88:	28800544 	addi	r2,r5,21
  805c8c:	a906d83a 	srl	r3,r21,r4
  805c90:	a884983a 	sll	r2,r21,r2
  805c94:	1ccffc34 	orhi	r19,r3,16368
  805c98:	11a4b03a 	or	r18,r2,r6
  805c9c:	9005883a 	mov	r2,r18
  805ca0:	9807883a 	mov	r3,r19
  805ca4:	dfc00617 	ldw	ra,24(sp)
  805ca8:	dd400517 	ldw	r21,20(sp)
  805cac:	dd000417 	ldw	r20,16(sp)
  805cb0:	dcc00317 	ldw	r19,12(sp)
  805cb4:	dc800217 	ldw	r18,8(sp)
  805cb8:	dc400117 	ldw	r17,4(sp)
  805cbc:	dc000017 	ldw	r16,0(sp)
  805cc0:	dec00704 	addi	sp,sp,28
  805cc4:	f800283a 	ret
  805cc8:	a0c00e36 	bltu	r20,r3,805d04 <__b2d+0xec>
  805ccc:	293ffd44 	addi	r4,r5,-11
  805cd0:	000d883a 	mov	r6,zero
  805cd4:	20000f26 	beq	r4,zero,805d14 <__b2d+0xfc>
  805cd8:	00800804 	movi	r2,32
  805cdc:	110bc83a 	sub	r5,r2,r4
  805ce0:	a0c01236 	bltu	r20,r3,805d2c <__b2d+0x114>
  805ce4:	000f883a 	mov	r7,zero
  805ce8:	a904983a 	sll	r2,r21,r4
  805cec:	3146d83a 	srl	r3,r6,r5
  805cf0:	3108983a 	sll	r4,r6,r4
  805cf4:	108ffc34 	orhi	r2,r2,16368
  805cf8:	18a6b03a 	or	r19,r3,r2
  805cfc:	3924b03a 	or	r18,r7,r4
  805d00:	003fe606 	br	805c9c <__b2d+0x84>
  805d04:	293ffd44 	addi	r4,r5,-11
  805d08:	81bffe17 	ldw	r6,-8(r16)
  805d0c:	80fffe04 	addi	r3,r16,-8
  805d10:	203ff11e 	bne	r4,zero,805cd8 <__b2d+0xc0>
  805d14:	accffc34 	orhi	r19,r21,16368
  805d18:	3025883a 	mov	r18,r6
  805d1c:	003fdf06 	br	805c9c <__b2d+0x84>
  805d20:	18bfff17 	ldw	r2,-4(r3)
  805d24:	110cd83a 	srl	r6,r2,r4
  805d28:	003fd706 	br	805c88 <__b2d+0x70>
  805d2c:	18bfff17 	ldw	r2,-4(r3)
  805d30:	114ed83a 	srl	r7,r2,r5
  805d34:	003fec06 	br	805ce8 <__b2d+0xd0>

00805d38 <__ratio>:
  805d38:	defff904 	addi	sp,sp,-28
  805d3c:	dc400215 	stw	r17,8(sp)
  805d40:	2823883a 	mov	r17,r5
  805d44:	d80b883a 	mov	r5,sp
  805d48:	dfc00615 	stw	ra,24(sp)
  805d4c:	dd000515 	stw	r20,20(sp)
  805d50:	dcc00415 	stw	r19,16(sp)
  805d54:	dc800315 	stw	r18,12(sp)
  805d58:	2025883a 	mov	r18,r4
  805d5c:	0805c180 	call	805c18 <__b2d>
  805d60:	8809883a 	mov	r4,r17
  805d64:	d9400104 	addi	r5,sp,4
  805d68:	1027883a 	mov	r19,r2
  805d6c:	1829883a 	mov	r20,r3
  805d70:	0805c180 	call	805c18 <__b2d>
  805d74:	89000417 	ldw	r4,16(r17)
  805d78:	91c00417 	ldw	r7,16(r18)
  805d7c:	d9800117 	ldw	r6,4(sp)
  805d80:	180b883a 	mov	r5,r3
  805d84:	390fc83a 	sub	r7,r7,r4
  805d88:	1009883a 	mov	r4,r2
  805d8c:	d8800017 	ldw	r2,0(sp)
  805d90:	380e917a 	slli	r7,r7,5
  805d94:	2011883a 	mov	r8,r4
  805d98:	1185c83a 	sub	r2,r2,r6
  805d9c:	11c5883a 	add	r2,r2,r7
  805da0:	1006953a 	slli	r3,r2,20
  805da4:	2813883a 	mov	r9,r5
  805da8:	00800d0e 	bge	zero,r2,805de0 <__ratio+0xa8>
  805dac:	1d29883a 	add	r20,r3,r20
  805db0:	a00b883a 	mov	r5,r20
  805db4:	480f883a 	mov	r7,r9
  805db8:	9809883a 	mov	r4,r19
  805dbc:	400d883a 	mov	r6,r8
  805dc0:	0808d800 	call	808d80 <__divdf3>
  805dc4:	dfc00617 	ldw	ra,24(sp)
  805dc8:	dd000517 	ldw	r20,20(sp)
  805dcc:	dcc00417 	ldw	r19,16(sp)
  805dd0:	dc800317 	ldw	r18,12(sp)
  805dd4:	dc400217 	ldw	r17,8(sp)
  805dd8:	dec00704 	addi	sp,sp,28
  805ddc:	f800283a 	ret
  805de0:	28d3c83a 	sub	r9,r5,r3
  805de4:	003ff206 	br	805db0 <__ratio+0x78>

00805de8 <_mprec_log10>:
  805de8:	defffe04 	addi	sp,sp,-8
  805dec:	008005c4 	movi	r2,23
  805df0:	dc000015 	stw	r16,0(sp)
  805df4:	dfc00115 	stw	ra,4(sp)
  805df8:	2021883a 	mov	r16,r4
  805dfc:	11000c16 	blt	r2,r4,805e30 <_mprec_log10+0x48>
  805e00:	200490fa 	slli	r2,r4,3
  805e04:	00c02074 	movhi	r3,129
  805e08:	18f29a04 	addi	r3,r3,-13720
  805e0c:	10c5883a 	add	r2,r2,r3
  805e10:	12400117 	ldw	r9,4(r2)
  805e14:	12000017 	ldw	r8,0(r2)
  805e18:	4807883a 	mov	r3,r9
  805e1c:	4005883a 	mov	r2,r8
  805e20:	dfc00117 	ldw	ra,4(sp)
  805e24:	dc000017 	ldw	r16,0(sp)
  805e28:	dec00204 	addi	sp,sp,8
  805e2c:	f800283a 	ret
  805e30:	0011883a 	mov	r8,zero
  805e34:	024ffc34 	movhi	r9,16368
  805e38:	0005883a 	mov	r2,zero
  805e3c:	00d00934 	movhi	r3,16420
  805e40:	480b883a 	mov	r5,r9
  805e44:	4009883a 	mov	r4,r8
  805e48:	180f883a 	mov	r7,r3
  805e4c:	100d883a 	mov	r6,r2
  805e50:	08089bc0 	call	8089bc <__muldf3>
  805e54:	843fffc4 	addi	r16,r16,-1
  805e58:	1011883a 	mov	r8,r2
  805e5c:	1813883a 	mov	r9,r3
  805e60:	803ff51e 	bne	r16,zero,805e38 <_mprec_log10+0x50>
  805e64:	4005883a 	mov	r2,r8
  805e68:	4807883a 	mov	r3,r9
  805e6c:	dfc00117 	ldw	ra,4(sp)
  805e70:	dc000017 	ldw	r16,0(sp)
  805e74:	dec00204 	addi	sp,sp,8
  805e78:	f800283a 	ret

00805e7c <__copybits>:
  805e7c:	297fffc4 	addi	r5,r5,-1
  805e80:	30800417 	ldw	r2,16(r6)
  805e84:	280bd17a 	srai	r5,r5,5
  805e88:	31800504 	addi	r6,r6,20
  805e8c:	1085883a 	add	r2,r2,r2
  805e90:	294b883a 	add	r5,r5,r5
  805e94:	294b883a 	add	r5,r5,r5
  805e98:	1085883a 	add	r2,r2,r2
  805e9c:	290b883a 	add	r5,r5,r4
  805ea0:	3087883a 	add	r3,r6,r2
  805ea4:	29400104 	addi	r5,r5,4
  805ea8:	30c0052e 	bgeu	r6,r3,805ec0 <__copybits+0x44>
  805eac:	30800017 	ldw	r2,0(r6)
  805eb0:	31800104 	addi	r6,r6,4
  805eb4:	20800015 	stw	r2,0(r4)
  805eb8:	21000104 	addi	r4,r4,4
  805ebc:	30fffb36 	bltu	r6,r3,805eac <__copybits+0x30>
  805ec0:	2140032e 	bgeu	r4,r5,805ed0 <__copybits+0x54>
  805ec4:	20000015 	stw	zero,0(r4)
  805ec8:	21000104 	addi	r4,r4,4
  805ecc:	217ffd36 	bltu	r4,r5,805ec4 <__copybits+0x48>
  805ed0:	f800283a 	ret

00805ed4 <__any_on>:
  805ed4:	20800417 	ldw	r2,16(r4)
  805ed8:	2807d17a 	srai	r3,r5,5
  805edc:	21000504 	addi	r4,r4,20
  805ee0:	10c00d0e 	bge	r2,r3,805f18 <__any_on+0x44>
  805ee4:	1085883a 	add	r2,r2,r2
  805ee8:	1085883a 	add	r2,r2,r2
  805eec:	208d883a 	add	r6,r4,r2
  805ef0:	2180182e 	bgeu	r4,r6,805f54 <__any_on+0x80>
  805ef4:	30bfff17 	ldw	r2,-4(r6)
  805ef8:	30ffff04 	addi	r3,r6,-4
  805efc:	1000041e 	bne	r2,zero,805f10 <__any_on+0x3c>
  805f00:	20c0142e 	bgeu	r4,r3,805f54 <__any_on+0x80>
  805f04:	18ffff04 	addi	r3,r3,-4
  805f08:	18800017 	ldw	r2,0(r3)
  805f0c:	103ffc26 	beq	r2,zero,805f00 <__any_on+0x2c>
  805f10:	00800044 	movi	r2,1
  805f14:	f800283a 	ret
  805f18:	18800a0e 	bge	r3,r2,805f44 <__any_on+0x70>
  805f1c:	294007cc 	andi	r5,r5,31
  805f20:	28000826 	beq	r5,zero,805f44 <__any_on+0x70>
  805f24:	18c5883a 	add	r2,r3,r3
  805f28:	1085883a 	add	r2,r2,r2
  805f2c:	208d883a 	add	r6,r4,r2
  805f30:	30c00017 	ldw	r3,0(r6)
  805f34:	1944d83a 	srl	r2,r3,r5
  805f38:	1144983a 	sll	r2,r2,r5
  805f3c:	18bff41e 	bne	r3,r2,805f10 <__any_on+0x3c>
  805f40:	003feb06 	br	805ef0 <__any_on+0x1c>
  805f44:	18c5883a 	add	r2,r3,r3
  805f48:	1085883a 	add	r2,r2,r2
  805f4c:	208d883a 	add	r6,r4,r2
  805f50:	003fe706 	br	805ef0 <__any_on+0x1c>
  805f54:	0005883a 	mov	r2,zero
  805f58:	f800283a 	ret

00805f5c <_Balloc>:
  805f5c:	20c01317 	ldw	r3,76(r4)
  805f60:	defffb04 	addi	sp,sp,-20
  805f64:	dcc00315 	stw	r19,12(sp)
  805f68:	dc800215 	stw	r18,8(sp)
  805f6c:	dfc00415 	stw	ra,16(sp)
  805f70:	2825883a 	mov	r18,r5
  805f74:	dc400115 	stw	r17,4(sp)
  805f78:	dc000015 	stw	r16,0(sp)
  805f7c:	2027883a 	mov	r19,r4
  805f80:	01800404 	movi	r6,16
  805f84:	01400104 	movi	r5,4
  805f88:	18001726 	beq	r3,zero,805fe8 <_Balloc+0x8c>
  805f8c:	01400044 	movi	r5,1
  805f90:	9485883a 	add	r2,r18,r18
  805f94:	2ca2983a 	sll	r17,r5,r18
  805f98:	1085883a 	add	r2,r2,r2
  805f9c:	10c7883a 	add	r3,r2,r3
  805fa0:	1c000017 	ldw	r16,0(r3)
  805fa4:	8c4d883a 	add	r6,r17,r17
  805fa8:	318d883a 	add	r6,r6,r6
  805fac:	9809883a 	mov	r4,r19
  805fb0:	31800504 	addi	r6,r6,20
  805fb4:	80001226 	beq	r16,zero,806000 <_Balloc+0xa4>
  805fb8:	80800017 	ldw	r2,0(r16)
  805fbc:	18800015 	stw	r2,0(r3)
  805fc0:	80000415 	stw	zero,16(r16)
  805fc4:	80000315 	stw	zero,12(r16)
  805fc8:	8005883a 	mov	r2,r16
  805fcc:	dfc00417 	ldw	ra,16(sp)
  805fd0:	dcc00317 	ldw	r19,12(sp)
  805fd4:	dc800217 	ldw	r18,8(sp)
  805fd8:	dc400117 	ldw	r17,4(sp)
  805fdc:	dc000017 	ldw	r16,0(sp)
  805fe0:	dec00504 	addi	sp,sp,20
  805fe4:	f800283a 	ret
  805fe8:	08073bc0 	call	8073bc <_calloc_r>
  805fec:	1007883a 	mov	r3,r2
  805ff0:	0021883a 	mov	r16,zero
  805ff4:	98801315 	stw	r2,76(r19)
  805ff8:	103fe41e 	bne	r2,zero,805f8c <_Balloc+0x30>
  805ffc:	003ff206 	br	805fc8 <_Balloc+0x6c>
  806000:	08073bc0 	call	8073bc <_calloc_r>
  806004:	103ff026 	beq	r2,zero,805fc8 <_Balloc+0x6c>
  806008:	1021883a 	mov	r16,r2
  80600c:	14800115 	stw	r18,4(r2)
  806010:	14400215 	stw	r17,8(r2)
  806014:	003fea06 	br	805fc0 <_Balloc+0x64>

00806018 <__d2b>:
  806018:	defff504 	addi	sp,sp,-44
  80601c:	dcc00515 	stw	r19,20(sp)
  806020:	04c00044 	movi	r19,1
  806024:	dc000215 	stw	r16,8(sp)
  806028:	2821883a 	mov	r16,r5
  80602c:	980b883a 	mov	r5,r19
  806030:	ddc00915 	stw	r23,36(sp)
  806034:	dd800815 	stw	r22,32(sp)
  806038:	dd400715 	stw	r21,28(sp)
  80603c:	dd000615 	stw	r20,24(sp)
  806040:	dc800415 	stw	r18,16(sp)
  806044:	dc400315 	stw	r17,12(sp)
  806048:	dfc00a15 	stw	ra,40(sp)
  80604c:	3023883a 	mov	r17,r6
  806050:	382d883a 	mov	r22,r7
  806054:	ddc00b17 	ldw	r23,44(sp)
  806058:	0805f5c0 	call	805f5c <_Balloc>
  80605c:	1025883a 	mov	r18,r2
  806060:	00a00034 	movhi	r2,32768
  806064:	10bfffc4 	addi	r2,r2,-1
  806068:	8888703a 	and	r4,r17,r2
  80606c:	202ad53a 	srli	r21,r4,20
  806070:	00800434 	movhi	r2,16
  806074:	10bfffc4 	addi	r2,r2,-1
  806078:	8886703a 	and	r3,r17,r2
  80607c:	a829003a 	cmpeq	r20,r21,zero
  806080:	800b883a 	mov	r5,r16
  806084:	d8c00115 	stw	r3,4(sp)
  806088:	94000504 	addi	r16,r18,20
  80608c:	a000021e 	bne	r20,zero,806098 <__d2b+0x80>
  806090:	18c00434 	orhi	r3,r3,16
  806094:	d8c00115 	stw	r3,4(sp)
  806098:	28002726 	beq	r5,zero,806138 <__d2b+0x120>
  80609c:	d809883a 	mov	r4,sp
  8060a0:	d9400015 	stw	r5,0(sp)
  8060a4:	0805a740 	call	805a74 <__lo0bits>
  8060a8:	100d883a 	mov	r6,r2
  8060ac:	10003526 	beq	r2,zero,806184 <__d2b+0x16c>
  8060b0:	d8c00117 	ldw	r3,4(sp)
  8060b4:	00800804 	movi	r2,32
  8060b8:	1185c83a 	sub	r2,r2,r6
  8060bc:	d9000017 	ldw	r4,0(sp)
  8060c0:	1886983a 	sll	r3,r3,r2
  8060c4:	1906b03a 	or	r3,r3,r4
  8060c8:	90c00515 	stw	r3,20(r18)
  8060cc:	d8c00117 	ldw	r3,4(sp)
  8060d0:	1986d83a 	srl	r3,r3,r6
  8060d4:	d8c00115 	stw	r3,4(sp)
  8060d8:	180b003a 	cmpeq	r5,r3,zero
  8060dc:	00800084 	movi	r2,2
  8060e0:	114bc83a 	sub	r5,r2,r5
  8060e4:	80c00115 	stw	r3,4(r16)
  8060e8:	91400415 	stw	r5,16(r18)
  8060ec:	a0001a1e 	bne	r20,zero,806158 <__d2b+0x140>
  8060f0:	3545883a 	add	r2,r6,r21
  8060f4:	10bef344 	addi	r2,r2,-1075
  8060f8:	00c00d44 	movi	r3,53
  8060fc:	b0800015 	stw	r2,0(r22)
  806100:	1987c83a 	sub	r3,r3,r6
  806104:	b8c00015 	stw	r3,0(r23)
  806108:	9005883a 	mov	r2,r18
  80610c:	dfc00a17 	ldw	ra,40(sp)
  806110:	ddc00917 	ldw	r23,36(sp)
  806114:	dd800817 	ldw	r22,32(sp)
  806118:	dd400717 	ldw	r21,28(sp)
  80611c:	dd000617 	ldw	r20,24(sp)
  806120:	dcc00517 	ldw	r19,20(sp)
  806124:	dc800417 	ldw	r18,16(sp)
  806128:	dc400317 	ldw	r17,12(sp)
  80612c:	dc000217 	ldw	r16,8(sp)
  806130:	dec00b04 	addi	sp,sp,44
  806134:	f800283a 	ret
  806138:	d9000104 	addi	r4,sp,4
  80613c:	0805a740 	call	805a74 <__lo0bits>
  806140:	11800804 	addi	r6,r2,32
  806144:	d8800117 	ldw	r2,4(sp)
  806148:	94c00415 	stw	r19,16(r18)
  80614c:	980b883a 	mov	r5,r19
  806150:	90800515 	stw	r2,20(r18)
  806154:	a03fe626 	beq	r20,zero,8060f0 <__d2b+0xd8>
  806158:	2945883a 	add	r2,r5,r5
  80615c:	1085883a 	add	r2,r2,r2
  806160:	1405883a 	add	r2,r2,r16
  806164:	113fff17 	ldw	r4,-4(r2)
  806168:	30fef384 	addi	r3,r6,-1074
  80616c:	2820917a 	slli	r16,r5,5
  806170:	b0c00015 	stw	r3,0(r22)
  806174:	0805a040 	call	805a04 <__hi0bits>
  806178:	80a1c83a 	sub	r16,r16,r2
  80617c:	bc000015 	stw	r16,0(r23)
  806180:	003fe106 	br	806108 <__d2b+0xf0>
  806184:	d8800017 	ldw	r2,0(sp)
  806188:	90800515 	stw	r2,20(r18)
  80618c:	d8c00117 	ldw	r3,4(sp)
  806190:	003fd106 	br	8060d8 <__d2b+0xc0>

00806194 <__mdiff>:
  806194:	defffb04 	addi	sp,sp,-20
  806198:	dc000015 	stw	r16,0(sp)
  80619c:	2821883a 	mov	r16,r5
  8061a0:	dc800215 	stw	r18,8(sp)
  8061a4:	300b883a 	mov	r5,r6
  8061a8:	2025883a 	mov	r18,r4
  8061ac:	8009883a 	mov	r4,r16
  8061b0:	dc400115 	stw	r17,4(sp)
  8061b4:	dfc00415 	stw	ra,16(sp)
  8061b8:	dcc00315 	stw	r19,12(sp)
  8061bc:	3023883a 	mov	r17,r6
  8061c0:	0805b380 	call	805b38 <__mcmp>
  8061c4:	10004226 	beq	r2,zero,8062d0 <__mdiff+0x13c>
  8061c8:	10005016 	blt	r2,zero,80630c <__mdiff+0x178>
  8061cc:	0027883a 	mov	r19,zero
  8061d0:	81400117 	ldw	r5,4(r16)
  8061d4:	9009883a 	mov	r4,r18
  8061d8:	0805f5c0 	call	805f5c <_Balloc>
  8061dc:	1019883a 	mov	r12,r2
  8061e0:	82800417 	ldw	r10,16(r16)
  8061e4:	88800417 	ldw	r2,16(r17)
  8061e8:	81800504 	addi	r6,r16,20
  8061ec:	5287883a 	add	r3,r10,r10
  8061f0:	1085883a 	add	r2,r2,r2
  8061f4:	18c7883a 	add	r3,r3,r3
  8061f8:	1085883a 	add	r2,r2,r2
  8061fc:	8a000504 	addi	r8,r17,20
  806200:	64c00315 	stw	r19,12(r12)
  806204:	30db883a 	add	r13,r6,r3
  806208:	4097883a 	add	r11,r8,r2
  80620c:	61c00504 	addi	r7,r12,20
  806210:	0013883a 	mov	r9,zero
  806214:	31000017 	ldw	r4,0(r6)
  806218:	41400017 	ldw	r5,0(r8)
  80621c:	42000104 	addi	r8,r8,4
  806220:	20bfffcc 	andi	r2,r4,65535
  806224:	28ffffcc 	andi	r3,r5,65535
  806228:	10c5c83a 	sub	r2,r2,r3
  80622c:	1245883a 	add	r2,r2,r9
  806230:	2008d43a 	srli	r4,r4,16
  806234:	280ad43a 	srli	r5,r5,16
  806238:	1007d43a 	srai	r3,r2,16
  80623c:	3880000d 	sth	r2,0(r7)
  806240:	2149c83a 	sub	r4,r4,r5
  806244:	20c9883a 	add	r4,r4,r3
  806248:	3900008d 	sth	r4,2(r7)
  80624c:	31800104 	addi	r6,r6,4
  806250:	39c00104 	addi	r7,r7,4
  806254:	2013d43a 	srai	r9,r4,16
  806258:	42ffee36 	bltu	r8,r11,806214 <__mdiff+0x80>
  80625c:	33400c2e 	bgeu	r6,r13,806290 <__mdiff+0xfc>
  806260:	30800017 	ldw	r2,0(r6)
  806264:	31800104 	addi	r6,r6,4
  806268:	10ffffcc 	andi	r3,r2,65535
  80626c:	1a47883a 	add	r3,r3,r9
  806270:	1004d43a 	srli	r2,r2,16
  806274:	1809d43a 	srai	r4,r3,16
  806278:	38c0000d 	sth	r3,0(r7)
  80627c:	1105883a 	add	r2,r2,r4
  806280:	3880008d 	sth	r2,2(r7)
  806284:	1013d43a 	srai	r9,r2,16
  806288:	39c00104 	addi	r7,r7,4
  80628c:	337ff436 	bltu	r6,r13,806260 <__mdiff+0xcc>
  806290:	38bfff17 	ldw	r2,-4(r7)
  806294:	38ffff04 	addi	r3,r7,-4
  806298:	1000041e 	bne	r2,zero,8062ac <__mdiff+0x118>
  80629c:	18ffff04 	addi	r3,r3,-4
  8062a0:	18800017 	ldw	r2,0(r3)
  8062a4:	52bfffc4 	addi	r10,r10,-1
  8062a8:	103ffc26 	beq	r2,zero,80629c <__mdiff+0x108>
  8062ac:	6005883a 	mov	r2,r12
  8062b0:	62800415 	stw	r10,16(r12)
  8062b4:	dfc00417 	ldw	ra,16(sp)
  8062b8:	dcc00317 	ldw	r19,12(sp)
  8062bc:	dc800217 	ldw	r18,8(sp)
  8062c0:	dc400117 	ldw	r17,4(sp)
  8062c4:	dc000017 	ldw	r16,0(sp)
  8062c8:	dec00504 	addi	sp,sp,20
  8062cc:	f800283a 	ret
  8062d0:	9009883a 	mov	r4,r18
  8062d4:	000b883a 	mov	r5,zero
  8062d8:	0805f5c0 	call	805f5c <_Balloc>
  8062dc:	1019883a 	mov	r12,r2
  8062e0:	00800044 	movi	r2,1
  8062e4:	60800415 	stw	r2,16(r12)
  8062e8:	6005883a 	mov	r2,r12
  8062ec:	60000515 	stw	zero,20(r12)
  8062f0:	dfc00417 	ldw	ra,16(sp)
  8062f4:	dcc00317 	ldw	r19,12(sp)
  8062f8:	dc800217 	ldw	r18,8(sp)
  8062fc:	dc400117 	ldw	r17,4(sp)
  806300:	dc000017 	ldw	r16,0(sp)
  806304:	dec00504 	addi	sp,sp,20
  806308:	f800283a 	ret
  80630c:	880d883a 	mov	r6,r17
  806310:	04c00044 	movi	r19,1
  806314:	8023883a 	mov	r17,r16
  806318:	3021883a 	mov	r16,r6
  80631c:	003fac06 	br	8061d0 <__mdiff+0x3c>

00806320 <__lshift>:
  806320:	defff904 	addi	sp,sp,-28
  806324:	28800417 	ldw	r2,16(r5)
  806328:	dc000015 	stw	r16,0(sp)
  80632c:	3021d17a 	srai	r16,r6,5
  806330:	28c00217 	ldw	r3,8(r5)
  806334:	10800044 	addi	r2,r2,1
  806338:	dc400115 	stw	r17,4(sp)
  80633c:	80a3883a 	add	r17,r16,r2
  806340:	dd400515 	stw	r21,20(sp)
  806344:	dd000415 	stw	r20,16(sp)
  806348:	dc800215 	stw	r18,8(sp)
  80634c:	dfc00615 	stw	ra,24(sp)
  806350:	2825883a 	mov	r18,r5
  806354:	dcc00315 	stw	r19,12(sp)
  806358:	3029883a 	mov	r20,r6
  80635c:	202b883a 	mov	r21,r4
  806360:	29400117 	ldw	r5,4(r5)
  806364:	1c40030e 	bge	r3,r17,806374 <__lshift+0x54>
  806368:	18c7883a 	add	r3,r3,r3
  80636c:	29400044 	addi	r5,r5,1
  806370:	1c7ffd16 	blt	r3,r17,806368 <__lshift+0x48>
  806374:	a809883a 	mov	r4,r21
  806378:	0805f5c0 	call	805f5c <_Balloc>
  80637c:	1027883a 	mov	r19,r2
  806380:	11400504 	addi	r5,r2,20
  806384:	0400090e 	bge	zero,r16,8063ac <__lshift+0x8c>
  806388:	2805883a 	mov	r2,r5
  80638c:	0007883a 	mov	r3,zero
  806390:	18c00044 	addi	r3,r3,1
  806394:	10000015 	stw	zero,0(r2)
  806398:	10800104 	addi	r2,r2,4
  80639c:	80fffc1e 	bne	r16,r3,806390 <__lshift+0x70>
  8063a0:	8405883a 	add	r2,r16,r16
  8063a4:	1085883a 	add	r2,r2,r2
  8063a8:	288b883a 	add	r5,r5,r2
  8063ac:	90800417 	ldw	r2,16(r18)
  8063b0:	91000504 	addi	r4,r18,20
  8063b4:	a18007cc 	andi	r6,r20,31
  8063b8:	1085883a 	add	r2,r2,r2
  8063bc:	1085883a 	add	r2,r2,r2
  8063c0:	208f883a 	add	r7,r4,r2
  8063c4:	30001e26 	beq	r6,zero,806440 <__lshift+0x120>
  8063c8:	00800804 	movi	r2,32
  8063cc:	1191c83a 	sub	r8,r2,r6
  8063d0:	0007883a 	mov	r3,zero
  8063d4:	20800017 	ldw	r2,0(r4)
  8063d8:	1184983a 	sll	r2,r2,r6
  8063dc:	1884b03a 	or	r2,r3,r2
  8063e0:	28800015 	stw	r2,0(r5)
  8063e4:	20c00017 	ldw	r3,0(r4)
  8063e8:	21000104 	addi	r4,r4,4
  8063ec:	29400104 	addi	r5,r5,4
  8063f0:	1a06d83a 	srl	r3,r3,r8
  8063f4:	21fff736 	bltu	r4,r7,8063d4 <__lshift+0xb4>
  8063f8:	28c00015 	stw	r3,0(r5)
  8063fc:	18000126 	beq	r3,zero,806404 <__lshift+0xe4>
  806400:	8c400044 	addi	r17,r17,1
  806404:	88bfffc4 	addi	r2,r17,-1
  806408:	98800415 	stw	r2,16(r19)
  80640c:	a809883a 	mov	r4,r21
  806410:	900b883a 	mov	r5,r18
  806414:	08059dc0 	call	8059dc <_Bfree>
  806418:	9805883a 	mov	r2,r19
  80641c:	dfc00617 	ldw	ra,24(sp)
  806420:	dd400517 	ldw	r21,20(sp)
  806424:	dd000417 	ldw	r20,16(sp)
  806428:	dcc00317 	ldw	r19,12(sp)
  80642c:	dc800217 	ldw	r18,8(sp)
  806430:	dc400117 	ldw	r17,4(sp)
  806434:	dc000017 	ldw	r16,0(sp)
  806438:	dec00704 	addi	sp,sp,28
  80643c:	f800283a 	ret
  806440:	20800017 	ldw	r2,0(r4)
  806444:	21000104 	addi	r4,r4,4
  806448:	28800015 	stw	r2,0(r5)
  80644c:	29400104 	addi	r5,r5,4
  806450:	21ffec2e 	bgeu	r4,r7,806404 <__lshift+0xe4>
  806454:	20800017 	ldw	r2,0(r4)
  806458:	21000104 	addi	r4,r4,4
  80645c:	28800015 	stw	r2,0(r5)
  806460:	29400104 	addi	r5,r5,4
  806464:	21fff636 	bltu	r4,r7,806440 <__lshift+0x120>
  806468:	003fe606 	br	806404 <__lshift+0xe4>

0080646c <__multiply>:
  80646c:	defff004 	addi	sp,sp,-64
  806470:	dc800815 	stw	r18,32(sp)
  806474:	dc400715 	stw	r17,28(sp)
  806478:	2c800417 	ldw	r18,16(r5)
  80647c:	34400417 	ldw	r17,16(r6)
  806480:	dcc00915 	stw	r19,36(sp)
  806484:	dc000615 	stw	r16,24(sp)
  806488:	dfc00f15 	stw	ra,60(sp)
  80648c:	df000e15 	stw	fp,56(sp)
  806490:	ddc00d15 	stw	r23,52(sp)
  806494:	dd800c15 	stw	r22,48(sp)
  806498:	dd400b15 	stw	r21,44(sp)
  80649c:	dd000a15 	stw	r20,40(sp)
  8064a0:	2821883a 	mov	r16,r5
  8064a4:	3027883a 	mov	r19,r6
  8064a8:	9440040e 	bge	r18,r17,8064bc <__multiply+0x50>
  8064ac:	8825883a 	mov	r18,r17
  8064b0:	2c400417 	ldw	r17,16(r5)
  8064b4:	2827883a 	mov	r19,r5
  8064b8:	3021883a 	mov	r16,r6
  8064bc:	80800217 	ldw	r2,8(r16)
  8064c0:	9447883a 	add	r3,r18,r17
  8064c4:	d8c00415 	stw	r3,16(sp)
  8064c8:	81400117 	ldw	r5,4(r16)
  8064cc:	10c0010e 	bge	r2,r3,8064d4 <__multiply+0x68>
  8064d0:	29400044 	addi	r5,r5,1
  8064d4:	0805f5c0 	call	805f5c <_Balloc>
  8064d8:	d8800515 	stw	r2,20(sp)
  8064dc:	d9000417 	ldw	r4,16(sp)
  8064e0:	d8c00517 	ldw	r3,20(sp)
  8064e4:	2105883a 	add	r2,r4,r4
  8064e8:	1085883a 	add	r2,r2,r2
  8064ec:	19000504 	addi	r4,r3,20
  8064f0:	2085883a 	add	r2,r4,r2
  8064f4:	d8800315 	stw	r2,12(sp)
  8064f8:	2080052e 	bgeu	r4,r2,806510 <__multiply+0xa4>
  8064fc:	2005883a 	mov	r2,r4
  806500:	d8c00317 	ldw	r3,12(sp)
  806504:	10000015 	stw	zero,0(r2)
  806508:	10800104 	addi	r2,r2,4
  80650c:	10fffc36 	bltu	r2,r3,806500 <__multiply+0x94>
  806510:	8c45883a 	add	r2,r17,r17
  806514:	9487883a 	add	r3,r18,r18
  806518:	9dc00504 	addi	r23,r19,20
  80651c:	1085883a 	add	r2,r2,r2
  806520:	84000504 	addi	r16,r16,20
  806524:	18c7883a 	add	r3,r3,r3
  806528:	b885883a 	add	r2,r23,r2
  80652c:	dc000015 	stw	r16,0(sp)
  806530:	d8800215 	stw	r2,8(sp)
  806534:	80f9883a 	add	fp,r16,r3
  806538:	b880432e 	bgeu	r23,r2,806648 <__multiply+0x1dc>
  80653c:	d9000115 	stw	r4,4(sp)
  806540:	b9000017 	ldw	r4,0(r23)
  806544:	253fffcc 	andi	r20,r4,65535
  806548:	a0001a26 	beq	r20,zero,8065b4 <__multiply+0x148>
  80654c:	dcc00017 	ldw	r19,0(sp)
  806550:	dc800117 	ldw	r18,4(sp)
  806554:	002b883a 	mov	r21,zero
  806558:	9c400017 	ldw	r17,0(r19)
  80655c:	94000017 	ldw	r16,0(r18)
  806560:	a009883a 	mov	r4,r20
  806564:	897fffcc 	andi	r5,r17,65535
  806568:	08097300 	call	809730 <__mulsi3>
  80656c:	880ad43a 	srli	r5,r17,16
  806570:	80ffffcc 	andi	r3,r16,65535
  806574:	a8c7883a 	add	r3,r21,r3
  806578:	a009883a 	mov	r4,r20
  80657c:	10e3883a 	add	r17,r2,r3
  806580:	8020d43a 	srli	r16,r16,16
  806584:	08097300 	call	809730 <__mulsi3>
  806588:	8806d43a 	srli	r3,r17,16
  80658c:	1405883a 	add	r2,r2,r16
  806590:	9cc00104 	addi	r19,r19,4
  806594:	1887883a 	add	r3,r3,r2
  806598:	90c0008d 	sth	r3,2(r18)
  80659c:	9440000d 	sth	r17,0(r18)
  8065a0:	182ad43a 	srli	r21,r3,16
  8065a4:	94800104 	addi	r18,r18,4
  8065a8:	9f3feb36 	bltu	r19,fp,806558 <__multiply+0xec>
  8065ac:	95400015 	stw	r21,0(r18)
  8065b0:	b9000017 	ldw	r4,0(r23)
  8065b4:	202ad43a 	srli	r21,r4,16
  8065b8:	a8001c26 	beq	r21,zero,80662c <__multiply+0x1c0>
  8065bc:	d9000117 	ldw	r4,4(sp)
  8065c0:	dd000017 	ldw	r20,0(sp)
  8065c4:	002d883a 	mov	r22,zero
  8065c8:	24c00017 	ldw	r19,0(r4)
  8065cc:	2025883a 	mov	r18,r4
  8065d0:	9823883a 	mov	r17,r19
  8065d4:	a4000017 	ldw	r16,0(r20)
  8065d8:	a809883a 	mov	r4,r21
  8065dc:	a5000104 	addi	r20,r20,4
  8065e0:	817fffcc 	andi	r5,r16,65535
  8065e4:	08097300 	call	809730 <__mulsi3>
  8065e8:	8806d43a 	srli	r3,r17,16
  8065ec:	800ad43a 	srli	r5,r16,16
  8065f0:	94c0000d 	sth	r19,0(r18)
  8065f4:	b0c7883a 	add	r3,r22,r3
  8065f8:	10e1883a 	add	r16,r2,r3
  8065fc:	9400008d 	sth	r16,2(r18)
  806600:	a809883a 	mov	r4,r21
  806604:	94800104 	addi	r18,r18,4
  806608:	08097300 	call	809730 <__mulsi3>
  80660c:	94400017 	ldw	r17,0(r18)
  806610:	8020d43a 	srli	r16,r16,16
  806614:	88ffffcc 	andi	r3,r17,65535
  806618:	10c5883a 	add	r2,r2,r3
  80661c:	80a7883a 	add	r19,r16,r2
  806620:	982cd43a 	srli	r22,r19,16
  806624:	a73feb36 	bltu	r20,fp,8065d4 <__multiply+0x168>
  806628:	94c00015 	stw	r19,0(r18)
  80662c:	d8800217 	ldw	r2,8(sp)
  806630:	bdc00104 	addi	r23,r23,4
  806634:	b880042e 	bgeu	r23,r2,806648 <__multiply+0x1dc>
  806638:	d8c00117 	ldw	r3,4(sp)
  80663c:	18c00104 	addi	r3,r3,4
  806640:	d8c00115 	stw	r3,4(sp)
  806644:	003fbe06 	br	806540 <__multiply+0xd4>
  806648:	d9000417 	ldw	r4,16(sp)
  80664c:	01000c0e 	bge	zero,r4,806680 <__multiply+0x214>
  806650:	d8c00317 	ldw	r3,12(sp)
  806654:	18bfff17 	ldw	r2,-4(r3)
  806658:	18ffff04 	addi	r3,r3,-4
  80665c:	10000326 	beq	r2,zero,80666c <__multiply+0x200>
  806660:	00000706 	br	806680 <__multiply+0x214>
  806664:	18800017 	ldw	r2,0(r3)
  806668:	1000051e 	bne	r2,zero,806680 <__multiply+0x214>
  80666c:	d9000417 	ldw	r4,16(sp)
  806670:	18ffff04 	addi	r3,r3,-4
  806674:	213fffc4 	addi	r4,r4,-1
  806678:	d9000415 	stw	r4,16(sp)
  80667c:	203ff91e 	bne	r4,zero,806664 <__multiply+0x1f8>
  806680:	d8800417 	ldw	r2,16(sp)
  806684:	d8c00517 	ldw	r3,20(sp)
  806688:	18800415 	stw	r2,16(r3)
  80668c:	1805883a 	mov	r2,r3
  806690:	dfc00f17 	ldw	ra,60(sp)
  806694:	df000e17 	ldw	fp,56(sp)
  806698:	ddc00d17 	ldw	r23,52(sp)
  80669c:	dd800c17 	ldw	r22,48(sp)
  8066a0:	dd400b17 	ldw	r21,44(sp)
  8066a4:	dd000a17 	ldw	r20,40(sp)
  8066a8:	dcc00917 	ldw	r19,36(sp)
  8066ac:	dc800817 	ldw	r18,32(sp)
  8066b0:	dc400717 	ldw	r17,28(sp)
  8066b4:	dc000617 	ldw	r16,24(sp)
  8066b8:	dec01004 	addi	sp,sp,64
  8066bc:	f800283a 	ret

008066c0 <__i2b>:
  8066c0:	defffd04 	addi	sp,sp,-12
  8066c4:	dc000015 	stw	r16,0(sp)
  8066c8:	04000044 	movi	r16,1
  8066cc:	dc800115 	stw	r18,4(sp)
  8066d0:	2825883a 	mov	r18,r5
  8066d4:	800b883a 	mov	r5,r16
  8066d8:	dfc00215 	stw	ra,8(sp)
  8066dc:	0805f5c0 	call	805f5c <_Balloc>
  8066e0:	14000415 	stw	r16,16(r2)
  8066e4:	14800515 	stw	r18,20(r2)
  8066e8:	dfc00217 	ldw	ra,8(sp)
  8066ec:	dc800117 	ldw	r18,4(sp)
  8066f0:	dc000017 	ldw	r16,0(sp)
  8066f4:	dec00304 	addi	sp,sp,12
  8066f8:	f800283a 	ret

008066fc <__multadd>:
  8066fc:	defff604 	addi	sp,sp,-40
  806700:	dd800615 	stw	r22,24(sp)
  806704:	2d800417 	ldw	r22,16(r5)
  806708:	df000815 	stw	fp,32(sp)
  80670c:	ddc00715 	stw	r23,28(sp)
  806710:	dd400515 	stw	r21,20(sp)
  806714:	dd000415 	stw	r20,16(sp)
  806718:	dcc00315 	stw	r19,12(sp)
  80671c:	dc800215 	stw	r18,8(sp)
  806720:	dfc00915 	stw	ra,36(sp)
  806724:	dc400115 	stw	r17,4(sp)
  806728:	dc000015 	stw	r16,0(sp)
  80672c:	282f883a 	mov	r23,r5
  806730:	2039883a 	mov	fp,r4
  806734:	302b883a 	mov	r21,r6
  806738:	3829883a 	mov	r20,r7
  80673c:	2c800504 	addi	r18,r5,20
  806740:	0027883a 	mov	r19,zero
  806744:	94400017 	ldw	r17,0(r18)
  806748:	a80b883a 	mov	r5,r21
  80674c:	9cc00044 	addi	r19,r19,1
  806750:	893fffcc 	andi	r4,r17,65535
  806754:	08097300 	call	809730 <__mulsi3>
  806758:	8808d43a 	srli	r4,r17,16
  80675c:	1521883a 	add	r16,r2,r20
  806760:	a80b883a 	mov	r5,r21
  806764:	08097300 	call	809730 <__mulsi3>
  806768:	8008d43a 	srli	r4,r16,16
  80676c:	843fffcc 	andi	r16,r16,65535
  806770:	1105883a 	add	r2,r2,r4
  806774:	1006943a 	slli	r3,r2,16
  806778:	1028d43a 	srli	r20,r2,16
  80677c:	1c07883a 	add	r3,r3,r16
  806780:	90c00015 	stw	r3,0(r18)
  806784:	94800104 	addi	r18,r18,4
  806788:	9dbfee16 	blt	r19,r22,806744 <__multadd+0x48>
  80678c:	a0000826 	beq	r20,zero,8067b0 <__multadd+0xb4>
  806790:	b8800217 	ldw	r2,8(r23)
  806794:	b080130e 	bge	r22,r2,8067e4 <__multadd+0xe8>
  806798:	b585883a 	add	r2,r22,r22
  80679c:	1085883a 	add	r2,r2,r2
  8067a0:	15c5883a 	add	r2,r2,r23
  8067a4:	b0c00044 	addi	r3,r22,1
  8067a8:	15000515 	stw	r20,20(r2)
  8067ac:	b8c00415 	stw	r3,16(r23)
  8067b0:	b805883a 	mov	r2,r23
  8067b4:	dfc00917 	ldw	ra,36(sp)
  8067b8:	df000817 	ldw	fp,32(sp)
  8067bc:	ddc00717 	ldw	r23,28(sp)
  8067c0:	dd800617 	ldw	r22,24(sp)
  8067c4:	dd400517 	ldw	r21,20(sp)
  8067c8:	dd000417 	ldw	r20,16(sp)
  8067cc:	dcc00317 	ldw	r19,12(sp)
  8067d0:	dc800217 	ldw	r18,8(sp)
  8067d4:	dc400117 	ldw	r17,4(sp)
  8067d8:	dc000017 	ldw	r16,0(sp)
  8067dc:	dec00a04 	addi	sp,sp,40
  8067e0:	f800283a 	ret
  8067e4:	b9400117 	ldw	r5,4(r23)
  8067e8:	e009883a 	mov	r4,fp
  8067ec:	29400044 	addi	r5,r5,1
  8067f0:	0805f5c0 	call	805f5c <_Balloc>
  8067f4:	b9800417 	ldw	r6,16(r23)
  8067f8:	b9400304 	addi	r5,r23,12
  8067fc:	11000304 	addi	r4,r2,12
  806800:	318d883a 	add	r6,r6,r6
  806804:	318d883a 	add	r6,r6,r6
  806808:	31800204 	addi	r6,r6,8
  80680c:	1023883a 	mov	r17,r2
  806810:	08057c40 	call	8057c4 <memcpy>
  806814:	b80b883a 	mov	r5,r23
  806818:	e009883a 	mov	r4,fp
  80681c:	08059dc0 	call	8059dc <_Bfree>
  806820:	882f883a 	mov	r23,r17
  806824:	003fdc06 	br	806798 <__multadd+0x9c>

00806828 <__pow5mult>:
  806828:	defffa04 	addi	sp,sp,-24
  80682c:	308000cc 	andi	r2,r6,3
  806830:	dd000415 	stw	r20,16(sp)
  806834:	dcc00315 	stw	r19,12(sp)
  806838:	dc000015 	stw	r16,0(sp)
  80683c:	dfc00515 	stw	ra,20(sp)
  806840:	dc800215 	stw	r18,8(sp)
  806844:	dc400115 	stw	r17,4(sp)
  806848:	3021883a 	mov	r16,r6
  80684c:	2027883a 	mov	r19,r4
  806850:	2829883a 	mov	r20,r5
  806854:	10002b1e 	bne	r2,zero,806904 <__pow5mult+0xdc>
  806858:	8025d0ba 	srai	r18,r16,2
  80685c:	90001b26 	beq	r18,zero,8068cc <__pow5mult+0xa4>
  806860:	9c001217 	ldw	r16,72(r19)
  806864:	8000081e 	bne	r16,zero,806888 <__pow5mult+0x60>
  806868:	00003006 	br	80692c <__pow5mult+0x104>
  80686c:	800b883a 	mov	r5,r16
  806870:	800d883a 	mov	r6,r16
  806874:	9809883a 	mov	r4,r19
  806878:	90001426 	beq	r18,zero,8068cc <__pow5mult+0xa4>
  80687c:	80800017 	ldw	r2,0(r16)
  806880:	10001b26 	beq	r2,zero,8068f0 <__pow5mult+0xc8>
  806884:	1021883a 	mov	r16,r2
  806888:	9080004c 	andi	r2,r18,1
  80688c:	1005003a 	cmpeq	r2,r2,zero
  806890:	9025d07a 	srai	r18,r18,1
  806894:	800d883a 	mov	r6,r16
  806898:	9809883a 	mov	r4,r19
  80689c:	a00b883a 	mov	r5,r20
  8068a0:	103ff21e 	bne	r2,zero,80686c <__pow5mult+0x44>
  8068a4:	080646c0 	call	80646c <__multiply>
  8068a8:	a00b883a 	mov	r5,r20
  8068ac:	9809883a 	mov	r4,r19
  8068b0:	1023883a 	mov	r17,r2
  8068b4:	08059dc0 	call	8059dc <_Bfree>
  8068b8:	8829883a 	mov	r20,r17
  8068bc:	800b883a 	mov	r5,r16
  8068c0:	800d883a 	mov	r6,r16
  8068c4:	9809883a 	mov	r4,r19
  8068c8:	903fec1e 	bne	r18,zero,80687c <__pow5mult+0x54>
  8068cc:	a005883a 	mov	r2,r20
  8068d0:	dfc00517 	ldw	ra,20(sp)
  8068d4:	dd000417 	ldw	r20,16(sp)
  8068d8:	dcc00317 	ldw	r19,12(sp)
  8068dc:	dc800217 	ldw	r18,8(sp)
  8068e0:	dc400117 	ldw	r17,4(sp)
  8068e4:	dc000017 	ldw	r16,0(sp)
  8068e8:	dec00604 	addi	sp,sp,24
  8068ec:	f800283a 	ret
  8068f0:	080646c0 	call	80646c <__multiply>
  8068f4:	80800015 	stw	r2,0(r16)
  8068f8:	1021883a 	mov	r16,r2
  8068fc:	10000015 	stw	zero,0(r2)
  806900:	003fe106 	br	806888 <__pow5mult+0x60>
  806904:	1085883a 	add	r2,r2,r2
  806908:	00c02074 	movhi	r3,129
  80690c:	18f2e004 	addi	r3,r3,-13440
  806910:	1085883a 	add	r2,r2,r2
  806914:	10c5883a 	add	r2,r2,r3
  806918:	11bfff17 	ldw	r6,-4(r2)
  80691c:	000f883a 	mov	r7,zero
  806920:	08066fc0 	call	8066fc <__multadd>
  806924:	1029883a 	mov	r20,r2
  806928:	003fcb06 	br	806858 <__pow5mult+0x30>
  80692c:	9809883a 	mov	r4,r19
  806930:	01409c44 	movi	r5,625
  806934:	08066c00 	call	8066c0 <__i2b>
  806938:	98801215 	stw	r2,72(r19)
  80693c:	1021883a 	mov	r16,r2
  806940:	10000015 	stw	zero,0(r2)
  806944:	003fd006 	br	806888 <__pow5mult+0x60>

00806948 <__s2b>:
  806948:	defff904 	addi	sp,sp,-28
  80694c:	dcc00315 	stw	r19,12(sp)
  806950:	dc800215 	stw	r18,8(sp)
  806954:	2827883a 	mov	r19,r5
  806958:	2025883a 	mov	r18,r4
  80695c:	01400244 	movi	r5,9
  806960:	39000204 	addi	r4,r7,8
  806964:	dd000415 	stw	r20,16(sp)
  806968:	dc400115 	stw	r17,4(sp)
  80696c:	dfc00615 	stw	ra,24(sp)
  806970:	dd400515 	stw	r21,20(sp)
  806974:	dc000015 	stw	r16,0(sp)
  806978:	3829883a 	mov	r20,r7
  80697c:	3023883a 	mov	r17,r6
  806980:	08096600 	call	809660 <__divsi3>
  806984:	00c00044 	movi	r3,1
  806988:	1880350e 	bge	r3,r2,806a60 <__s2b+0x118>
  80698c:	000b883a 	mov	r5,zero
  806990:	18c7883a 	add	r3,r3,r3
  806994:	29400044 	addi	r5,r5,1
  806998:	18bffd16 	blt	r3,r2,806990 <__s2b+0x48>
  80699c:	9009883a 	mov	r4,r18
  8069a0:	0805f5c0 	call	805f5c <_Balloc>
  8069a4:	1011883a 	mov	r8,r2
  8069a8:	d8800717 	ldw	r2,28(sp)
  8069ac:	00c00044 	movi	r3,1
  8069b0:	01800244 	movi	r6,9
  8069b4:	40800515 	stw	r2,20(r8)
  8069b8:	40c00415 	stw	r3,16(r8)
  8069bc:	3440260e 	bge	r6,r17,806a58 <__s2b+0x110>
  8069c0:	3021883a 	mov	r16,r6
  8069c4:	99ab883a 	add	r21,r19,r6
  8069c8:	9c05883a 	add	r2,r19,r16
  8069cc:	11c00007 	ldb	r7,0(r2)
  8069d0:	400b883a 	mov	r5,r8
  8069d4:	9009883a 	mov	r4,r18
  8069d8:	39fff404 	addi	r7,r7,-48
  8069dc:	01800284 	movi	r6,10
  8069e0:	08066fc0 	call	8066fc <__multadd>
  8069e4:	84000044 	addi	r16,r16,1
  8069e8:	1011883a 	mov	r8,r2
  8069ec:	8c3ff61e 	bne	r17,r16,8069c8 <__s2b+0x80>
  8069f0:	ac45883a 	add	r2,r21,r17
  8069f4:	117ffe04 	addi	r5,r2,-8
  8069f8:	880d883a 	mov	r6,r17
  8069fc:	35000c0e 	bge	r6,r20,806a30 <__s2b+0xe8>
  806a00:	a185c83a 	sub	r2,r20,r6
  806a04:	2821883a 	mov	r16,r5
  806a08:	28a3883a 	add	r17,r5,r2
  806a0c:	81c00007 	ldb	r7,0(r16)
  806a10:	400b883a 	mov	r5,r8
  806a14:	9009883a 	mov	r4,r18
  806a18:	39fff404 	addi	r7,r7,-48
  806a1c:	01800284 	movi	r6,10
  806a20:	08066fc0 	call	8066fc <__multadd>
  806a24:	84000044 	addi	r16,r16,1
  806a28:	1011883a 	mov	r8,r2
  806a2c:	847ff71e 	bne	r16,r17,806a0c <__s2b+0xc4>
  806a30:	4005883a 	mov	r2,r8
  806a34:	dfc00617 	ldw	ra,24(sp)
  806a38:	dd400517 	ldw	r21,20(sp)
  806a3c:	dd000417 	ldw	r20,16(sp)
  806a40:	dcc00317 	ldw	r19,12(sp)
  806a44:	dc800217 	ldw	r18,8(sp)
  806a48:	dc400117 	ldw	r17,4(sp)
  806a4c:	dc000017 	ldw	r16,0(sp)
  806a50:	dec00704 	addi	sp,sp,28
  806a54:	f800283a 	ret
  806a58:	99400284 	addi	r5,r19,10
  806a5c:	003fe706 	br	8069fc <__s2b+0xb4>
  806a60:	000b883a 	mov	r5,zero
  806a64:	003fcd06 	br	80699c <__s2b+0x54>

00806a68 <_realloc_r>:
  806a68:	defff404 	addi	sp,sp,-48
  806a6c:	dd800815 	stw	r22,32(sp)
  806a70:	dc800415 	stw	r18,16(sp)
  806a74:	dc400315 	stw	r17,12(sp)
  806a78:	dfc00b15 	stw	ra,44(sp)
  806a7c:	df000a15 	stw	fp,40(sp)
  806a80:	ddc00915 	stw	r23,36(sp)
  806a84:	dd400715 	stw	r21,28(sp)
  806a88:	dd000615 	stw	r20,24(sp)
  806a8c:	dcc00515 	stw	r19,20(sp)
  806a90:	dc000215 	stw	r16,8(sp)
  806a94:	2825883a 	mov	r18,r5
  806a98:	3023883a 	mov	r17,r6
  806a9c:	202d883a 	mov	r22,r4
  806aa0:	2800c926 	beq	r5,zero,806dc8 <_realloc_r+0x360>
  806aa4:	080a4b40 	call	80a4b4 <__malloc_lock>
  806aa8:	943ffe04 	addi	r16,r18,-8
  806aac:	88c002c4 	addi	r3,r17,11
  806ab0:	00800584 	movi	r2,22
  806ab4:	82000117 	ldw	r8,4(r16)
  806ab8:	10c01b2e 	bgeu	r2,r3,806b28 <_realloc_r+0xc0>
  806abc:	00bffe04 	movi	r2,-8
  806ac0:	188e703a 	and	r7,r3,r2
  806ac4:	3839883a 	mov	fp,r7
  806ac8:	38001a16 	blt	r7,zero,806b34 <_realloc_r+0xcc>
  806acc:	e4401936 	bltu	fp,r17,806b34 <_realloc_r+0xcc>
  806ad0:	013fff04 	movi	r4,-4
  806ad4:	4126703a 	and	r19,r8,r4
  806ad8:	99c02616 	blt	r19,r7,806b74 <_realloc_r+0x10c>
  806adc:	802b883a 	mov	r21,r16
  806ae0:	9829883a 	mov	r20,r19
  806ae4:	84000204 	addi	r16,r16,8
  806ae8:	a80f883a 	mov	r7,r21
  806aec:	a70dc83a 	sub	r6,r20,fp
  806af0:	008003c4 	movi	r2,15
  806af4:	1180c136 	bltu	r2,r6,806dfc <_realloc_r+0x394>
  806af8:	38800117 	ldw	r2,4(r7)
  806afc:	a549883a 	add	r4,r20,r21
  806b00:	1080004c 	andi	r2,r2,1
  806b04:	a084b03a 	or	r2,r20,r2
  806b08:	38800115 	stw	r2,4(r7)
  806b0c:	20c00117 	ldw	r3,4(r4)
  806b10:	18c00054 	ori	r3,r3,1
  806b14:	20c00115 	stw	r3,4(r4)
  806b18:	b009883a 	mov	r4,r22
  806b1c:	080a4d40 	call	80a4d4 <__malloc_unlock>
  806b20:	8023883a 	mov	r17,r16
  806b24:	00000606 	br	806b40 <_realloc_r+0xd8>
  806b28:	01c00404 	movi	r7,16
  806b2c:	3839883a 	mov	fp,r7
  806b30:	e47fe72e 	bgeu	fp,r17,806ad0 <_realloc_r+0x68>
  806b34:	00800304 	movi	r2,12
  806b38:	0023883a 	mov	r17,zero
  806b3c:	b0800015 	stw	r2,0(r22)
  806b40:	8805883a 	mov	r2,r17
  806b44:	dfc00b17 	ldw	ra,44(sp)
  806b48:	df000a17 	ldw	fp,40(sp)
  806b4c:	ddc00917 	ldw	r23,36(sp)
  806b50:	dd800817 	ldw	r22,32(sp)
  806b54:	dd400717 	ldw	r21,28(sp)
  806b58:	dd000617 	ldw	r20,24(sp)
  806b5c:	dcc00517 	ldw	r19,20(sp)
  806b60:	dc800417 	ldw	r18,16(sp)
  806b64:	dc400317 	ldw	r17,12(sp)
  806b68:	dc000217 	ldw	r16,8(sp)
  806b6c:	dec00c04 	addi	sp,sp,48
  806b70:	f800283a 	ret
  806b74:	00802074 	movhi	r2,129
  806b78:	10b44204 	addi	r2,r2,-12024
  806b7c:	12400217 	ldw	r9,8(r2)
  806b80:	84cd883a 	add	r6,r16,r19
  806b84:	802b883a 	mov	r21,r16
  806b88:	3240b926 	beq	r6,r9,806e70 <_realloc_r+0x408>
  806b8c:	31400117 	ldw	r5,4(r6)
  806b90:	00bfff84 	movi	r2,-2
  806b94:	2884703a 	and	r2,r5,r2
  806b98:	1185883a 	add	r2,r2,r6
  806b9c:	10c00117 	ldw	r3,4(r2)
  806ba0:	18c0004c 	andi	r3,r3,1
  806ba4:	1807003a 	cmpeq	r3,r3,zero
  806ba8:	1800a326 	beq	r3,zero,806e38 <_realloc_r+0x3d0>
  806bac:	2908703a 	and	r4,r5,r4
  806bb0:	9929883a 	add	r20,r19,r4
  806bb4:	a1c0a30e 	bge	r20,r7,806e44 <_realloc_r+0x3dc>
  806bb8:	4080004c 	andi	r2,r8,1
  806bbc:	1000551e 	bne	r2,zero,806d14 <_realloc_r+0x2ac>
  806bc0:	80800017 	ldw	r2,0(r16)
  806bc4:	80afc83a 	sub	r23,r16,r2
  806bc8:	b8c00117 	ldw	r3,4(r23)
  806bcc:	00bfff04 	movi	r2,-4
  806bd0:	1884703a 	and	r2,r3,r2
  806bd4:	30002e26 	beq	r6,zero,806c90 <_realloc_r+0x228>
  806bd8:	3240b926 	beq	r6,r9,806ec0 <_realloc_r+0x458>
  806bdc:	98a9883a 	add	r20,r19,r2
  806be0:	2509883a 	add	r4,r4,r20
  806be4:	d9000015 	stw	r4,0(sp)
  806be8:	21c02a16 	blt	r4,r7,806c94 <_realloc_r+0x22c>
  806bec:	30800317 	ldw	r2,12(r6)
  806bf0:	30c00217 	ldw	r3,8(r6)
  806bf4:	01400904 	movi	r5,36
  806bf8:	99bfff04 	addi	r6,r19,-4
  806bfc:	18800315 	stw	r2,12(r3)
  806c00:	10c00215 	stw	r3,8(r2)
  806c04:	b9000317 	ldw	r4,12(r23)
  806c08:	b8800217 	ldw	r2,8(r23)
  806c0c:	b82b883a 	mov	r21,r23
  806c10:	bc000204 	addi	r16,r23,8
  806c14:	20800215 	stw	r2,8(r4)
  806c18:	11000315 	stw	r4,12(r2)
  806c1c:	2980e436 	bltu	r5,r6,806fb0 <_realloc_r+0x548>
  806c20:	008004c4 	movi	r2,19
  806c24:	9009883a 	mov	r4,r18
  806c28:	8011883a 	mov	r8,r16
  806c2c:	11800f2e 	bgeu	r2,r6,806c6c <_realloc_r+0x204>
  806c30:	90800017 	ldw	r2,0(r18)
  806c34:	ba000404 	addi	r8,r23,16
  806c38:	91000204 	addi	r4,r18,8
  806c3c:	b8800215 	stw	r2,8(r23)
  806c40:	90c00117 	ldw	r3,4(r18)
  806c44:	008006c4 	movi	r2,27
  806c48:	b8c00315 	stw	r3,12(r23)
  806c4c:	1180072e 	bgeu	r2,r6,806c6c <_realloc_r+0x204>
  806c50:	90c00217 	ldw	r3,8(r18)
  806c54:	ba000604 	addi	r8,r23,24
  806c58:	91000404 	addi	r4,r18,16
  806c5c:	b8c00415 	stw	r3,16(r23)
  806c60:	90800317 	ldw	r2,12(r18)
  806c64:	b8800515 	stw	r2,20(r23)
  806c68:	3140e726 	beq	r6,r5,807008 <_realloc_r+0x5a0>
  806c6c:	20800017 	ldw	r2,0(r4)
  806c70:	dd000017 	ldw	r20,0(sp)
  806c74:	b80f883a 	mov	r7,r23
  806c78:	40800015 	stw	r2,0(r8)
  806c7c:	20c00117 	ldw	r3,4(r4)
  806c80:	40c00115 	stw	r3,4(r8)
  806c84:	20800217 	ldw	r2,8(r4)
  806c88:	40800215 	stw	r2,8(r8)
  806c8c:	003f9706 	br	806aec <_realloc_r+0x84>
  806c90:	98a9883a 	add	r20,r19,r2
  806c94:	a1c01f16 	blt	r20,r7,806d14 <_realloc_r+0x2ac>
  806c98:	b8c00317 	ldw	r3,12(r23)
  806c9c:	b8800217 	ldw	r2,8(r23)
  806ca0:	99bfff04 	addi	r6,r19,-4
  806ca4:	01400904 	movi	r5,36
  806ca8:	b82b883a 	mov	r21,r23
  806cac:	18800215 	stw	r2,8(r3)
  806cb0:	10c00315 	stw	r3,12(r2)
  806cb4:	bc000204 	addi	r16,r23,8
  806cb8:	2980c336 	bltu	r5,r6,806fc8 <_realloc_r+0x560>
  806cbc:	008004c4 	movi	r2,19
  806cc0:	9009883a 	mov	r4,r18
  806cc4:	8011883a 	mov	r8,r16
  806cc8:	11800f2e 	bgeu	r2,r6,806d08 <_realloc_r+0x2a0>
  806ccc:	90800017 	ldw	r2,0(r18)
  806cd0:	ba000404 	addi	r8,r23,16
  806cd4:	91000204 	addi	r4,r18,8
  806cd8:	b8800215 	stw	r2,8(r23)
  806cdc:	90c00117 	ldw	r3,4(r18)
  806ce0:	008006c4 	movi	r2,27
  806ce4:	b8c00315 	stw	r3,12(r23)
  806ce8:	1180072e 	bgeu	r2,r6,806d08 <_realloc_r+0x2a0>
  806cec:	90c00217 	ldw	r3,8(r18)
  806cf0:	ba000604 	addi	r8,r23,24
  806cf4:	91000404 	addi	r4,r18,16
  806cf8:	b8c00415 	stw	r3,16(r23)
  806cfc:	90800317 	ldw	r2,12(r18)
  806d00:	b8800515 	stw	r2,20(r23)
  806d04:	3140c726 	beq	r6,r5,807024 <_realloc_r+0x5bc>
  806d08:	20800017 	ldw	r2,0(r4)
  806d0c:	b80f883a 	mov	r7,r23
  806d10:	003fd906 	br	806c78 <_realloc_r+0x210>
  806d14:	880b883a 	mov	r5,r17
  806d18:	b009883a 	mov	r4,r22
  806d1c:	0804fa00 	call	804fa0 <_malloc_r>
  806d20:	1023883a 	mov	r17,r2
  806d24:	10002526 	beq	r2,zero,806dbc <_realloc_r+0x354>
  806d28:	80800117 	ldw	r2,4(r16)
  806d2c:	00ffff84 	movi	r3,-2
  806d30:	893ffe04 	addi	r4,r17,-8
  806d34:	10c4703a 	and	r2,r2,r3
  806d38:	8085883a 	add	r2,r16,r2
  806d3c:	20809526 	beq	r4,r2,806f94 <_realloc_r+0x52c>
  806d40:	99bfff04 	addi	r6,r19,-4
  806d44:	01c00904 	movi	r7,36
  806d48:	39804536 	bltu	r7,r6,806e60 <_realloc_r+0x3f8>
  806d4c:	008004c4 	movi	r2,19
  806d50:	9009883a 	mov	r4,r18
  806d54:	880b883a 	mov	r5,r17
  806d58:	11800f2e 	bgeu	r2,r6,806d98 <_realloc_r+0x330>
  806d5c:	90800017 	ldw	r2,0(r18)
  806d60:	89400204 	addi	r5,r17,8
  806d64:	91000204 	addi	r4,r18,8
  806d68:	88800015 	stw	r2,0(r17)
  806d6c:	90c00117 	ldw	r3,4(r18)
  806d70:	008006c4 	movi	r2,27
  806d74:	88c00115 	stw	r3,4(r17)
  806d78:	1180072e 	bgeu	r2,r6,806d98 <_realloc_r+0x330>
  806d7c:	90c00217 	ldw	r3,8(r18)
  806d80:	89400404 	addi	r5,r17,16
  806d84:	91000404 	addi	r4,r18,16
  806d88:	88c00215 	stw	r3,8(r17)
  806d8c:	90800317 	ldw	r2,12(r18)
  806d90:	88800315 	stw	r2,12(r17)
  806d94:	31c09126 	beq	r6,r7,806fdc <_realloc_r+0x574>
  806d98:	20800017 	ldw	r2,0(r4)
  806d9c:	28800015 	stw	r2,0(r5)
  806da0:	20c00117 	ldw	r3,4(r4)
  806da4:	28c00115 	stw	r3,4(r5)
  806da8:	20800217 	ldw	r2,8(r4)
  806dac:	28800215 	stw	r2,8(r5)
  806db0:	900b883a 	mov	r5,r18
  806db4:	b009883a 	mov	r4,r22
  806db8:	08044180 	call	804418 <_free_r>
  806dbc:	b009883a 	mov	r4,r22
  806dc0:	080a4d40 	call	80a4d4 <__malloc_unlock>
  806dc4:	003f5e06 	br	806b40 <_realloc_r+0xd8>
  806dc8:	300b883a 	mov	r5,r6
  806dcc:	dfc00b17 	ldw	ra,44(sp)
  806dd0:	df000a17 	ldw	fp,40(sp)
  806dd4:	ddc00917 	ldw	r23,36(sp)
  806dd8:	dd800817 	ldw	r22,32(sp)
  806ddc:	dd400717 	ldw	r21,28(sp)
  806de0:	dd000617 	ldw	r20,24(sp)
  806de4:	dcc00517 	ldw	r19,20(sp)
  806de8:	dc800417 	ldw	r18,16(sp)
  806dec:	dc400317 	ldw	r17,12(sp)
  806df0:	dc000217 	ldw	r16,8(sp)
  806df4:	dec00c04 	addi	sp,sp,48
  806df8:	0804fa01 	jmpi	804fa0 <_malloc_r>
  806dfc:	38800117 	ldw	r2,4(r7)
  806e00:	e54b883a 	add	r5,fp,r21
  806e04:	31000054 	ori	r4,r6,1
  806e08:	1080004c 	andi	r2,r2,1
  806e0c:	1704b03a 	or	r2,r2,fp
  806e10:	38800115 	stw	r2,4(r7)
  806e14:	29000115 	stw	r4,4(r5)
  806e18:	2987883a 	add	r3,r5,r6
  806e1c:	18800117 	ldw	r2,4(r3)
  806e20:	29400204 	addi	r5,r5,8
  806e24:	b009883a 	mov	r4,r22
  806e28:	10800054 	ori	r2,r2,1
  806e2c:	18800115 	stw	r2,4(r3)
  806e30:	08044180 	call	804418 <_free_r>
  806e34:	003f3806 	br	806b18 <_realloc_r+0xb0>
  806e38:	000d883a 	mov	r6,zero
  806e3c:	0009883a 	mov	r4,zero
  806e40:	003f5d06 	br	806bb8 <_realloc_r+0x150>
  806e44:	30c00217 	ldw	r3,8(r6)
  806e48:	30800317 	ldw	r2,12(r6)
  806e4c:	800f883a 	mov	r7,r16
  806e50:	84000204 	addi	r16,r16,8
  806e54:	10c00215 	stw	r3,8(r2)
  806e58:	18800315 	stw	r2,12(r3)
  806e5c:	003f2306 	br	806aec <_realloc_r+0x84>
  806e60:	8809883a 	mov	r4,r17
  806e64:	900b883a 	mov	r5,r18
  806e68:	08058640 	call	805864 <memmove>
  806e6c:	003fd006 	br	806db0 <_realloc_r+0x348>
  806e70:	30800117 	ldw	r2,4(r6)
  806e74:	e0c00404 	addi	r3,fp,16
  806e78:	1108703a 	and	r4,r2,r4
  806e7c:	9905883a 	add	r2,r19,r4
  806e80:	10ff4d16 	blt	r2,r3,806bb8 <_realloc_r+0x150>
  806e84:	1705c83a 	sub	r2,r2,fp
  806e88:	870b883a 	add	r5,r16,fp
  806e8c:	10800054 	ori	r2,r2,1
  806e90:	28800115 	stw	r2,4(r5)
  806e94:	80c00117 	ldw	r3,4(r16)
  806e98:	00802074 	movhi	r2,129
  806e9c:	10b44204 	addi	r2,r2,-12024
  806ea0:	b009883a 	mov	r4,r22
  806ea4:	18c0004c 	andi	r3,r3,1
  806ea8:	e0c6b03a 	or	r3,fp,r3
  806eac:	11400215 	stw	r5,8(r2)
  806eb0:	80c00115 	stw	r3,4(r16)
  806eb4:	080a4d40 	call	80a4d4 <__malloc_unlock>
  806eb8:	84400204 	addi	r17,r16,8
  806ebc:	003f2006 	br	806b40 <_realloc_r+0xd8>
  806ec0:	98a9883a 	add	r20,r19,r2
  806ec4:	2509883a 	add	r4,r4,r20
  806ec8:	e0800404 	addi	r2,fp,16
  806ecc:	d9000115 	stw	r4,4(sp)
  806ed0:	20bf7016 	blt	r4,r2,806c94 <_realloc_r+0x22c>
  806ed4:	b8c00317 	ldw	r3,12(r23)
  806ed8:	b8800217 	ldw	r2,8(r23)
  806edc:	99bfff04 	addi	r6,r19,-4
  806ee0:	01400904 	movi	r5,36
  806ee4:	18800215 	stw	r2,8(r3)
  806ee8:	10c00315 	stw	r3,12(r2)
  806eec:	bc400204 	addi	r17,r23,8
  806ef0:	29804136 	bltu	r5,r6,806ff8 <_realloc_r+0x590>
  806ef4:	008004c4 	movi	r2,19
  806ef8:	9009883a 	mov	r4,r18
  806efc:	880f883a 	mov	r7,r17
  806f00:	11800f2e 	bgeu	r2,r6,806f40 <_realloc_r+0x4d8>
  806f04:	90800017 	ldw	r2,0(r18)
  806f08:	b9c00404 	addi	r7,r23,16
  806f0c:	91000204 	addi	r4,r18,8
  806f10:	b8800215 	stw	r2,8(r23)
  806f14:	90c00117 	ldw	r3,4(r18)
  806f18:	008006c4 	movi	r2,27
  806f1c:	b8c00315 	stw	r3,12(r23)
  806f20:	1180072e 	bgeu	r2,r6,806f40 <_realloc_r+0x4d8>
  806f24:	90c00217 	ldw	r3,8(r18)
  806f28:	b9c00604 	addi	r7,r23,24
  806f2c:	91000404 	addi	r4,r18,16
  806f30:	b8c00415 	stw	r3,16(r23)
  806f34:	90800317 	ldw	r2,12(r18)
  806f38:	b8800515 	stw	r2,20(r23)
  806f3c:	31404026 	beq	r6,r5,807040 <_realloc_r+0x5d8>
  806f40:	20800017 	ldw	r2,0(r4)
  806f44:	38800015 	stw	r2,0(r7)
  806f48:	20c00117 	ldw	r3,4(r4)
  806f4c:	38c00115 	stw	r3,4(r7)
  806f50:	20800217 	ldw	r2,8(r4)
  806f54:	38800215 	stw	r2,8(r7)
  806f58:	d8c00117 	ldw	r3,4(sp)
  806f5c:	bf0b883a 	add	r5,r23,fp
  806f60:	b009883a 	mov	r4,r22
  806f64:	1f05c83a 	sub	r2,r3,fp
  806f68:	10800054 	ori	r2,r2,1
  806f6c:	28800115 	stw	r2,4(r5)
  806f70:	b8c00117 	ldw	r3,4(r23)
  806f74:	00802074 	movhi	r2,129
  806f78:	10b44204 	addi	r2,r2,-12024
  806f7c:	11400215 	stw	r5,8(r2)
  806f80:	18c0004c 	andi	r3,r3,1
  806f84:	e0c6b03a 	or	r3,fp,r3
  806f88:	b8c00115 	stw	r3,4(r23)
  806f8c:	080a4d40 	call	80a4d4 <__malloc_unlock>
  806f90:	003eeb06 	br	806b40 <_realloc_r+0xd8>
  806f94:	20800117 	ldw	r2,4(r4)
  806f98:	00ffff04 	movi	r3,-4
  806f9c:	800f883a 	mov	r7,r16
  806fa0:	10c4703a 	and	r2,r2,r3
  806fa4:	98a9883a 	add	r20,r19,r2
  806fa8:	84000204 	addi	r16,r16,8
  806fac:	003ecf06 	br	806aec <_realloc_r+0x84>
  806fb0:	900b883a 	mov	r5,r18
  806fb4:	8009883a 	mov	r4,r16
  806fb8:	08058640 	call	805864 <memmove>
  806fbc:	dd000017 	ldw	r20,0(sp)
  806fc0:	b80f883a 	mov	r7,r23
  806fc4:	003ec906 	br	806aec <_realloc_r+0x84>
  806fc8:	900b883a 	mov	r5,r18
  806fcc:	8009883a 	mov	r4,r16
  806fd0:	08058640 	call	805864 <memmove>
  806fd4:	b80f883a 	mov	r7,r23
  806fd8:	003ec406 	br	806aec <_realloc_r+0x84>
  806fdc:	90c00417 	ldw	r3,16(r18)
  806fe0:	89400604 	addi	r5,r17,24
  806fe4:	91000604 	addi	r4,r18,24
  806fe8:	88c00415 	stw	r3,16(r17)
  806fec:	90800517 	ldw	r2,20(r18)
  806ff0:	88800515 	stw	r2,20(r17)
  806ff4:	003f6806 	br	806d98 <_realloc_r+0x330>
  806ff8:	900b883a 	mov	r5,r18
  806ffc:	8809883a 	mov	r4,r17
  807000:	08058640 	call	805864 <memmove>
  807004:	003fd406 	br	806f58 <_realloc_r+0x4f0>
  807008:	90c00417 	ldw	r3,16(r18)
  80700c:	91000604 	addi	r4,r18,24
  807010:	ba000804 	addi	r8,r23,32
  807014:	b8c00615 	stw	r3,24(r23)
  807018:	90800517 	ldw	r2,20(r18)
  80701c:	b8800715 	stw	r2,28(r23)
  807020:	003f1206 	br	806c6c <_realloc_r+0x204>
  807024:	90c00417 	ldw	r3,16(r18)
  807028:	91000604 	addi	r4,r18,24
  80702c:	ba000804 	addi	r8,r23,32
  807030:	b8c00615 	stw	r3,24(r23)
  807034:	90800517 	ldw	r2,20(r18)
  807038:	b8800715 	stw	r2,28(r23)
  80703c:	003f3206 	br	806d08 <_realloc_r+0x2a0>
  807040:	90c00417 	ldw	r3,16(r18)
  807044:	91000604 	addi	r4,r18,24
  807048:	b9c00804 	addi	r7,r23,32
  80704c:	b8c00615 	stw	r3,24(r23)
  807050:	90800517 	ldw	r2,20(r18)
  807054:	b8800715 	stw	r2,28(r23)
  807058:	003fb906 	br	806f40 <_realloc_r+0x4d8>

0080705c <__isinfd>:
  80705c:	200d883a 	mov	r6,r4
  807060:	0109c83a 	sub	r4,zero,r4
  807064:	2188b03a 	or	r4,r4,r6
  807068:	2008d7fa 	srli	r4,r4,31
  80706c:	00a00034 	movhi	r2,32768
  807070:	10bfffc4 	addi	r2,r2,-1
  807074:	1144703a 	and	r2,r2,r5
  807078:	2088b03a 	or	r4,r4,r2
  80707c:	009ffc34 	movhi	r2,32752
  807080:	1105c83a 	sub	r2,r2,r4
  807084:	0087c83a 	sub	r3,zero,r2
  807088:	10c4b03a 	or	r2,r2,r3
  80708c:	1004d7fa 	srli	r2,r2,31
  807090:	00c00044 	movi	r3,1
  807094:	1885c83a 	sub	r2,r3,r2
  807098:	f800283a 	ret

0080709c <__isnand>:
  80709c:	200d883a 	mov	r6,r4
  8070a0:	0109c83a 	sub	r4,zero,r4
  8070a4:	2188b03a 	or	r4,r4,r6
  8070a8:	2008d7fa 	srli	r4,r4,31
  8070ac:	00a00034 	movhi	r2,32768
  8070b0:	10bfffc4 	addi	r2,r2,-1
  8070b4:	1144703a 	and	r2,r2,r5
  8070b8:	2088b03a 	or	r4,r4,r2
  8070bc:	009ffc34 	movhi	r2,32752
  8070c0:	1105c83a 	sub	r2,r2,r4
  8070c4:	1004d7fa 	srli	r2,r2,31
  8070c8:	f800283a 	ret

008070cc <_sbrk_r>:
  8070cc:	defffd04 	addi	sp,sp,-12
  8070d0:	dc000015 	stw	r16,0(sp)
  8070d4:	04002074 	movhi	r16,129
  8070d8:	8400b504 	addi	r16,r16,724
  8070dc:	dc400115 	stw	r17,4(sp)
  8070e0:	80000015 	stw	zero,0(r16)
  8070e4:	2023883a 	mov	r17,r4
  8070e8:	2809883a 	mov	r4,r5
  8070ec:	dfc00215 	stw	ra,8(sp)
  8070f0:	080a6f00 	call	80a6f0 <sbrk>
  8070f4:	1007883a 	mov	r3,r2
  8070f8:	00bfffc4 	movi	r2,-1
  8070fc:	18800626 	beq	r3,r2,807118 <_sbrk_r+0x4c>
  807100:	1805883a 	mov	r2,r3
  807104:	dfc00217 	ldw	ra,8(sp)
  807108:	dc400117 	ldw	r17,4(sp)
  80710c:	dc000017 	ldw	r16,0(sp)
  807110:	dec00304 	addi	sp,sp,12
  807114:	f800283a 	ret
  807118:	80800017 	ldw	r2,0(r16)
  80711c:	103ff826 	beq	r2,zero,807100 <_sbrk_r+0x34>
  807120:	88800015 	stw	r2,0(r17)
  807124:	1805883a 	mov	r2,r3
  807128:	dfc00217 	ldw	ra,8(sp)
  80712c:	dc400117 	ldw	r17,4(sp)
  807130:	dc000017 	ldw	r16,0(sp)
  807134:	dec00304 	addi	sp,sp,12
  807138:	f800283a 	ret

0080713c <__sclose>:
  80713c:	2940038f 	ldh	r5,14(r5)
  807140:	08074841 	jmpi	807484 <_close_r>

00807144 <__sseek>:
  807144:	defffe04 	addi	sp,sp,-8
  807148:	dc000015 	stw	r16,0(sp)
  80714c:	2821883a 	mov	r16,r5
  807150:	2940038f 	ldh	r5,14(r5)
  807154:	dfc00115 	stw	ra,4(sp)
  807158:	08076fc0 	call	8076fc <_lseek_r>
  80715c:	1007883a 	mov	r3,r2
  807160:	00bfffc4 	movi	r2,-1
  807164:	18800926 	beq	r3,r2,80718c <__sseek+0x48>
  807168:	8080030b 	ldhu	r2,12(r16)
  80716c:	80c01415 	stw	r3,80(r16)
  807170:	10840014 	ori	r2,r2,4096
  807174:	8080030d 	sth	r2,12(r16)
  807178:	1805883a 	mov	r2,r3
  80717c:	dfc00117 	ldw	ra,4(sp)
  807180:	dc000017 	ldw	r16,0(sp)
  807184:	dec00204 	addi	sp,sp,8
  807188:	f800283a 	ret
  80718c:	8080030b 	ldhu	r2,12(r16)
  807190:	10bbffcc 	andi	r2,r2,61439
  807194:	8080030d 	sth	r2,12(r16)
  807198:	1805883a 	mov	r2,r3
  80719c:	dfc00117 	ldw	ra,4(sp)
  8071a0:	dc000017 	ldw	r16,0(sp)
  8071a4:	dec00204 	addi	sp,sp,8
  8071a8:	f800283a 	ret

008071ac <__swrite>:
  8071ac:	2880030b 	ldhu	r2,12(r5)
  8071b0:	defffb04 	addi	sp,sp,-20
  8071b4:	dcc00315 	stw	r19,12(sp)
  8071b8:	1080400c 	andi	r2,r2,256
  8071bc:	dc800215 	stw	r18,8(sp)
  8071c0:	dc400115 	stw	r17,4(sp)
  8071c4:	dc000015 	stw	r16,0(sp)
  8071c8:	3027883a 	mov	r19,r6
  8071cc:	3825883a 	mov	r18,r7
  8071d0:	dfc00415 	stw	ra,16(sp)
  8071d4:	2821883a 	mov	r16,r5
  8071d8:	000d883a 	mov	r6,zero
  8071dc:	01c00084 	movi	r7,2
  8071e0:	2023883a 	mov	r17,r4
  8071e4:	10000226 	beq	r2,zero,8071f0 <__swrite+0x44>
  8071e8:	2940038f 	ldh	r5,14(r5)
  8071ec:	08076fc0 	call	8076fc <_lseek_r>
  8071f0:	8080030b 	ldhu	r2,12(r16)
  8071f4:	8140038f 	ldh	r5,14(r16)
  8071f8:	8809883a 	mov	r4,r17
  8071fc:	10bbffcc 	andi	r2,r2,61439
  807200:	980d883a 	mov	r6,r19
  807204:	900f883a 	mov	r7,r18
  807208:	8080030d 	sth	r2,12(r16)
  80720c:	dfc00417 	ldw	ra,16(sp)
  807210:	dcc00317 	ldw	r19,12(sp)
  807214:	dc800217 	ldw	r18,8(sp)
  807218:	dc400117 	ldw	r17,4(sp)
  80721c:	dc000017 	ldw	r16,0(sp)
  807220:	dec00504 	addi	sp,sp,20
  807224:	08073441 	jmpi	807344 <_write_r>

00807228 <__sread>:
  807228:	defffe04 	addi	sp,sp,-8
  80722c:	dc000015 	stw	r16,0(sp)
  807230:	2821883a 	mov	r16,r5
  807234:	2940038f 	ldh	r5,14(r5)
  807238:	dfc00115 	stw	ra,4(sp)
  80723c:	08077740 	call	807774 <_read_r>
  807240:	1007883a 	mov	r3,r2
  807244:	10000816 	blt	r2,zero,807268 <__sread+0x40>
  807248:	80801417 	ldw	r2,80(r16)
  80724c:	10c5883a 	add	r2,r2,r3
  807250:	80801415 	stw	r2,80(r16)
  807254:	1805883a 	mov	r2,r3
  807258:	dfc00117 	ldw	ra,4(sp)
  80725c:	dc000017 	ldw	r16,0(sp)
  807260:	dec00204 	addi	sp,sp,8
  807264:	f800283a 	ret
  807268:	8080030b 	ldhu	r2,12(r16)
  80726c:	10bbffcc 	andi	r2,r2,61439
  807270:	8080030d 	sth	r2,12(r16)
  807274:	1805883a 	mov	r2,r3
  807278:	dfc00117 	ldw	ra,4(sp)
  80727c:	dc000017 	ldw	r16,0(sp)
  807280:	dec00204 	addi	sp,sp,8
  807284:	f800283a 	ret

00807288 <strcmp>:
  807288:	2144b03a 	or	r2,r4,r5
  80728c:	108000cc 	andi	r2,r2,3
  807290:	10001d1e 	bne	r2,zero,807308 <strcmp+0x80>
  807294:	200f883a 	mov	r7,r4
  807298:	28800017 	ldw	r2,0(r5)
  80729c:	21000017 	ldw	r4,0(r4)
  8072a0:	280d883a 	mov	r6,r5
  8072a4:	2080161e 	bne	r4,r2,807300 <strcmp+0x78>
  8072a8:	023fbff4 	movhi	r8,65279
  8072ac:	423fbfc4 	addi	r8,r8,-257
  8072b0:	2207883a 	add	r3,r4,r8
  8072b4:	01602074 	movhi	r5,32897
  8072b8:	29602004 	addi	r5,r5,-32640
  8072bc:	1946703a 	and	r3,r3,r5
  8072c0:	0104303a 	nor	r2,zero,r4
  8072c4:	10c4703a 	and	r2,r2,r3
  8072c8:	10001c1e 	bne	r2,zero,80733c <strcmp+0xb4>
  8072cc:	4013883a 	mov	r9,r8
  8072d0:	2811883a 	mov	r8,r5
  8072d4:	00000106 	br	8072dc <strcmp+0x54>
  8072d8:	1800181e 	bne	r3,zero,80733c <strcmp+0xb4>
  8072dc:	39c00104 	addi	r7,r7,4
  8072e0:	39000017 	ldw	r4,0(r7)
  8072e4:	31800104 	addi	r6,r6,4
  8072e8:	31400017 	ldw	r5,0(r6)
  8072ec:	2245883a 	add	r2,r4,r9
  8072f0:	1204703a 	and	r2,r2,r8
  8072f4:	0106303a 	nor	r3,zero,r4
  8072f8:	1886703a 	and	r3,r3,r2
  8072fc:	217ff626 	beq	r4,r5,8072d8 <strcmp+0x50>
  807300:	3809883a 	mov	r4,r7
  807304:	300b883a 	mov	r5,r6
  807308:	20c00007 	ldb	r3,0(r4)
  80730c:	1800051e 	bne	r3,zero,807324 <strcmp+0x9c>
  807310:	00000606 	br	80732c <strcmp+0xa4>
  807314:	21000044 	addi	r4,r4,1
  807318:	20c00007 	ldb	r3,0(r4)
  80731c:	29400044 	addi	r5,r5,1
  807320:	18000226 	beq	r3,zero,80732c <strcmp+0xa4>
  807324:	28800007 	ldb	r2,0(r5)
  807328:	18bffa26 	beq	r3,r2,807314 <strcmp+0x8c>
  80732c:	20c00003 	ldbu	r3,0(r4)
  807330:	28800003 	ldbu	r2,0(r5)
  807334:	1885c83a 	sub	r2,r3,r2
  807338:	f800283a 	ret
  80733c:	0005883a 	mov	r2,zero
  807340:	f800283a 	ret

00807344 <_write_r>:
  807344:	defffd04 	addi	sp,sp,-12
  807348:	dc000015 	stw	r16,0(sp)
  80734c:	04002074 	movhi	r16,129
  807350:	8400b504 	addi	r16,r16,724
  807354:	dc400115 	stw	r17,4(sp)
  807358:	80000015 	stw	zero,0(r16)
  80735c:	2023883a 	mov	r17,r4
  807360:	2809883a 	mov	r4,r5
  807364:	300b883a 	mov	r5,r6
  807368:	380d883a 	mov	r6,r7
  80736c:	dfc00215 	stw	ra,8(sp)
  807370:	080a7ac0 	call	80a7ac <write>
  807374:	1007883a 	mov	r3,r2
  807378:	00bfffc4 	movi	r2,-1
  80737c:	18800626 	beq	r3,r2,807398 <_write_r+0x54>
  807380:	1805883a 	mov	r2,r3
  807384:	dfc00217 	ldw	ra,8(sp)
  807388:	dc400117 	ldw	r17,4(sp)
  80738c:	dc000017 	ldw	r16,0(sp)
  807390:	dec00304 	addi	sp,sp,12
  807394:	f800283a 	ret
  807398:	80800017 	ldw	r2,0(r16)
  80739c:	103ff826 	beq	r2,zero,807380 <_write_r+0x3c>
  8073a0:	88800015 	stw	r2,0(r17)
  8073a4:	1805883a 	mov	r2,r3
  8073a8:	dfc00217 	ldw	ra,8(sp)
  8073ac:	dc400117 	ldw	r17,4(sp)
  8073b0:	dc000017 	ldw	r16,0(sp)
  8073b4:	dec00304 	addi	sp,sp,12
  8073b8:	f800283a 	ret

008073bc <_calloc_r>:
  8073bc:	defffe04 	addi	sp,sp,-8
  8073c0:	dc400015 	stw	r17,0(sp)
  8073c4:	2023883a 	mov	r17,r4
  8073c8:	2809883a 	mov	r4,r5
  8073cc:	300b883a 	mov	r5,r6
  8073d0:	dfc00115 	stw	ra,4(sp)
  8073d4:	08097300 	call	809730 <__mulsi3>
  8073d8:	100b883a 	mov	r5,r2
  8073dc:	8809883a 	mov	r4,r17
  8073e0:	0804fa00 	call	804fa0 <_malloc_r>
  8073e4:	1023883a 	mov	r17,r2
  8073e8:	01c00904 	movi	r7,36
  8073ec:	10000d26 	beq	r2,zero,807424 <_calloc_r+0x68>
  8073f0:	10ffff17 	ldw	r3,-4(r2)
  8073f4:	1009883a 	mov	r4,r2
  8073f8:	00bfff04 	movi	r2,-4
  8073fc:	1886703a 	and	r3,r3,r2
  807400:	1887883a 	add	r3,r3,r2
  807404:	180d883a 	mov	r6,r3
  807408:	000b883a 	mov	r5,zero
  80740c:	38c01736 	bltu	r7,r3,80746c <_calloc_r+0xb0>
  807410:	008004c4 	movi	r2,19
  807414:	10c00836 	bltu	r2,r3,807438 <_calloc_r+0x7c>
  807418:	20000215 	stw	zero,8(r4)
  80741c:	20000015 	stw	zero,0(r4)
  807420:	20000115 	stw	zero,4(r4)
  807424:	8805883a 	mov	r2,r17
  807428:	dfc00117 	ldw	ra,4(sp)
  80742c:	dc400017 	ldw	r17,0(sp)
  807430:	dec00204 	addi	sp,sp,8
  807434:	f800283a 	ret
  807438:	008006c4 	movi	r2,27
  80743c:	88000015 	stw	zero,0(r17)
  807440:	88000115 	stw	zero,4(r17)
  807444:	89000204 	addi	r4,r17,8
  807448:	10fff32e 	bgeu	r2,r3,807418 <_calloc_r+0x5c>
  80744c:	88000215 	stw	zero,8(r17)
  807450:	88000315 	stw	zero,12(r17)
  807454:	89000404 	addi	r4,r17,16
  807458:	19ffef1e 	bne	r3,r7,807418 <_calloc_r+0x5c>
  80745c:	89000604 	addi	r4,r17,24
  807460:	88000415 	stw	zero,16(r17)
  807464:	88000515 	stw	zero,20(r17)
  807468:	003feb06 	br	807418 <_calloc_r+0x5c>
  80746c:	08059440 	call	805944 <memset>
  807470:	8805883a 	mov	r2,r17
  807474:	dfc00117 	ldw	ra,4(sp)
  807478:	dc400017 	ldw	r17,0(sp)
  80747c:	dec00204 	addi	sp,sp,8
  807480:	f800283a 	ret

00807484 <_close_r>:
  807484:	defffd04 	addi	sp,sp,-12
  807488:	dc000015 	stw	r16,0(sp)
  80748c:	04002074 	movhi	r16,129
  807490:	8400b504 	addi	r16,r16,724
  807494:	dc400115 	stw	r17,4(sp)
  807498:	80000015 	stw	zero,0(r16)
  80749c:	2023883a 	mov	r17,r4
  8074a0:	2809883a 	mov	r4,r5
  8074a4:	dfc00215 	stw	ra,8(sp)
  8074a8:	0809e200 	call	809e20 <close>
  8074ac:	1007883a 	mov	r3,r2
  8074b0:	00bfffc4 	movi	r2,-1
  8074b4:	18800626 	beq	r3,r2,8074d0 <_close_r+0x4c>
  8074b8:	1805883a 	mov	r2,r3
  8074bc:	dfc00217 	ldw	ra,8(sp)
  8074c0:	dc400117 	ldw	r17,4(sp)
  8074c4:	dc000017 	ldw	r16,0(sp)
  8074c8:	dec00304 	addi	sp,sp,12
  8074cc:	f800283a 	ret
  8074d0:	80800017 	ldw	r2,0(r16)
  8074d4:	103ff826 	beq	r2,zero,8074b8 <_close_r+0x34>
  8074d8:	88800015 	stw	r2,0(r17)
  8074dc:	1805883a 	mov	r2,r3
  8074e0:	dfc00217 	ldw	ra,8(sp)
  8074e4:	dc400117 	ldw	r17,4(sp)
  8074e8:	dc000017 	ldw	r16,0(sp)
  8074ec:	dec00304 	addi	sp,sp,12
  8074f0:	f800283a 	ret

008074f4 <_fclose_r>:
  8074f4:	defffc04 	addi	sp,sp,-16
  8074f8:	dc400115 	stw	r17,4(sp)
  8074fc:	dc000015 	stw	r16,0(sp)
  807500:	dfc00315 	stw	ra,12(sp)
  807504:	dc800215 	stw	r18,8(sp)
  807508:	2821883a 	mov	r16,r5
  80750c:	2023883a 	mov	r17,r4
  807510:	28002926 	beq	r5,zero,8075b8 <_fclose_r+0xc4>
  807514:	08040500 	call	804050 <__sfp_lock_acquire>
  807518:	88000226 	beq	r17,zero,807524 <_fclose_r+0x30>
  80751c:	88800e17 	ldw	r2,56(r17)
  807520:	10002d26 	beq	r2,zero,8075d8 <_fclose_r+0xe4>
  807524:	8080030f 	ldh	r2,12(r16)
  807528:	10002226 	beq	r2,zero,8075b4 <_fclose_r+0xc0>
  80752c:	8809883a 	mov	r4,r17
  807530:	800b883a 	mov	r5,r16
  807534:	0803dc80 	call	803dc8 <_fflush_r>
  807538:	1025883a 	mov	r18,r2
  80753c:	80800b17 	ldw	r2,44(r16)
  807540:	10000426 	beq	r2,zero,807554 <_fclose_r+0x60>
  807544:	81400717 	ldw	r5,28(r16)
  807548:	8809883a 	mov	r4,r17
  80754c:	103ee83a 	callr	r2
  807550:	10002a16 	blt	r2,zero,8075fc <_fclose_r+0x108>
  807554:	8080030b 	ldhu	r2,12(r16)
  807558:	1080200c 	andi	r2,r2,128
  80755c:	1000231e 	bne	r2,zero,8075ec <_fclose_r+0xf8>
  807560:	81400c17 	ldw	r5,48(r16)
  807564:	28000526 	beq	r5,zero,80757c <_fclose_r+0x88>
  807568:	80801004 	addi	r2,r16,64
  80756c:	28800226 	beq	r5,r2,807578 <_fclose_r+0x84>
  807570:	8809883a 	mov	r4,r17
  807574:	08044180 	call	804418 <_free_r>
  807578:	80000c15 	stw	zero,48(r16)
  80757c:	81401117 	ldw	r5,68(r16)
  807580:	28000326 	beq	r5,zero,807590 <_fclose_r+0x9c>
  807584:	8809883a 	mov	r4,r17
  807588:	08044180 	call	804418 <_free_r>
  80758c:	80001115 	stw	zero,68(r16)
  807590:	8000030d 	sth	zero,12(r16)
  807594:	08040540 	call	804054 <__sfp_lock_release>
  807598:	9005883a 	mov	r2,r18
  80759c:	dfc00317 	ldw	ra,12(sp)
  8075a0:	dc800217 	ldw	r18,8(sp)
  8075a4:	dc400117 	ldw	r17,4(sp)
  8075a8:	dc000017 	ldw	r16,0(sp)
  8075ac:	dec00404 	addi	sp,sp,16
  8075b0:	f800283a 	ret
  8075b4:	08040540 	call	804054 <__sfp_lock_release>
  8075b8:	0025883a 	mov	r18,zero
  8075bc:	9005883a 	mov	r2,r18
  8075c0:	dfc00317 	ldw	ra,12(sp)
  8075c4:	dc800217 	ldw	r18,8(sp)
  8075c8:	dc400117 	ldw	r17,4(sp)
  8075cc:	dc000017 	ldw	r16,0(sp)
  8075d0:	dec00404 	addi	sp,sp,16
  8075d4:	f800283a 	ret
  8075d8:	8809883a 	mov	r4,r17
  8075dc:	08040600 	call	804060 <__sinit>
  8075e0:	8080030f 	ldh	r2,12(r16)
  8075e4:	103fd11e 	bne	r2,zero,80752c <_fclose_r+0x38>
  8075e8:	003ff206 	br	8075b4 <_fclose_r+0xc0>
  8075ec:	81400417 	ldw	r5,16(r16)
  8075f0:	8809883a 	mov	r4,r17
  8075f4:	08044180 	call	804418 <_free_r>
  8075f8:	003fd906 	br	807560 <_fclose_r+0x6c>
  8075fc:	04bfffc4 	movi	r18,-1
  807600:	003fd406 	br	807554 <_fclose_r+0x60>

00807604 <fclose>:
  807604:	00802074 	movhi	r2,129
  807608:	10b9e704 	addi	r2,r2,-6244
  80760c:	200b883a 	mov	r5,r4
  807610:	11000017 	ldw	r4,0(r2)
  807614:	08074f41 	jmpi	8074f4 <_fclose_r>

00807618 <_fstat_r>:
  807618:	defffd04 	addi	sp,sp,-12
  80761c:	dc000015 	stw	r16,0(sp)
  807620:	04002074 	movhi	r16,129
  807624:	8400b504 	addi	r16,r16,724
  807628:	dc400115 	stw	r17,4(sp)
  80762c:	80000015 	stw	zero,0(r16)
  807630:	2023883a 	mov	r17,r4
  807634:	2809883a 	mov	r4,r5
  807638:	300b883a 	mov	r5,r6
  80763c:	dfc00215 	stw	ra,8(sp)
  807640:	0809fac0 	call	809fac <fstat>
  807644:	1007883a 	mov	r3,r2
  807648:	00bfffc4 	movi	r2,-1
  80764c:	18800626 	beq	r3,r2,807668 <_fstat_r+0x50>
  807650:	1805883a 	mov	r2,r3
  807654:	dfc00217 	ldw	ra,8(sp)
  807658:	dc400117 	ldw	r17,4(sp)
  80765c:	dc000017 	ldw	r16,0(sp)
  807660:	dec00304 	addi	sp,sp,12
  807664:	f800283a 	ret
  807668:	80800017 	ldw	r2,0(r16)
  80766c:	103ff826 	beq	r2,zero,807650 <_fstat_r+0x38>
  807670:	88800015 	stw	r2,0(r17)
  807674:	1805883a 	mov	r2,r3
  807678:	dfc00217 	ldw	ra,8(sp)
  80767c:	dc400117 	ldw	r17,4(sp)
  807680:	dc000017 	ldw	r16,0(sp)
  807684:	dec00304 	addi	sp,sp,12
  807688:	f800283a 	ret

0080768c <_isatty_r>:
  80768c:	defffd04 	addi	sp,sp,-12
  807690:	dc000015 	stw	r16,0(sp)
  807694:	04002074 	movhi	r16,129
  807698:	8400b504 	addi	r16,r16,724
  80769c:	dc400115 	stw	r17,4(sp)
  8076a0:	80000015 	stw	zero,0(r16)
  8076a4:	2023883a 	mov	r17,r4
  8076a8:	2809883a 	mov	r4,r5
  8076ac:	dfc00215 	stw	ra,8(sp)
  8076b0:	080a0e40 	call	80a0e4 <isatty>
  8076b4:	1007883a 	mov	r3,r2
  8076b8:	00bfffc4 	movi	r2,-1
  8076bc:	18800626 	beq	r3,r2,8076d8 <_isatty_r+0x4c>
  8076c0:	1805883a 	mov	r2,r3
  8076c4:	dfc00217 	ldw	ra,8(sp)
  8076c8:	dc400117 	ldw	r17,4(sp)
  8076cc:	dc000017 	ldw	r16,0(sp)
  8076d0:	dec00304 	addi	sp,sp,12
  8076d4:	f800283a 	ret
  8076d8:	80800017 	ldw	r2,0(r16)
  8076dc:	103ff826 	beq	r2,zero,8076c0 <_isatty_r+0x34>
  8076e0:	88800015 	stw	r2,0(r17)
  8076e4:	1805883a 	mov	r2,r3
  8076e8:	dfc00217 	ldw	ra,8(sp)
  8076ec:	dc400117 	ldw	r17,4(sp)
  8076f0:	dc000017 	ldw	r16,0(sp)
  8076f4:	dec00304 	addi	sp,sp,12
  8076f8:	f800283a 	ret

008076fc <_lseek_r>:
  8076fc:	defffd04 	addi	sp,sp,-12
  807700:	dc000015 	stw	r16,0(sp)
  807704:	04002074 	movhi	r16,129
  807708:	8400b504 	addi	r16,r16,724
  80770c:	dc400115 	stw	r17,4(sp)
  807710:	80000015 	stw	zero,0(r16)
  807714:	2023883a 	mov	r17,r4
  807718:	2809883a 	mov	r4,r5
  80771c:	300b883a 	mov	r5,r6
  807720:	380d883a 	mov	r6,r7
  807724:	dfc00215 	stw	ra,8(sp)
  807728:	080a2f40 	call	80a2f4 <lseek>
  80772c:	1007883a 	mov	r3,r2
  807730:	00bfffc4 	movi	r2,-1
  807734:	18800626 	beq	r3,r2,807750 <_lseek_r+0x54>
  807738:	1805883a 	mov	r2,r3
  80773c:	dfc00217 	ldw	ra,8(sp)
  807740:	dc400117 	ldw	r17,4(sp)
  807744:	dc000017 	ldw	r16,0(sp)
  807748:	dec00304 	addi	sp,sp,12
  80774c:	f800283a 	ret
  807750:	80800017 	ldw	r2,0(r16)
  807754:	103ff826 	beq	r2,zero,807738 <_lseek_r+0x3c>
  807758:	88800015 	stw	r2,0(r17)
  80775c:	1805883a 	mov	r2,r3
  807760:	dfc00217 	ldw	ra,8(sp)
  807764:	dc400117 	ldw	r17,4(sp)
  807768:	dc000017 	ldw	r16,0(sp)
  80776c:	dec00304 	addi	sp,sp,12
  807770:	f800283a 	ret

00807774 <_read_r>:
  807774:	defffd04 	addi	sp,sp,-12
  807778:	dc000015 	stw	r16,0(sp)
  80777c:	04002074 	movhi	r16,129
  807780:	8400b504 	addi	r16,r16,724
  807784:	dc400115 	stw	r17,4(sp)
  807788:	80000015 	stw	zero,0(r16)
  80778c:	2023883a 	mov	r17,r4
  807790:	2809883a 	mov	r4,r5
  807794:	300b883a 	mov	r5,r6
  807798:	380d883a 	mov	r6,r7
  80779c:	dfc00215 	stw	ra,8(sp)
  8077a0:	080a4f40 	call	80a4f4 <read>
  8077a4:	1007883a 	mov	r3,r2
  8077a8:	00bfffc4 	movi	r2,-1
  8077ac:	18800626 	beq	r3,r2,8077c8 <_read_r+0x54>
  8077b0:	1805883a 	mov	r2,r3
  8077b4:	dfc00217 	ldw	ra,8(sp)
  8077b8:	dc400117 	ldw	r17,4(sp)
  8077bc:	dc000017 	ldw	r16,0(sp)
  8077c0:	dec00304 	addi	sp,sp,12
  8077c4:	f800283a 	ret
  8077c8:	80800017 	ldw	r2,0(r16)
  8077cc:	103ff826 	beq	r2,zero,8077b0 <_read_r+0x3c>
  8077d0:	88800015 	stw	r2,0(r17)
  8077d4:	1805883a 	mov	r2,r3
  8077d8:	dfc00217 	ldw	ra,8(sp)
  8077dc:	dc400117 	ldw	r17,4(sp)
  8077e0:	dc000017 	ldw	r16,0(sp)
  8077e4:	dec00304 	addi	sp,sp,12
  8077e8:	f800283a 	ret

008077ec <__udivdi3>:
  8077ec:	defff104 	addi	sp,sp,-60
  8077f0:	0015883a 	mov	r10,zero
  8077f4:	2005883a 	mov	r2,r4
  8077f8:	3011883a 	mov	r8,r6
  8077fc:	df000d15 	stw	fp,52(sp)
  807800:	dd400a15 	stw	r21,40(sp)
  807804:	dcc00815 	stw	r19,32(sp)
  807808:	dfc00e15 	stw	ra,56(sp)
  80780c:	ddc00c15 	stw	r23,48(sp)
  807810:	dd800b15 	stw	r22,44(sp)
  807814:	dd000915 	stw	r20,36(sp)
  807818:	dc800715 	stw	r18,28(sp)
  80781c:	dc400615 	stw	r17,24(sp)
  807820:	dc000515 	stw	r16,20(sp)
  807824:	da800315 	stw	r10,12(sp)
  807828:	4027883a 	mov	r19,r8
  80782c:	1039883a 	mov	fp,r2
  807830:	282b883a 	mov	r21,r5
  807834:	da800415 	stw	r10,16(sp)
  807838:	3800401e 	bne	r7,zero,80793c <__udivdi3+0x150>
  80783c:	2a006536 	bltu	r5,r8,8079d4 <__udivdi3+0x1e8>
  807840:	4000b526 	beq	r8,zero,807b18 <__udivdi3+0x32c>
  807844:	00bfffd4 	movui	r2,65535
  807848:	14c0ad36 	bltu	r2,r19,807b00 <__udivdi3+0x314>
  80784c:	00803fc4 	movi	r2,255
  807850:	14c15e36 	bltu	r2,r19,807dcc <__udivdi3+0x5e0>
  807854:	000b883a 	mov	r5,zero
  807858:	0005883a 	mov	r2,zero
  80785c:	9884d83a 	srl	r2,r19,r2
  807860:	01002074 	movhi	r4,129
  807864:	2132e804 	addi	r4,r4,-13408
  807868:	01800804 	movi	r6,32
  80786c:	1105883a 	add	r2,r2,r4
  807870:	10c00003 	ldbu	r3,0(r2)
  807874:	28c7883a 	add	r3,r5,r3
  807878:	30e9c83a 	sub	r20,r6,r3
  80787c:	a0010a1e 	bne	r20,zero,807ca8 <__udivdi3+0x4bc>
  807880:	982ed43a 	srli	r23,r19,16
  807884:	acebc83a 	sub	r21,r21,r19
  807888:	9dbfffcc 	andi	r22,r19,65535
  80788c:	05000044 	movi	r20,1
  807890:	a809883a 	mov	r4,r21
  807894:	b80b883a 	mov	r5,r23
  807898:	08097200 	call	809720 <__udivsi3>
  80789c:	100b883a 	mov	r5,r2
  8078a0:	b009883a 	mov	r4,r22
  8078a4:	1021883a 	mov	r16,r2
  8078a8:	08097300 	call	809730 <__mulsi3>
  8078ac:	a809883a 	mov	r4,r21
  8078b0:	b80b883a 	mov	r5,r23
  8078b4:	1023883a 	mov	r17,r2
  8078b8:	08097280 	call	809728 <__umodsi3>
  8078bc:	1004943a 	slli	r2,r2,16
  8078c0:	e006d43a 	srli	r3,fp,16
  8078c4:	10c4b03a 	or	r2,r2,r3
  8078c8:	1440042e 	bgeu	r2,r17,8078dc <__udivdi3+0xf0>
  8078cc:	14c5883a 	add	r2,r2,r19
  8078d0:	843fffc4 	addi	r16,r16,-1
  8078d4:	14c00136 	bltu	r2,r19,8078dc <__udivdi3+0xf0>
  8078d8:	14415c36 	bltu	r2,r17,807e4c <__udivdi3+0x660>
  8078dc:	1463c83a 	sub	r17,r2,r17
  8078e0:	8809883a 	mov	r4,r17
  8078e4:	b80b883a 	mov	r5,r23
  8078e8:	08097200 	call	809720 <__udivsi3>
  8078ec:	100b883a 	mov	r5,r2
  8078f0:	b009883a 	mov	r4,r22
  8078f4:	102b883a 	mov	r21,r2
  8078f8:	08097300 	call	809730 <__mulsi3>
  8078fc:	8809883a 	mov	r4,r17
  807900:	b80b883a 	mov	r5,r23
  807904:	1025883a 	mov	r18,r2
  807908:	08097280 	call	809728 <__umodsi3>
  80790c:	1004943a 	slli	r2,r2,16
  807910:	e0ffffcc 	andi	r3,fp,65535
  807914:	10c4b03a 	or	r2,r2,r3
  807918:	1480042e 	bgeu	r2,r18,80792c <__udivdi3+0x140>
  80791c:	9885883a 	add	r2,r19,r2
  807920:	ad7fffc4 	addi	r21,r21,-1
  807924:	14c00136 	bltu	r2,r19,80792c <__udivdi3+0x140>
  807928:	14813c36 	bltu	r2,r18,807e1c <__udivdi3+0x630>
  80792c:	8004943a 	slli	r2,r16,16
  807930:	a009883a 	mov	r4,r20
  807934:	a884b03a 	or	r2,r21,r2
  807938:	00001506 	br	807990 <__udivdi3+0x1a4>
  80793c:	380d883a 	mov	r6,r7
  807940:	29c06c36 	bltu	r5,r7,807af4 <__udivdi3+0x308>
  807944:	00bfffd4 	movui	r2,65535
  807948:	11c06436 	bltu	r2,r7,807adc <__udivdi3+0x2f0>
  80794c:	00803fc4 	movi	r2,255
  807950:	11c11836 	bltu	r2,r7,807db4 <__udivdi3+0x5c8>
  807954:	000b883a 	mov	r5,zero
  807958:	0005883a 	mov	r2,zero
  80795c:	3084d83a 	srl	r2,r6,r2
  807960:	01002074 	movhi	r4,129
  807964:	2132e804 	addi	r4,r4,-13408
  807968:	01c00804 	movi	r7,32
  80796c:	1105883a 	add	r2,r2,r4
  807970:	10c00003 	ldbu	r3,0(r2)
  807974:	28c7883a 	add	r3,r5,r3
  807978:	38edc83a 	sub	r22,r7,r3
  80797c:	b000731e 	bne	r22,zero,807b4c <__udivdi3+0x360>
  807980:	35400136 	bltu	r6,r21,807988 <__udivdi3+0x19c>
  807984:	e4c05b36 	bltu	fp,r19,807af4 <__udivdi3+0x308>
  807988:	00800044 	movi	r2,1
  80798c:	0009883a 	mov	r4,zero
  807990:	d8800315 	stw	r2,12(sp)
  807994:	d9400317 	ldw	r5,12(sp)
  807998:	2007883a 	mov	r3,r4
  80799c:	d9000415 	stw	r4,16(sp)
  8079a0:	2805883a 	mov	r2,r5
  8079a4:	dfc00e17 	ldw	ra,56(sp)
  8079a8:	df000d17 	ldw	fp,52(sp)
  8079ac:	ddc00c17 	ldw	r23,48(sp)
  8079b0:	dd800b17 	ldw	r22,44(sp)
  8079b4:	dd400a17 	ldw	r21,40(sp)
  8079b8:	dd000917 	ldw	r20,36(sp)
  8079bc:	dcc00817 	ldw	r19,32(sp)
  8079c0:	dc800717 	ldw	r18,28(sp)
  8079c4:	dc400617 	ldw	r17,24(sp)
  8079c8:	dc000517 	ldw	r16,20(sp)
  8079cc:	dec00f04 	addi	sp,sp,60
  8079d0:	f800283a 	ret
  8079d4:	00bfffd4 	movui	r2,65535
  8079d8:	12005636 	bltu	r2,r8,807b34 <__udivdi3+0x348>
  8079dc:	00803fc4 	movi	r2,255
  8079e0:	12010036 	bltu	r2,r8,807de4 <__udivdi3+0x5f8>
  8079e4:	000b883a 	mov	r5,zero
  8079e8:	0005883a 	mov	r2,zero
  8079ec:	9884d83a 	srl	r2,r19,r2
  8079f0:	01002074 	movhi	r4,129
  8079f4:	2132e804 	addi	r4,r4,-13408
  8079f8:	01800804 	movi	r6,32
  8079fc:	1105883a 	add	r2,r2,r4
  807a00:	10c00003 	ldbu	r3,0(r2)
  807a04:	28c7883a 	add	r3,r5,r3
  807a08:	30cbc83a 	sub	r5,r6,r3
  807a0c:	28000626 	beq	r5,zero,807a28 <__udivdi3+0x23c>
  807a10:	3145c83a 	sub	r2,r6,r5
  807a14:	e084d83a 	srl	r2,fp,r2
  807a18:	a946983a 	sll	r3,r21,r5
  807a1c:	e178983a 	sll	fp,fp,r5
  807a20:	9966983a 	sll	r19,r19,r5
  807a24:	18aab03a 	or	r21,r3,r2
  807a28:	982ed43a 	srli	r23,r19,16
  807a2c:	a809883a 	mov	r4,r21
  807a30:	9cbfffcc 	andi	r18,r19,65535
  807a34:	b80b883a 	mov	r5,r23
  807a38:	08097200 	call	809720 <__udivsi3>
  807a3c:	100b883a 	mov	r5,r2
  807a40:	9009883a 	mov	r4,r18
  807a44:	1021883a 	mov	r16,r2
  807a48:	08097300 	call	809730 <__mulsi3>
  807a4c:	a809883a 	mov	r4,r21
  807a50:	b80b883a 	mov	r5,r23
  807a54:	1023883a 	mov	r17,r2
  807a58:	08097280 	call	809728 <__umodsi3>
  807a5c:	1004943a 	slli	r2,r2,16
  807a60:	e006d43a 	srli	r3,fp,16
  807a64:	10c4b03a 	or	r2,r2,r3
  807a68:	1440042e 	bgeu	r2,r17,807a7c <__udivdi3+0x290>
  807a6c:	14c5883a 	add	r2,r2,r19
  807a70:	843fffc4 	addi	r16,r16,-1
  807a74:	14c00136 	bltu	r2,r19,807a7c <__udivdi3+0x290>
  807a78:	1440ea36 	bltu	r2,r17,807e24 <__udivdi3+0x638>
  807a7c:	1463c83a 	sub	r17,r2,r17
  807a80:	8809883a 	mov	r4,r17
  807a84:	b80b883a 	mov	r5,r23
  807a88:	08097200 	call	809720 <__udivsi3>
  807a8c:	100b883a 	mov	r5,r2
  807a90:	9009883a 	mov	r4,r18
  807a94:	102b883a 	mov	r21,r2
  807a98:	08097300 	call	809730 <__mulsi3>
  807a9c:	8809883a 	mov	r4,r17
  807aa0:	b80b883a 	mov	r5,r23
  807aa4:	1025883a 	mov	r18,r2
  807aa8:	08097280 	call	809728 <__umodsi3>
  807aac:	1004943a 	slli	r2,r2,16
  807ab0:	e0ffffcc 	andi	r3,fp,65535
  807ab4:	10c4b03a 	or	r2,r2,r3
  807ab8:	1480042e 	bgeu	r2,r18,807acc <__udivdi3+0x2e0>
  807abc:	9885883a 	add	r2,r19,r2
  807ac0:	ad7fffc4 	addi	r21,r21,-1
  807ac4:	14c00136 	bltu	r2,r19,807acc <__udivdi3+0x2e0>
  807ac8:	1480d936 	bltu	r2,r18,807e30 <__udivdi3+0x644>
  807acc:	8004943a 	slli	r2,r16,16
  807ad0:	0009883a 	mov	r4,zero
  807ad4:	a884b03a 	or	r2,r21,r2
  807ad8:	003fad06 	br	807990 <__udivdi3+0x1a4>
  807adc:	00804034 	movhi	r2,256
  807ae0:	10bfffc4 	addi	r2,r2,-1
  807ae4:	11c0b636 	bltu	r2,r7,807dc0 <__udivdi3+0x5d4>
  807ae8:	01400404 	movi	r5,16
  807aec:	2805883a 	mov	r2,r5
  807af0:	003f9a06 	br	80795c <__udivdi3+0x170>
  807af4:	0005883a 	mov	r2,zero
  807af8:	0009883a 	mov	r4,zero
  807afc:	003fa406 	br	807990 <__udivdi3+0x1a4>
  807b00:	00804034 	movhi	r2,256
  807b04:	10bfffc4 	addi	r2,r2,-1
  807b08:	14c0b336 	bltu	r2,r19,807dd8 <__udivdi3+0x5ec>
  807b0c:	01400404 	movi	r5,16
  807b10:	2805883a 	mov	r2,r5
  807b14:	003f5106 	br	80785c <__udivdi3+0x70>
  807b18:	01000044 	movi	r4,1
  807b1c:	000b883a 	mov	r5,zero
  807b20:	08097200 	call	809720 <__udivsi3>
  807b24:	1027883a 	mov	r19,r2
  807b28:	00bfffd4 	movui	r2,65535
  807b2c:	14fff436 	bltu	r2,r19,807b00 <__udivdi3+0x314>
  807b30:	003f4606 	br	80784c <__udivdi3+0x60>
  807b34:	00804034 	movhi	r2,256
  807b38:	10bfffc4 	addi	r2,r2,-1
  807b3c:	1200ac36 	bltu	r2,r8,807df0 <__udivdi3+0x604>
  807b40:	01400404 	movi	r5,16
  807b44:	2805883a 	mov	r2,r5
  807b48:	003fa806 	br	8079ec <__udivdi3+0x200>
  807b4c:	3d85c83a 	sub	r2,r7,r22
  807b50:	3588983a 	sll	r4,r6,r22
  807b54:	9886d83a 	srl	r3,r19,r2
  807b58:	a8a2d83a 	srl	r17,r21,r2
  807b5c:	e084d83a 	srl	r2,fp,r2
  807b60:	20eeb03a 	or	r23,r4,r3
  807b64:	b824d43a 	srli	r18,r23,16
  807b68:	ad86983a 	sll	r3,r21,r22
  807b6c:	8809883a 	mov	r4,r17
  807b70:	900b883a 	mov	r5,r18
  807b74:	1886b03a 	or	r3,r3,r2
  807b78:	d8c00115 	stw	r3,4(sp)
  807b7c:	bc3fffcc 	andi	r16,r23,65535
  807b80:	08097200 	call	809720 <__udivsi3>
  807b84:	100b883a 	mov	r5,r2
  807b88:	8009883a 	mov	r4,r16
  807b8c:	1029883a 	mov	r20,r2
  807b90:	08097300 	call	809730 <__mulsi3>
  807b94:	900b883a 	mov	r5,r18
  807b98:	8809883a 	mov	r4,r17
  807b9c:	102b883a 	mov	r21,r2
  807ba0:	08097280 	call	809728 <__umodsi3>
  807ba4:	d9400117 	ldw	r5,4(sp)
  807ba8:	1004943a 	slli	r2,r2,16
  807bac:	9da6983a 	sll	r19,r19,r22
  807bb0:	2806d43a 	srli	r3,r5,16
  807bb4:	10c4b03a 	or	r2,r2,r3
  807bb8:	1540032e 	bgeu	r2,r21,807bc8 <__udivdi3+0x3dc>
  807bbc:	15c5883a 	add	r2,r2,r23
  807bc0:	a53fffc4 	addi	r20,r20,-1
  807bc4:	15c0912e 	bgeu	r2,r23,807e0c <__udivdi3+0x620>
  807bc8:	1563c83a 	sub	r17,r2,r21
  807bcc:	8809883a 	mov	r4,r17
  807bd0:	900b883a 	mov	r5,r18
  807bd4:	08097200 	call	809720 <__udivsi3>
  807bd8:	100b883a 	mov	r5,r2
  807bdc:	8009883a 	mov	r4,r16
  807be0:	102b883a 	mov	r21,r2
  807be4:	08097300 	call	809730 <__mulsi3>
  807be8:	8809883a 	mov	r4,r17
  807bec:	900b883a 	mov	r5,r18
  807bf0:	1021883a 	mov	r16,r2
  807bf4:	08097280 	call	809728 <__umodsi3>
  807bf8:	da800117 	ldw	r10,4(sp)
  807bfc:	1004943a 	slli	r2,r2,16
  807c00:	50ffffcc 	andi	r3,r10,65535
  807c04:	10c6b03a 	or	r3,r2,r3
  807c08:	1c00032e 	bgeu	r3,r16,807c18 <__udivdi3+0x42c>
  807c0c:	1dc7883a 	add	r3,r3,r23
  807c10:	ad7fffc4 	addi	r21,r21,-1
  807c14:	1dc0792e 	bgeu	r3,r23,807dfc <__udivdi3+0x610>
  807c18:	a004943a 	slli	r2,r20,16
  807c1c:	982ed43a 	srli	r23,r19,16
  807c20:	9cffffcc 	andi	r19,r19,65535
  807c24:	a8a4b03a 	or	r18,r21,r2
  807c28:	947fffcc 	andi	r17,r18,65535
  807c2c:	902ad43a 	srli	r21,r18,16
  807c30:	8809883a 	mov	r4,r17
  807c34:	980b883a 	mov	r5,r19
  807c38:	1c21c83a 	sub	r16,r3,r16
  807c3c:	08097300 	call	809730 <__mulsi3>
  807c40:	8809883a 	mov	r4,r17
  807c44:	b80b883a 	mov	r5,r23
  807c48:	1029883a 	mov	r20,r2
  807c4c:	08097300 	call	809730 <__mulsi3>
  807c50:	980b883a 	mov	r5,r19
  807c54:	a809883a 	mov	r4,r21
  807c58:	1023883a 	mov	r17,r2
  807c5c:	08097300 	call	809730 <__mulsi3>
  807c60:	a809883a 	mov	r4,r21
  807c64:	b80b883a 	mov	r5,r23
  807c68:	1027883a 	mov	r19,r2
  807c6c:	08097300 	call	809730 <__mulsi3>
  807c70:	1009883a 	mov	r4,r2
  807c74:	a004d43a 	srli	r2,r20,16
  807c78:	8ce3883a 	add	r17,r17,r19
  807c7c:	1447883a 	add	r3,r2,r17
  807c80:	1cc0022e 	bgeu	r3,r19,807c8c <__udivdi3+0x4a0>
  807c84:	00800074 	movhi	r2,1
  807c88:	2089883a 	add	r4,r4,r2
  807c8c:	1804d43a 	srli	r2,r3,16
  807c90:	2085883a 	add	r2,r4,r2
  807c94:	80804436 	bltu	r16,r2,807da8 <__udivdi3+0x5bc>
  807c98:	80803e26 	beq	r16,r2,807d94 <__udivdi3+0x5a8>
  807c9c:	9005883a 	mov	r2,r18
  807ca0:	0009883a 	mov	r4,zero
  807ca4:	003f3a06 	br	807990 <__udivdi3+0x1a4>
  807ca8:	9d26983a 	sll	r19,r19,r20
  807cac:	3505c83a 	sub	r2,r6,r20
  807cb0:	a8a2d83a 	srl	r17,r21,r2
  807cb4:	982ed43a 	srli	r23,r19,16
  807cb8:	e084d83a 	srl	r2,fp,r2
  807cbc:	ad06983a 	sll	r3,r21,r20
  807cc0:	8809883a 	mov	r4,r17
  807cc4:	b80b883a 	mov	r5,r23
  807cc8:	1886b03a 	or	r3,r3,r2
  807ccc:	d8c00015 	stw	r3,0(sp)
  807cd0:	9dbfffcc 	andi	r22,r19,65535
  807cd4:	08097200 	call	809720 <__udivsi3>
  807cd8:	100b883a 	mov	r5,r2
  807cdc:	b009883a 	mov	r4,r22
  807ce0:	d8800215 	stw	r2,8(sp)
  807ce4:	08097300 	call	809730 <__mulsi3>
  807ce8:	8809883a 	mov	r4,r17
  807cec:	b80b883a 	mov	r5,r23
  807cf0:	102b883a 	mov	r21,r2
  807cf4:	08097280 	call	809728 <__umodsi3>
  807cf8:	d9000017 	ldw	r4,0(sp)
  807cfc:	1004943a 	slli	r2,r2,16
  807d00:	2006d43a 	srli	r3,r4,16
  807d04:	10c4b03a 	or	r2,r2,r3
  807d08:	1540052e 	bgeu	r2,r21,807d20 <__udivdi3+0x534>
  807d0c:	d9400217 	ldw	r5,8(sp)
  807d10:	14c5883a 	add	r2,r2,r19
  807d14:	297fffc4 	addi	r5,r5,-1
  807d18:	d9400215 	stw	r5,8(sp)
  807d1c:	14c0462e 	bgeu	r2,r19,807e38 <__udivdi3+0x64c>
  807d20:	1563c83a 	sub	r17,r2,r21
  807d24:	8809883a 	mov	r4,r17
  807d28:	b80b883a 	mov	r5,r23
  807d2c:	08097200 	call	809720 <__udivsi3>
  807d30:	100b883a 	mov	r5,r2
  807d34:	b009883a 	mov	r4,r22
  807d38:	1025883a 	mov	r18,r2
  807d3c:	08097300 	call	809730 <__mulsi3>
  807d40:	8809883a 	mov	r4,r17
  807d44:	b80b883a 	mov	r5,r23
  807d48:	1021883a 	mov	r16,r2
  807d4c:	08097280 	call	809728 <__umodsi3>
  807d50:	da800017 	ldw	r10,0(sp)
  807d54:	1004943a 	slli	r2,r2,16
  807d58:	50ffffcc 	andi	r3,r10,65535
  807d5c:	10c6b03a 	or	r3,r2,r3
  807d60:	1c00062e 	bgeu	r3,r16,807d7c <__udivdi3+0x590>
  807d64:	1cc7883a 	add	r3,r3,r19
  807d68:	94bfffc4 	addi	r18,r18,-1
  807d6c:	1cc00336 	bltu	r3,r19,807d7c <__udivdi3+0x590>
  807d70:	1c00022e 	bgeu	r3,r16,807d7c <__udivdi3+0x590>
  807d74:	94bfffc4 	addi	r18,r18,-1
  807d78:	1cc7883a 	add	r3,r3,r19
  807d7c:	d9000217 	ldw	r4,8(sp)
  807d80:	e538983a 	sll	fp,fp,r20
  807d84:	1c2bc83a 	sub	r21,r3,r16
  807d88:	2004943a 	slli	r2,r4,16
  807d8c:	90a8b03a 	or	r20,r18,r2
  807d90:	003ebf06 	br	807890 <__udivdi3+0xa4>
  807d94:	1804943a 	slli	r2,r3,16
  807d98:	e588983a 	sll	r4,fp,r22
  807d9c:	a0ffffcc 	andi	r3,r20,65535
  807da0:	10c5883a 	add	r2,r2,r3
  807da4:	20bfbd2e 	bgeu	r4,r2,807c9c <__udivdi3+0x4b0>
  807da8:	90bfffc4 	addi	r2,r18,-1
  807dac:	0009883a 	mov	r4,zero
  807db0:	003ef706 	br	807990 <__udivdi3+0x1a4>
  807db4:	01400204 	movi	r5,8
  807db8:	2805883a 	mov	r2,r5
  807dbc:	003ee706 	br	80795c <__udivdi3+0x170>
  807dc0:	01400604 	movi	r5,24
  807dc4:	2805883a 	mov	r2,r5
  807dc8:	003ee406 	br	80795c <__udivdi3+0x170>
  807dcc:	01400204 	movi	r5,8
  807dd0:	2805883a 	mov	r2,r5
  807dd4:	003ea106 	br	80785c <__udivdi3+0x70>
  807dd8:	01400604 	movi	r5,24
  807ddc:	2805883a 	mov	r2,r5
  807de0:	003e9e06 	br	80785c <__udivdi3+0x70>
  807de4:	01400204 	movi	r5,8
  807de8:	2805883a 	mov	r2,r5
  807dec:	003eff06 	br	8079ec <__udivdi3+0x200>
  807df0:	01400604 	movi	r5,24
  807df4:	2805883a 	mov	r2,r5
  807df8:	003efc06 	br	8079ec <__udivdi3+0x200>
  807dfc:	1c3f862e 	bgeu	r3,r16,807c18 <__udivdi3+0x42c>
  807e00:	1dc7883a 	add	r3,r3,r23
  807e04:	ad7fffc4 	addi	r21,r21,-1
  807e08:	003f8306 	br	807c18 <__udivdi3+0x42c>
  807e0c:	157f6e2e 	bgeu	r2,r21,807bc8 <__udivdi3+0x3dc>
  807e10:	a53fffc4 	addi	r20,r20,-1
  807e14:	15c5883a 	add	r2,r2,r23
  807e18:	003f6b06 	br	807bc8 <__udivdi3+0x3dc>
  807e1c:	ad7fffc4 	addi	r21,r21,-1
  807e20:	003ec206 	br	80792c <__udivdi3+0x140>
  807e24:	843fffc4 	addi	r16,r16,-1
  807e28:	14c5883a 	add	r2,r2,r19
  807e2c:	003f1306 	br	807a7c <__udivdi3+0x290>
  807e30:	ad7fffc4 	addi	r21,r21,-1
  807e34:	003f2506 	br	807acc <__udivdi3+0x2e0>
  807e38:	157fb92e 	bgeu	r2,r21,807d20 <__udivdi3+0x534>
  807e3c:	297fffc4 	addi	r5,r5,-1
  807e40:	14c5883a 	add	r2,r2,r19
  807e44:	d9400215 	stw	r5,8(sp)
  807e48:	003fb506 	br	807d20 <__udivdi3+0x534>
  807e4c:	843fffc4 	addi	r16,r16,-1
  807e50:	14c5883a 	add	r2,r2,r19
  807e54:	003ea106 	br	8078dc <__udivdi3+0xf0>

00807e58 <__umoddi3>:
  807e58:	defff004 	addi	sp,sp,-64
  807e5c:	3011883a 	mov	r8,r6
  807e60:	000d883a 	mov	r6,zero
  807e64:	dd400b15 	stw	r21,44(sp)
  807e68:	dcc00915 	stw	r19,36(sp)
  807e6c:	dc000615 	stw	r16,24(sp)
  807e70:	dfc00f15 	stw	ra,60(sp)
  807e74:	df000e15 	stw	fp,56(sp)
  807e78:	ddc00d15 	stw	r23,52(sp)
  807e7c:	dd800c15 	stw	r22,48(sp)
  807e80:	dd000a15 	stw	r20,40(sp)
  807e84:	dc800815 	stw	r18,32(sp)
  807e88:	dc400715 	stw	r17,28(sp)
  807e8c:	2817883a 	mov	r11,r5
  807e90:	d9800415 	stw	r6,16(sp)
  807e94:	4027883a 	mov	r19,r8
  807e98:	d9800515 	stw	r6,20(sp)
  807e9c:	2021883a 	mov	r16,r4
  807ea0:	282b883a 	mov	r21,r5
  807ea4:	38002c1e 	bne	r7,zero,807f58 <__umoddi3+0x100>
  807ea8:	2a005636 	bltu	r5,r8,808004 <__umoddi3+0x1ac>
  807eac:	40009a26 	beq	r8,zero,808118 <__umoddi3+0x2c0>
  807eb0:	00bfffd4 	movui	r2,65535
  807eb4:	14c09236 	bltu	r2,r19,808100 <__umoddi3+0x2a8>
  807eb8:	00803fc4 	movi	r2,255
  807ebc:	14c15c36 	bltu	r2,r19,808430 <__umoddi3+0x5d8>
  807ec0:	000b883a 	mov	r5,zero
  807ec4:	0005883a 	mov	r2,zero
  807ec8:	9884d83a 	srl	r2,r19,r2
  807ecc:	01002074 	movhi	r4,129
  807ed0:	2132e804 	addi	r4,r4,-13408
  807ed4:	01800804 	movi	r6,32
  807ed8:	1105883a 	add	r2,r2,r4
  807edc:	10c00003 	ldbu	r3,0(r2)
  807ee0:	28c7883a 	add	r3,r5,r3
  807ee4:	30e5c83a 	sub	r18,r6,r3
  807ee8:	9000a41e 	bne	r18,zero,80817c <__umoddi3+0x324>
  807eec:	982ed43a 	srli	r23,r19,16
  807ef0:	acebc83a 	sub	r21,r21,r19
  807ef4:	9d3fffcc 	andi	r20,r19,65535
  807ef8:	002d883a 	mov	r22,zero
  807efc:	a809883a 	mov	r4,r21
  807f00:	b80b883a 	mov	r5,r23
  807f04:	08097200 	call	809720 <__udivsi3>
  807f08:	100b883a 	mov	r5,r2
  807f0c:	a009883a 	mov	r4,r20
  807f10:	08097300 	call	809730 <__mulsi3>
  807f14:	a809883a 	mov	r4,r21
  807f18:	b80b883a 	mov	r5,r23
  807f1c:	1023883a 	mov	r17,r2
  807f20:	08097280 	call	809728 <__umodsi3>
  807f24:	1004943a 	slli	r2,r2,16
  807f28:	8006d43a 	srli	r3,r16,16
  807f2c:	10c4b03a 	or	r2,r2,r3
  807f30:	1440032e 	bgeu	r2,r17,807f40 <__umoddi3+0xe8>
  807f34:	14c5883a 	add	r2,r2,r19
  807f38:	14c00136 	bltu	r2,r19,807f40 <__umoddi3+0xe8>
  807f3c:	14415836 	bltu	r2,r17,8084a0 <__umoddi3+0x648>
  807f40:	1463c83a 	sub	r17,r2,r17
  807f44:	8809883a 	mov	r4,r17
  807f48:	b80b883a 	mov	r5,r23
  807f4c:	08097200 	call	809720 <__udivsi3>
  807f50:	a009883a 	mov	r4,r20
  807f54:	00005306 	br	8080a4 <__umoddi3+0x24c>
  807f58:	380d883a 	mov	r6,r7
  807f5c:	29c0132e 	bgeu	r5,r7,807fac <__umoddi3+0x154>
  807f60:	d9000415 	stw	r4,16(sp)
  807f64:	d9400515 	stw	r5,20(sp)
  807f68:	d9400417 	ldw	r5,16(sp)
  807f6c:	5813883a 	mov	r9,r11
  807f70:	2811883a 	mov	r8,r5
  807f74:	4005883a 	mov	r2,r8
  807f78:	4807883a 	mov	r3,r9
  807f7c:	dfc00f17 	ldw	ra,60(sp)
  807f80:	df000e17 	ldw	fp,56(sp)
  807f84:	ddc00d17 	ldw	r23,52(sp)
  807f88:	dd800c17 	ldw	r22,48(sp)
  807f8c:	dd400b17 	ldw	r21,44(sp)
  807f90:	dd000a17 	ldw	r20,40(sp)
  807f94:	dcc00917 	ldw	r19,36(sp)
  807f98:	dc800817 	ldw	r18,32(sp)
  807f9c:	dc400717 	ldw	r17,28(sp)
  807fa0:	dc000617 	ldw	r16,24(sp)
  807fa4:	dec01004 	addi	sp,sp,64
  807fa8:	f800283a 	ret
  807fac:	00bfffd4 	movui	r2,65535
  807fb0:	11c06636 	bltu	r2,r7,80814c <__umoddi3+0x2f4>
  807fb4:	00803fc4 	movi	r2,255
  807fb8:	11c12036 	bltu	r2,r7,80843c <__umoddi3+0x5e4>
  807fbc:	000b883a 	mov	r5,zero
  807fc0:	0005883a 	mov	r2,zero
  807fc4:	3084d83a 	srl	r2,r6,r2
  807fc8:	01002074 	movhi	r4,129
  807fcc:	2132e804 	addi	r4,r4,-13408
  807fd0:	01c00804 	movi	r7,32
  807fd4:	1105883a 	add	r2,r2,r4
  807fd8:	10c00003 	ldbu	r3,0(r2)
  807fdc:	28c7883a 	add	r3,r5,r3
  807fe0:	38e5c83a 	sub	r18,r7,r3
  807fe4:	9000941e 	bne	r18,zero,808238 <__umoddi3+0x3e0>
  807fe8:	35405e36 	bltu	r6,r21,808164 <__umoddi3+0x30c>
  807fec:	84c05d2e 	bgeu	r16,r19,808164 <__umoddi3+0x30c>
  807ff0:	8011883a 	mov	r8,r16
  807ff4:	a813883a 	mov	r9,r21
  807ff8:	dc000415 	stw	r16,16(sp)
  807ffc:	dd400515 	stw	r21,20(sp)
  808000:	003fdc06 	br	807f74 <__umoddi3+0x11c>
  808004:	00bfffd4 	movui	r2,65535
  808008:	12004a36 	bltu	r2,r8,808134 <__umoddi3+0x2dc>
  80800c:	00803fc4 	movi	r2,255
  808010:	12010d36 	bltu	r2,r8,808448 <__umoddi3+0x5f0>
  808014:	000b883a 	mov	r5,zero
  808018:	0005883a 	mov	r2,zero
  80801c:	9884d83a 	srl	r2,r19,r2
  808020:	01002074 	movhi	r4,129
  808024:	2132e804 	addi	r4,r4,-13408
  808028:	01800804 	movi	r6,32
  80802c:	1105883a 	add	r2,r2,r4
  808030:	10c00003 	ldbu	r3,0(r2)
  808034:	28c7883a 	add	r3,r5,r3
  808038:	30c7c83a 	sub	r3,r6,r3
  80803c:	1800dc1e 	bne	r3,zero,8083b0 <__umoddi3+0x558>
  808040:	002d883a 	mov	r22,zero
  808044:	982ed43a 	srli	r23,r19,16
  808048:	a809883a 	mov	r4,r21
  80804c:	9cbfffcc 	andi	r18,r19,65535
  808050:	b80b883a 	mov	r5,r23
  808054:	08097200 	call	809720 <__udivsi3>
  808058:	100b883a 	mov	r5,r2
  80805c:	9009883a 	mov	r4,r18
  808060:	08097300 	call	809730 <__mulsi3>
  808064:	a809883a 	mov	r4,r21
  808068:	b80b883a 	mov	r5,r23
  80806c:	1023883a 	mov	r17,r2
  808070:	08097280 	call	809728 <__umodsi3>
  808074:	1004943a 	slli	r2,r2,16
  808078:	8006d43a 	srli	r3,r16,16
  80807c:	10c4b03a 	or	r2,r2,r3
  808080:	1440032e 	bgeu	r2,r17,808090 <__umoddi3+0x238>
  808084:	14c5883a 	add	r2,r2,r19
  808088:	14c00136 	bltu	r2,r19,808090 <__umoddi3+0x238>
  80808c:	14410236 	bltu	r2,r17,808498 <__umoddi3+0x640>
  808090:	1463c83a 	sub	r17,r2,r17
  808094:	8809883a 	mov	r4,r17
  808098:	b80b883a 	mov	r5,r23
  80809c:	08097200 	call	809720 <__udivsi3>
  8080a0:	9009883a 	mov	r4,r18
  8080a4:	100b883a 	mov	r5,r2
  8080a8:	08097300 	call	809730 <__mulsi3>
  8080ac:	8809883a 	mov	r4,r17
  8080b0:	b80b883a 	mov	r5,r23
  8080b4:	102b883a 	mov	r21,r2
  8080b8:	08097280 	call	809728 <__umodsi3>
  8080bc:	1004943a 	slli	r2,r2,16
  8080c0:	80ffffcc 	andi	r3,r16,65535
  8080c4:	10c4b03a 	or	r2,r2,r3
  8080c8:	1540042e 	bgeu	r2,r21,8080dc <__umoddi3+0x284>
  8080cc:	14c5883a 	add	r2,r2,r19
  8080d0:	14c00236 	bltu	r2,r19,8080dc <__umoddi3+0x284>
  8080d4:	1540012e 	bgeu	r2,r21,8080dc <__umoddi3+0x284>
  8080d8:	14c5883a 	add	r2,r2,r19
  8080dc:	1545c83a 	sub	r2,r2,r21
  8080e0:	1584d83a 	srl	r2,r2,r22
  8080e4:	0013883a 	mov	r9,zero
  8080e8:	d8800415 	stw	r2,16(sp)
  8080ec:	d8c00417 	ldw	r3,16(sp)
  8080f0:	0005883a 	mov	r2,zero
  8080f4:	d8800515 	stw	r2,20(sp)
  8080f8:	1811883a 	mov	r8,r3
  8080fc:	003f9d06 	br	807f74 <__umoddi3+0x11c>
  808100:	00804034 	movhi	r2,256
  808104:	10bfffc4 	addi	r2,r2,-1
  808108:	14c0c636 	bltu	r2,r19,808424 <__umoddi3+0x5cc>
  80810c:	01400404 	movi	r5,16
  808110:	2805883a 	mov	r2,r5
  808114:	003f6c06 	br	807ec8 <__umoddi3+0x70>
  808118:	01000044 	movi	r4,1
  80811c:	000b883a 	mov	r5,zero
  808120:	08097200 	call	809720 <__udivsi3>
  808124:	1027883a 	mov	r19,r2
  808128:	00bfffd4 	movui	r2,65535
  80812c:	14fff436 	bltu	r2,r19,808100 <__umoddi3+0x2a8>
  808130:	003f6106 	br	807eb8 <__umoddi3+0x60>
  808134:	00804034 	movhi	r2,256
  808138:	10bfffc4 	addi	r2,r2,-1
  80813c:	1200c536 	bltu	r2,r8,808454 <__umoddi3+0x5fc>
  808140:	01400404 	movi	r5,16
  808144:	2805883a 	mov	r2,r5
  808148:	003fb406 	br	80801c <__umoddi3+0x1c4>
  80814c:	00804034 	movhi	r2,256
  808150:	10bfffc4 	addi	r2,r2,-1
  808154:	11c0c236 	bltu	r2,r7,808460 <__umoddi3+0x608>
  808158:	01400404 	movi	r5,16
  80815c:	2805883a 	mov	r2,r5
  808160:	003f9806 	br	807fc4 <__umoddi3+0x16c>
  808164:	84c9c83a 	sub	r4,r16,r19
  808168:	8105803a 	cmpltu	r2,r16,r4
  80816c:	a987c83a 	sub	r3,r21,r6
  808170:	18abc83a 	sub	r21,r3,r2
  808174:	2021883a 	mov	r16,r4
  808178:	003f9d06 	br	807ff0 <__umoddi3+0x198>
  80817c:	9ca6983a 	sll	r19,r19,r18
  808180:	3485c83a 	sub	r2,r6,r18
  808184:	a8a2d83a 	srl	r17,r21,r2
  808188:	982ed43a 	srli	r23,r19,16
  80818c:	ac86983a 	sll	r3,r21,r18
  808190:	8084d83a 	srl	r2,r16,r2
  808194:	8809883a 	mov	r4,r17
  808198:	b80b883a 	mov	r5,r23
  80819c:	18b8b03a 	or	fp,r3,r2
  8081a0:	9d3fffcc 	andi	r20,r19,65535
  8081a4:	08097200 	call	809720 <__udivsi3>
  8081a8:	100b883a 	mov	r5,r2
  8081ac:	a009883a 	mov	r4,r20
  8081b0:	08097300 	call	809730 <__mulsi3>
  8081b4:	8809883a 	mov	r4,r17
  8081b8:	b80b883a 	mov	r5,r23
  8081bc:	102b883a 	mov	r21,r2
  8081c0:	08097280 	call	809728 <__umodsi3>
  8081c4:	1004943a 	slli	r2,r2,16
  8081c8:	e006d43a 	srli	r3,fp,16
  8081cc:	902d883a 	mov	r22,r18
  8081d0:	10c4b03a 	or	r2,r2,r3
  8081d4:	1540022e 	bgeu	r2,r21,8081e0 <__umoddi3+0x388>
  8081d8:	14c5883a 	add	r2,r2,r19
  8081dc:	14c0ab2e 	bgeu	r2,r19,80848c <__umoddi3+0x634>
  8081e0:	1563c83a 	sub	r17,r2,r21
  8081e4:	8809883a 	mov	r4,r17
  8081e8:	b80b883a 	mov	r5,r23
  8081ec:	08097200 	call	809720 <__udivsi3>
  8081f0:	100b883a 	mov	r5,r2
  8081f4:	a009883a 	mov	r4,r20
  8081f8:	08097300 	call	809730 <__mulsi3>
  8081fc:	8809883a 	mov	r4,r17
  808200:	b80b883a 	mov	r5,r23
  808204:	102b883a 	mov	r21,r2
  808208:	08097280 	call	809728 <__umodsi3>
  80820c:	1004943a 	slli	r2,r2,16
  808210:	e0ffffcc 	andi	r3,fp,65535
  808214:	10c4b03a 	or	r2,r2,r3
  808218:	1540042e 	bgeu	r2,r21,80822c <__umoddi3+0x3d4>
  80821c:	14c5883a 	add	r2,r2,r19
  808220:	14c00236 	bltu	r2,r19,80822c <__umoddi3+0x3d4>
  808224:	1540012e 	bgeu	r2,r21,80822c <__umoddi3+0x3d4>
  808228:	14c5883a 	add	r2,r2,r19
  80822c:	84a0983a 	sll	r16,r16,r18
  808230:	156bc83a 	sub	r21,r2,r21
  808234:	003f3106 	br	807efc <__umoddi3+0xa4>
  808238:	3c8fc83a 	sub	r7,r7,r18
  80823c:	3486983a 	sll	r3,r6,r18
  808240:	99c4d83a 	srl	r2,r19,r7
  808244:	a9e2d83a 	srl	r17,r21,r7
  808248:	ac8c983a 	sll	r6,r21,r18
  80824c:	18acb03a 	or	r22,r3,r2
  808250:	b02ed43a 	srli	r23,r22,16
  808254:	81c4d83a 	srl	r2,r16,r7
  808258:	8809883a 	mov	r4,r17
  80825c:	b80b883a 	mov	r5,r23
  808260:	308cb03a 	or	r6,r6,r2
  808264:	d9c00315 	stw	r7,12(sp)
  808268:	d9800215 	stw	r6,8(sp)
  80826c:	b53fffcc 	andi	r20,r22,65535
  808270:	08097200 	call	809720 <__udivsi3>
  808274:	100b883a 	mov	r5,r2
  808278:	a009883a 	mov	r4,r20
  80827c:	1039883a 	mov	fp,r2
  808280:	08097300 	call	809730 <__mulsi3>
  808284:	8809883a 	mov	r4,r17
  808288:	b80b883a 	mov	r5,r23
  80828c:	102b883a 	mov	r21,r2
  808290:	08097280 	call	809728 <__umodsi3>
  808294:	d9000217 	ldw	r4,8(sp)
  808298:	1004943a 	slli	r2,r2,16
  80829c:	9ca6983a 	sll	r19,r19,r18
  8082a0:	2006d43a 	srli	r3,r4,16
  8082a4:	84a0983a 	sll	r16,r16,r18
  8082a8:	dcc00015 	stw	r19,0(sp)
  8082ac:	10c4b03a 	or	r2,r2,r3
  8082b0:	dc000115 	stw	r16,4(sp)
  8082b4:	1540032e 	bgeu	r2,r21,8082c4 <__umoddi3+0x46c>
  8082b8:	1585883a 	add	r2,r2,r22
  8082bc:	e73fffc4 	addi	fp,fp,-1
  8082c0:	15806e2e 	bgeu	r2,r22,80847c <__umoddi3+0x624>
  8082c4:	1563c83a 	sub	r17,r2,r21
  8082c8:	8809883a 	mov	r4,r17
  8082cc:	b80b883a 	mov	r5,r23
  8082d0:	08097200 	call	809720 <__udivsi3>
  8082d4:	100b883a 	mov	r5,r2
  8082d8:	a009883a 	mov	r4,r20
  8082dc:	1021883a 	mov	r16,r2
  8082e0:	08097300 	call	809730 <__mulsi3>
  8082e4:	b80b883a 	mov	r5,r23
  8082e8:	8809883a 	mov	r4,r17
  8082ec:	1029883a 	mov	r20,r2
  8082f0:	08097280 	call	809728 <__umodsi3>
  8082f4:	d9400217 	ldw	r5,8(sp)
  8082f8:	1004943a 	slli	r2,r2,16
  8082fc:	28ffffcc 	andi	r3,r5,65535
  808300:	10c4b03a 	or	r2,r2,r3
  808304:	1500032e 	bgeu	r2,r20,808314 <__umoddi3+0x4bc>
  808308:	1585883a 	add	r2,r2,r22
  80830c:	843fffc4 	addi	r16,r16,-1
  808310:	1580562e 	bgeu	r2,r22,80846c <__umoddi3+0x614>
  808314:	d9800017 	ldw	r6,0(sp)
  808318:	e022943a 	slli	r17,fp,16
  80831c:	302ed43a 	srli	r23,r6,16
  808320:	8462b03a 	or	r17,r16,r17
  808324:	34ffffcc 	andi	r19,r6,65535
  808328:	882ad43a 	srli	r21,r17,16
  80832c:	8c7fffcc 	andi	r17,r17,65535
  808330:	8809883a 	mov	r4,r17
  808334:	980b883a 	mov	r5,r19
  808338:	1521c83a 	sub	r16,r2,r20
  80833c:	08097300 	call	809730 <__mulsi3>
  808340:	8809883a 	mov	r4,r17
  808344:	b80b883a 	mov	r5,r23
  808348:	1029883a 	mov	r20,r2
  80834c:	08097300 	call	809730 <__mulsi3>
  808350:	980b883a 	mov	r5,r19
  808354:	a809883a 	mov	r4,r21
  808358:	1023883a 	mov	r17,r2
  80835c:	08097300 	call	809730 <__mulsi3>
  808360:	a809883a 	mov	r4,r21
  808364:	b80b883a 	mov	r5,r23
  808368:	1027883a 	mov	r19,r2
  80836c:	08097300 	call	809730 <__mulsi3>
  808370:	100b883a 	mov	r5,r2
  808374:	a004d43a 	srli	r2,r20,16
  808378:	8ce3883a 	add	r17,r17,r19
  80837c:	1449883a 	add	r4,r2,r17
  808380:	24c0022e 	bgeu	r4,r19,80838c <__umoddi3+0x534>
  808384:	00800074 	movhi	r2,1
  808388:	288b883a 	add	r5,r5,r2
  80838c:	2004d43a 	srli	r2,r4,16
  808390:	2008943a 	slli	r4,r4,16
  808394:	a0ffffcc 	andi	r3,r20,65535
  808398:	288d883a 	add	r6,r5,r2
  80839c:	20c9883a 	add	r4,r4,r3
  8083a0:	81800b36 	bltu	r16,r6,8083d0 <__umoddi3+0x578>
  8083a4:	81804026 	beq	r16,r6,8084a8 <__umoddi3+0x650>
  8083a8:	818dc83a 	sub	r6,r16,r6
  8083ac:	00000f06 	br	8083ec <__umoddi3+0x594>
  8083b0:	30c5c83a 	sub	r2,r6,r3
  8083b4:	182d883a 	mov	r22,r3
  8083b8:	8084d83a 	srl	r2,r16,r2
  8083bc:	a8c6983a 	sll	r3,r21,r3
  8083c0:	9da6983a 	sll	r19,r19,r22
  8083c4:	85a0983a 	sll	r16,r16,r22
  8083c8:	18aab03a 	or	r21,r3,r2
  8083cc:	003f1d06 	br	808044 <__umoddi3+0x1ec>
  8083d0:	d8c00017 	ldw	r3,0(sp)
  8083d4:	20c5c83a 	sub	r2,r4,r3
  8083d8:	2089803a 	cmpltu	r4,r4,r2
  8083dc:	3587c83a 	sub	r3,r6,r22
  8083e0:	1907c83a 	sub	r3,r3,r4
  8083e4:	80cdc83a 	sub	r6,r16,r3
  8083e8:	1009883a 	mov	r4,r2
  8083ec:	d9400117 	ldw	r5,4(sp)
  8083f0:	2905c83a 	sub	r2,r5,r4
  8083f4:	2887803a 	cmpltu	r3,r5,r2
  8083f8:	30c7c83a 	sub	r3,r6,r3
  8083fc:	d9800317 	ldw	r6,12(sp)
  808400:	1484d83a 	srl	r2,r2,r18
  808404:	1988983a 	sll	r4,r3,r6
  808408:	1c86d83a 	srl	r3,r3,r18
  80840c:	2088b03a 	or	r4,r4,r2
  808410:	2011883a 	mov	r8,r4
  808414:	1813883a 	mov	r9,r3
  808418:	d9000415 	stw	r4,16(sp)
  80841c:	d8c00515 	stw	r3,20(sp)
  808420:	003ed406 	br	807f74 <__umoddi3+0x11c>
  808424:	01400604 	movi	r5,24
  808428:	2805883a 	mov	r2,r5
  80842c:	003ea606 	br	807ec8 <__umoddi3+0x70>
  808430:	01400204 	movi	r5,8
  808434:	2805883a 	mov	r2,r5
  808438:	003ea306 	br	807ec8 <__umoddi3+0x70>
  80843c:	01400204 	movi	r5,8
  808440:	2805883a 	mov	r2,r5
  808444:	003edf06 	br	807fc4 <__umoddi3+0x16c>
  808448:	01400204 	movi	r5,8
  80844c:	2805883a 	mov	r2,r5
  808450:	003ef206 	br	80801c <__umoddi3+0x1c4>
  808454:	01400604 	movi	r5,24
  808458:	2805883a 	mov	r2,r5
  80845c:	003eef06 	br	80801c <__umoddi3+0x1c4>
  808460:	01400604 	movi	r5,24
  808464:	2805883a 	mov	r2,r5
  808468:	003ed606 	br	807fc4 <__umoddi3+0x16c>
  80846c:	153fa92e 	bgeu	r2,r20,808314 <__umoddi3+0x4bc>
  808470:	843fffc4 	addi	r16,r16,-1
  808474:	1585883a 	add	r2,r2,r22
  808478:	003fa606 	br	808314 <__umoddi3+0x4bc>
  80847c:	157f912e 	bgeu	r2,r21,8082c4 <__umoddi3+0x46c>
  808480:	e73fffc4 	addi	fp,fp,-1
  808484:	1585883a 	add	r2,r2,r22
  808488:	003f8e06 	br	8082c4 <__umoddi3+0x46c>
  80848c:	157f542e 	bgeu	r2,r21,8081e0 <__umoddi3+0x388>
  808490:	14c5883a 	add	r2,r2,r19
  808494:	003f5206 	br	8081e0 <__umoddi3+0x388>
  808498:	14c5883a 	add	r2,r2,r19
  80849c:	003efc06 	br	808090 <__umoddi3+0x238>
  8084a0:	14c5883a 	add	r2,r2,r19
  8084a4:	003ea606 	br	807f40 <__umoddi3+0xe8>
  8084a8:	d8800117 	ldw	r2,4(sp)
  8084ac:	113fc836 	bltu	r2,r4,8083d0 <__umoddi3+0x578>
  8084b0:	000d883a 	mov	r6,zero
  8084b4:	003fcd06 	br	8083ec <__umoddi3+0x594>

008084b8 <_fpadd_parts>:
  8084b8:	defff804 	addi	sp,sp,-32
  8084bc:	dcc00315 	stw	r19,12(sp)
  8084c0:	2027883a 	mov	r19,r4
  8084c4:	21000017 	ldw	r4,0(r4)
  8084c8:	00c00044 	movi	r3,1
  8084cc:	dd400515 	stw	r21,20(sp)
  8084d0:	dd000415 	stw	r20,16(sp)
  8084d4:	ddc00715 	stw	r23,28(sp)
  8084d8:	dd800615 	stw	r22,24(sp)
  8084dc:	dc800215 	stw	r18,8(sp)
  8084e0:	dc400115 	stw	r17,4(sp)
  8084e4:	dc000015 	stw	r16,0(sp)
  8084e8:	282b883a 	mov	r21,r5
  8084ec:	3029883a 	mov	r20,r6
  8084f0:	1900632e 	bgeu	r3,r4,808680 <_fpadd_parts+0x1c8>
  8084f4:	28800017 	ldw	r2,0(r5)
  8084f8:	1880812e 	bgeu	r3,r2,808700 <_fpadd_parts+0x248>
  8084fc:	00c00104 	movi	r3,4
  808500:	20c0dc26 	beq	r4,r3,808874 <_fpadd_parts+0x3bc>
  808504:	10c07e26 	beq	r2,r3,808700 <_fpadd_parts+0x248>
  808508:	00c00084 	movi	r3,2
  80850c:	10c06726 	beq	r2,r3,8086ac <_fpadd_parts+0x1f4>
  808510:	20c07b26 	beq	r4,r3,808700 <_fpadd_parts+0x248>
  808514:	9dc00217 	ldw	r23,8(r19)
  808518:	28c00217 	ldw	r3,8(r5)
  80851c:	9c400317 	ldw	r17,12(r19)
  808520:	2bc00317 	ldw	r15,12(r5)
  808524:	b8cdc83a 	sub	r6,r23,r3
  808528:	9c800417 	ldw	r18,16(r19)
  80852c:	2c000417 	ldw	r16,16(r5)
  808530:	3009883a 	mov	r4,r6
  808534:	30009716 	blt	r6,zero,808794 <_fpadd_parts+0x2dc>
  808538:	00800fc4 	movi	r2,63
  80853c:	11806b16 	blt	r2,r6,8086ec <_fpadd_parts+0x234>
  808540:	0100a40e 	bge	zero,r4,8087d4 <_fpadd_parts+0x31c>
  808544:	35bff804 	addi	r22,r6,-32
  808548:	b000bc16 	blt	r22,zero,80883c <_fpadd_parts+0x384>
  80854c:	8596d83a 	srl	r11,r16,r22
  808550:	0019883a 	mov	r12,zero
  808554:	0013883a 	mov	r9,zero
  808558:	01000044 	movi	r4,1
  80855c:	0015883a 	mov	r10,zero
  808560:	b000be16 	blt	r22,zero,80885c <_fpadd_parts+0x3a4>
  808564:	2590983a 	sll	r8,r4,r22
  808568:	000f883a 	mov	r7,zero
  80856c:	00bfffc4 	movi	r2,-1
  808570:	3889883a 	add	r4,r7,r2
  808574:	408b883a 	add	r5,r8,r2
  808578:	21cd803a 	cmpltu	r6,r4,r7
  80857c:	314b883a 	add	r5,r6,r5
  808580:	7904703a 	and	r2,r15,r4
  808584:	8146703a 	and	r3,r16,r5
  808588:	10c4b03a 	or	r2,r2,r3
  80858c:	10000226 	beq	r2,zero,808598 <_fpadd_parts+0xe0>
  808590:	02400044 	movi	r9,1
  808594:	0015883a 	mov	r10,zero
  808598:	5a5eb03a 	or	r15,r11,r9
  80859c:	62a0b03a 	or	r16,r12,r10
  8085a0:	99400117 	ldw	r5,4(r19)
  8085a4:	a8800117 	ldw	r2,4(r21)
  8085a8:	28806e26 	beq	r5,r2,808764 <_fpadd_parts+0x2ac>
  8085ac:	28006626 	beq	r5,zero,808748 <_fpadd_parts+0x290>
  8085b0:	7c45c83a 	sub	r2,r15,r17
  8085b4:	7889803a 	cmpltu	r4,r15,r2
  8085b8:	8487c83a 	sub	r3,r16,r18
  8085bc:	1909c83a 	sub	r4,r3,r4
  8085c0:	100d883a 	mov	r6,r2
  8085c4:	200f883a 	mov	r7,r4
  8085c8:	38007716 	blt	r7,zero,8087a8 <_fpadd_parts+0x2f0>
  8085cc:	a5c00215 	stw	r23,8(r20)
  8085d0:	a1c00415 	stw	r7,16(r20)
  8085d4:	a0000115 	stw	zero,4(r20)
  8085d8:	a1800315 	stw	r6,12(r20)
  8085dc:	a2000317 	ldw	r8,12(r20)
  8085e0:	a2400417 	ldw	r9,16(r20)
  8085e4:	00bfffc4 	movi	r2,-1
  8085e8:	408b883a 	add	r5,r8,r2
  8085ec:	2a09803a 	cmpltu	r4,r5,r8
  8085f0:	488d883a 	add	r6,r9,r2
  8085f4:	01c40034 	movhi	r7,4096
  8085f8:	39ffffc4 	addi	r7,r7,-1
  8085fc:	218d883a 	add	r6,r4,r6
  808600:	39801736 	bltu	r7,r6,808660 <_fpadd_parts+0x1a8>
  808604:	31c06526 	beq	r6,r7,80879c <_fpadd_parts+0x2e4>
  808608:	a3000217 	ldw	r12,8(r20)
  80860c:	4209883a 	add	r4,r8,r8
  808610:	00bfffc4 	movi	r2,-1
  808614:	220f803a 	cmpltu	r7,r4,r8
  808618:	4a4b883a 	add	r5,r9,r9
  80861c:	394f883a 	add	r7,r7,r5
  808620:	2095883a 	add	r10,r4,r2
  808624:	3897883a 	add	r11,r7,r2
  808628:	510d803a 	cmpltu	r6,r10,r4
  80862c:	6099883a 	add	r12,r12,r2
  808630:	32d7883a 	add	r11,r6,r11
  808634:	00840034 	movhi	r2,4096
  808638:	10bfffc4 	addi	r2,r2,-1
  80863c:	2011883a 	mov	r8,r4
  808640:	3813883a 	mov	r9,r7
  808644:	a1000315 	stw	r4,12(r20)
  808648:	a1c00415 	stw	r7,16(r20)
  80864c:	a3000215 	stw	r12,8(r20)
  808650:	12c00336 	bltu	r2,r11,808660 <_fpadd_parts+0x1a8>
  808654:	58bfed1e 	bne	r11,r2,80860c <_fpadd_parts+0x154>
  808658:	00bfff84 	movi	r2,-2
  80865c:	12bfeb2e 	bgeu	r2,r10,80860c <_fpadd_parts+0x154>
  808660:	a2800417 	ldw	r10,16(r20)
  808664:	008000c4 	movi	r2,3
  808668:	00c80034 	movhi	r3,8192
  80866c:	18ffffc4 	addi	r3,r3,-1
  808670:	a2400317 	ldw	r9,12(r20)
  808674:	a0800015 	stw	r2,0(r20)
  808678:	1a802336 	bltu	r3,r10,808708 <_fpadd_parts+0x250>
  80867c:	a027883a 	mov	r19,r20
  808680:	9805883a 	mov	r2,r19
  808684:	ddc00717 	ldw	r23,28(sp)
  808688:	dd800617 	ldw	r22,24(sp)
  80868c:	dd400517 	ldw	r21,20(sp)
  808690:	dd000417 	ldw	r20,16(sp)
  808694:	dcc00317 	ldw	r19,12(sp)
  808698:	dc800217 	ldw	r18,8(sp)
  80869c:	dc400117 	ldw	r17,4(sp)
  8086a0:	dc000017 	ldw	r16,0(sp)
  8086a4:	dec00804 	addi	sp,sp,32
  8086a8:	f800283a 	ret
  8086ac:	20fff41e 	bne	r4,r3,808680 <_fpadd_parts+0x1c8>
  8086b0:	31000015 	stw	r4,0(r6)
  8086b4:	98800117 	ldw	r2,4(r19)
  8086b8:	30800115 	stw	r2,4(r6)
  8086bc:	98c00217 	ldw	r3,8(r19)
  8086c0:	30c00215 	stw	r3,8(r6)
  8086c4:	98800317 	ldw	r2,12(r19)
  8086c8:	30800315 	stw	r2,12(r6)
  8086cc:	98c00417 	ldw	r3,16(r19)
  8086d0:	30c00415 	stw	r3,16(r6)
  8086d4:	98800117 	ldw	r2,4(r19)
  8086d8:	28c00117 	ldw	r3,4(r5)
  8086dc:	3027883a 	mov	r19,r6
  8086e0:	10c4703a 	and	r2,r2,r3
  8086e4:	30800115 	stw	r2,4(r6)
  8086e8:	003fe506 	br	808680 <_fpadd_parts+0x1c8>
  8086ec:	1dc02616 	blt	r3,r23,808788 <_fpadd_parts+0x2d0>
  8086f0:	0023883a 	mov	r17,zero
  8086f4:	182f883a 	mov	r23,r3
  8086f8:	0025883a 	mov	r18,zero
  8086fc:	003fa806 	br	8085a0 <_fpadd_parts+0xe8>
  808700:	a827883a 	mov	r19,r21
  808704:	003fde06 	br	808680 <_fpadd_parts+0x1c8>
  808708:	01800044 	movi	r6,1
  80870c:	500497fa 	slli	r2,r10,31
  808710:	4808d07a 	srli	r4,r9,1
  808714:	518ad83a 	srl	r5,r10,r6
  808718:	a2000217 	ldw	r8,8(r20)
  80871c:	1108b03a 	or	r4,r2,r4
  808720:	0007883a 	mov	r3,zero
  808724:	4984703a 	and	r2,r9,r6
  808728:	208cb03a 	or	r6,r4,r2
  80872c:	28ceb03a 	or	r7,r5,r3
  808730:	42000044 	addi	r8,r8,1
  808734:	a027883a 	mov	r19,r20
  808738:	a1c00415 	stw	r7,16(r20)
  80873c:	a2000215 	stw	r8,8(r20)
  808740:	a1800315 	stw	r6,12(r20)
  808744:	003fce06 	br	808680 <_fpadd_parts+0x1c8>
  808748:	8bc5c83a 	sub	r2,r17,r15
  80874c:	8889803a 	cmpltu	r4,r17,r2
  808750:	9407c83a 	sub	r3,r18,r16
  808754:	1909c83a 	sub	r4,r3,r4
  808758:	100d883a 	mov	r6,r2
  80875c:	200f883a 	mov	r7,r4
  808760:	003f9906 	br	8085c8 <_fpadd_parts+0x110>
  808764:	7c45883a 	add	r2,r15,r17
  808768:	13c9803a 	cmpltu	r4,r2,r15
  80876c:	8487883a 	add	r3,r16,r18
  808770:	20c9883a 	add	r4,r4,r3
  808774:	a1400115 	stw	r5,4(r20)
  808778:	a5c00215 	stw	r23,8(r20)
  80877c:	a0800315 	stw	r2,12(r20)
  808780:	a1000415 	stw	r4,16(r20)
  808784:	003fb606 	br	808660 <_fpadd_parts+0x1a8>
  808788:	001f883a 	mov	r15,zero
  80878c:	0021883a 	mov	r16,zero
  808790:	003f8306 	br	8085a0 <_fpadd_parts+0xe8>
  808794:	018dc83a 	sub	r6,zero,r6
  808798:	003f6706 	br	808538 <_fpadd_parts+0x80>
  80879c:	00bfff84 	movi	r2,-2
  8087a0:	117faf36 	bltu	r2,r5,808660 <_fpadd_parts+0x1a8>
  8087a4:	003f9806 	br	808608 <_fpadd_parts+0x150>
  8087a8:	0005883a 	mov	r2,zero
  8087ac:	1189c83a 	sub	r4,r2,r6
  8087b0:	1105803a 	cmpltu	r2,r2,r4
  8087b4:	01cbc83a 	sub	r5,zero,r7
  8087b8:	2885c83a 	sub	r2,r5,r2
  8087bc:	01800044 	movi	r6,1
  8087c0:	a1800115 	stw	r6,4(r20)
  8087c4:	a5c00215 	stw	r23,8(r20)
  8087c8:	a1000315 	stw	r4,12(r20)
  8087cc:	a0800415 	stw	r2,16(r20)
  8087d0:	003f8206 	br	8085dc <_fpadd_parts+0x124>
  8087d4:	203f7226 	beq	r4,zero,8085a0 <_fpadd_parts+0xe8>
  8087d8:	35bff804 	addi	r22,r6,-32
  8087dc:	b9af883a 	add	r23,r23,r6
  8087e0:	b0003116 	blt	r22,zero,8088a8 <_fpadd_parts+0x3f0>
  8087e4:	959ad83a 	srl	r13,r18,r22
  8087e8:	001d883a 	mov	r14,zero
  8087ec:	000f883a 	mov	r7,zero
  8087f0:	01000044 	movi	r4,1
  8087f4:	0011883a 	mov	r8,zero
  8087f8:	b0002516 	blt	r22,zero,808890 <_fpadd_parts+0x3d8>
  8087fc:	2594983a 	sll	r10,r4,r22
  808800:	0013883a 	mov	r9,zero
  808804:	00bfffc4 	movi	r2,-1
  808808:	4889883a 	add	r4,r9,r2
  80880c:	508b883a 	add	r5,r10,r2
  808810:	224d803a 	cmpltu	r6,r4,r9
  808814:	314b883a 	add	r5,r6,r5
  808818:	8904703a 	and	r2,r17,r4
  80881c:	9146703a 	and	r3,r18,r5
  808820:	10c4b03a 	or	r2,r2,r3
  808824:	10000226 	beq	r2,zero,808830 <_fpadd_parts+0x378>
  808828:	01c00044 	movi	r7,1
  80882c:	0011883a 	mov	r8,zero
  808830:	69e2b03a 	or	r17,r13,r7
  808834:	7224b03a 	or	r18,r14,r8
  808838:	003f5906 	br	8085a0 <_fpadd_parts+0xe8>
  80883c:	8407883a 	add	r3,r16,r16
  808840:	008007c4 	movi	r2,31
  808844:	1185c83a 	sub	r2,r2,r6
  808848:	1886983a 	sll	r3,r3,r2
  80884c:	7996d83a 	srl	r11,r15,r6
  808850:	8198d83a 	srl	r12,r16,r6
  808854:	1ad6b03a 	or	r11,r3,r11
  808858:	003f3e06 	br	808554 <_fpadd_parts+0x9c>
  80885c:	2006d07a 	srli	r3,r4,1
  808860:	008007c4 	movi	r2,31
  808864:	1185c83a 	sub	r2,r2,r6
  808868:	1890d83a 	srl	r8,r3,r2
  80886c:	218e983a 	sll	r7,r4,r6
  808870:	003f3e06 	br	80856c <_fpadd_parts+0xb4>
  808874:	113f821e 	bne	r2,r4,808680 <_fpadd_parts+0x1c8>
  808878:	28c00117 	ldw	r3,4(r5)
  80887c:	98800117 	ldw	r2,4(r19)
  808880:	10ff7f26 	beq	r2,r3,808680 <_fpadd_parts+0x1c8>
  808884:	04c02074 	movhi	r19,129
  808888:	9cf2e304 	addi	r19,r19,-13428
  80888c:	003f7c06 	br	808680 <_fpadd_parts+0x1c8>
  808890:	2006d07a 	srli	r3,r4,1
  808894:	008007c4 	movi	r2,31
  808898:	1185c83a 	sub	r2,r2,r6
  80889c:	1894d83a 	srl	r10,r3,r2
  8088a0:	2192983a 	sll	r9,r4,r6
  8088a4:	003fd706 	br	808804 <_fpadd_parts+0x34c>
  8088a8:	9487883a 	add	r3,r18,r18
  8088ac:	008007c4 	movi	r2,31
  8088b0:	1185c83a 	sub	r2,r2,r6
  8088b4:	1886983a 	sll	r3,r3,r2
  8088b8:	899ad83a 	srl	r13,r17,r6
  8088bc:	919cd83a 	srl	r14,r18,r6
  8088c0:	1b5ab03a 	or	r13,r3,r13
  8088c4:	003fc906 	br	8087ec <_fpadd_parts+0x334>

008088c8 <__subdf3>:
  8088c8:	deffea04 	addi	sp,sp,-88
  8088cc:	dcc01415 	stw	r19,80(sp)
  8088d0:	dcc00404 	addi	r19,sp,16
  8088d4:	2011883a 	mov	r8,r4
  8088d8:	2813883a 	mov	r9,r5
  8088dc:	dc401315 	stw	r17,76(sp)
  8088e0:	d809883a 	mov	r4,sp
  8088e4:	980b883a 	mov	r5,r19
  8088e8:	dc400904 	addi	r17,sp,36
  8088ec:	dfc01515 	stw	ra,84(sp)
  8088f0:	da400115 	stw	r9,4(sp)
  8088f4:	d9c00315 	stw	r7,12(sp)
  8088f8:	da000015 	stw	r8,0(sp)
  8088fc:	d9800215 	stw	r6,8(sp)
  808900:	0809c200 	call	809c20 <__unpack_d>
  808904:	d9000204 	addi	r4,sp,8
  808908:	880b883a 	mov	r5,r17
  80890c:	0809c200 	call	809c20 <__unpack_d>
  808910:	d8800a17 	ldw	r2,40(sp)
  808914:	880b883a 	mov	r5,r17
  808918:	9809883a 	mov	r4,r19
  80891c:	d9800e04 	addi	r6,sp,56
  808920:	1080005c 	xori	r2,r2,1
  808924:	d8800a15 	stw	r2,40(sp)
  808928:	08084b80 	call	8084b8 <_fpadd_parts>
  80892c:	1009883a 	mov	r4,r2
  808930:	080990c0 	call	80990c <__pack_d>
  808934:	dfc01517 	ldw	ra,84(sp)
  808938:	dcc01417 	ldw	r19,80(sp)
  80893c:	dc401317 	ldw	r17,76(sp)
  808940:	dec01604 	addi	sp,sp,88
  808944:	f800283a 	ret

00808948 <__adddf3>:
  808948:	deffea04 	addi	sp,sp,-88
  80894c:	dcc01415 	stw	r19,80(sp)
  808950:	dcc00404 	addi	r19,sp,16
  808954:	2011883a 	mov	r8,r4
  808958:	2813883a 	mov	r9,r5
  80895c:	dc401315 	stw	r17,76(sp)
  808960:	d809883a 	mov	r4,sp
  808964:	980b883a 	mov	r5,r19
  808968:	dc400904 	addi	r17,sp,36
  80896c:	dfc01515 	stw	ra,84(sp)
  808970:	da400115 	stw	r9,4(sp)
  808974:	d9c00315 	stw	r7,12(sp)
  808978:	da000015 	stw	r8,0(sp)
  80897c:	d9800215 	stw	r6,8(sp)
  808980:	0809c200 	call	809c20 <__unpack_d>
  808984:	d9000204 	addi	r4,sp,8
  808988:	880b883a 	mov	r5,r17
  80898c:	0809c200 	call	809c20 <__unpack_d>
  808990:	d9800e04 	addi	r6,sp,56
  808994:	9809883a 	mov	r4,r19
  808998:	880b883a 	mov	r5,r17
  80899c:	08084b80 	call	8084b8 <_fpadd_parts>
  8089a0:	1009883a 	mov	r4,r2
  8089a4:	080990c0 	call	80990c <__pack_d>
  8089a8:	dfc01517 	ldw	ra,84(sp)
  8089ac:	dcc01417 	ldw	r19,80(sp)
  8089b0:	dc401317 	ldw	r17,76(sp)
  8089b4:	dec01604 	addi	sp,sp,88
  8089b8:	f800283a 	ret

008089bc <__muldf3>:
  8089bc:	deffe004 	addi	sp,sp,-128
  8089c0:	dc401815 	stw	r17,96(sp)
  8089c4:	dc400404 	addi	r17,sp,16
  8089c8:	2011883a 	mov	r8,r4
  8089cc:	2813883a 	mov	r9,r5
  8089d0:	dc001715 	stw	r16,92(sp)
  8089d4:	d809883a 	mov	r4,sp
  8089d8:	880b883a 	mov	r5,r17
  8089dc:	dc000904 	addi	r16,sp,36
  8089e0:	dfc01f15 	stw	ra,124(sp)
  8089e4:	da400115 	stw	r9,4(sp)
  8089e8:	d9c00315 	stw	r7,12(sp)
  8089ec:	da000015 	stw	r8,0(sp)
  8089f0:	d9800215 	stw	r6,8(sp)
  8089f4:	ddc01e15 	stw	r23,120(sp)
  8089f8:	dd801d15 	stw	r22,116(sp)
  8089fc:	dd401c15 	stw	r21,112(sp)
  808a00:	dd001b15 	stw	r20,108(sp)
  808a04:	dcc01a15 	stw	r19,104(sp)
  808a08:	dc801915 	stw	r18,100(sp)
  808a0c:	0809c200 	call	809c20 <__unpack_d>
  808a10:	d9000204 	addi	r4,sp,8
  808a14:	800b883a 	mov	r5,r16
  808a18:	0809c200 	call	809c20 <__unpack_d>
  808a1c:	d9000417 	ldw	r4,16(sp)
  808a20:	00800044 	movi	r2,1
  808a24:	1100102e 	bgeu	r2,r4,808a68 <__muldf3+0xac>
  808a28:	d8c00917 	ldw	r3,36(sp)
  808a2c:	10c0062e 	bgeu	r2,r3,808a48 <__muldf3+0x8c>
  808a30:	00800104 	movi	r2,4
  808a34:	20800a26 	beq	r4,r2,808a60 <__muldf3+0xa4>
  808a38:	1880cc26 	beq	r3,r2,808d6c <__muldf3+0x3b0>
  808a3c:	00800084 	movi	r2,2
  808a40:	20800926 	beq	r4,r2,808a68 <__muldf3+0xac>
  808a44:	1880191e 	bne	r3,r2,808aac <__muldf3+0xf0>
  808a48:	d8c00a17 	ldw	r3,40(sp)
  808a4c:	d8800517 	ldw	r2,20(sp)
  808a50:	8009883a 	mov	r4,r16
  808a54:	10c4c03a 	cmpne	r2,r2,r3
  808a58:	d8800a15 	stw	r2,40(sp)
  808a5c:	00000706 	br	808a7c <__muldf3+0xc0>
  808a60:	00800084 	movi	r2,2
  808a64:	1880c326 	beq	r3,r2,808d74 <__muldf3+0x3b8>
  808a68:	d8800517 	ldw	r2,20(sp)
  808a6c:	d8c00a17 	ldw	r3,40(sp)
  808a70:	8809883a 	mov	r4,r17
  808a74:	10c4c03a 	cmpne	r2,r2,r3
  808a78:	d8800515 	stw	r2,20(sp)
  808a7c:	080990c0 	call	80990c <__pack_d>
  808a80:	dfc01f17 	ldw	ra,124(sp)
  808a84:	ddc01e17 	ldw	r23,120(sp)
  808a88:	dd801d17 	ldw	r22,116(sp)
  808a8c:	dd401c17 	ldw	r21,112(sp)
  808a90:	dd001b17 	ldw	r20,108(sp)
  808a94:	dcc01a17 	ldw	r19,104(sp)
  808a98:	dc801917 	ldw	r18,100(sp)
  808a9c:	dc401817 	ldw	r17,96(sp)
  808aa0:	dc001717 	ldw	r16,92(sp)
  808aa4:	dec02004 	addi	sp,sp,128
  808aa8:	f800283a 	ret
  808aac:	dd800717 	ldw	r22,28(sp)
  808ab0:	dc800c17 	ldw	r18,48(sp)
  808ab4:	002b883a 	mov	r21,zero
  808ab8:	0023883a 	mov	r17,zero
  808abc:	a80b883a 	mov	r5,r21
  808ac0:	b00d883a 	mov	r6,r22
  808ac4:	880f883a 	mov	r7,r17
  808ac8:	ddc00817 	ldw	r23,32(sp)
  808acc:	dcc00d17 	ldw	r19,52(sp)
  808ad0:	9009883a 	mov	r4,r18
  808ad4:	08097680 	call	809768 <__muldi3>
  808ad8:	001b883a 	mov	r13,zero
  808adc:	680f883a 	mov	r7,r13
  808ae0:	b009883a 	mov	r4,r22
  808ae4:	000b883a 	mov	r5,zero
  808ae8:	980d883a 	mov	r6,r19
  808aec:	b82d883a 	mov	r22,r23
  808af0:	002f883a 	mov	r23,zero
  808af4:	db401615 	stw	r13,88(sp)
  808af8:	d8801315 	stw	r2,76(sp)
  808afc:	d8c01415 	stw	r3,80(sp)
  808b00:	dcc01515 	stw	r19,84(sp)
  808b04:	08097680 	call	809768 <__muldi3>
  808b08:	b00d883a 	mov	r6,r22
  808b0c:	000b883a 	mov	r5,zero
  808b10:	9009883a 	mov	r4,r18
  808b14:	b80f883a 	mov	r7,r23
  808b18:	1021883a 	mov	r16,r2
  808b1c:	1823883a 	mov	r17,r3
  808b20:	08097680 	call	809768 <__muldi3>
  808b24:	8085883a 	add	r2,r16,r2
  808b28:	140d803a 	cmpltu	r6,r2,r16
  808b2c:	88c7883a 	add	r3,r17,r3
  808b30:	30cd883a 	add	r6,r6,r3
  808b34:	1029883a 	mov	r20,r2
  808b38:	302b883a 	mov	r21,r6
  808b3c:	da801317 	ldw	r10,76(sp)
  808b40:	dac01417 	ldw	r11,80(sp)
  808b44:	db001517 	ldw	r12,84(sp)
  808b48:	db401617 	ldw	r13,88(sp)
  808b4c:	3440612e 	bgeu	r6,r17,808cd4 <__muldf3+0x318>
  808b50:	0009883a 	mov	r4,zero
  808b54:	5105883a 	add	r2,r10,r4
  808b58:	128d803a 	cmpltu	r6,r2,r10
  808b5c:	5d07883a 	add	r3,r11,r20
  808b60:	30cd883a 	add	r6,r6,r3
  808b64:	0021883a 	mov	r16,zero
  808b68:	04400044 	movi	r17,1
  808b6c:	1025883a 	mov	r18,r2
  808b70:	3027883a 	mov	r19,r6
  808b74:	32c06236 	bltu	r6,r11,808d00 <__muldf3+0x344>
  808b78:	59807a26 	beq	r11,r6,808d64 <__muldf3+0x3a8>
  808b7c:	680b883a 	mov	r5,r13
  808b80:	b80f883a 	mov	r7,r23
  808b84:	6009883a 	mov	r4,r12
  808b88:	b00d883a 	mov	r6,r22
  808b8c:	08097680 	call	809768 <__muldi3>
  808b90:	1009883a 	mov	r4,r2
  808b94:	000f883a 	mov	r7,zero
  808b98:	1545883a 	add	r2,r2,r21
  808b9c:	1111803a 	cmpltu	r8,r2,r4
  808ba0:	19c7883a 	add	r3,r3,r7
  808ba4:	40c7883a 	add	r3,r8,r3
  808ba8:	88cb883a 	add	r5,r17,r3
  808bac:	d8c00617 	ldw	r3,24(sp)
  808bb0:	8089883a 	add	r4,r16,r2
  808bb4:	d8800b17 	ldw	r2,44(sp)
  808bb8:	18c00104 	addi	r3,r3,4
  808bbc:	240d803a 	cmpltu	r6,r4,r16
  808bc0:	10c7883a 	add	r3,r2,r3
  808bc4:	2013883a 	mov	r9,r4
  808bc8:	d8800a17 	ldw	r2,40(sp)
  808bcc:	d9000517 	ldw	r4,20(sp)
  808bd0:	314d883a 	add	r6,r6,r5
  808bd4:	3015883a 	mov	r10,r6
  808bd8:	2088c03a 	cmpne	r4,r4,r2
  808bdc:	00880034 	movhi	r2,8192
  808be0:	10bfffc4 	addi	r2,r2,-1
  808be4:	d9000f15 	stw	r4,60(sp)
  808be8:	d8c01015 	stw	r3,64(sp)
  808bec:	1180162e 	bgeu	r2,r6,808c48 <__muldf3+0x28c>
  808bf0:	1811883a 	mov	r8,r3
  808bf4:	101f883a 	mov	r15,r2
  808bf8:	980497fa 	slli	r2,r19,31
  808bfc:	9016d07a 	srli	r11,r18,1
  808c00:	500697fa 	slli	r3,r10,31
  808c04:	480cd07a 	srli	r6,r9,1
  808c08:	500ed07a 	srli	r7,r10,1
  808c0c:	12d6b03a 	or	r11,r2,r11
  808c10:	00800044 	movi	r2,1
  808c14:	198cb03a 	or	r6,r3,r6
  808c18:	4888703a 	and	r4,r9,r2
  808c1c:	9818d07a 	srli	r12,r19,1
  808c20:	001b883a 	mov	r13,zero
  808c24:	03a00034 	movhi	r14,32768
  808c28:	3013883a 	mov	r9,r6
  808c2c:	3815883a 	mov	r10,r7
  808c30:	4091883a 	add	r8,r8,r2
  808c34:	20000226 	beq	r4,zero,808c40 <__muldf3+0x284>
  808c38:	5b64b03a 	or	r18,r11,r13
  808c3c:	63a6b03a 	or	r19,r12,r14
  808c40:	7abfed36 	bltu	r15,r10,808bf8 <__muldf3+0x23c>
  808c44:	da001015 	stw	r8,64(sp)
  808c48:	00840034 	movhi	r2,4096
  808c4c:	10bfffc4 	addi	r2,r2,-1
  808c50:	12801436 	bltu	r2,r10,808ca4 <__muldf3+0x2e8>
  808c54:	da001017 	ldw	r8,64(sp)
  808c58:	101f883a 	mov	r15,r2
  808c5c:	4a45883a 	add	r2,r9,r9
  808c60:	124d803a 	cmpltu	r6,r2,r9
  808c64:	5287883a 	add	r3,r10,r10
  808c68:	9497883a 	add	r11,r18,r18
  808c6c:	5c8f803a 	cmpltu	r7,r11,r18
  808c70:	9cd9883a 	add	r12,r19,r19
  808c74:	01000044 	movi	r4,1
  808c78:	30cd883a 	add	r6,r6,r3
  808c7c:	3b0f883a 	add	r7,r7,r12
  808c80:	423fffc4 	addi	r8,r8,-1
  808c84:	1013883a 	mov	r9,r2
  808c88:	3015883a 	mov	r10,r6
  808c8c:	111ab03a 	or	r13,r2,r4
  808c90:	98003016 	blt	r19,zero,808d54 <__muldf3+0x398>
  808c94:	5825883a 	mov	r18,r11
  808c98:	3827883a 	mov	r19,r7
  808c9c:	7abfef2e 	bgeu	r15,r10,808c5c <__muldf3+0x2a0>
  808ca0:	da001015 	stw	r8,64(sp)
  808ca4:	00803fc4 	movi	r2,255
  808ca8:	488e703a 	and	r7,r9,r2
  808cac:	00802004 	movi	r2,128
  808cb0:	0007883a 	mov	r3,zero
  808cb4:	0011883a 	mov	r8,zero
  808cb8:	38801826 	beq	r7,r2,808d1c <__muldf3+0x360>
  808cbc:	008000c4 	movi	r2,3
  808cc0:	d9000e04 	addi	r4,sp,56
  808cc4:	da801215 	stw	r10,72(sp)
  808cc8:	d8800e15 	stw	r2,56(sp)
  808ccc:	da401115 	stw	r9,68(sp)
  808cd0:	003f6a06 	br	808a7c <__muldf3+0xc0>
  808cd4:	89802126 	beq	r17,r6,808d5c <__muldf3+0x3a0>
  808cd8:	0009883a 	mov	r4,zero
  808cdc:	5105883a 	add	r2,r10,r4
  808ce0:	128d803a 	cmpltu	r6,r2,r10
  808ce4:	5d07883a 	add	r3,r11,r20
  808ce8:	30cd883a 	add	r6,r6,r3
  808cec:	0021883a 	mov	r16,zero
  808cf0:	0023883a 	mov	r17,zero
  808cf4:	1025883a 	mov	r18,r2
  808cf8:	3027883a 	mov	r19,r6
  808cfc:	32ff9e2e 	bgeu	r6,r11,808b78 <__muldf3+0x1bc>
  808d00:	00800044 	movi	r2,1
  808d04:	8089883a 	add	r4,r16,r2
  808d08:	240d803a 	cmpltu	r6,r4,r16
  808d0c:	344d883a 	add	r6,r6,r17
  808d10:	2021883a 	mov	r16,r4
  808d14:	3023883a 	mov	r17,r6
  808d18:	003f9806 	br	808b7c <__muldf3+0x1c0>
  808d1c:	403fe71e 	bne	r8,zero,808cbc <__muldf3+0x300>
  808d20:	01004004 	movi	r4,256
  808d24:	4904703a 	and	r2,r9,r4
  808d28:	10c4b03a 	or	r2,r2,r3
  808d2c:	103fe31e 	bne	r2,zero,808cbc <__muldf3+0x300>
  808d30:	94c4b03a 	or	r2,r18,r19
  808d34:	103fe126 	beq	r2,zero,808cbc <__muldf3+0x300>
  808d38:	49c5883a 	add	r2,r9,r7
  808d3c:	1251803a 	cmpltu	r8,r2,r9
  808d40:	4291883a 	add	r8,r8,r10
  808d44:	013fc004 	movi	r4,-256
  808d48:	1112703a 	and	r9,r2,r4
  808d4c:	4015883a 	mov	r10,r8
  808d50:	003fda06 	br	808cbc <__muldf3+0x300>
  808d54:	6813883a 	mov	r9,r13
  808d58:	003fce06 	br	808c94 <__muldf3+0x2d8>
  808d5c:	143f7c36 	bltu	r2,r16,808b50 <__muldf3+0x194>
  808d60:	003fdd06 	br	808cd8 <__muldf3+0x31c>
  808d64:	12bf852e 	bgeu	r2,r10,808b7c <__muldf3+0x1c0>
  808d68:	003fe506 	br	808d00 <__muldf3+0x344>
  808d6c:	00800084 	movi	r2,2
  808d70:	20bf351e 	bne	r4,r2,808a48 <__muldf3+0x8c>
  808d74:	01002074 	movhi	r4,129
  808d78:	2132e304 	addi	r4,r4,-13428
  808d7c:	003f3f06 	br	808a7c <__muldf3+0xc0>

00808d80 <__divdf3>:
  808d80:	deffed04 	addi	sp,sp,-76
  808d84:	dcc01115 	stw	r19,68(sp)
  808d88:	dcc00404 	addi	r19,sp,16
  808d8c:	2011883a 	mov	r8,r4
  808d90:	2813883a 	mov	r9,r5
  808d94:	dc000e15 	stw	r16,56(sp)
  808d98:	d809883a 	mov	r4,sp
  808d9c:	980b883a 	mov	r5,r19
  808da0:	dc000904 	addi	r16,sp,36
  808da4:	dfc01215 	stw	ra,72(sp)
  808da8:	da400115 	stw	r9,4(sp)
  808dac:	d9c00315 	stw	r7,12(sp)
  808db0:	da000015 	stw	r8,0(sp)
  808db4:	d9800215 	stw	r6,8(sp)
  808db8:	dc801015 	stw	r18,64(sp)
  808dbc:	dc400f15 	stw	r17,60(sp)
  808dc0:	0809c200 	call	809c20 <__unpack_d>
  808dc4:	d9000204 	addi	r4,sp,8
  808dc8:	800b883a 	mov	r5,r16
  808dcc:	0809c200 	call	809c20 <__unpack_d>
  808dd0:	d9000417 	ldw	r4,16(sp)
  808dd4:	00800044 	movi	r2,1
  808dd8:	11000b2e 	bgeu	r2,r4,808e08 <__divdf3+0x88>
  808ddc:	d9400917 	ldw	r5,36(sp)
  808de0:	1140762e 	bgeu	r2,r5,808fbc <__divdf3+0x23c>
  808de4:	d8800517 	ldw	r2,20(sp)
  808de8:	d8c00a17 	ldw	r3,40(sp)
  808dec:	01800104 	movi	r6,4
  808df0:	10c4f03a 	xor	r2,r2,r3
  808df4:	d8800515 	stw	r2,20(sp)
  808df8:	21800226 	beq	r4,r6,808e04 <__divdf3+0x84>
  808dfc:	00800084 	movi	r2,2
  808e00:	2080141e 	bne	r4,r2,808e54 <__divdf3+0xd4>
  808e04:	29000926 	beq	r5,r4,808e2c <__divdf3+0xac>
  808e08:	9809883a 	mov	r4,r19
  808e0c:	080990c0 	call	80990c <__pack_d>
  808e10:	dfc01217 	ldw	ra,72(sp)
  808e14:	dcc01117 	ldw	r19,68(sp)
  808e18:	dc801017 	ldw	r18,64(sp)
  808e1c:	dc400f17 	ldw	r17,60(sp)
  808e20:	dc000e17 	ldw	r16,56(sp)
  808e24:	dec01304 	addi	sp,sp,76
  808e28:	f800283a 	ret
  808e2c:	01002074 	movhi	r4,129
  808e30:	2132e304 	addi	r4,r4,-13428
  808e34:	080990c0 	call	80990c <__pack_d>
  808e38:	dfc01217 	ldw	ra,72(sp)
  808e3c:	dcc01117 	ldw	r19,68(sp)
  808e40:	dc801017 	ldw	r18,64(sp)
  808e44:	dc400f17 	ldw	r17,60(sp)
  808e48:	dc000e17 	ldw	r16,56(sp)
  808e4c:	dec01304 	addi	sp,sp,76
  808e50:	f800283a 	ret
  808e54:	29805b26 	beq	r5,r6,808fc4 <__divdf3+0x244>
  808e58:	28802d26 	beq	r5,r2,808f10 <__divdf3+0x190>
  808e5c:	d8c00617 	ldw	r3,24(sp)
  808e60:	d8800b17 	ldw	r2,44(sp)
  808e64:	d9c00817 	ldw	r7,32(sp)
  808e68:	dc400d17 	ldw	r17,52(sp)
  808e6c:	188bc83a 	sub	r5,r3,r2
  808e70:	d9800717 	ldw	r6,28(sp)
  808e74:	dc000c17 	ldw	r16,48(sp)
  808e78:	d9400615 	stw	r5,24(sp)
  808e7c:	3c403836 	bltu	r7,r17,808f60 <__divdf3+0x1e0>
  808e80:	89c03626 	beq	r17,r7,808f5c <__divdf3+0x1dc>
  808e84:	0015883a 	mov	r10,zero
  808e88:	001d883a 	mov	r14,zero
  808e8c:	02c40034 	movhi	r11,4096
  808e90:	001f883a 	mov	r15,zero
  808e94:	003f883a 	mov	ra,zero
  808e98:	04800f44 	movi	r18,61
  808e9c:	00000f06 	br	808edc <__divdf3+0x15c>
  808ea0:	601d883a 	mov	r14,r12
  808ea4:	681f883a 	mov	r15,r13
  808ea8:	400d883a 	mov	r6,r8
  808eac:	100f883a 	mov	r7,r2
  808eb0:	3191883a 	add	r8,r6,r6
  808eb4:	5808d07a 	srli	r4,r11,1
  808eb8:	4185803a 	cmpltu	r2,r8,r6
  808ebc:	39d3883a 	add	r9,r7,r7
  808ec0:	28c6b03a 	or	r3,r5,r3
  808ec4:	1245883a 	add	r2,r2,r9
  808ec8:	1815883a 	mov	r10,r3
  808ecc:	2017883a 	mov	r11,r4
  808ed0:	400d883a 	mov	r6,r8
  808ed4:	100f883a 	mov	r7,r2
  808ed8:	fc801726 	beq	ra,r18,808f38 <__divdf3+0x1b8>
  808edc:	580a97fa 	slli	r5,r11,31
  808ee0:	5006d07a 	srli	r3,r10,1
  808ee4:	ffc00044 	addi	ra,ra,1
  808ee8:	3c7ff136 	bltu	r7,r17,808eb0 <__divdf3+0x130>
  808eec:	3411c83a 	sub	r8,r6,r16
  808ef0:	3205803a 	cmpltu	r2,r6,r8
  808ef4:	3c53c83a 	sub	r9,r7,r17
  808ef8:	7298b03a 	or	r12,r14,r10
  808efc:	7adab03a 	or	r13,r15,r11
  808f00:	4885c83a 	sub	r2,r9,r2
  808f04:	89ffe61e 	bne	r17,r7,808ea0 <__divdf3+0x120>
  808f08:	343fe936 	bltu	r6,r16,808eb0 <__divdf3+0x130>
  808f0c:	003fe406 	br	808ea0 <__divdf3+0x120>
  808f10:	9809883a 	mov	r4,r19
  808f14:	d9800415 	stw	r6,16(sp)
  808f18:	080990c0 	call	80990c <__pack_d>
  808f1c:	dfc01217 	ldw	ra,72(sp)
  808f20:	dcc01117 	ldw	r19,68(sp)
  808f24:	dc801017 	ldw	r18,64(sp)
  808f28:	dc400f17 	ldw	r17,60(sp)
  808f2c:	dc000e17 	ldw	r16,56(sp)
  808f30:	dec01304 	addi	sp,sp,76
  808f34:	f800283a 	ret
  808f38:	00803fc4 	movi	r2,255
  808f3c:	7090703a 	and	r8,r14,r2
  808f40:	00802004 	movi	r2,128
  808f44:	0007883a 	mov	r3,zero
  808f48:	0013883a 	mov	r9,zero
  808f4c:	40800d26 	beq	r8,r2,808f84 <__divdf3+0x204>
  808f50:	dbc00815 	stw	r15,32(sp)
  808f54:	db800715 	stw	r14,28(sp)
  808f58:	003fab06 	br	808e08 <__divdf3+0x88>
  808f5c:	343fc92e 	bgeu	r6,r16,808e84 <__divdf3+0x104>
  808f60:	3185883a 	add	r2,r6,r6
  808f64:	1189803a 	cmpltu	r4,r2,r6
  808f68:	39c7883a 	add	r3,r7,r7
  808f6c:	20c9883a 	add	r4,r4,r3
  808f70:	297fffc4 	addi	r5,r5,-1
  808f74:	100d883a 	mov	r6,r2
  808f78:	200f883a 	mov	r7,r4
  808f7c:	d9400615 	stw	r5,24(sp)
  808f80:	003fc006 	br	808e84 <__divdf3+0x104>
  808f84:	483ff21e 	bne	r9,zero,808f50 <__divdf3+0x1d0>
  808f88:	01004004 	movi	r4,256
  808f8c:	7104703a 	and	r2,r14,r4
  808f90:	10c4b03a 	or	r2,r2,r3
  808f94:	103fee1e 	bne	r2,zero,808f50 <__divdf3+0x1d0>
  808f98:	31c4b03a 	or	r2,r6,r7
  808f9c:	103fec26 	beq	r2,zero,808f50 <__divdf3+0x1d0>
  808fa0:	7205883a 	add	r2,r14,r8
  808fa4:	1391803a 	cmpltu	r8,r2,r14
  808fa8:	43d1883a 	add	r8,r8,r15
  808fac:	013fc004 	movi	r4,-256
  808fb0:	111c703a 	and	r14,r2,r4
  808fb4:	401f883a 	mov	r15,r8
  808fb8:	003fe506 	br	808f50 <__divdf3+0x1d0>
  808fbc:	8009883a 	mov	r4,r16
  808fc0:	003f9206 	br	808e0c <__divdf3+0x8c>
  808fc4:	9809883a 	mov	r4,r19
  808fc8:	d8000715 	stw	zero,28(sp)
  808fcc:	d8000815 	stw	zero,32(sp)
  808fd0:	d8000615 	stw	zero,24(sp)
  808fd4:	003f8d06 	br	808e0c <__divdf3+0x8c>

00808fd8 <__eqdf2>:
  808fd8:	deffef04 	addi	sp,sp,-68
  808fdc:	dc400f15 	stw	r17,60(sp)
  808fe0:	dc400404 	addi	r17,sp,16
  808fe4:	2005883a 	mov	r2,r4
  808fe8:	2807883a 	mov	r3,r5
  808fec:	dc000e15 	stw	r16,56(sp)
  808ff0:	d809883a 	mov	r4,sp
  808ff4:	880b883a 	mov	r5,r17
  808ff8:	dc000904 	addi	r16,sp,36
  808ffc:	d8c00115 	stw	r3,4(sp)
  809000:	d8800015 	stw	r2,0(sp)
  809004:	d9800215 	stw	r6,8(sp)
  809008:	dfc01015 	stw	ra,64(sp)
  80900c:	d9c00315 	stw	r7,12(sp)
  809010:	0809c200 	call	809c20 <__unpack_d>
  809014:	d9000204 	addi	r4,sp,8
  809018:	800b883a 	mov	r5,r16
  80901c:	0809c200 	call	809c20 <__unpack_d>
  809020:	d8800417 	ldw	r2,16(sp)
  809024:	00c00044 	movi	r3,1
  809028:	180d883a 	mov	r6,r3
  80902c:	1880062e 	bgeu	r3,r2,809048 <__eqdf2+0x70>
  809030:	d8800917 	ldw	r2,36(sp)
  809034:	8809883a 	mov	r4,r17
  809038:	800b883a 	mov	r5,r16
  80903c:	1880022e 	bgeu	r3,r2,809048 <__eqdf2+0x70>
  809040:	0809d580 	call	809d58 <__fpcmp_parts_d>
  809044:	100d883a 	mov	r6,r2
  809048:	3005883a 	mov	r2,r6
  80904c:	dfc01017 	ldw	ra,64(sp)
  809050:	dc400f17 	ldw	r17,60(sp)
  809054:	dc000e17 	ldw	r16,56(sp)
  809058:	dec01104 	addi	sp,sp,68
  80905c:	f800283a 	ret

00809060 <__nedf2>:
  809060:	deffef04 	addi	sp,sp,-68
  809064:	dc400f15 	stw	r17,60(sp)
  809068:	dc400404 	addi	r17,sp,16
  80906c:	2005883a 	mov	r2,r4
  809070:	2807883a 	mov	r3,r5
  809074:	dc000e15 	stw	r16,56(sp)
  809078:	d809883a 	mov	r4,sp
  80907c:	880b883a 	mov	r5,r17
  809080:	dc000904 	addi	r16,sp,36
  809084:	d8c00115 	stw	r3,4(sp)
  809088:	d8800015 	stw	r2,0(sp)
  80908c:	d9800215 	stw	r6,8(sp)
  809090:	dfc01015 	stw	ra,64(sp)
  809094:	d9c00315 	stw	r7,12(sp)
  809098:	0809c200 	call	809c20 <__unpack_d>
  80909c:	d9000204 	addi	r4,sp,8
  8090a0:	800b883a 	mov	r5,r16
  8090a4:	0809c200 	call	809c20 <__unpack_d>
  8090a8:	d8800417 	ldw	r2,16(sp)
  8090ac:	00c00044 	movi	r3,1
  8090b0:	180d883a 	mov	r6,r3
  8090b4:	1880062e 	bgeu	r3,r2,8090d0 <__nedf2+0x70>
  8090b8:	d8800917 	ldw	r2,36(sp)
  8090bc:	8809883a 	mov	r4,r17
  8090c0:	800b883a 	mov	r5,r16
  8090c4:	1880022e 	bgeu	r3,r2,8090d0 <__nedf2+0x70>
  8090c8:	0809d580 	call	809d58 <__fpcmp_parts_d>
  8090cc:	100d883a 	mov	r6,r2
  8090d0:	3005883a 	mov	r2,r6
  8090d4:	dfc01017 	ldw	ra,64(sp)
  8090d8:	dc400f17 	ldw	r17,60(sp)
  8090dc:	dc000e17 	ldw	r16,56(sp)
  8090e0:	dec01104 	addi	sp,sp,68
  8090e4:	f800283a 	ret

008090e8 <__gtdf2>:
  8090e8:	deffef04 	addi	sp,sp,-68
  8090ec:	dc400f15 	stw	r17,60(sp)
  8090f0:	dc400404 	addi	r17,sp,16
  8090f4:	2005883a 	mov	r2,r4
  8090f8:	2807883a 	mov	r3,r5
  8090fc:	dc000e15 	stw	r16,56(sp)
  809100:	d809883a 	mov	r4,sp
  809104:	880b883a 	mov	r5,r17
  809108:	dc000904 	addi	r16,sp,36
  80910c:	d8c00115 	stw	r3,4(sp)
  809110:	d8800015 	stw	r2,0(sp)
  809114:	d9800215 	stw	r6,8(sp)
  809118:	dfc01015 	stw	ra,64(sp)
  80911c:	d9c00315 	stw	r7,12(sp)
  809120:	0809c200 	call	809c20 <__unpack_d>
  809124:	d9000204 	addi	r4,sp,8
  809128:	800b883a 	mov	r5,r16
  80912c:	0809c200 	call	809c20 <__unpack_d>
  809130:	d8800417 	ldw	r2,16(sp)
  809134:	00c00044 	movi	r3,1
  809138:	01bfffc4 	movi	r6,-1
  80913c:	1880062e 	bgeu	r3,r2,809158 <__gtdf2+0x70>
  809140:	d8800917 	ldw	r2,36(sp)
  809144:	8809883a 	mov	r4,r17
  809148:	800b883a 	mov	r5,r16
  80914c:	1880022e 	bgeu	r3,r2,809158 <__gtdf2+0x70>
  809150:	0809d580 	call	809d58 <__fpcmp_parts_d>
  809154:	100d883a 	mov	r6,r2
  809158:	3005883a 	mov	r2,r6
  80915c:	dfc01017 	ldw	ra,64(sp)
  809160:	dc400f17 	ldw	r17,60(sp)
  809164:	dc000e17 	ldw	r16,56(sp)
  809168:	dec01104 	addi	sp,sp,68
  80916c:	f800283a 	ret

00809170 <__gedf2>:
  809170:	deffef04 	addi	sp,sp,-68
  809174:	dc400f15 	stw	r17,60(sp)
  809178:	dc400404 	addi	r17,sp,16
  80917c:	2005883a 	mov	r2,r4
  809180:	2807883a 	mov	r3,r5
  809184:	dc000e15 	stw	r16,56(sp)
  809188:	d809883a 	mov	r4,sp
  80918c:	880b883a 	mov	r5,r17
  809190:	dc000904 	addi	r16,sp,36
  809194:	d8c00115 	stw	r3,4(sp)
  809198:	d8800015 	stw	r2,0(sp)
  80919c:	d9800215 	stw	r6,8(sp)
  8091a0:	dfc01015 	stw	ra,64(sp)
  8091a4:	d9c00315 	stw	r7,12(sp)
  8091a8:	0809c200 	call	809c20 <__unpack_d>
  8091ac:	d9000204 	addi	r4,sp,8
  8091b0:	800b883a 	mov	r5,r16
  8091b4:	0809c200 	call	809c20 <__unpack_d>
  8091b8:	d8800417 	ldw	r2,16(sp)
  8091bc:	00c00044 	movi	r3,1
  8091c0:	01bfffc4 	movi	r6,-1
  8091c4:	1880062e 	bgeu	r3,r2,8091e0 <__gedf2+0x70>
  8091c8:	d8800917 	ldw	r2,36(sp)
  8091cc:	8809883a 	mov	r4,r17
  8091d0:	800b883a 	mov	r5,r16
  8091d4:	1880022e 	bgeu	r3,r2,8091e0 <__gedf2+0x70>
  8091d8:	0809d580 	call	809d58 <__fpcmp_parts_d>
  8091dc:	100d883a 	mov	r6,r2
  8091e0:	3005883a 	mov	r2,r6
  8091e4:	dfc01017 	ldw	ra,64(sp)
  8091e8:	dc400f17 	ldw	r17,60(sp)
  8091ec:	dc000e17 	ldw	r16,56(sp)
  8091f0:	dec01104 	addi	sp,sp,68
  8091f4:	f800283a 	ret

008091f8 <__ltdf2>:
  8091f8:	deffef04 	addi	sp,sp,-68
  8091fc:	dc400f15 	stw	r17,60(sp)
  809200:	dc400404 	addi	r17,sp,16
  809204:	2005883a 	mov	r2,r4
  809208:	2807883a 	mov	r3,r5
  80920c:	dc000e15 	stw	r16,56(sp)
  809210:	d809883a 	mov	r4,sp
  809214:	880b883a 	mov	r5,r17
  809218:	dc000904 	addi	r16,sp,36
  80921c:	d8c00115 	stw	r3,4(sp)
  809220:	d8800015 	stw	r2,0(sp)
  809224:	d9800215 	stw	r6,8(sp)
  809228:	dfc01015 	stw	ra,64(sp)
  80922c:	d9c00315 	stw	r7,12(sp)
  809230:	0809c200 	call	809c20 <__unpack_d>
  809234:	d9000204 	addi	r4,sp,8
  809238:	800b883a 	mov	r5,r16
  80923c:	0809c200 	call	809c20 <__unpack_d>
  809240:	d8800417 	ldw	r2,16(sp)
  809244:	00c00044 	movi	r3,1
  809248:	180d883a 	mov	r6,r3
  80924c:	1880062e 	bgeu	r3,r2,809268 <__ltdf2+0x70>
  809250:	d8800917 	ldw	r2,36(sp)
  809254:	8809883a 	mov	r4,r17
  809258:	800b883a 	mov	r5,r16
  80925c:	1880022e 	bgeu	r3,r2,809268 <__ltdf2+0x70>
  809260:	0809d580 	call	809d58 <__fpcmp_parts_d>
  809264:	100d883a 	mov	r6,r2
  809268:	3005883a 	mov	r2,r6
  80926c:	dfc01017 	ldw	ra,64(sp)
  809270:	dc400f17 	ldw	r17,60(sp)
  809274:	dc000e17 	ldw	r16,56(sp)
  809278:	dec01104 	addi	sp,sp,68
  80927c:	f800283a 	ret

00809280 <__floatsidf>:
  809280:	2006d7fa 	srli	r3,r4,31
  809284:	defff604 	addi	sp,sp,-40
  809288:	008000c4 	movi	r2,3
  80928c:	dfc00915 	stw	ra,36(sp)
  809290:	dcc00815 	stw	r19,32(sp)
  809294:	dc800715 	stw	r18,28(sp)
  809298:	dc400615 	stw	r17,24(sp)
  80929c:	dc000515 	stw	r16,20(sp)
  8092a0:	d8800015 	stw	r2,0(sp)
  8092a4:	d8c00115 	stw	r3,4(sp)
  8092a8:	20000f1e 	bne	r4,zero,8092e8 <__floatsidf+0x68>
  8092ac:	00800084 	movi	r2,2
  8092b0:	d8800015 	stw	r2,0(sp)
  8092b4:	d809883a 	mov	r4,sp
  8092b8:	080990c0 	call	80990c <__pack_d>
  8092bc:	1009883a 	mov	r4,r2
  8092c0:	180b883a 	mov	r5,r3
  8092c4:	2005883a 	mov	r2,r4
  8092c8:	2807883a 	mov	r3,r5
  8092cc:	dfc00917 	ldw	ra,36(sp)
  8092d0:	dcc00817 	ldw	r19,32(sp)
  8092d4:	dc800717 	ldw	r18,28(sp)
  8092d8:	dc400617 	ldw	r17,24(sp)
  8092dc:	dc000517 	ldw	r16,20(sp)
  8092e0:	dec00a04 	addi	sp,sp,40
  8092e4:	f800283a 	ret
  8092e8:	00800f04 	movi	r2,60
  8092ec:	1807003a 	cmpeq	r3,r3,zero
  8092f0:	d8800215 	stw	r2,8(sp)
  8092f4:	18001126 	beq	r3,zero,80933c <__floatsidf+0xbc>
  8092f8:	0027883a 	mov	r19,zero
  8092fc:	2025883a 	mov	r18,r4
  809300:	d9000315 	stw	r4,12(sp)
  809304:	dcc00415 	stw	r19,16(sp)
  809308:	080988c0 	call	80988c <__clzsi2>
  80930c:	11000744 	addi	r4,r2,29
  809310:	013fe80e 	bge	zero,r4,8092b4 <__floatsidf+0x34>
  809314:	10bfff44 	addi	r2,r2,-3
  809318:	10000c16 	blt	r2,zero,80934c <__floatsidf+0xcc>
  80931c:	90a2983a 	sll	r17,r18,r2
  809320:	0021883a 	mov	r16,zero
  809324:	d8800217 	ldw	r2,8(sp)
  809328:	dc400415 	stw	r17,16(sp)
  80932c:	dc000315 	stw	r16,12(sp)
  809330:	1105c83a 	sub	r2,r2,r4
  809334:	d8800215 	stw	r2,8(sp)
  809338:	003fde06 	br	8092b4 <__floatsidf+0x34>
  80933c:	00a00034 	movhi	r2,32768
  809340:	20800a26 	beq	r4,r2,80936c <__floatsidf+0xec>
  809344:	0109c83a 	sub	r4,zero,r4
  809348:	003feb06 	br	8092f8 <__floatsidf+0x78>
  80934c:	9006d07a 	srli	r3,r18,1
  809350:	008007c4 	movi	r2,31
  809354:	1105c83a 	sub	r2,r2,r4
  809358:	1886d83a 	srl	r3,r3,r2
  80935c:	9922983a 	sll	r17,r19,r4
  809360:	9120983a 	sll	r16,r18,r4
  809364:	1c62b03a 	or	r17,r3,r17
  809368:	003fee06 	br	809324 <__floatsidf+0xa4>
  80936c:	0009883a 	mov	r4,zero
  809370:	01707834 	movhi	r5,49632
  809374:	003fd306 	br	8092c4 <__floatsidf+0x44>

00809378 <__fixdfsi>:
  809378:	defff804 	addi	sp,sp,-32
  80937c:	2005883a 	mov	r2,r4
  809380:	2807883a 	mov	r3,r5
  809384:	d809883a 	mov	r4,sp
  809388:	d9400204 	addi	r5,sp,8
  80938c:	d8c00115 	stw	r3,4(sp)
  809390:	d8800015 	stw	r2,0(sp)
  809394:	dfc00715 	stw	ra,28(sp)
  809398:	0809c200 	call	809c20 <__unpack_d>
  80939c:	d8c00217 	ldw	r3,8(sp)
  8093a0:	00800084 	movi	r2,2
  8093a4:	1880051e 	bne	r3,r2,8093bc <__fixdfsi+0x44>
  8093a8:	0007883a 	mov	r3,zero
  8093ac:	1805883a 	mov	r2,r3
  8093b0:	dfc00717 	ldw	ra,28(sp)
  8093b4:	dec00804 	addi	sp,sp,32
  8093b8:	f800283a 	ret
  8093bc:	00800044 	movi	r2,1
  8093c0:	10fff92e 	bgeu	r2,r3,8093a8 <__fixdfsi+0x30>
  8093c4:	00800104 	movi	r2,4
  8093c8:	18800426 	beq	r3,r2,8093dc <__fixdfsi+0x64>
  8093cc:	d8c00417 	ldw	r3,16(sp)
  8093d0:	183ff516 	blt	r3,zero,8093a8 <__fixdfsi+0x30>
  8093d4:	00800784 	movi	r2,30
  8093d8:	10c0080e 	bge	r2,r3,8093fc <__fixdfsi+0x84>
  8093dc:	d8800317 	ldw	r2,12(sp)
  8093e0:	1000121e 	bne	r2,zero,80942c <__fixdfsi+0xb4>
  8093e4:	00e00034 	movhi	r3,32768
  8093e8:	18ffffc4 	addi	r3,r3,-1
  8093ec:	1805883a 	mov	r2,r3
  8093f0:	dfc00717 	ldw	ra,28(sp)
  8093f4:	dec00804 	addi	sp,sp,32
  8093f8:	f800283a 	ret
  8093fc:	00800f04 	movi	r2,60
  809400:	10d1c83a 	sub	r8,r2,r3
  809404:	40bff804 	addi	r2,r8,-32
  809408:	d9800517 	ldw	r6,20(sp)
  80940c:	d9c00617 	ldw	r7,24(sp)
  809410:	10000816 	blt	r2,zero,809434 <__fixdfsi+0xbc>
  809414:	3888d83a 	srl	r4,r7,r2
  809418:	d8800317 	ldw	r2,12(sp)
  80941c:	2007883a 	mov	r3,r4
  809420:	103fe226 	beq	r2,zero,8093ac <__fixdfsi+0x34>
  809424:	0107c83a 	sub	r3,zero,r4
  809428:	003fe006 	br	8093ac <__fixdfsi+0x34>
  80942c:	00e00034 	movhi	r3,32768
  809430:	003fde06 	br	8093ac <__fixdfsi+0x34>
  809434:	39c7883a 	add	r3,r7,r7
  809438:	008007c4 	movi	r2,31
  80943c:	1205c83a 	sub	r2,r2,r8
  809440:	1886983a 	sll	r3,r3,r2
  809444:	3208d83a 	srl	r4,r6,r8
  809448:	1908b03a 	or	r4,r3,r4
  80944c:	003ff206 	br	809418 <__fixdfsi+0xa0>

00809450 <__floatunsidf>:
  809450:	defff204 	addi	sp,sp,-56
  809454:	dfc00d15 	stw	ra,52(sp)
  809458:	ddc00c15 	stw	r23,48(sp)
  80945c:	dd800b15 	stw	r22,44(sp)
  809460:	dd400a15 	stw	r21,40(sp)
  809464:	dd000915 	stw	r20,36(sp)
  809468:	dcc00815 	stw	r19,32(sp)
  80946c:	dc800715 	stw	r18,28(sp)
  809470:	dc400615 	stw	r17,24(sp)
  809474:	dc000515 	stw	r16,20(sp)
  809478:	d8000115 	stw	zero,4(sp)
  80947c:	20000f1e 	bne	r4,zero,8094bc <__floatunsidf+0x6c>
  809480:	00800084 	movi	r2,2
  809484:	d8800015 	stw	r2,0(sp)
  809488:	d809883a 	mov	r4,sp
  80948c:	080990c0 	call	80990c <__pack_d>
  809490:	dfc00d17 	ldw	ra,52(sp)
  809494:	ddc00c17 	ldw	r23,48(sp)
  809498:	dd800b17 	ldw	r22,44(sp)
  80949c:	dd400a17 	ldw	r21,40(sp)
  8094a0:	dd000917 	ldw	r20,36(sp)
  8094a4:	dcc00817 	ldw	r19,32(sp)
  8094a8:	dc800717 	ldw	r18,28(sp)
  8094ac:	dc400617 	ldw	r17,24(sp)
  8094b0:	dc000517 	ldw	r16,20(sp)
  8094b4:	dec00e04 	addi	sp,sp,56
  8094b8:	f800283a 	ret
  8094bc:	008000c4 	movi	r2,3
  8094c0:	00c00f04 	movi	r3,60
  8094c4:	002f883a 	mov	r23,zero
  8094c8:	202d883a 	mov	r22,r4
  8094cc:	d8800015 	stw	r2,0(sp)
  8094d0:	d8c00215 	stw	r3,8(sp)
  8094d4:	d9000315 	stw	r4,12(sp)
  8094d8:	ddc00415 	stw	r23,16(sp)
  8094dc:	080988c0 	call	80988c <__clzsi2>
  8094e0:	12400744 	addi	r9,r2,29
  8094e4:	48000b16 	blt	r9,zero,809514 <__floatunsidf+0xc4>
  8094e8:	483fe726 	beq	r9,zero,809488 <__floatunsidf+0x38>
  8094ec:	10bfff44 	addi	r2,r2,-3
  8094f0:	10002e16 	blt	r2,zero,8095ac <__floatunsidf+0x15c>
  8094f4:	b0a2983a 	sll	r17,r22,r2
  8094f8:	0021883a 	mov	r16,zero
  8094fc:	d8800217 	ldw	r2,8(sp)
  809500:	dc400415 	stw	r17,16(sp)
  809504:	dc000315 	stw	r16,12(sp)
  809508:	1245c83a 	sub	r2,r2,r9
  80950c:	d8800215 	stw	r2,8(sp)
  809510:	003fdd06 	br	809488 <__floatunsidf+0x38>
  809514:	0255c83a 	sub	r10,zero,r9
  809518:	51bff804 	addi	r6,r10,-32
  80951c:	30001b16 	blt	r6,zero,80958c <__floatunsidf+0x13c>
  809520:	b9a8d83a 	srl	r20,r23,r6
  809524:	002b883a 	mov	r21,zero
  809528:	000f883a 	mov	r7,zero
  80952c:	01000044 	movi	r4,1
  809530:	0011883a 	mov	r8,zero
  809534:	30002516 	blt	r6,zero,8095cc <__floatunsidf+0x17c>
  809538:	21a6983a 	sll	r19,r4,r6
  80953c:	0025883a 	mov	r18,zero
  809540:	00bfffc4 	movi	r2,-1
  809544:	9089883a 	add	r4,r18,r2
  809548:	988b883a 	add	r5,r19,r2
  80954c:	248d803a 	cmpltu	r6,r4,r18
  809550:	314b883a 	add	r5,r6,r5
  809554:	b104703a 	and	r2,r22,r4
  809558:	b946703a 	and	r3,r23,r5
  80955c:	10c4b03a 	or	r2,r2,r3
  809560:	10000226 	beq	r2,zero,80956c <__floatunsidf+0x11c>
  809564:	01c00044 	movi	r7,1
  809568:	0011883a 	mov	r8,zero
  80956c:	d9000217 	ldw	r4,8(sp)
  809570:	a1c4b03a 	or	r2,r20,r7
  809574:	aa06b03a 	or	r3,r21,r8
  809578:	2249c83a 	sub	r4,r4,r9
  80957c:	d8c00415 	stw	r3,16(sp)
  809580:	d9000215 	stw	r4,8(sp)
  809584:	d8800315 	stw	r2,12(sp)
  809588:	003fbf06 	br	809488 <__floatunsidf+0x38>
  80958c:	bdc7883a 	add	r3,r23,r23
  809590:	008007c4 	movi	r2,31
  809594:	1285c83a 	sub	r2,r2,r10
  809598:	1886983a 	sll	r3,r3,r2
  80959c:	b2a8d83a 	srl	r20,r22,r10
  8095a0:	baaad83a 	srl	r21,r23,r10
  8095a4:	1d28b03a 	or	r20,r3,r20
  8095a8:	003fdf06 	br	809528 <__floatunsidf+0xd8>
  8095ac:	b006d07a 	srli	r3,r22,1
  8095b0:	008007c4 	movi	r2,31
  8095b4:	1245c83a 	sub	r2,r2,r9
  8095b8:	1886d83a 	srl	r3,r3,r2
  8095bc:	ba62983a 	sll	r17,r23,r9
  8095c0:	b260983a 	sll	r16,r22,r9
  8095c4:	1c62b03a 	or	r17,r3,r17
  8095c8:	003fcc06 	br	8094fc <__floatunsidf+0xac>
  8095cc:	2006d07a 	srli	r3,r4,1
  8095d0:	008007c4 	movi	r2,31
  8095d4:	1285c83a 	sub	r2,r2,r10
  8095d8:	18a6d83a 	srl	r19,r3,r2
  8095dc:	22a4983a 	sll	r18,r4,r10
  8095e0:	003fd706 	br	809540 <__floatunsidf+0xf0>

008095e4 <udivmodsi4>:
  8095e4:	29001b2e 	bgeu	r5,r4,809654 <udivmodsi4+0x70>
  8095e8:	28001a16 	blt	r5,zero,809654 <udivmodsi4+0x70>
  8095ec:	00800044 	movi	r2,1
  8095f0:	0007883a 	mov	r3,zero
  8095f4:	01c007c4 	movi	r7,31
  8095f8:	00000306 	br	809608 <udivmodsi4+0x24>
  8095fc:	19c01326 	beq	r3,r7,80964c <udivmodsi4+0x68>
  809600:	18c00044 	addi	r3,r3,1
  809604:	28000416 	blt	r5,zero,809618 <udivmodsi4+0x34>
  809608:	294b883a 	add	r5,r5,r5
  80960c:	1085883a 	add	r2,r2,r2
  809610:	293ffa36 	bltu	r5,r4,8095fc <udivmodsi4+0x18>
  809614:	10000d26 	beq	r2,zero,80964c <udivmodsi4+0x68>
  809618:	0007883a 	mov	r3,zero
  80961c:	21400236 	bltu	r4,r5,809628 <udivmodsi4+0x44>
  809620:	2149c83a 	sub	r4,r4,r5
  809624:	1886b03a 	or	r3,r3,r2
  809628:	1004d07a 	srli	r2,r2,1
  80962c:	280ad07a 	srli	r5,r5,1
  809630:	103ffa1e 	bne	r2,zero,80961c <udivmodsi4+0x38>
  809634:	30000226 	beq	r6,zero,809640 <udivmodsi4+0x5c>
  809638:	2005883a 	mov	r2,r4
  80963c:	f800283a 	ret
  809640:	1809883a 	mov	r4,r3
  809644:	2005883a 	mov	r2,r4
  809648:	f800283a 	ret
  80964c:	0007883a 	mov	r3,zero
  809650:	003ff806 	br	809634 <udivmodsi4+0x50>
  809654:	00800044 	movi	r2,1
  809658:	0007883a 	mov	r3,zero
  80965c:	003fef06 	br	80961c <udivmodsi4+0x38>

00809660 <__divsi3>:
  809660:	defffe04 	addi	sp,sp,-8
  809664:	dc000015 	stw	r16,0(sp)
  809668:	dfc00115 	stw	ra,4(sp)
  80966c:	0021883a 	mov	r16,zero
  809670:	20000c16 	blt	r4,zero,8096a4 <__divsi3+0x44>
  809674:	000d883a 	mov	r6,zero
  809678:	28000e16 	blt	r5,zero,8096b4 <__divsi3+0x54>
  80967c:	08095e40 	call	8095e4 <udivmodsi4>
  809680:	1007883a 	mov	r3,r2
  809684:	8005003a 	cmpeq	r2,r16,zero
  809688:	1000011e 	bne	r2,zero,809690 <__divsi3+0x30>
  80968c:	00c7c83a 	sub	r3,zero,r3
  809690:	1805883a 	mov	r2,r3
  809694:	dfc00117 	ldw	ra,4(sp)
  809698:	dc000017 	ldw	r16,0(sp)
  80969c:	dec00204 	addi	sp,sp,8
  8096a0:	f800283a 	ret
  8096a4:	0109c83a 	sub	r4,zero,r4
  8096a8:	04000044 	movi	r16,1
  8096ac:	000d883a 	mov	r6,zero
  8096b0:	283ff20e 	bge	r5,zero,80967c <__divsi3+0x1c>
  8096b4:	014bc83a 	sub	r5,zero,r5
  8096b8:	8021003a 	cmpeq	r16,r16,zero
  8096bc:	003fef06 	br	80967c <__divsi3+0x1c>

008096c0 <__modsi3>:
  8096c0:	deffff04 	addi	sp,sp,-4
  8096c4:	dfc00015 	stw	ra,0(sp)
  8096c8:	01800044 	movi	r6,1
  8096cc:	2807883a 	mov	r3,r5
  8096d0:	20000416 	blt	r4,zero,8096e4 <__modsi3+0x24>
  8096d4:	28000c16 	blt	r5,zero,809708 <__modsi3+0x48>
  8096d8:	dfc00017 	ldw	ra,0(sp)
  8096dc:	dec00104 	addi	sp,sp,4
  8096e0:	08095e41 	jmpi	8095e4 <udivmodsi4>
  8096e4:	0109c83a 	sub	r4,zero,r4
  8096e8:	28000b16 	blt	r5,zero,809718 <__modsi3+0x58>
  8096ec:	180b883a 	mov	r5,r3
  8096f0:	01800044 	movi	r6,1
  8096f4:	08095e40 	call	8095e4 <udivmodsi4>
  8096f8:	0085c83a 	sub	r2,zero,r2
  8096fc:	dfc00017 	ldw	ra,0(sp)
  809700:	dec00104 	addi	sp,sp,4
  809704:	f800283a 	ret
  809708:	014bc83a 	sub	r5,zero,r5
  80970c:	dfc00017 	ldw	ra,0(sp)
  809710:	dec00104 	addi	sp,sp,4
  809714:	08095e41 	jmpi	8095e4 <udivmodsi4>
  809718:	0147c83a 	sub	r3,zero,r5
  80971c:	003ff306 	br	8096ec <__modsi3+0x2c>

00809720 <__udivsi3>:
  809720:	000d883a 	mov	r6,zero
  809724:	08095e41 	jmpi	8095e4 <udivmodsi4>

00809728 <__umodsi3>:
  809728:	01800044 	movi	r6,1
  80972c:	08095e41 	jmpi	8095e4 <udivmodsi4>

00809730 <__mulsi3>:
  809730:	20000a26 	beq	r4,zero,80975c <__mulsi3+0x2c>
  809734:	0007883a 	mov	r3,zero
  809738:	2080004c 	andi	r2,r4,1
  80973c:	1005003a 	cmpeq	r2,r2,zero
  809740:	2008d07a 	srli	r4,r4,1
  809744:	1000011e 	bne	r2,zero,80974c <__mulsi3+0x1c>
  809748:	1947883a 	add	r3,r3,r5
  80974c:	294b883a 	add	r5,r5,r5
  809750:	203ff91e 	bne	r4,zero,809738 <__mulsi3+0x8>
  809754:	1805883a 	mov	r2,r3
  809758:	f800283a 	ret
  80975c:	0007883a 	mov	r3,zero
  809760:	1805883a 	mov	r2,r3
  809764:	f800283a 	ret

00809768 <__muldi3>:
  809768:	defff204 	addi	sp,sp,-56
  80976c:	df000c15 	stw	fp,48(sp)
  809770:	3038d43a 	srli	fp,r6,16
  809774:	dd000815 	stw	r20,32(sp)
  809778:	dc400515 	stw	r17,20(sp)
  80977c:	2028d43a 	srli	r20,r4,16
  809780:	247fffcc 	andi	r17,r4,65535
  809784:	dc000415 	stw	r16,16(sp)
  809788:	343fffcc 	andi	r16,r6,65535
  80978c:	dcc00715 	stw	r19,28(sp)
  809790:	d9000015 	stw	r4,0(sp)
  809794:	2827883a 	mov	r19,r5
  809798:	8809883a 	mov	r4,r17
  80979c:	d9400115 	stw	r5,4(sp)
  8097a0:	800b883a 	mov	r5,r16
  8097a4:	d9800215 	stw	r6,8(sp)
  8097a8:	dfc00d15 	stw	ra,52(sp)
  8097ac:	d9c00315 	stw	r7,12(sp)
  8097b0:	dd800a15 	stw	r22,40(sp)
  8097b4:	dd400915 	stw	r21,36(sp)
  8097b8:	302d883a 	mov	r22,r6
  8097bc:	ddc00b15 	stw	r23,44(sp)
  8097c0:	dc800615 	stw	r18,24(sp)
  8097c4:	08097300 	call	809730 <__mulsi3>
  8097c8:	8809883a 	mov	r4,r17
  8097cc:	e00b883a 	mov	r5,fp
  8097d0:	102b883a 	mov	r21,r2
  8097d4:	08097300 	call	809730 <__mulsi3>
  8097d8:	800b883a 	mov	r5,r16
  8097dc:	a009883a 	mov	r4,r20
  8097e0:	1023883a 	mov	r17,r2
  8097e4:	08097300 	call	809730 <__mulsi3>
  8097e8:	a009883a 	mov	r4,r20
  8097ec:	e00b883a 	mov	r5,fp
  8097f0:	1021883a 	mov	r16,r2
  8097f4:	08097300 	call	809730 <__mulsi3>
  8097f8:	a8ffffcc 	andi	r3,r21,65535
  8097fc:	a82ad43a 	srli	r21,r21,16
  809800:	8c23883a 	add	r17,r17,r16
  809804:	1011883a 	mov	r8,r2
  809808:	ac6b883a 	add	r21,r21,r17
  80980c:	a804943a 	slli	r2,r21,16
  809810:	b009883a 	mov	r4,r22
  809814:	980b883a 	mov	r5,r19
  809818:	10c7883a 	add	r3,r2,r3
  80981c:	a812d43a 	srli	r9,r21,16
  809820:	180d883a 	mov	r6,r3
  809824:	ac00022e 	bgeu	r21,r16,809830 <__muldi3+0xc8>
  809828:	00800074 	movhi	r2,1
  80982c:	4091883a 	add	r8,r8,r2
  809830:	4267883a 	add	r19,r8,r9
  809834:	302d883a 	mov	r22,r6
  809838:	08097300 	call	809730 <__mulsi3>
  80983c:	d9400317 	ldw	r5,12(sp)
  809840:	d9000017 	ldw	r4,0(sp)
  809844:	1023883a 	mov	r17,r2
  809848:	08097300 	call	809730 <__mulsi3>
  80984c:	14cb883a 	add	r5,r2,r19
  809850:	894b883a 	add	r5,r17,r5
  809854:	b005883a 	mov	r2,r22
  809858:	2807883a 	mov	r3,r5
  80985c:	dfc00d17 	ldw	ra,52(sp)
  809860:	df000c17 	ldw	fp,48(sp)
  809864:	ddc00b17 	ldw	r23,44(sp)
  809868:	dd800a17 	ldw	r22,40(sp)
  80986c:	dd400917 	ldw	r21,36(sp)
  809870:	dd000817 	ldw	r20,32(sp)
  809874:	dcc00717 	ldw	r19,28(sp)
  809878:	dc800617 	ldw	r18,24(sp)
  80987c:	dc400517 	ldw	r17,20(sp)
  809880:	dc000417 	ldw	r16,16(sp)
  809884:	dec00e04 	addi	sp,sp,56
  809888:	f800283a 	ret

0080988c <__clzsi2>:
  80988c:	00bfffd4 	movui	r2,65535
  809890:	11000e36 	bltu	r2,r4,8098cc <__clzsi2+0x40>
  809894:	00803fc4 	movi	r2,255
  809898:	01400204 	movi	r5,8
  80989c:	0007883a 	mov	r3,zero
  8098a0:	11001036 	bltu	r2,r4,8098e4 <__clzsi2+0x58>
  8098a4:	000b883a 	mov	r5,zero
  8098a8:	20c6d83a 	srl	r3,r4,r3
  8098ac:	00802074 	movhi	r2,129
  8098b0:	10b2e804 	addi	r2,r2,-13408
  8098b4:	1887883a 	add	r3,r3,r2
  8098b8:	18800003 	ldbu	r2,0(r3)
  8098bc:	00c00804 	movi	r3,32
  8098c0:	2885883a 	add	r2,r5,r2
  8098c4:	1885c83a 	sub	r2,r3,r2
  8098c8:	f800283a 	ret
  8098cc:	01400404 	movi	r5,16
  8098d0:	00804034 	movhi	r2,256
  8098d4:	10bfffc4 	addi	r2,r2,-1
  8098d8:	2807883a 	mov	r3,r5
  8098dc:	113ff22e 	bgeu	r2,r4,8098a8 <__clzsi2+0x1c>
  8098e0:	01400604 	movi	r5,24
  8098e4:	2807883a 	mov	r3,r5
  8098e8:	20c6d83a 	srl	r3,r4,r3
  8098ec:	00802074 	movhi	r2,129
  8098f0:	10b2e804 	addi	r2,r2,-13408
  8098f4:	1887883a 	add	r3,r3,r2
  8098f8:	18800003 	ldbu	r2,0(r3)
  8098fc:	00c00804 	movi	r3,32
  809900:	2885883a 	add	r2,r5,r2
  809904:	1885c83a 	sub	r2,r3,r2
  809908:	f800283a 	ret

0080990c <__pack_d>:
  80990c:	20c00017 	ldw	r3,0(r4)
  809910:	defffd04 	addi	sp,sp,-12
  809914:	dc000015 	stw	r16,0(sp)
  809918:	dc800215 	stw	r18,8(sp)
  80991c:	dc400115 	stw	r17,4(sp)
  809920:	00800044 	movi	r2,1
  809924:	22000317 	ldw	r8,12(r4)
  809928:	001f883a 	mov	r15,zero
  80992c:	22400417 	ldw	r9,16(r4)
  809930:	24000117 	ldw	r16,4(r4)
  809934:	10c0552e 	bgeu	r2,r3,809a8c <__pack_d+0x180>
  809938:	00800104 	movi	r2,4
  80993c:	18804f26 	beq	r3,r2,809a7c <__pack_d+0x170>
  809940:	00800084 	movi	r2,2
  809944:	18800226 	beq	r3,r2,809950 <__pack_d+0x44>
  809948:	4244b03a 	or	r2,r8,r9
  80994c:	10001a1e 	bne	r2,zero,8099b8 <__pack_d+0xac>
  809950:	000d883a 	mov	r6,zero
  809954:	000f883a 	mov	r7,zero
  809958:	0011883a 	mov	r8,zero
  80995c:	00800434 	movhi	r2,16
  809960:	10bfffc4 	addi	r2,r2,-1
  809964:	301d883a 	mov	r14,r6
  809968:	3884703a 	and	r2,r7,r2
  80996c:	400a953a 	slli	r5,r8,20
  809970:	79bffc2c 	andhi	r6,r15,65520
  809974:	308cb03a 	or	r6,r6,r2
  809978:	00e00434 	movhi	r3,32784
  80997c:	18ffffc4 	addi	r3,r3,-1
  809980:	800497fa 	slli	r2,r16,31
  809984:	30c6703a 	and	r3,r6,r3
  809988:	1946b03a 	or	r3,r3,r5
  80998c:	01600034 	movhi	r5,32768
  809990:	297fffc4 	addi	r5,r5,-1
  809994:	194a703a 	and	r5,r3,r5
  809998:	288ab03a 	or	r5,r5,r2
  80999c:	2807883a 	mov	r3,r5
  8099a0:	7005883a 	mov	r2,r14
  8099a4:	dc800217 	ldw	r18,8(sp)
  8099a8:	dc400117 	ldw	r17,4(sp)
  8099ac:	dc000017 	ldw	r16,0(sp)
  8099b0:	dec00304 	addi	sp,sp,12
  8099b4:	f800283a 	ret
  8099b8:	21000217 	ldw	r4,8(r4)
  8099bc:	00bf0084 	movi	r2,-1022
  8099c0:	20803f16 	blt	r4,r2,809ac0 <__pack_d+0x1b4>
  8099c4:	0080ffc4 	movi	r2,1023
  8099c8:	11002c16 	blt	r2,r4,809a7c <__pack_d+0x170>
  8099cc:	00803fc4 	movi	r2,255
  8099d0:	408c703a 	and	r6,r8,r2
  8099d4:	00802004 	movi	r2,128
  8099d8:	0007883a 	mov	r3,zero
  8099dc:	000f883a 	mov	r7,zero
  8099e0:	2280ffc4 	addi	r10,r4,1023
  8099e4:	30801e26 	beq	r6,r2,809a60 <__pack_d+0x154>
  8099e8:	00801fc4 	movi	r2,127
  8099ec:	4089883a 	add	r4,r8,r2
  8099f0:	220d803a 	cmpltu	r6,r4,r8
  8099f4:	324d883a 	add	r6,r6,r9
  8099f8:	2011883a 	mov	r8,r4
  8099fc:	3013883a 	mov	r9,r6
  809a00:	00880034 	movhi	r2,8192
  809a04:	10bfffc4 	addi	r2,r2,-1
  809a08:	12400d36 	bltu	r2,r9,809a40 <__pack_d+0x134>
  809a0c:	4804963a 	slli	r2,r9,24
  809a10:	400cd23a 	srli	r6,r8,8
  809a14:	480ed23a 	srli	r7,r9,8
  809a18:	013fffc4 	movi	r4,-1
  809a1c:	118cb03a 	or	r6,r2,r6
  809a20:	01400434 	movhi	r5,16
  809a24:	297fffc4 	addi	r5,r5,-1
  809a28:	3104703a 	and	r2,r6,r4
  809a2c:	3946703a 	and	r3,r7,r5
  809a30:	5201ffcc 	andi	r8,r10,2047
  809a34:	100d883a 	mov	r6,r2
  809a38:	180f883a 	mov	r7,r3
  809a3c:	003fc706 	br	80995c <__pack_d+0x50>
  809a40:	480897fa 	slli	r4,r9,31
  809a44:	4004d07a 	srli	r2,r8,1
  809a48:	4806d07a 	srli	r3,r9,1
  809a4c:	52800044 	addi	r10,r10,1
  809a50:	2084b03a 	or	r2,r4,r2
  809a54:	1011883a 	mov	r8,r2
  809a58:	1813883a 	mov	r9,r3
  809a5c:	003feb06 	br	809a0c <__pack_d+0x100>
  809a60:	383fe11e 	bne	r7,zero,8099e8 <__pack_d+0xdc>
  809a64:	01004004 	movi	r4,256
  809a68:	4104703a 	and	r2,r8,r4
  809a6c:	10c4b03a 	or	r2,r2,r3
  809a70:	103fe326 	beq	r2,zero,809a00 <__pack_d+0xf4>
  809a74:	3005883a 	mov	r2,r6
  809a78:	003fdc06 	br	8099ec <__pack_d+0xe0>
  809a7c:	000d883a 	mov	r6,zero
  809a80:	000f883a 	mov	r7,zero
  809a84:	0201ffc4 	movi	r8,2047
  809a88:	003fb406 	br	80995c <__pack_d+0x50>
  809a8c:	0005883a 	mov	r2,zero
  809a90:	00c00234 	movhi	r3,8
  809a94:	408cb03a 	or	r6,r8,r2
  809a98:	48ceb03a 	or	r7,r9,r3
  809a9c:	013fffc4 	movi	r4,-1
  809aa0:	01400434 	movhi	r5,16
  809aa4:	297fffc4 	addi	r5,r5,-1
  809aa8:	3104703a 	and	r2,r6,r4
  809aac:	3946703a 	and	r3,r7,r5
  809ab0:	100d883a 	mov	r6,r2
  809ab4:	180f883a 	mov	r7,r3
  809ab8:	0201ffc4 	movi	r8,2047
  809abc:	003fa706 	br	80995c <__pack_d+0x50>
  809ac0:	1109c83a 	sub	r4,r2,r4
  809ac4:	00800e04 	movi	r2,56
  809ac8:	11004316 	blt	r2,r4,809bd8 <__pack_d+0x2cc>
  809acc:	21fff804 	addi	r7,r4,-32
  809ad0:	38004516 	blt	r7,zero,809be8 <__pack_d+0x2dc>
  809ad4:	49d8d83a 	srl	r12,r9,r7
  809ad8:	001b883a 	mov	r13,zero
  809adc:	0023883a 	mov	r17,zero
  809ae0:	01400044 	movi	r5,1
  809ae4:	0025883a 	mov	r18,zero
  809ae8:	38004716 	blt	r7,zero,809c08 <__pack_d+0x2fc>
  809aec:	29d6983a 	sll	r11,r5,r7
  809af0:	0015883a 	mov	r10,zero
  809af4:	00bfffc4 	movi	r2,-1
  809af8:	5089883a 	add	r4,r10,r2
  809afc:	588b883a 	add	r5,r11,r2
  809b00:	228d803a 	cmpltu	r6,r4,r10
  809b04:	314b883a 	add	r5,r6,r5
  809b08:	4104703a 	and	r2,r8,r4
  809b0c:	4946703a 	and	r3,r9,r5
  809b10:	10c4b03a 	or	r2,r2,r3
  809b14:	10000226 	beq	r2,zero,809b20 <__pack_d+0x214>
  809b18:	04400044 	movi	r17,1
  809b1c:	0025883a 	mov	r18,zero
  809b20:	00803fc4 	movi	r2,255
  809b24:	644eb03a 	or	r7,r12,r17
  809b28:	3892703a 	and	r9,r7,r2
  809b2c:	00802004 	movi	r2,128
  809b30:	6c90b03a 	or	r8,r13,r18
  809b34:	0015883a 	mov	r10,zero
  809b38:	48801626 	beq	r9,r2,809b94 <__pack_d+0x288>
  809b3c:	01001fc4 	movi	r4,127
  809b40:	3905883a 	add	r2,r7,r4
  809b44:	11cd803a 	cmpltu	r6,r2,r7
  809b48:	320d883a 	add	r6,r6,r8
  809b4c:	100f883a 	mov	r7,r2
  809b50:	00840034 	movhi	r2,4096
  809b54:	10bfffc4 	addi	r2,r2,-1
  809b58:	3011883a 	mov	r8,r6
  809b5c:	0007883a 	mov	r3,zero
  809b60:	11801b36 	bltu	r2,r6,809bd0 <__pack_d+0x2c4>
  809b64:	4004963a 	slli	r2,r8,24
  809b68:	3808d23a 	srli	r4,r7,8
  809b6c:	400ad23a 	srli	r5,r8,8
  809b70:	1813883a 	mov	r9,r3
  809b74:	1108b03a 	or	r4,r2,r4
  809b78:	00bfffc4 	movi	r2,-1
  809b7c:	00c00434 	movhi	r3,16
  809b80:	18ffffc4 	addi	r3,r3,-1
  809b84:	208c703a 	and	r6,r4,r2
  809b88:	28ce703a 	and	r7,r5,r3
  809b8c:	4a01ffcc 	andi	r8,r9,2047
  809b90:	003f7206 	br	80995c <__pack_d+0x50>
  809b94:	503fe91e 	bne	r10,zero,809b3c <__pack_d+0x230>
  809b98:	01004004 	movi	r4,256
  809b9c:	3904703a 	and	r2,r7,r4
  809ba0:	0007883a 	mov	r3,zero
  809ba4:	10c4b03a 	or	r2,r2,r3
  809ba8:	10000626 	beq	r2,zero,809bc4 <__pack_d+0x2b8>
  809bac:	3a45883a 	add	r2,r7,r9
  809bb0:	11cd803a 	cmpltu	r6,r2,r7
  809bb4:	320d883a 	add	r6,r6,r8
  809bb8:	100f883a 	mov	r7,r2
  809bbc:	3011883a 	mov	r8,r6
  809bc0:	0007883a 	mov	r3,zero
  809bc4:	00840034 	movhi	r2,4096
  809bc8:	10bfffc4 	addi	r2,r2,-1
  809bcc:	123fe52e 	bgeu	r2,r8,809b64 <__pack_d+0x258>
  809bd0:	00c00044 	movi	r3,1
  809bd4:	003fe306 	br	809b64 <__pack_d+0x258>
  809bd8:	0009883a 	mov	r4,zero
  809bdc:	0013883a 	mov	r9,zero
  809be0:	000b883a 	mov	r5,zero
  809be4:	003fe406 	br	809b78 <__pack_d+0x26c>
  809be8:	4a47883a 	add	r3,r9,r9
  809bec:	008007c4 	movi	r2,31
  809bf0:	1105c83a 	sub	r2,r2,r4
  809bf4:	1886983a 	sll	r3,r3,r2
  809bf8:	4118d83a 	srl	r12,r8,r4
  809bfc:	491ad83a 	srl	r13,r9,r4
  809c00:	1b18b03a 	or	r12,r3,r12
  809c04:	003fb506 	br	809adc <__pack_d+0x1d0>
  809c08:	2806d07a 	srli	r3,r5,1
  809c0c:	008007c4 	movi	r2,31
  809c10:	1105c83a 	sub	r2,r2,r4
  809c14:	1896d83a 	srl	r11,r3,r2
  809c18:	2914983a 	sll	r10,r5,r4
  809c1c:	003fb506 	br	809af4 <__pack_d+0x1e8>

00809c20 <__unpack_d>:
  809c20:	20c00117 	ldw	r3,4(r4)
  809c24:	22400017 	ldw	r9,0(r4)
  809c28:	00800434 	movhi	r2,16
  809c2c:	10bfffc4 	addi	r2,r2,-1
  809c30:	1808d53a 	srli	r4,r3,20
  809c34:	180cd7fa 	srli	r6,r3,31
  809c38:	1894703a 	and	r10,r3,r2
  809c3c:	2201ffcc 	andi	r8,r4,2047
  809c40:	281b883a 	mov	r13,r5
  809c44:	4817883a 	mov	r11,r9
  809c48:	29800115 	stw	r6,4(r5)
  809c4c:	5019883a 	mov	r12,r10
  809c50:	40001e1e 	bne	r8,zero,809ccc <__unpack_d+0xac>
  809c54:	4a84b03a 	or	r2,r9,r10
  809c58:	10001926 	beq	r2,zero,809cc0 <__unpack_d+0xa0>
  809c5c:	4804d63a 	srli	r2,r9,24
  809c60:	500c923a 	slli	r6,r10,8
  809c64:	013f0084 	movi	r4,-1022
  809c68:	00c40034 	movhi	r3,4096
  809c6c:	18ffffc4 	addi	r3,r3,-1
  809c70:	118cb03a 	or	r6,r2,r6
  809c74:	008000c4 	movi	r2,3
  809c78:	480a923a 	slli	r5,r9,8
  809c7c:	68800015 	stw	r2,0(r13)
  809c80:	69000215 	stw	r4,8(r13)
  809c84:	19800b36 	bltu	r3,r6,809cb4 <__unpack_d+0x94>
  809c88:	200f883a 	mov	r7,r4
  809c8c:	1811883a 	mov	r8,r3
  809c90:	2945883a 	add	r2,r5,r5
  809c94:	1149803a 	cmpltu	r4,r2,r5
  809c98:	3187883a 	add	r3,r6,r6
  809c9c:	20c9883a 	add	r4,r4,r3
  809ca0:	100b883a 	mov	r5,r2
  809ca4:	200d883a 	mov	r6,r4
  809ca8:	39ffffc4 	addi	r7,r7,-1
  809cac:	413ff82e 	bgeu	r8,r4,809c90 <__unpack_d+0x70>
  809cb0:	69c00215 	stw	r7,8(r13)
  809cb4:	69800415 	stw	r6,16(r13)
  809cb8:	69400315 	stw	r5,12(r13)
  809cbc:	f800283a 	ret
  809cc0:	00800084 	movi	r2,2
  809cc4:	28800015 	stw	r2,0(r5)
  809cc8:	f800283a 	ret
  809ccc:	0081ffc4 	movi	r2,2047
  809cd0:	40800f26 	beq	r8,r2,809d10 <__unpack_d+0xf0>
  809cd4:	480cd63a 	srli	r6,r9,24
  809cd8:	5006923a 	slli	r3,r10,8
  809cdc:	4804923a 	slli	r2,r9,8
  809ce0:	0009883a 	mov	r4,zero
  809ce4:	30c6b03a 	or	r3,r6,r3
  809ce8:	01440034 	movhi	r5,4096
  809cec:	110cb03a 	or	r6,r2,r4
  809cf0:	423f0044 	addi	r8,r8,-1023
  809cf4:	194eb03a 	or	r7,r3,r5
  809cf8:	008000c4 	movi	r2,3
  809cfc:	69c00415 	stw	r7,16(r13)
  809d00:	6a000215 	stw	r8,8(r13)
  809d04:	68800015 	stw	r2,0(r13)
  809d08:	69800315 	stw	r6,12(r13)
  809d0c:	f800283a 	ret
  809d10:	4a84b03a 	or	r2,r9,r10
  809d14:	1000031e 	bne	r2,zero,809d24 <__unpack_d+0x104>
  809d18:	00800104 	movi	r2,4
  809d1c:	28800015 	stw	r2,0(r5)
  809d20:	f800283a 	ret
  809d24:	0009883a 	mov	r4,zero
  809d28:	01400234 	movhi	r5,8
  809d2c:	4904703a 	and	r2,r9,r4
  809d30:	5146703a 	and	r3,r10,r5
  809d34:	10c4b03a 	or	r2,r2,r3
  809d38:	10000526 	beq	r2,zero,809d50 <__unpack_d+0x130>
  809d3c:	00800044 	movi	r2,1
  809d40:	68800015 	stw	r2,0(r13)
  809d44:	6b000415 	stw	r12,16(r13)
  809d48:	6ac00315 	stw	r11,12(r13)
  809d4c:	f800283a 	ret
  809d50:	68000015 	stw	zero,0(r13)
  809d54:	003ffb06 	br	809d44 <__unpack_d+0x124>

00809d58 <__fpcmp_parts_d>:
  809d58:	21800017 	ldw	r6,0(r4)
  809d5c:	00c00044 	movi	r3,1
  809d60:	19800a2e 	bgeu	r3,r6,809d8c <__fpcmp_parts_d+0x34>
  809d64:	28800017 	ldw	r2,0(r5)
  809d68:	1880082e 	bgeu	r3,r2,809d8c <__fpcmp_parts_d+0x34>
  809d6c:	00c00104 	movi	r3,4
  809d70:	30c02626 	beq	r6,r3,809e0c <__fpcmp_parts_d+0xb4>
  809d74:	10c02226 	beq	r2,r3,809e00 <__fpcmp_parts_d+0xa8>
  809d78:	00c00084 	movi	r3,2
  809d7c:	30c00526 	beq	r6,r3,809d94 <__fpcmp_parts_d+0x3c>
  809d80:	10c0071e 	bne	r2,r3,809da0 <__fpcmp_parts_d+0x48>
  809d84:	20800117 	ldw	r2,4(r4)
  809d88:	1000091e 	bne	r2,zero,809db0 <__fpcmp_parts_d+0x58>
  809d8c:	00800044 	movi	r2,1
  809d90:	f800283a 	ret
  809d94:	10c01a1e 	bne	r2,r3,809e00 <__fpcmp_parts_d+0xa8>
  809d98:	0005883a 	mov	r2,zero
  809d9c:	f800283a 	ret
  809da0:	22000117 	ldw	r8,4(r4)
  809da4:	28800117 	ldw	r2,4(r5)
  809da8:	40800326 	beq	r8,r2,809db8 <__fpcmp_parts_d+0x60>
  809dac:	403ff726 	beq	r8,zero,809d8c <__fpcmp_parts_d+0x34>
  809db0:	00bfffc4 	movi	r2,-1
  809db4:	f800283a 	ret
  809db8:	20c00217 	ldw	r3,8(r4)
  809dbc:	28800217 	ldw	r2,8(r5)
  809dc0:	10fffa16 	blt	r2,r3,809dac <__fpcmp_parts_d+0x54>
  809dc4:	18800916 	blt	r3,r2,809dec <__fpcmp_parts_d+0x94>
  809dc8:	21c00417 	ldw	r7,16(r4)
  809dcc:	28c00417 	ldw	r3,16(r5)
  809dd0:	21800317 	ldw	r6,12(r4)
  809dd4:	28800317 	ldw	r2,12(r5)
  809dd8:	19fff436 	bltu	r3,r7,809dac <__fpcmp_parts_d+0x54>
  809ddc:	38c00526 	beq	r7,r3,809df4 <__fpcmp_parts_d+0x9c>
  809de0:	38c00236 	bltu	r7,r3,809dec <__fpcmp_parts_d+0x94>
  809de4:	19ffec1e 	bne	r3,r7,809d98 <__fpcmp_parts_d+0x40>
  809de8:	30bfeb2e 	bgeu	r6,r2,809d98 <__fpcmp_parts_d+0x40>
  809dec:	403fe71e 	bne	r8,zero,809d8c <__fpcmp_parts_d+0x34>
  809df0:	003fef06 	br	809db0 <__fpcmp_parts_d+0x58>
  809df4:	11bffa2e 	bgeu	r2,r6,809de0 <__fpcmp_parts_d+0x88>
  809df8:	403fe426 	beq	r8,zero,809d8c <__fpcmp_parts_d+0x34>
  809dfc:	003fec06 	br	809db0 <__fpcmp_parts_d+0x58>
  809e00:	28800117 	ldw	r2,4(r5)
  809e04:	103fe11e 	bne	r2,zero,809d8c <__fpcmp_parts_d+0x34>
  809e08:	003fe906 	br	809db0 <__fpcmp_parts_d+0x58>
  809e0c:	11bfdd1e 	bne	r2,r6,809d84 <__fpcmp_parts_d+0x2c>
  809e10:	28c00117 	ldw	r3,4(r5)
  809e14:	20800117 	ldw	r2,4(r4)
  809e18:	1885c83a 	sub	r2,r3,r2
  809e1c:	f800283a 	ret

00809e20 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  809e20:	defff804 	addi	sp,sp,-32
  809e24:	dfc00715 	stw	ra,28(sp)
  809e28:	df000615 	stw	fp,24(sp)
  809e2c:	df000604 	addi	fp,sp,24
  809e30:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  809e34:	e0bffc17 	ldw	r2,-16(fp)
  809e38:	1004803a 	cmplt	r2,r2,zero
  809e3c:	1000091e 	bne	r2,zero,809e64 <close+0x44>
  809e40:	e13ffc17 	ldw	r4,-16(fp)
  809e44:	01400304 	movi	r5,12
  809e48:	08097300 	call	809730 <__mulsi3>
  809e4c:	1007883a 	mov	r3,r2
  809e50:	00802074 	movhi	r2,129
  809e54:	10b54e04 	addi	r2,r2,-10952
  809e58:	1887883a 	add	r3,r3,r2
  809e5c:	e0ffff15 	stw	r3,-4(fp)
  809e60:	00000106 	br	809e68 <close+0x48>
  809e64:	e03fff15 	stw	zero,-4(fp)
  809e68:	e0bfff17 	ldw	r2,-4(fp)
  809e6c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  809e70:	e0bffb17 	ldw	r2,-20(fp)
  809e74:	1005003a 	cmpeq	r2,r2,zero
  809e78:	10001d1e 	bne	r2,zero,809ef0 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  809e7c:	e0bffb17 	ldw	r2,-20(fp)
  809e80:	10800017 	ldw	r2,0(r2)
  809e84:	10800417 	ldw	r2,16(r2)
  809e88:	1005003a 	cmpeq	r2,r2,zero
  809e8c:	1000071e 	bne	r2,zero,809eac <close+0x8c>
  809e90:	e0bffb17 	ldw	r2,-20(fp)
  809e94:	10800017 	ldw	r2,0(r2)
  809e98:	10800417 	ldw	r2,16(r2)
  809e9c:	e13ffb17 	ldw	r4,-20(fp)
  809ea0:	103ee83a 	callr	r2
  809ea4:	e0bffe15 	stw	r2,-8(fp)
  809ea8:	00000106 	br	809eb0 <close+0x90>
  809eac:	e03ffe15 	stw	zero,-8(fp)
  809eb0:	e0bffe17 	ldw	r2,-8(fp)
  809eb4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  809eb8:	e13ffc17 	ldw	r4,-16(fp)
  809ebc:	080a6780 	call	80a678 <alt_release_fd>
    if (rval < 0)
  809ec0:	e0bffa17 	ldw	r2,-24(fp)
  809ec4:	1004403a 	cmpge	r2,r2,zero
  809ec8:	1000071e 	bne	r2,zero,809ee8 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  809ecc:	0809f200 	call	809f20 <alt_get_errno>
  809ed0:	e0fffa17 	ldw	r3,-24(fp)
  809ed4:	00c7c83a 	sub	r3,zero,r3
  809ed8:	10c00015 	stw	r3,0(r2)
      return -1;
  809edc:	00bfffc4 	movi	r2,-1
  809ee0:	e0bffd15 	stw	r2,-12(fp)
  809ee4:	00000806 	br	809f08 <close+0xe8>
    }
    return 0;
  809ee8:	e03ffd15 	stw	zero,-12(fp)
  809eec:	00000606 	br	809f08 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809ef0:	0809f200 	call	809f20 <alt_get_errno>
  809ef4:	1007883a 	mov	r3,r2
  809ef8:	00801444 	movi	r2,81
  809efc:	18800015 	stw	r2,0(r3)
    return -1;
  809f00:	00bfffc4 	movi	r2,-1
  809f04:	e0bffd15 	stw	r2,-12(fp)
  809f08:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  809f0c:	e037883a 	mov	sp,fp
  809f10:	dfc00117 	ldw	ra,4(sp)
  809f14:	df000017 	ldw	fp,0(sp)
  809f18:	dec00204 	addi	sp,sp,8
  809f1c:	f800283a 	ret

00809f20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809f20:	defffd04 	addi	sp,sp,-12
  809f24:	dfc00215 	stw	ra,8(sp)
  809f28:	df000115 	stw	fp,4(sp)
  809f2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  809f30:	00802074 	movhi	r2,129
  809f34:	10b9f204 	addi	r2,r2,-6200
  809f38:	10800017 	ldw	r2,0(r2)
  809f3c:	1005003a 	cmpeq	r2,r2,zero
  809f40:	1000061e 	bne	r2,zero,809f5c <alt_get_errno+0x3c>
  809f44:	00802074 	movhi	r2,129
  809f48:	10b9f204 	addi	r2,r2,-6200
  809f4c:	10800017 	ldw	r2,0(r2)
  809f50:	103ee83a 	callr	r2
  809f54:	e0bfff15 	stw	r2,-4(fp)
  809f58:	00000306 	br	809f68 <alt_get_errno+0x48>
  809f5c:	00802074 	movhi	r2,129
  809f60:	1080b504 	addi	r2,r2,724
  809f64:	e0bfff15 	stw	r2,-4(fp)
  809f68:	e0bfff17 	ldw	r2,-4(fp)
}
  809f6c:	e037883a 	mov	sp,fp
  809f70:	dfc00117 	ldw	ra,4(sp)
  809f74:	df000017 	ldw	fp,0(sp)
  809f78:	dec00204 	addi	sp,sp,8
  809f7c:	f800283a 	ret

00809f80 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  809f80:	defffc04 	addi	sp,sp,-16
  809f84:	df000315 	stw	fp,12(sp)
  809f88:	df000304 	addi	fp,sp,12
  809f8c:	e13ffd15 	stw	r4,-12(fp)
  809f90:	e17ffe15 	stw	r5,-8(fp)
  809f94:	e1bfff15 	stw	r6,-4(fp)
  return len;
  809f98:	e0bfff17 	ldw	r2,-4(fp)
}
  809f9c:	e037883a 	mov	sp,fp
  809fa0:	df000017 	ldw	fp,0(sp)
  809fa4:	dec00104 	addi	sp,sp,4
  809fa8:	f800283a 	ret

00809fac <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  809fac:	defff904 	addi	sp,sp,-28
  809fb0:	dfc00615 	stw	ra,24(sp)
  809fb4:	df000515 	stw	fp,20(sp)
  809fb8:	df000504 	addi	fp,sp,20
  809fbc:	e13ffc15 	stw	r4,-16(fp)
  809fc0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809fc4:	e0bffc17 	ldw	r2,-16(fp)
  809fc8:	1004803a 	cmplt	r2,r2,zero
  809fcc:	1000091e 	bne	r2,zero,809ff4 <fstat+0x48>
  809fd0:	e13ffc17 	ldw	r4,-16(fp)
  809fd4:	01400304 	movi	r5,12
  809fd8:	08097300 	call	809730 <__mulsi3>
  809fdc:	1007883a 	mov	r3,r2
  809fe0:	00802074 	movhi	r2,129
  809fe4:	10b54e04 	addi	r2,r2,-10952
  809fe8:	1887883a 	add	r3,r3,r2
  809fec:	e0ffff15 	stw	r3,-4(fp)
  809ff0:	00000106 	br	809ff8 <fstat+0x4c>
  809ff4:	e03fff15 	stw	zero,-4(fp)
  809ff8:	e0bfff17 	ldw	r2,-4(fp)
  809ffc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80a000:	e0bffb17 	ldw	r2,-20(fp)
  80a004:	1005003a 	cmpeq	r2,r2,zero
  80a008:	1000121e 	bne	r2,zero,80a054 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80a00c:	e0bffb17 	ldw	r2,-20(fp)
  80a010:	10800017 	ldw	r2,0(r2)
  80a014:	10800817 	ldw	r2,32(r2)
  80a018:	1005003a 	cmpeq	r2,r2,zero
  80a01c:	1000081e 	bne	r2,zero,80a040 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  80a020:	e0bffb17 	ldw	r2,-20(fp)
  80a024:	10800017 	ldw	r2,0(r2)
  80a028:	10800817 	ldw	r2,32(r2)
  80a02c:	e13ffb17 	ldw	r4,-20(fp)
  80a030:	e17ffd17 	ldw	r5,-12(fp)
  80a034:	103ee83a 	callr	r2
  80a038:	e0bffe15 	stw	r2,-8(fp)
  80a03c:	00000b06 	br	80a06c <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80a040:	e0fffd17 	ldw	r3,-12(fp)
  80a044:	00880004 	movi	r2,8192
  80a048:	18800115 	stw	r2,4(r3)
      return 0;
  80a04c:	e03ffe15 	stw	zero,-8(fp)
  80a050:	00000606 	br	80a06c <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a054:	080a0840 	call	80a084 <alt_get_errno>
  80a058:	1007883a 	mov	r3,r2
  80a05c:	00801444 	movi	r2,81
  80a060:	18800015 	stw	r2,0(r3)
    return -1;
  80a064:	00bfffc4 	movi	r2,-1
  80a068:	e0bffe15 	stw	r2,-8(fp)
  80a06c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a070:	e037883a 	mov	sp,fp
  80a074:	dfc00117 	ldw	ra,4(sp)
  80a078:	df000017 	ldw	fp,0(sp)
  80a07c:	dec00204 	addi	sp,sp,8
  80a080:	f800283a 	ret

0080a084 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a084:	defffd04 	addi	sp,sp,-12
  80a088:	dfc00215 	stw	ra,8(sp)
  80a08c:	df000115 	stw	fp,4(sp)
  80a090:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a094:	00802074 	movhi	r2,129
  80a098:	10b9f204 	addi	r2,r2,-6200
  80a09c:	10800017 	ldw	r2,0(r2)
  80a0a0:	1005003a 	cmpeq	r2,r2,zero
  80a0a4:	1000061e 	bne	r2,zero,80a0c0 <alt_get_errno+0x3c>
  80a0a8:	00802074 	movhi	r2,129
  80a0ac:	10b9f204 	addi	r2,r2,-6200
  80a0b0:	10800017 	ldw	r2,0(r2)
  80a0b4:	103ee83a 	callr	r2
  80a0b8:	e0bfff15 	stw	r2,-4(fp)
  80a0bc:	00000306 	br	80a0cc <alt_get_errno+0x48>
  80a0c0:	00802074 	movhi	r2,129
  80a0c4:	1080b504 	addi	r2,r2,724
  80a0c8:	e0bfff15 	stw	r2,-4(fp)
  80a0cc:	e0bfff17 	ldw	r2,-4(fp)
}
  80a0d0:	e037883a 	mov	sp,fp
  80a0d4:	dfc00117 	ldw	ra,4(sp)
  80a0d8:	df000017 	ldw	fp,0(sp)
  80a0dc:	dec00204 	addi	sp,sp,8
  80a0e0:	f800283a 	ret

0080a0e4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80a0e4:	deffeb04 	addi	sp,sp,-84
  80a0e8:	dfc01415 	stw	ra,80(sp)
  80a0ec:	df001315 	stw	fp,76(sp)
  80a0f0:	df001304 	addi	fp,sp,76
  80a0f4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a0f8:	e0bffd17 	ldw	r2,-12(fp)
  80a0fc:	1004803a 	cmplt	r2,r2,zero
  80a100:	1000091e 	bne	r2,zero,80a128 <isatty+0x44>
  80a104:	e13ffd17 	ldw	r4,-12(fp)
  80a108:	01400304 	movi	r5,12
  80a10c:	08097300 	call	809730 <__mulsi3>
  80a110:	1007883a 	mov	r3,r2
  80a114:	00802074 	movhi	r2,129
  80a118:	10b54e04 	addi	r2,r2,-10952
  80a11c:	1887883a 	add	r3,r3,r2
  80a120:	e0ffff15 	stw	r3,-4(fp)
  80a124:	00000106 	br	80a12c <isatty+0x48>
  80a128:	e03fff15 	stw	zero,-4(fp)
  80a12c:	e0bfff17 	ldw	r2,-4(fp)
  80a130:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80a134:	e0bfed17 	ldw	r2,-76(fp)
  80a138:	1005003a 	cmpeq	r2,r2,zero
  80a13c:	10000f1e 	bne	r2,zero,80a17c <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80a140:	e0bfed17 	ldw	r2,-76(fp)
  80a144:	10800017 	ldw	r2,0(r2)
  80a148:	10800817 	ldw	r2,32(r2)
  80a14c:	1004c03a 	cmpne	r2,r2,zero
  80a150:	1000031e 	bne	r2,zero,80a160 <isatty+0x7c>
    {
      return 1;
  80a154:	00800044 	movi	r2,1
  80a158:	e0bffe15 	stw	r2,-8(fp)
  80a15c:	00000c06 	br	80a190 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80a160:	e17fee04 	addi	r5,fp,-72
  80a164:	e13ffd17 	ldw	r4,-12(fp)
  80a168:	0809fac0 	call	809fac <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80a16c:	e0bfef17 	ldw	r2,-68(fp)
  80a170:	10880020 	cmpeqi	r2,r2,8192
  80a174:	e0bffe15 	stw	r2,-8(fp)
  80a178:	00000506 	br	80a190 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a17c:	080a1a80 	call	80a1a8 <alt_get_errno>
  80a180:	1007883a 	mov	r3,r2
  80a184:	00801444 	movi	r2,81
  80a188:	18800015 	stw	r2,0(r3)
    return 0;
  80a18c:	e03ffe15 	stw	zero,-8(fp)
  80a190:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a194:	e037883a 	mov	sp,fp
  80a198:	dfc00117 	ldw	ra,4(sp)
  80a19c:	df000017 	ldw	fp,0(sp)
  80a1a0:	dec00204 	addi	sp,sp,8
  80a1a4:	f800283a 	ret

0080a1a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a1a8:	defffd04 	addi	sp,sp,-12
  80a1ac:	dfc00215 	stw	ra,8(sp)
  80a1b0:	df000115 	stw	fp,4(sp)
  80a1b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a1b8:	00802074 	movhi	r2,129
  80a1bc:	10b9f204 	addi	r2,r2,-6200
  80a1c0:	10800017 	ldw	r2,0(r2)
  80a1c4:	1005003a 	cmpeq	r2,r2,zero
  80a1c8:	1000061e 	bne	r2,zero,80a1e4 <alt_get_errno+0x3c>
  80a1cc:	00802074 	movhi	r2,129
  80a1d0:	10b9f204 	addi	r2,r2,-6200
  80a1d4:	10800017 	ldw	r2,0(r2)
  80a1d8:	103ee83a 	callr	r2
  80a1dc:	e0bfff15 	stw	r2,-4(fp)
  80a1e0:	00000306 	br	80a1f0 <alt_get_errno+0x48>
  80a1e4:	00802074 	movhi	r2,129
  80a1e8:	1080b504 	addi	r2,r2,724
  80a1ec:	e0bfff15 	stw	r2,-4(fp)
  80a1f0:	e0bfff17 	ldw	r2,-4(fp)
}
  80a1f4:	e037883a 	mov	sp,fp
  80a1f8:	dfc00117 	ldw	ra,4(sp)
  80a1fc:	df000017 	ldw	fp,0(sp)
  80a200:	dec00204 	addi	sp,sp,8
  80a204:	f800283a 	ret

0080a208 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80a208:	defffe04 	addi	sp,sp,-8
  80a20c:	dfc00115 	stw	ra,4(sp)
  80a210:	df000015 	stw	fp,0(sp)
  80a214:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80a218:	01002074 	movhi	r4,129
  80a21c:	2139f704 	addi	r4,r4,-6180
  80a220:	01402074 	movhi	r5,129
  80a224:	29733f04 	addi	r5,r5,-13060
  80a228:	01802074 	movhi	r6,129
  80a22c:	31b9f704 	addi	r6,r6,-6180
  80a230:	080a2880 	call	80a288 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80a234:	01002034 	movhi	r4,128
  80a238:	21000804 	addi	r4,r4,32
  80a23c:	01402034 	movhi	r5,128
  80a240:	29400804 	addi	r5,r5,32
  80a244:	01802034 	movhi	r6,128
  80a248:	31806d04 	addi	r6,r6,436
  80a24c:	080a2880 	call	80a288 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80a250:	01002074 	movhi	r4,129
  80a254:	21325304 	addi	r4,r4,-14004
  80a258:	01402074 	movhi	r5,129
  80a25c:	29725304 	addi	r5,r5,-14004
  80a260:	01802074 	movhi	r6,129
  80a264:	31b33f04 	addi	r6,r6,-13060
  80a268:	080a2880 	call	80a288 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80a26c:	080b7e40 	call	80b7e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80a270:	080b9dc0 	call	80b9dc <alt_icache_flush_all>
}
  80a274:	e037883a 	mov	sp,fp
  80a278:	dfc00117 	ldw	ra,4(sp)
  80a27c:	df000017 	ldw	fp,0(sp)
  80a280:	dec00204 	addi	sp,sp,8
  80a284:	f800283a 	ret

0080a288 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80a288:	defffc04 	addi	sp,sp,-16
  80a28c:	df000315 	stw	fp,12(sp)
  80a290:	df000304 	addi	fp,sp,12
  80a294:	e13ffd15 	stw	r4,-12(fp)
  80a298:	e17ffe15 	stw	r5,-8(fp)
  80a29c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80a2a0:	e0fffe17 	ldw	r3,-8(fp)
  80a2a4:	e0bffd17 	ldw	r2,-12(fp)
  80a2a8:	18800e26 	beq	r3,r2,80a2e4 <alt_load_section+0x5c>
  {
    while( to != end )
  80a2ac:	00000a06 	br	80a2d8 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80a2b0:	e0bffd17 	ldw	r2,-12(fp)
  80a2b4:	10c00017 	ldw	r3,0(r2)
  80a2b8:	e0bffe17 	ldw	r2,-8(fp)
  80a2bc:	10c00015 	stw	r3,0(r2)
  80a2c0:	e0bffe17 	ldw	r2,-8(fp)
  80a2c4:	10800104 	addi	r2,r2,4
  80a2c8:	e0bffe15 	stw	r2,-8(fp)
  80a2cc:	e0bffd17 	ldw	r2,-12(fp)
  80a2d0:	10800104 	addi	r2,r2,4
  80a2d4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80a2d8:	e0fffe17 	ldw	r3,-8(fp)
  80a2dc:	e0bfff17 	ldw	r2,-4(fp)
  80a2e0:	18bff31e 	bne	r3,r2,80a2b0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80a2e4:	e037883a 	mov	sp,fp
  80a2e8:	df000017 	ldw	fp,0(sp)
  80a2ec:	dec00104 	addi	sp,sp,4
  80a2f0:	f800283a 	ret

0080a2f4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80a2f4:	defff804 	addi	sp,sp,-32
  80a2f8:	dfc00715 	stw	ra,28(sp)
  80a2fc:	df000615 	stw	fp,24(sp)
  80a300:	df000604 	addi	fp,sp,24
  80a304:	e13ffc15 	stw	r4,-16(fp)
  80a308:	e17ffd15 	stw	r5,-12(fp)
  80a30c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80a310:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a314:	e0bffc17 	ldw	r2,-16(fp)
  80a318:	1004803a 	cmplt	r2,r2,zero
  80a31c:	1000091e 	bne	r2,zero,80a344 <lseek+0x50>
  80a320:	e13ffc17 	ldw	r4,-16(fp)
  80a324:	01400304 	movi	r5,12
  80a328:	08097300 	call	809730 <__mulsi3>
  80a32c:	1007883a 	mov	r3,r2
  80a330:	00802074 	movhi	r2,129
  80a334:	10b54e04 	addi	r2,r2,-10952
  80a338:	1887883a 	add	r3,r3,r2
  80a33c:	e0ffff15 	stw	r3,-4(fp)
  80a340:	00000106 	br	80a348 <lseek+0x54>
  80a344:	e03fff15 	stw	zero,-4(fp)
  80a348:	e0bfff17 	ldw	r2,-4(fp)
  80a34c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80a350:	e0bffb17 	ldw	r2,-20(fp)
  80a354:	1005003a 	cmpeq	r2,r2,zero
  80a358:	1000111e 	bne	r2,zero,80a3a0 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80a35c:	e0bffb17 	ldw	r2,-20(fp)
  80a360:	10800017 	ldw	r2,0(r2)
  80a364:	10800717 	ldw	r2,28(r2)
  80a368:	1005003a 	cmpeq	r2,r2,zero
  80a36c:	1000091e 	bne	r2,zero,80a394 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80a370:	e0bffb17 	ldw	r2,-20(fp)
  80a374:	10800017 	ldw	r2,0(r2)
  80a378:	10800717 	ldw	r2,28(r2)
  80a37c:	e13ffb17 	ldw	r4,-20(fp)
  80a380:	e17ffd17 	ldw	r5,-12(fp)
  80a384:	e1bffe17 	ldw	r6,-8(fp)
  80a388:	103ee83a 	callr	r2
  80a38c:	e0bffa15 	stw	r2,-24(fp)
  80a390:	00000506 	br	80a3a8 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80a394:	00bfde84 	movi	r2,-134
  80a398:	e0bffa15 	stw	r2,-24(fp)
  80a39c:	00000206 	br	80a3a8 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80a3a0:	00bfebc4 	movi	r2,-81
  80a3a4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80a3a8:	e0bffa17 	ldw	r2,-24(fp)
  80a3ac:	1004403a 	cmpge	r2,r2,zero
  80a3b0:	1000071e 	bne	r2,zero,80a3d0 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80a3b4:	080a3e80 	call	80a3e8 <alt_get_errno>
  80a3b8:	1007883a 	mov	r3,r2
  80a3bc:	e0bffa17 	ldw	r2,-24(fp)
  80a3c0:	0085c83a 	sub	r2,zero,r2
  80a3c4:	18800015 	stw	r2,0(r3)
    rc = -1;
  80a3c8:	00bfffc4 	movi	r2,-1
  80a3cc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80a3d0:	e0bffa17 	ldw	r2,-24(fp)
}
  80a3d4:	e037883a 	mov	sp,fp
  80a3d8:	dfc00117 	ldw	ra,4(sp)
  80a3dc:	df000017 	ldw	fp,0(sp)
  80a3e0:	dec00204 	addi	sp,sp,8
  80a3e4:	f800283a 	ret

0080a3e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a3e8:	defffd04 	addi	sp,sp,-12
  80a3ec:	dfc00215 	stw	ra,8(sp)
  80a3f0:	df000115 	stw	fp,4(sp)
  80a3f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a3f8:	00802074 	movhi	r2,129
  80a3fc:	10b9f204 	addi	r2,r2,-6200
  80a400:	10800017 	ldw	r2,0(r2)
  80a404:	1005003a 	cmpeq	r2,r2,zero
  80a408:	1000061e 	bne	r2,zero,80a424 <alt_get_errno+0x3c>
  80a40c:	00802074 	movhi	r2,129
  80a410:	10b9f204 	addi	r2,r2,-6200
  80a414:	10800017 	ldw	r2,0(r2)
  80a418:	103ee83a 	callr	r2
  80a41c:	e0bfff15 	stw	r2,-4(fp)
  80a420:	00000306 	br	80a430 <alt_get_errno+0x48>
  80a424:	00802074 	movhi	r2,129
  80a428:	1080b504 	addi	r2,r2,724
  80a42c:	e0bfff15 	stw	r2,-4(fp)
  80a430:	e0bfff17 	ldw	r2,-4(fp)
}
  80a434:	e037883a 	mov	sp,fp
  80a438:	dfc00117 	ldw	ra,4(sp)
  80a43c:	df000017 	ldw	fp,0(sp)
  80a440:	dec00204 	addi	sp,sp,8
  80a444:	f800283a 	ret

0080a448 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80a448:	defffd04 	addi	sp,sp,-12
  80a44c:	dfc00215 	stw	ra,8(sp)
  80a450:	df000115 	stw	fp,4(sp)
  80a454:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80a458:	0009883a 	mov	r4,zero
  80a45c:	080a9300 	call	80a930 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80a460:	080a9640 	call	80a964 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80a464:	01002074 	movhi	r4,129
  80a468:	21332b04 	addi	r4,r4,-13140
  80a46c:	01402074 	movhi	r5,129
  80a470:	29732b04 	addi	r5,r5,-13140
  80a474:	01802074 	movhi	r6,129
  80a478:	31b32b04 	addi	r6,r6,-13140
  80a47c:	080bd9c0 	call	80bd9c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80a480:	080b9140 	call	80b914 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80a484:	01002074 	movhi	r4,129
  80a488:	212e5e04 	addi	r4,r4,-18056
  80a48c:	080c5400 	call	80c540 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80a490:	d126cf17 	ldw	r4,-25796(gp)
  80a494:	d166d017 	ldw	r5,-25792(gp)
  80a498:	d1a6d117 	ldw	r6,-25788(gp)
  80a49c:	080023c0 	call	80023c <main>
  80a4a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80a4a4:	01000044 	movi	r4,1
  80a4a8:	0809e200 	call	809e20 <close>
  exit (result);
  80a4ac:	e13fff17 	ldw	r4,-4(fp)
  80a4b0:	080c5540 	call	80c554 <exit>

0080a4b4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80a4b4:	defffe04 	addi	sp,sp,-8
  80a4b8:	df000115 	stw	fp,4(sp)
  80a4bc:	df000104 	addi	fp,sp,4
  80a4c0:	e13fff15 	stw	r4,-4(fp)
}
  80a4c4:	e037883a 	mov	sp,fp
  80a4c8:	df000017 	ldw	fp,0(sp)
  80a4cc:	dec00104 	addi	sp,sp,4
  80a4d0:	f800283a 	ret

0080a4d4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80a4d4:	defffe04 	addi	sp,sp,-8
  80a4d8:	df000115 	stw	fp,4(sp)
  80a4dc:	df000104 	addi	fp,sp,4
  80a4e0:	e13fff15 	stw	r4,-4(fp)
}
  80a4e4:	e037883a 	mov	sp,fp
  80a4e8:	df000017 	ldw	fp,0(sp)
  80a4ec:	dec00104 	addi	sp,sp,4
  80a4f0:	f800283a 	ret

0080a4f4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80a4f4:	defff704 	addi	sp,sp,-36
  80a4f8:	dfc00815 	stw	ra,32(sp)
  80a4fc:	df000715 	stw	fp,28(sp)
  80a500:	df000704 	addi	fp,sp,28
  80a504:	e13ffb15 	stw	r4,-20(fp)
  80a508:	e17ffc15 	stw	r5,-16(fp)
  80a50c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a510:	e0bffb17 	ldw	r2,-20(fp)
  80a514:	1004803a 	cmplt	r2,r2,zero
  80a518:	1000091e 	bne	r2,zero,80a540 <read+0x4c>
  80a51c:	e13ffb17 	ldw	r4,-20(fp)
  80a520:	01400304 	movi	r5,12
  80a524:	08097300 	call	809730 <__mulsi3>
  80a528:	1007883a 	mov	r3,r2
  80a52c:	00802074 	movhi	r2,129
  80a530:	10b54e04 	addi	r2,r2,-10952
  80a534:	1887883a 	add	r3,r3,r2
  80a538:	e0ffff15 	stw	r3,-4(fp)
  80a53c:	00000106 	br	80a544 <read+0x50>
  80a540:	e03fff15 	stw	zero,-4(fp)
  80a544:	e0bfff17 	ldw	r2,-4(fp)
  80a548:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80a54c:	e0bffa17 	ldw	r2,-24(fp)
  80a550:	1005003a 	cmpeq	r2,r2,zero
  80a554:	1000241e 	bne	r2,zero,80a5e8 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80a558:	e0bffa17 	ldw	r2,-24(fp)
  80a55c:	10800217 	ldw	r2,8(r2)
  80a560:	108000cc 	andi	r2,r2,3
  80a564:	10800060 	cmpeqi	r2,r2,1
  80a568:	10001a1e 	bne	r2,zero,80a5d4 <read+0xe0>
  80a56c:	e0bffa17 	ldw	r2,-24(fp)
  80a570:	10800017 	ldw	r2,0(r2)
  80a574:	10800517 	ldw	r2,20(r2)
  80a578:	1005003a 	cmpeq	r2,r2,zero
  80a57c:	1000151e 	bne	r2,zero,80a5d4 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80a580:	e0bffa17 	ldw	r2,-24(fp)
  80a584:	10800017 	ldw	r2,0(r2)
  80a588:	10800517 	ldw	r2,20(r2)
  80a58c:	e17ffc17 	ldw	r5,-16(fp)
  80a590:	e1bffd17 	ldw	r6,-12(fp)
  80a594:	e13ffa17 	ldw	r4,-24(fp)
  80a598:	103ee83a 	callr	r2
  80a59c:	e0bff915 	stw	r2,-28(fp)
  80a5a0:	e0bff917 	ldw	r2,-28(fp)
  80a5a4:	1004403a 	cmpge	r2,r2,zero
  80a5a8:	1000071e 	bne	r2,zero,80a5c8 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  80a5ac:	080a6180 	call	80a618 <alt_get_errno>
  80a5b0:	e0fff917 	ldw	r3,-28(fp)
  80a5b4:	00c7c83a 	sub	r3,zero,r3
  80a5b8:	10c00015 	stw	r3,0(r2)
          return -1;
  80a5bc:	00bfffc4 	movi	r2,-1
  80a5c0:	e0bffe15 	stw	r2,-8(fp)
  80a5c4:	00000e06 	br	80a600 <read+0x10c>
        }
        return rval;
  80a5c8:	e0bff917 	ldw	r2,-28(fp)
  80a5cc:	e0bffe15 	stw	r2,-8(fp)
  80a5d0:	00000b06 	br	80a600 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80a5d4:	080a6180 	call	80a618 <alt_get_errno>
  80a5d8:	1007883a 	mov	r3,r2
  80a5dc:	00800344 	movi	r2,13
  80a5e0:	18800015 	stw	r2,0(r3)
  80a5e4:	00000406 	br	80a5f8 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80a5e8:	080a6180 	call	80a618 <alt_get_errno>
  80a5ec:	1007883a 	mov	r3,r2
  80a5f0:	00801444 	movi	r2,81
  80a5f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80a5f8:	00bfffc4 	movi	r2,-1
  80a5fc:	e0bffe15 	stw	r2,-8(fp)
  80a600:	e0bffe17 	ldw	r2,-8(fp)
}
  80a604:	e037883a 	mov	sp,fp
  80a608:	dfc00117 	ldw	ra,4(sp)
  80a60c:	df000017 	ldw	fp,0(sp)
  80a610:	dec00204 	addi	sp,sp,8
  80a614:	f800283a 	ret

0080a618 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a618:	defffd04 	addi	sp,sp,-12
  80a61c:	dfc00215 	stw	ra,8(sp)
  80a620:	df000115 	stw	fp,4(sp)
  80a624:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a628:	00802074 	movhi	r2,129
  80a62c:	10b9f204 	addi	r2,r2,-6200
  80a630:	10800017 	ldw	r2,0(r2)
  80a634:	1005003a 	cmpeq	r2,r2,zero
  80a638:	1000061e 	bne	r2,zero,80a654 <alt_get_errno+0x3c>
  80a63c:	00802074 	movhi	r2,129
  80a640:	10b9f204 	addi	r2,r2,-6200
  80a644:	10800017 	ldw	r2,0(r2)
  80a648:	103ee83a 	callr	r2
  80a64c:	e0bfff15 	stw	r2,-4(fp)
  80a650:	00000306 	br	80a660 <alt_get_errno+0x48>
  80a654:	00802074 	movhi	r2,129
  80a658:	1080b504 	addi	r2,r2,724
  80a65c:	e0bfff15 	stw	r2,-4(fp)
  80a660:	e0bfff17 	ldw	r2,-4(fp)
}
  80a664:	e037883a 	mov	sp,fp
  80a668:	dfc00117 	ldw	ra,4(sp)
  80a66c:	df000017 	ldw	fp,0(sp)
  80a670:	dec00204 	addi	sp,sp,8
  80a674:	f800283a 	ret

0080a678 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80a678:	defffc04 	addi	sp,sp,-16
  80a67c:	dfc00315 	stw	ra,12(sp)
  80a680:	df000215 	stw	fp,8(sp)
  80a684:	dc000115 	stw	r16,4(sp)
  80a688:	df000104 	addi	fp,sp,4
  80a68c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80a690:	e0bfff17 	ldw	r2,-4(fp)
  80a694:	108000d0 	cmplti	r2,r2,3
  80a698:	10000f1e 	bne	r2,zero,80a6d8 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  80a69c:	e13fff17 	ldw	r4,-4(fp)
  80a6a0:	04002074 	movhi	r16,129
  80a6a4:	84354e04 	addi	r16,r16,-10952
  80a6a8:	01400304 	movi	r5,12
  80a6ac:	08097300 	call	809730 <__mulsi3>
  80a6b0:	1405883a 	add	r2,r2,r16
  80a6b4:	10800204 	addi	r2,r2,8
  80a6b8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80a6bc:	e13fff17 	ldw	r4,-4(fp)
  80a6c0:	04002074 	movhi	r16,129
  80a6c4:	84354e04 	addi	r16,r16,-10952
  80a6c8:	01400304 	movi	r5,12
  80a6cc:	08097300 	call	809730 <__mulsi3>
  80a6d0:	1405883a 	add	r2,r2,r16
  80a6d4:	10000015 	stw	zero,0(r2)
  }
}
  80a6d8:	e037883a 	mov	sp,fp
  80a6dc:	dfc00217 	ldw	ra,8(sp)
  80a6e0:	df000117 	ldw	fp,4(sp)
  80a6e4:	dc000017 	ldw	r16,0(sp)
  80a6e8:	dec00304 	addi	sp,sp,12
  80a6ec:	f800283a 	ret

0080a6f0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80a6f0:	defff804 	addi	sp,sp,-32
  80a6f4:	df000715 	stw	fp,28(sp)
  80a6f8:	df000704 	addi	fp,sp,28
  80a6fc:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a700:	0005303a 	rdctl	r2,status
  80a704:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a708:	e0fffb17 	ldw	r3,-20(fp)
  80a70c:	00bfff84 	movi	r2,-2
  80a710:	1884703a 	and	r2,r3,r2
  80a714:	1001703a 	wrctl	status,r2
  
  return context;
  80a718:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80a71c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80a720:	d0a00c17 	ldw	r2,-32720(gp)
  80a724:	10c000c4 	addi	r3,r2,3
  80a728:	00bfff04 	movi	r2,-4
  80a72c:	1884703a 	and	r2,r3,r2
  80a730:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80a734:	d0e00c17 	ldw	r3,-32720(gp)
  80a738:	e0bffe17 	ldw	r2,-8(fp)
  80a73c:	1887883a 	add	r3,r3,r2
  80a740:	00804034 	movhi	r2,256
  80a744:	10800004 	addi	r2,r2,0
  80a748:	10c0072e 	bgeu	r2,r3,80a768 <sbrk+0x78>
  80a74c:	e0bffd17 	ldw	r2,-12(fp)
  80a750:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a754:	e0bffa17 	ldw	r2,-24(fp)
  80a758:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80a75c:	00bfffc4 	movi	r2,-1
  80a760:	e0bfff15 	stw	r2,-4(fp)
  80a764:	00000c06 	br	80a798 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80a768:	d0a00c17 	ldw	r2,-32720(gp)
  80a76c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80a770:	d0e00c17 	ldw	r3,-32720(gp)
  80a774:	e0bffe17 	ldw	r2,-8(fp)
  80a778:	1885883a 	add	r2,r3,r2
  80a77c:	d0a00c15 	stw	r2,-32720(gp)
  80a780:	e0bffd17 	ldw	r2,-12(fp)
  80a784:	e0bff915 	stw	r2,-28(fp)
  80a788:	e0bff917 	ldw	r2,-28(fp)
  80a78c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80a790:	e0bffc17 	ldw	r2,-16(fp)
  80a794:	e0bfff15 	stw	r2,-4(fp)
  80a798:	e0bfff17 	ldw	r2,-4(fp)
} 
  80a79c:	e037883a 	mov	sp,fp
  80a7a0:	df000017 	ldw	fp,0(sp)
  80a7a4:	dec00104 	addi	sp,sp,4
  80a7a8:	f800283a 	ret

0080a7ac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80a7ac:	defff704 	addi	sp,sp,-36
  80a7b0:	dfc00815 	stw	ra,32(sp)
  80a7b4:	df000715 	stw	fp,28(sp)
  80a7b8:	df000704 	addi	fp,sp,28
  80a7bc:	e13ffb15 	stw	r4,-20(fp)
  80a7c0:	e17ffc15 	stw	r5,-16(fp)
  80a7c4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a7c8:	e0bffb17 	ldw	r2,-20(fp)
  80a7cc:	1004803a 	cmplt	r2,r2,zero
  80a7d0:	1000091e 	bne	r2,zero,80a7f8 <write+0x4c>
  80a7d4:	e13ffb17 	ldw	r4,-20(fp)
  80a7d8:	01400304 	movi	r5,12
  80a7dc:	08097300 	call	809730 <__mulsi3>
  80a7e0:	1007883a 	mov	r3,r2
  80a7e4:	00802074 	movhi	r2,129
  80a7e8:	10b54e04 	addi	r2,r2,-10952
  80a7ec:	1887883a 	add	r3,r3,r2
  80a7f0:	e0ffff15 	stw	r3,-4(fp)
  80a7f4:	00000106 	br	80a7fc <write+0x50>
  80a7f8:	e03fff15 	stw	zero,-4(fp)
  80a7fc:	e0bfff17 	ldw	r2,-4(fp)
  80a800:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80a804:	e0bffa17 	ldw	r2,-24(fp)
  80a808:	1005003a 	cmpeq	r2,r2,zero
  80a80c:	1000241e 	bne	r2,zero,80a8a0 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80a810:	e0bffa17 	ldw	r2,-24(fp)
  80a814:	10800217 	ldw	r2,8(r2)
  80a818:	108000cc 	andi	r2,r2,3
  80a81c:	1005003a 	cmpeq	r2,r2,zero
  80a820:	10001a1e 	bne	r2,zero,80a88c <write+0xe0>
  80a824:	e0bffa17 	ldw	r2,-24(fp)
  80a828:	10800017 	ldw	r2,0(r2)
  80a82c:	10800617 	ldw	r2,24(r2)
  80a830:	1005003a 	cmpeq	r2,r2,zero
  80a834:	1000151e 	bne	r2,zero,80a88c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80a838:	e0bffa17 	ldw	r2,-24(fp)
  80a83c:	10800017 	ldw	r2,0(r2)
  80a840:	10800617 	ldw	r2,24(r2)
  80a844:	e17ffc17 	ldw	r5,-16(fp)
  80a848:	e1bffd17 	ldw	r6,-12(fp)
  80a84c:	e13ffa17 	ldw	r4,-24(fp)
  80a850:	103ee83a 	callr	r2
  80a854:	e0bff915 	stw	r2,-28(fp)
  80a858:	e0bff917 	ldw	r2,-28(fp)
  80a85c:	1004403a 	cmpge	r2,r2,zero
  80a860:	1000071e 	bne	r2,zero,80a880 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  80a864:	080a8d00 	call	80a8d0 <alt_get_errno>
  80a868:	e0fff917 	ldw	r3,-28(fp)
  80a86c:	00c7c83a 	sub	r3,zero,r3
  80a870:	10c00015 	stw	r3,0(r2)
        return -1;
  80a874:	00bfffc4 	movi	r2,-1
  80a878:	e0bffe15 	stw	r2,-8(fp)
  80a87c:	00000e06 	br	80a8b8 <write+0x10c>
      }
      return rval;
  80a880:	e0bff917 	ldw	r2,-28(fp)
  80a884:	e0bffe15 	stw	r2,-8(fp)
  80a888:	00000b06 	br	80a8b8 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80a88c:	080a8d00 	call	80a8d0 <alt_get_errno>
  80a890:	1007883a 	mov	r3,r2
  80a894:	00800344 	movi	r2,13
  80a898:	18800015 	stw	r2,0(r3)
  80a89c:	00000406 	br	80a8b0 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80a8a0:	080a8d00 	call	80a8d0 <alt_get_errno>
  80a8a4:	1007883a 	mov	r3,r2
  80a8a8:	00801444 	movi	r2,81
  80a8ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80a8b0:	00bfffc4 	movi	r2,-1
  80a8b4:	e0bffe15 	stw	r2,-8(fp)
  80a8b8:	e0bffe17 	ldw	r2,-8(fp)
}
  80a8bc:	e037883a 	mov	sp,fp
  80a8c0:	dfc00117 	ldw	ra,4(sp)
  80a8c4:	df000017 	ldw	fp,0(sp)
  80a8c8:	dec00204 	addi	sp,sp,8
  80a8cc:	f800283a 	ret

0080a8d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a8d0:	defffd04 	addi	sp,sp,-12
  80a8d4:	dfc00215 	stw	ra,8(sp)
  80a8d8:	df000115 	stw	fp,4(sp)
  80a8dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a8e0:	00802074 	movhi	r2,129
  80a8e4:	10b9f204 	addi	r2,r2,-6200
  80a8e8:	10800017 	ldw	r2,0(r2)
  80a8ec:	1005003a 	cmpeq	r2,r2,zero
  80a8f0:	1000061e 	bne	r2,zero,80a90c <alt_get_errno+0x3c>
  80a8f4:	00802074 	movhi	r2,129
  80a8f8:	10b9f204 	addi	r2,r2,-6200
  80a8fc:	10800017 	ldw	r2,0(r2)
  80a900:	103ee83a 	callr	r2
  80a904:	e0bfff15 	stw	r2,-4(fp)
  80a908:	00000306 	br	80a918 <alt_get_errno+0x48>
  80a90c:	00802074 	movhi	r2,129
  80a910:	1080b504 	addi	r2,r2,724
  80a914:	e0bfff15 	stw	r2,-4(fp)
  80a918:	e0bfff17 	ldw	r2,-4(fp)
}
  80a91c:	e037883a 	mov	sp,fp
  80a920:	dfc00117 	ldw	ra,4(sp)
  80a924:	df000017 	ldw	fp,0(sp)
  80a928:	dec00204 	addi	sp,sp,8
  80a92c:	f800283a 	ret

0080a930 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80a930:	defffd04 	addi	sp,sp,-12
  80a934:	dfc00215 	stw	ra,8(sp)
  80a938:	df000115 	stw	fp,4(sp)
  80a93c:	df000104 	addi	fp,sp,4
  80a940:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
  80a944:	080c29c0 	call	80c29c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80a948:	00800044 	movi	r2,1
  80a94c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80a950:	e037883a 	mov	sp,fp
  80a954:	dfc00117 	ldw	ra,4(sp)
  80a958:	df000017 	ldw	fp,0(sp)
  80a95c:	dec00204 	addi	sp,sp,8
  80a960:	f800283a 	ret

0080a964 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80a964:	defffd04 	addi	sp,sp,-12
  80a968:	dfc00215 	stw	ra,8(sp)
  80a96c:	df000115 	stw	fp,4(sp)
  80a970:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80a974:	01002074 	movhi	r4,129
  80a978:	2135b804 	addi	r4,r4,-10528
  80a97c:	000b883a 	mov	r5,zero
  80a980:	000d883a 	mov	r6,zero
  80a984:	080ad2c0 	call	80ad2c <altera_avalon_jtag_uart_init>
  80a988:	01002074 	movhi	r4,129
  80a98c:	2135ae04 	addi	r4,r4,-10568
  80a990:	080abac0 	call	80abac <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
  80a994:	01002074 	movhi	r4,129
  80a998:	2139c604 	addi	r4,r4,-6376
  80a99c:	080abac0 	call	80abac <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, Pixel_Buffer_DMA);
  80a9a0:	00802074 	movhi	r2,129
  80a9a4:	10b9d204 	addi	r2,r2,-6328
  80a9a8:	10800a17 	ldw	r2,40(r2)
  80a9ac:	10800017 	ldw	r2,0(r2)
  80a9b0:	1007883a 	mov	r3,r2
  80a9b4:	00802074 	movhi	r2,129
  80a9b8:	10b9d204 	addi	r2,r2,-6328
  80a9bc:	10c00b15 	stw	r3,44(r2)
  80a9c0:	00802074 	movhi	r2,129
  80a9c4:	10b9d204 	addi	r2,r2,-6328
  80a9c8:	10800a17 	ldw	r2,40(r2)
  80a9cc:	10800104 	addi	r2,r2,4
  80a9d0:	10800017 	ldw	r2,0(r2)
  80a9d4:	1007883a 	mov	r3,r2
  80a9d8:	00802074 	movhi	r2,129
  80a9dc:	10b9d204 	addi	r2,r2,-6328
  80a9e0:	10c00c15 	stw	r3,48(r2)
  80a9e4:	00802074 	movhi	r2,129
  80a9e8:	10b9d204 	addi	r2,r2,-6328
  80a9ec:	10800a17 	ldw	r2,40(r2)
  80a9f0:	10800204 	addi	r2,r2,8
  80a9f4:	10800017 	ldw	r2,0(r2)
  80a9f8:	10ffffcc 	andi	r3,r2,65535
  80a9fc:	00802074 	movhi	r2,129
  80aa00:	10b9d204 	addi	r2,r2,-6328
  80aa04:	10c00f15 	stw	r3,60(r2)
  80aa08:	00802074 	movhi	r2,129
  80aa0c:	10b9d204 	addi	r2,r2,-6328
  80aa10:	10800a17 	ldw	r2,40(r2)
  80aa14:	10800204 	addi	r2,r2,8
  80aa18:	10800017 	ldw	r2,0(r2)
  80aa1c:	1005d43a 	srai	r2,r2,16
  80aa20:	10ffffcc 	andi	r3,r2,65535
  80aa24:	00802074 	movhi	r2,129
  80aa28:	10b9d204 	addi	r2,r2,-6328
  80aa2c:	10c01015 	stw	r3,64(r2)
  80aa30:	00802074 	movhi	r2,129
  80aa34:	10b9d204 	addi	r2,r2,-6328
  80aa38:	10800a17 	ldw	r2,40(r2)
  80aa3c:	10800304 	addi	r2,r2,12
  80aa40:	10800017 	ldw	r2,0(r2)
  80aa44:	1005d07a 	srai	r2,r2,1
  80aa48:	10c0004c 	andi	r3,r2,1
  80aa4c:	00802074 	movhi	r2,129
  80aa50:	10b9d204 	addi	r2,r2,-6328
  80aa54:	10c00d15 	stw	r3,52(r2)
  80aa58:	00802074 	movhi	r2,129
  80aa5c:	10b9d204 	addi	r2,r2,-6328
  80aa60:	10800a17 	ldw	r2,40(r2)
  80aa64:	10800304 	addi	r2,r2,12
  80aa68:	10800017 	ldw	r2,0(r2)
  80aa6c:	1005d13a 	srai	r2,r2,4
  80aa70:	10c003cc 	andi	r3,r2,15
  80aa74:	00802074 	movhi	r2,129
  80aa78:	10b9d204 	addi	r2,r2,-6328
  80aa7c:	10c00e15 	stw	r3,56(r2)
  80aa80:	00802074 	movhi	r2,129
  80aa84:	10b9d204 	addi	r2,r2,-6328
  80aa88:	10800a17 	ldw	r2,40(r2)
  80aa8c:	10800304 	addi	r2,r2,12
  80aa90:	10800017 	ldw	r2,0(r2)
  80aa94:	1005d43a 	srai	r2,r2,16
  80aa98:	1007883a 	mov	r3,r2
  80aa9c:	00bfffc4 	movi	r2,-1
  80aaa0:	1884703a 	and	r2,r3,r2
  80aaa4:	e0bfff45 	stb	r2,-3(fp)
  80aaa8:	00802074 	movhi	r2,129
  80aaac:	10b9d204 	addi	r2,r2,-6328
  80aab0:	10800a17 	ldw	r2,40(r2)
  80aab4:	10800304 	addi	r2,r2,12
  80aab8:	10800017 	ldw	r2,0(r2)
  80aabc:	1005d63a 	srai	r2,r2,24
  80aac0:	1007883a 	mov	r3,r2
  80aac4:	00bfffc4 	movi	r2,-1
  80aac8:	1884703a 	and	r2,r3,r2
  80aacc:	e0bfff05 	stb	r2,-4(fp)
  80aad0:	00802074 	movhi	r2,129
  80aad4:	10b9d204 	addi	r2,r2,-6328
  80aad8:	10800e17 	ldw	r2,56(r2)
  80aadc:	10800058 	cmpnei	r2,r2,1
  80aae0:	1000041e 	bne	r2,zero,80aaf4 <alt_sys_init+0x190>
  80aae4:	00802074 	movhi	r2,129
  80aae8:	10b9d204 	addi	r2,r2,-6328
  80aaec:	10001115 	stw	zero,68(r2)
  80aaf0:	00000e06 	br	80ab2c <alt_sys_init+0x1c8>
  80aaf4:	00802074 	movhi	r2,129
  80aaf8:	10b9d204 	addi	r2,r2,-6328
  80aafc:	10800e17 	ldw	r2,56(r2)
  80ab00:	10800098 	cmpnei	r2,r2,2
  80ab04:	1000051e 	bne	r2,zero,80ab1c <alt_sys_init+0x1b8>
  80ab08:	00c02074 	movhi	r3,129
  80ab0c:	18f9d204 	addi	r3,r3,-6328
  80ab10:	00800044 	movi	r2,1
  80ab14:	18801115 	stw	r2,68(r3)
  80ab18:	00000406 	br	80ab2c <alt_sys_init+0x1c8>
  80ab1c:	00c02074 	movhi	r3,129
  80ab20:	18f9d204 	addi	r3,r3,-6328
  80ab24:	00800084 	movi	r2,2
  80ab28:	18801115 	stw	r2,68(r3)
  80ab2c:	e0ffff43 	ldbu	r3,-3(fp)
  80ab30:	00800804 	movi	r2,32
  80ab34:	10c7c83a 	sub	r3,r2,r3
  80ab38:	00bfffc4 	movi	r2,-1
  80ab3c:	10c6d83a 	srl	r3,r2,r3
  80ab40:	00802074 	movhi	r2,129
  80ab44:	10b9d204 	addi	r2,r2,-6328
  80ab48:	10c01215 	stw	r3,72(r2)
  80ab4c:	e0ffff43 	ldbu	r3,-3(fp)
  80ab50:	00802074 	movhi	r2,129
  80ab54:	10b9d204 	addi	r2,r2,-6328
  80ab58:	10801117 	ldw	r2,68(r2)
  80ab5c:	1887883a 	add	r3,r3,r2
  80ab60:	00802074 	movhi	r2,129
  80ab64:	10b9d204 	addi	r2,r2,-6328
  80ab68:	10c01315 	stw	r3,76(r2)
  80ab6c:	e0ffff03 	ldbu	r3,-4(fp)
  80ab70:	00800804 	movi	r2,32
  80ab74:	10c7c83a 	sub	r3,r2,r3
  80ab78:	00bfffc4 	movi	r2,-1
  80ab7c:	10c6d83a 	srl	r3,r2,r3
  80ab80:	00802074 	movhi	r2,129
  80ab84:	10b9d204 	addi	r2,r2,-6328
  80ab88:	10c01415 	stw	r3,80(r2)
  80ab8c:	01002074 	movhi	r4,129
  80ab90:	2139d204 	addi	r4,r4,-6328
  80ab94:	080abac0 	call	80abac <alt_dev_reg>
}
  80ab98:	e037883a 	mov	sp,fp
  80ab9c:	dfc00117 	ldw	ra,4(sp)
  80aba0:	df000017 	ldw	fp,0(sp)
  80aba4:	dec00204 	addi	sp,sp,8
  80aba8:	f800283a 	ret

0080abac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80abac:	defffd04 	addi	sp,sp,-12
  80abb0:	dfc00215 	stw	ra,8(sp)
  80abb4:	df000115 	stw	fp,4(sp)
  80abb8:	df000104 	addi	fp,sp,4
  80abbc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80abc0:	e13fff17 	ldw	r4,-4(fp)
  80abc4:	01402074 	movhi	r5,129
  80abc8:	2979ef04 	addi	r5,r5,-6212
  80abcc:	080b8000 	call	80b800 <alt_dev_llist_insert>
}
  80abd0:	e037883a 	mov	sp,fp
  80abd4:	dfc00117 	ldw	ra,4(sp)
  80abd8:	df000017 	ldw	fp,0(sp)
  80abdc:	dec00204 	addi	sp,sp,8
  80abe0:	f800283a 	ret

0080abe4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80abe4:	defffa04 	addi	sp,sp,-24
  80abe8:	dfc00515 	stw	ra,20(sp)
  80abec:	df000415 	stw	fp,16(sp)
  80abf0:	df000404 	addi	fp,sp,16
  80abf4:	e13ffd15 	stw	r4,-12(fp)
  80abf8:	e17ffe15 	stw	r5,-8(fp)
  80abfc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ac00:	e0bffd17 	ldw	r2,-12(fp)
  80ac04:	10800017 	ldw	r2,0(r2)
  80ac08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80ac0c:	e0bffc17 	ldw	r2,-16(fp)
  80ac10:	11000a04 	addi	r4,r2,40
  80ac14:	e0bffd17 	ldw	r2,-12(fp)
  80ac18:	11c00217 	ldw	r7,8(r2)
  80ac1c:	e17ffe17 	ldw	r5,-8(fp)
  80ac20:	e1bfff17 	ldw	r6,-4(fp)
  80ac24:	080b22c0 	call	80b22c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80ac28:	e037883a 	mov	sp,fp
  80ac2c:	dfc00117 	ldw	ra,4(sp)
  80ac30:	df000017 	ldw	fp,0(sp)
  80ac34:	dec00204 	addi	sp,sp,8
  80ac38:	f800283a 	ret

0080ac3c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ac3c:	defffa04 	addi	sp,sp,-24
  80ac40:	dfc00515 	stw	ra,20(sp)
  80ac44:	df000415 	stw	fp,16(sp)
  80ac48:	df000404 	addi	fp,sp,16
  80ac4c:	e13ffd15 	stw	r4,-12(fp)
  80ac50:	e17ffe15 	stw	r5,-8(fp)
  80ac54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ac58:	e0bffd17 	ldw	r2,-12(fp)
  80ac5c:	10800017 	ldw	r2,0(r2)
  80ac60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80ac64:	e0bffc17 	ldw	r2,-16(fp)
  80ac68:	11000a04 	addi	r4,r2,40
  80ac6c:	e0bffd17 	ldw	r2,-12(fp)
  80ac70:	11c00217 	ldw	r7,8(r2)
  80ac74:	e17ffe17 	ldw	r5,-8(fp)
  80ac78:	e1bfff17 	ldw	r6,-4(fp)
  80ac7c:	080b4500 	call	80b450 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80ac80:	e037883a 	mov	sp,fp
  80ac84:	dfc00117 	ldw	ra,4(sp)
  80ac88:	df000017 	ldw	fp,0(sp)
  80ac8c:	dec00204 	addi	sp,sp,8
  80ac90:	f800283a 	ret

0080ac94 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80ac94:	defffc04 	addi	sp,sp,-16
  80ac98:	dfc00315 	stw	ra,12(sp)
  80ac9c:	df000215 	stw	fp,8(sp)
  80aca0:	df000204 	addi	fp,sp,8
  80aca4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80aca8:	e0bfff17 	ldw	r2,-4(fp)
  80acac:	10800017 	ldw	r2,0(r2)
  80acb0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80acb4:	e0bffe17 	ldw	r2,-8(fp)
  80acb8:	11000a04 	addi	r4,r2,40
  80acbc:	e0bfff17 	ldw	r2,-4(fp)
  80acc0:	11400217 	ldw	r5,8(r2)
  80acc4:	080b0c40 	call	80b0c4 <altera_avalon_jtag_uart_close>
}
  80acc8:	e037883a 	mov	sp,fp
  80accc:	dfc00117 	ldw	ra,4(sp)
  80acd0:	df000017 	ldw	fp,0(sp)
  80acd4:	dec00204 	addi	sp,sp,8
  80acd8:	f800283a 	ret

0080acdc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80acdc:	defffa04 	addi	sp,sp,-24
  80ace0:	dfc00515 	stw	ra,20(sp)
  80ace4:	df000415 	stw	fp,16(sp)
  80ace8:	df000404 	addi	fp,sp,16
  80acec:	e13ffd15 	stw	r4,-12(fp)
  80acf0:	e17ffe15 	stw	r5,-8(fp)
  80acf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80acf8:	e0bffd17 	ldw	r2,-12(fp)
  80acfc:	10800017 	ldw	r2,0(r2)
  80ad00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80ad04:	e0bffc17 	ldw	r2,-16(fp)
  80ad08:	11000a04 	addi	r4,r2,40
  80ad0c:	e17ffe17 	ldw	r5,-8(fp)
  80ad10:	e1bfff17 	ldw	r6,-4(fp)
  80ad14:	080b1380 	call	80b138 <altera_avalon_jtag_uart_ioctl>
}
  80ad18:	e037883a 	mov	sp,fp
  80ad1c:	dfc00117 	ldw	ra,4(sp)
  80ad20:	df000017 	ldw	fp,0(sp)
  80ad24:	dec00204 	addi	sp,sp,8
  80ad28:	f800283a 	ret

0080ad2c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80ad2c:	defffa04 	addi	sp,sp,-24
  80ad30:	dfc00515 	stw	ra,20(sp)
  80ad34:	df000415 	stw	fp,16(sp)
  80ad38:	df000404 	addi	fp,sp,16
  80ad3c:	e13ffd15 	stw	r4,-12(fp)
  80ad40:	e17ffe15 	stw	r5,-8(fp)
  80ad44:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ad48:	e0fffd17 	ldw	r3,-12(fp)
  80ad4c:	00800044 	movi	r2,1
  80ad50:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80ad54:	e0bffd17 	ldw	r2,-12(fp)
  80ad58:	10800017 	ldw	r2,0(r2)
  80ad5c:	11000104 	addi	r4,r2,4
  80ad60:	e0bffd17 	ldw	r2,-12(fp)
  80ad64:	10800817 	ldw	r2,32(r2)
  80ad68:	1007883a 	mov	r3,r2
  80ad6c:	2005883a 	mov	r2,r4
  80ad70:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80ad74:	e13ffe17 	ldw	r4,-8(fp)
  80ad78:	e17fff17 	ldw	r5,-4(fp)
  80ad7c:	d8000015 	stw	zero,0(sp)
  80ad80:	01802074 	movhi	r6,129
  80ad84:	31ab7b04 	addi	r6,r6,-21012
  80ad88:	e1fffd17 	ldw	r7,-12(fp)
  80ad8c:	080b9f80 	call	80b9f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80ad90:	e0bffd17 	ldw	r2,-12(fp)
  80ad94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80ad98:	e0bffd17 	ldw	r2,-12(fp)
  80ad9c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80ada0:	00802074 	movhi	r2,129
  80ada4:	1080ba04 	addi	r2,r2,744
  80ada8:	10800017 	ldw	r2,0(r2)
  80adac:	100b883a 	mov	r5,r2
  80adb0:	01802074 	movhi	r6,129
  80adb4:	31ac0504 	addi	r6,r6,-20460
  80adb8:	e1fffd17 	ldw	r7,-12(fp)
  80adbc:	080b6900 	call	80b690 <alt_alarm_start>
  80adc0:	1004403a 	cmpge	r2,r2,zero
  80adc4:	1000041e 	bne	r2,zero,80add8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80adc8:	e0fffd17 	ldw	r3,-12(fp)
  80adcc:	00a00034 	movhi	r2,32768
  80add0:	10bfffc4 	addi	r2,r2,-1
  80add4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80add8:	e037883a 	mov	sp,fp
  80addc:	dfc00117 	ldw	ra,4(sp)
  80ade0:	df000017 	ldw	fp,0(sp)
  80ade4:	dec00204 	addi	sp,sp,8
  80ade8:	f800283a 	ret

0080adec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80adec:	defff804 	addi	sp,sp,-32
  80adf0:	df000715 	stw	fp,28(sp)
  80adf4:	df000704 	addi	fp,sp,28
  80adf8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80adfc:	e0bfff17 	ldw	r2,-4(fp)
  80ae00:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80ae04:	e0bffe17 	ldw	r2,-8(fp)
  80ae08:	10800017 	ldw	r2,0(r2)
  80ae0c:	e0bffd15 	stw	r2,-12(fp)
  80ae10:	00000006 	br	80ae14 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ae14:	e0bffd17 	ldw	r2,-12(fp)
  80ae18:	10800104 	addi	r2,r2,4
  80ae1c:	10800037 	ldwio	r2,0(r2)
  80ae20:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80ae24:	e0bffc17 	ldw	r2,-16(fp)
  80ae28:	1080c00c 	andi	r2,r2,768
  80ae2c:	1005003a 	cmpeq	r2,r2,zero
  80ae30:	1000741e 	bne	r2,zero,80b004 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80ae34:	e0bffc17 	ldw	r2,-16(fp)
  80ae38:	1080400c 	andi	r2,r2,256
  80ae3c:	1005003a 	cmpeq	r2,r2,zero
  80ae40:	1000351e 	bne	r2,zero,80af18 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80ae44:	00800074 	movhi	r2,1
  80ae48:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ae4c:	e0bffe17 	ldw	r2,-8(fp)
  80ae50:	10800a17 	ldw	r2,40(r2)
  80ae54:	10800044 	addi	r2,r2,1
  80ae58:	1081ffcc 	andi	r2,r2,2047
  80ae5c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80ae60:	e0bffe17 	ldw	r2,-8(fp)
  80ae64:	10c00b17 	ldw	r3,44(r2)
  80ae68:	e0bffa17 	ldw	r2,-24(fp)
  80ae6c:	18801626 	beq	r3,r2,80aec8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80ae70:	e0bffd17 	ldw	r2,-12(fp)
  80ae74:	10800037 	ldwio	r2,0(r2)
  80ae78:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80ae7c:	e0bffb17 	ldw	r2,-20(fp)
  80ae80:	10a0000c 	andi	r2,r2,32768
  80ae84:	1005003a 	cmpeq	r2,r2,zero
  80ae88:	10000f1e 	bne	r2,zero,80aec8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80ae8c:	e0bffe17 	ldw	r2,-8(fp)
  80ae90:	10c00a17 	ldw	r3,40(r2)
  80ae94:	e0bffb17 	ldw	r2,-20(fp)
  80ae98:	1009883a 	mov	r4,r2
  80ae9c:	e0bffe17 	ldw	r2,-8(fp)
  80aea0:	1885883a 	add	r2,r3,r2
  80aea4:	10800e04 	addi	r2,r2,56
  80aea8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80aeac:	e0bffe17 	ldw	r2,-8(fp)
  80aeb0:	10800a17 	ldw	r2,40(r2)
  80aeb4:	10800044 	addi	r2,r2,1
  80aeb8:	10c1ffcc 	andi	r3,r2,2047
  80aebc:	e0bffe17 	ldw	r2,-8(fp)
  80aec0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80aec4:	003fe106 	br	80ae4c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80aec8:	e0bffb17 	ldw	r2,-20(fp)
  80aecc:	10bfffec 	andhi	r2,r2,65535
  80aed0:	1005003a 	cmpeq	r2,r2,zero
  80aed4:	1000101e 	bne	r2,zero,80af18 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80aed8:	e0bffe17 	ldw	r2,-8(fp)
  80aedc:	10c00817 	ldw	r3,32(r2)
  80aee0:	00bfff84 	movi	r2,-2
  80aee4:	1886703a 	and	r3,r3,r2
  80aee8:	e0bffe17 	ldw	r2,-8(fp)
  80aeec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80aef0:	e0bffd17 	ldw	r2,-12(fp)
  80aef4:	11000104 	addi	r4,r2,4
  80aef8:	e0bffe17 	ldw	r2,-8(fp)
  80aefc:	10800817 	ldw	r2,32(r2)
  80af00:	1007883a 	mov	r3,r2
  80af04:	2005883a 	mov	r2,r4
  80af08:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80af0c:	e0bffd17 	ldw	r2,-12(fp)
  80af10:	10800104 	addi	r2,r2,4
  80af14:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80af18:	e0bffc17 	ldw	r2,-16(fp)
  80af1c:	1080800c 	andi	r2,r2,512
  80af20:	1005003a 	cmpeq	r2,r2,zero
  80af24:	103fbb1e 	bne	r2,zero,80ae14 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80af28:	e0bffc17 	ldw	r2,-16(fp)
  80af2c:	10bfffec 	andhi	r2,r2,65535
  80af30:	1004d43a 	srli	r2,r2,16
  80af34:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80af38:	00001506 	br	80af90 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80af3c:	e13ffd17 	ldw	r4,-12(fp)
  80af40:	e0bffe17 	ldw	r2,-8(fp)
  80af44:	10c00d17 	ldw	r3,52(r2)
  80af48:	e0bffe17 	ldw	r2,-8(fp)
  80af4c:	1885883a 	add	r2,r3,r2
  80af50:	10820e04 	addi	r2,r2,2104
  80af54:	10800003 	ldbu	r2,0(r2)
  80af58:	10c03fcc 	andi	r3,r2,255
  80af5c:	18c0201c 	xori	r3,r3,128
  80af60:	18ffe004 	addi	r3,r3,-128
  80af64:	2005883a 	mov	r2,r4
  80af68:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80af6c:	e0bffe17 	ldw	r2,-8(fp)
  80af70:	10800d17 	ldw	r2,52(r2)
  80af74:	10800044 	addi	r2,r2,1
  80af78:	10c1ffcc 	andi	r3,r2,2047
  80af7c:	e0bffe17 	ldw	r2,-8(fp)
  80af80:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80af84:	e0bff917 	ldw	r2,-28(fp)
  80af88:	10bfffc4 	addi	r2,r2,-1
  80af8c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80af90:	e0bff917 	ldw	r2,-28(fp)
  80af94:	1005003a 	cmpeq	r2,r2,zero
  80af98:	1000051e 	bne	r2,zero,80afb0 <altera_avalon_jtag_uart_irq+0x1c4>
  80af9c:	e0bffe17 	ldw	r2,-8(fp)
  80afa0:	10c00d17 	ldw	r3,52(r2)
  80afa4:	e0bffe17 	ldw	r2,-8(fp)
  80afa8:	10800c17 	ldw	r2,48(r2)
  80afac:	18bfe31e 	bne	r3,r2,80af3c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80afb0:	e0bff917 	ldw	r2,-28(fp)
  80afb4:	1005003a 	cmpeq	r2,r2,zero
  80afb8:	103f961e 	bne	r2,zero,80ae14 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80afbc:	e0bffe17 	ldw	r2,-8(fp)
  80afc0:	10c00817 	ldw	r3,32(r2)
  80afc4:	00bfff44 	movi	r2,-3
  80afc8:	1886703a 	and	r3,r3,r2
  80afcc:	e0bffe17 	ldw	r2,-8(fp)
  80afd0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80afd4:	e0bffe17 	ldw	r2,-8(fp)
  80afd8:	10800017 	ldw	r2,0(r2)
  80afdc:	11000104 	addi	r4,r2,4
  80afe0:	e0bffe17 	ldw	r2,-8(fp)
  80afe4:	10800817 	ldw	r2,32(r2)
  80afe8:	1007883a 	mov	r3,r2
  80afec:	2005883a 	mov	r2,r4
  80aff0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80aff4:	e0bffd17 	ldw	r2,-12(fp)
  80aff8:	10800104 	addi	r2,r2,4
  80affc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80b000:	003f8406 	br	80ae14 <altera_avalon_jtag_uart_irq+0x28>
}
  80b004:	e037883a 	mov	sp,fp
  80b008:	df000017 	ldw	fp,0(sp)
  80b00c:	dec00104 	addi	sp,sp,4
  80b010:	f800283a 	ret

0080b014 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80b014:	defffc04 	addi	sp,sp,-16
  80b018:	df000315 	stw	fp,12(sp)
  80b01c:	df000304 	addi	fp,sp,12
  80b020:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80b024:	e0bfff17 	ldw	r2,-4(fp)
  80b028:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80b02c:	e0bffe17 	ldw	r2,-8(fp)
  80b030:	10800017 	ldw	r2,0(r2)
  80b034:	10800104 	addi	r2,r2,4
  80b038:	10800037 	ldwio	r2,0(r2)
  80b03c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80b040:	e0bffd17 	ldw	r2,-12(fp)
  80b044:	1081000c 	andi	r2,r2,1024
  80b048:	1005003a 	cmpeq	r2,r2,zero
  80b04c:	10000c1e 	bne	r2,zero,80b080 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80b050:	e0bffe17 	ldw	r2,-8(fp)
  80b054:	10800017 	ldw	r2,0(r2)
  80b058:	11000104 	addi	r4,r2,4
  80b05c:	e0bffe17 	ldw	r2,-8(fp)
  80b060:	10800817 	ldw	r2,32(r2)
  80b064:	10810014 	ori	r2,r2,1024
  80b068:	1007883a 	mov	r3,r2
  80b06c:	2005883a 	mov	r2,r4
  80b070:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80b074:	e0bffe17 	ldw	r2,-8(fp)
  80b078:	10000915 	stw	zero,36(r2)
  80b07c:	00000a06 	br	80b0a8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80b080:	e0bffe17 	ldw	r2,-8(fp)
  80b084:	10c00917 	ldw	r3,36(r2)
  80b088:	00a00034 	movhi	r2,32768
  80b08c:	10bfff04 	addi	r2,r2,-4
  80b090:	10c00536 	bltu	r2,r3,80b0a8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80b094:	e0bffe17 	ldw	r2,-8(fp)
  80b098:	10800917 	ldw	r2,36(r2)
  80b09c:	10c00044 	addi	r3,r2,1
  80b0a0:	e0bffe17 	ldw	r2,-8(fp)
  80b0a4:	10c00915 	stw	r3,36(r2)
  80b0a8:	00802074 	movhi	r2,129
  80b0ac:	1080ba04 	addi	r2,r2,744
  80b0b0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80b0b4:	e037883a 	mov	sp,fp
  80b0b8:	df000017 	ldw	fp,0(sp)
  80b0bc:	dec00104 	addi	sp,sp,4
  80b0c0:	f800283a 	ret

0080b0c4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80b0c4:	defffc04 	addi	sp,sp,-16
  80b0c8:	df000315 	stw	fp,12(sp)
  80b0cc:	df000304 	addi	fp,sp,12
  80b0d0:	e13ffd15 	stw	r4,-12(fp)
  80b0d4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b0d8:	00000706 	br	80b0f8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80b0dc:	e0bffe17 	ldw	r2,-8(fp)
  80b0e0:	1090000c 	andi	r2,r2,16384
  80b0e4:	1005003a 	cmpeq	r2,r2,zero
  80b0e8:	1000031e 	bne	r2,zero,80b0f8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80b0ec:	00bffd44 	movi	r2,-11
  80b0f0:	e0bfff15 	stw	r2,-4(fp)
  80b0f4:	00000b06 	br	80b124 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b0f8:	e0bffd17 	ldw	r2,-12(fp)
  80b0fc:	10c00d17 	ldw	r3,52(r2)
  80b100:	e0bffd17 	ldw	r2,-12(fp)
  80b104:	10800c17 	ldw	r2,48(r2)
  80b108:	18800526 	beq	r3,r2,80b120 <altera_avalon_jtag_uart_close+0x5c>
  80b10c:	e0bffd17 	ldw	r2,-12(fp)
  80b110:	10c00917 	ldw	r3,36(r2)
  80b114:	e0bffd17 	ldw	r2,-12(fp)
  80b118:	10800117 	ldw	r2,4(r2)
  80b11c:	18bfef36 	bltu	r3,r2,80b0dc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80b120:	e03fff15 	stw	zero,-4(fp)
  80b124:	e0bfff17 	ldw	r2,-4(fp)
}
  80b128:	e037883a 	mov	sp,fp
  80b12c:	df000017 	ldw	fp,0(sp)
  80b130:	dec00104 	addi	sp,sp,4
  80b134:	f800283a 	ret

0080b138 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80b138:	defff804 	addi	sp,sp,-32
  80b13c:	df000715 	stw	fp,28(sp)
  80b140:	df000704 	addi	fp,sp,28
  80b144:	e13ffb15 	stw	r4,-20(fp)
  80b148:	e17ffc15 	stw	r5,-16(fp)
  80b14c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80b150:	00bff9c4 	movi	r2,-25
  80b154:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80b158:	e0bffc17 	ldw	r2,-16(fp)
  80b15c:	e0bfff15 	stw	r2,-4(fp)
  80b160:	e0ffff17 	ldw	r3,-4(fp)
  80b164:	189a8060 	cmpeqi	r2,r3,27137
  80b168:	1000041e 	bne	r2,zero,80b17c <altera_avalon_jtag_uart_ioctl+0x44>
  80b16c:	e0ffff17 	ldw	r3,-4(fp)
  80b170:	189a80a0 	cmpeqi	r2,r3,27138
  80b174:	10001b1e 	bne	r2,zero,80b1e4 <altera_avalon_jtag_uart_ioctl+0xac>
  80b178:	00002706 	br	80b218 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80b17c:	e0bffb17 	ldw	r2,-20(fp)
  80b180:	10c00117 	ldw	r3,4(r2)
  80b184:	00a00034 	movhi	r2,32768
  80b188:	10bfffc4 	addi	r2,r2,-1
  80b18c:	18802226 	beq	r3,r2,80b218 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80b190:	e0bffd17 	ldw	r2,-12(fp)
  80b194:	10800017 	ldw	r2,0(r2)
  80b198:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80b19c:	e0bff917 	ldw	r2,-28(fp)
  80b1a0:	10800090 	cmplti	r2,r2,2
  80b1a4:	1000071e 	bne	r2,zero,80b1c4 <altera_avalon_jtag_uart_ioctl+0x8c>
  80b1a8:	e0fff917 	ldw	r3,-28(fp)
  80b1ac:	00a00034 	movhi	r2,32768
  80b1b0:	10bfffc4 	addi	r2,r2,-1
  80b1b4:	18800326 	beq	r3,r2,80b1c4 <altera_avalon_jtag_uart_ioctl+0x8c>
  80b1b8:	e0bff917 	ldw	r2,-28(fp)
  80b1bc:	e0bffe15 	stw	r2,-8(fp)
  80b1c0:	00000306 	br	80b1d0 <altera_avalon_jtag_uart_ioctl+0x98>
  80b1c4:	00e00034 	movhi	r3,32768
  80b1c8:	18ffff84 	addi	r3,r3,-2
  80b1cc:	e0fffe15 	stw	r3,-8(fp)
  80b1d0:	e0bffb17 	ldw	r2,-20(fp)
  80b1d4:	e0fffe17 	ldw	r3,-8(fp)
  80b1d8:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80b1dc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80b1e0:	00000d06 	br	80b218 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80b1e4:	e0bffb17 	ldw	r2,-20(fp)
  80b1e8:	10c00117 	ldw	r3,4(r2)
  80b1ec:	00a00034 	movhi	r2,32768
  80b1f0:	10bfffc4 	addi	r2,r2,-1
  80b1f4:	18800826 	beq	r3,r2,80b218 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80b1f8:	e13ffd17 	ldw	r4,-12(fp)
  80b1fc:	e0bffb17 	ldw	r2,-20(fp)
  80b200:	10c00917 	ldw	r3,36(r2)
  80b204:	e0bffb17 	ldw	r2,-20(fp)
  80b208:	10800117 	ldw	r2,4(r2)
  80b20c:	1885803a 	cmpltu	r2,r3,r2
  80b210:	20800015 	stw	r2,0(r4)
      rc = 0;
  80b214:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80b218:	e0bffa17 	ldw	r2,-24(fp)
}
  80b21c:	e037883a 	mov	sp,fp
  80b220:	df000017 	ldw	fp,0(sp)
  80b224:	dec00104 	addi	sp,sp,4
  80b228:	f800283a 	ret

0080b22c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80b22c:	defff204 	addi	sp,sp,-56
  80b230:	dfc00d15 	stw	ra,52(sp)
  80b234:	df000c15 	stw	fp,48(sp)
  80b238:	df000c04 	addi	fp,sp,48
  80b23c:	e13ffb15 	stw	r4,-20(fp)
  80b240:	e17ffc15 	stw	r5,-16(fp)
  80b244:	e1bffd15 	stw	r6,-12(fp)
  80b248:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80b24c:	e0bffc17 	ldw	r2,-16(fp)
  80b250:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b254:	00004806 	br	80b378 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80b258:	e0bffb17 	ldw	r2,-20(fp)
  80b25c:	10800a17 	ldw	r2,40(r2)
  80b260:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80b264:	e0bffb17 	ldw	r2,-20(fp)
  80b268:	10800b17 	ldw	r2,44(r2)
  80b26c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80b270:	e0fff717 	ldw	r3,-36(fp)
  80b274:	e0bff617 	ldw	r2,-40(fp)
  80b278:	18800536 	bltu	r3,r2,80b290 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80b27c:	e0bff717 	ldw	r2,-36(fp)
  80b280:	e0fff617 	ldw	r3,-40(fp)
  80b284:	10c5c83a 	sub	r2,r2,r3
  80b288:	e0bff815 	stw	r2,-32(fp)
  80b28c:	00000406 	br	80b2a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80b290:	00820004 	movi	r2,2048
  80b294:	e0fff617 	ldw	r3,-40(fp)
  80b298:	10c5c83a 	sub	r2,r2,r3
  80b29c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80b2a0:	e0bff817 	ldw	r2,-32(fp)
  80b2a4:	1005003a 	cmpeq	r2,r2,zero
  80b2a8:	10001f1e 	bne	r2,zero,80b328 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80b2ac:	e0fffd17 	ldw	r3,-12(fp)
  80b2b0:	e0bff817 	ldw	r2,-32(fp)
  80b2b4:	1880022e 	bgeu	r3,r2,80b2c0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80b2b8:	e0bffd17 	ldw	r2,-12(fp)
  80b2bc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80b2c0:	e0bffb17 	ldw	r2,-20(fp)
  80b2c4:	10c00e04 	addi	r3,r2,56
  80b2c8:	e0bff617 	ldw	r2,-40(fp)
  80b2cc:	1887883a 	add	r3,r3,r2
  80b2d0:	e0bffa17 	ldw	r2,-24(fp)
  80b2d4:	1009883a 	mov	r4,r2
  80b2d8:	180b883a 	mov	r5,r3
  80b2dc:	e1bff817 	ldw	r6,-32(fp)
  80b2e0:	08057c40 	call	8057c4 <memcpy>
      ptr   += n;
  80b2e4:	e0fff817 	ldw	r3,-32(fp)
  80b2e8:	e0bffa17 	ldw	r2,-24(fp)
  80b2ec:	10c5883a 	add	r2,r2,r3
  80b2f0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80b2f4:	e0fffd17 	ldw	r3,-12(fp)
  80b2f8:	e0bff817 	ldw	r2,-32(fp)
  80b2fc:	1885c83a 	sub	r2,r3,r2
  80b300:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b304:	e0fff617 	ldw	r3,-40(fp)
  80b308:	e0bff817 	ldw	r2,-32(fp)
  80b30c:	1885883a 	add	r2,r3,r2
  80b310:	10c1ffcc 	andi	r3,r2,2047
  80b314:	e0bffb17 	ldw	r2,-20(fp)
  80b318:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80b31c:	e0bffd17 	ldw	r2,-12(fp)
  80b320:	10800048 	cmpgei	r2,r2,1
  80b324:	103fcc1e 	bne	r2,zero,80b258 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80b328:	e0fffa17 	ldw	r3,-24(fp)
  80b32c:	e0bffc17 	ldw	r2,-16(fp)
  80b330:	1880141e 	bne	r3,r2,80b384 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80b334:	e0bffe17 	ldw	r2,-8(fp)
  80b338:	1090000c 	andi	r2,r2,16384
  80b33c:	1004c03a 	cmpne	r2,r2,zero
  80b340:	1000101e 	bne	r2,zero,80b384 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80b344:	e0bffb17 	ldw	r2,-20(fp)
  80b348:	10c00a17 	ldw	r3,40(r2)
  80b34c:	e0bff717 	ldw	r2,-36(fp)
  80b350:	1880051e 	bne	r3,r2,80b368 <altera_avalon_jtag_uart_read+0x13c>
  80b354:	e0bffb17 	ldw	r2,-20(fp)
  80b358:	10c00917 	ldw	r3,36(r2)
  80b35c:	e0bffb17 	ldw	r2,-20(fp)
  80b360:	10800117 	ldw	r2,4(r2)
  80b364:	18bff736 	bltu	r3,r2,80b344 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80b368:	e0bffb17 	ldw	r2,-20(fp)
  80b36c:	10c00a17 	ldw	r3,40(r2)
  80b370:	e0bff717 	ldw	r2,-36(fp)
  80b374:	18800326 	beq	r3,r2,80b384 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b378:	e0bffd17 	ldw	r2,-12(fp)
  80b37c:	10800048 	cmpgei	r2,r2,1
  80b380:	103fb51e 	bne	r2,zero,80b258 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80b384:	e0fffa17 	ldw	r3,-24(fp)
  80b388:	e0bffc17 	ldw	r2,-16(fp)
  80b38c:	18801926 	beq	r3,r2,80b3f4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b390:	0005303a 	rdctl	r2,status
  80b394:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b398:	e0fff517 	ldw	r3,-44(fp)
  80b39c:	00bfff84 	movi	r2,-2
  80b3a0:	1884703a 	and	r2,r3,r2
  80b3a4:	1001703a 	wrctl	status,r2
  
  return context;
  80b3a8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80b3ac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b3b0:	e0bffb17 	ldw	r2,-20(fp)
  80b3b4:	10800817 	ldw	r2,32(r2)
  80b3b8:	10c00054 	ori	r3,r2,1
  80b3bc:	e0bffb17 	ldw	r2,-20(fp)
  80b3c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b3c4:	e0bffb17 	ldw	r2,-20(fp)
  80b3c8:	10800017 	ldw	r2,0(r2)
  80b3cc:	11000104 	addi	r4,r2,4
  80b3d0:	e0bffb17 	ldw	r2,-20(fp)
  80b3d4:	10800817 	ldw	r2,32(r2)
  80b3d8:	1007883a 	mov	r3,r2
  80b3dc:	2005883a 	mov	r2,r4
  80b3e0:	10c00035 	stwio	r3,0(r2)
  80b3e4:	e0bff917 	ldw	r2,-28(fp)
  80b3e8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b3ec:	e0bff417 	ldw	r2,-48(fp)
  80b3f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80b3f4:	e0fffa17 	ldw	r3,-24(fp)
  80b3f8:	e0bffc17 	ldw	r2,-16(fp)
  80b3fc:	18800526 	beq	r3,r2,80b414 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80b400:	e0fffa17 	ldw	r3,-24(fp)
  80b404:	e0bffc17 	ldw	r2,-16(fp)
  80b408:	1887c83a 	sub	r3,r3,r2
  80b40c:	e0ffff15 	stw	r3,-4(fp)
  80b410:	00000906 	br	80b438 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80b414:	e0bffe17 	ldw	r2,-8(fp)
  80b418:	1090000c 	andi	r2,r2,16384
  80b41c:	1005003a 	cmpeq	r2,r2,zero
  80b420:	1000031e 	bne	r2,zero,80b430 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80b424:	00bffd44 	movi	r2,-11
  80b428:	e0bfff15 	stw	r2,-4(fp)
  80b42c:	00000206 	br	80b438 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80b430:	00bffec4 	movi	r2,-5
  80b434:	e0bfff15 	stw	r2,-4(fp)
  80b438:	e0bfff17 	ldw	r2,-4(fp)
}
  80b43c:	e037883a 	mov	sp,fp
  80b440:	dfc00117 	ldw	ra,4(sp)
  80b444:	df000017 	ldw	fp,0(sp)
  80b448:	dec00204 	addi	sp,sp,8
  80b44c:	f800283a 	ret

0080b450 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80b450:	defff204 	addi	sp,sp,-56
  80b454:	dfc00d15 	stw	ra,52(sp)
  80b458:	df000c15 	stw	fp,48(sp)
  80b45c:	df000c04 	addi	fp,sp,48
  80b460:	e13ffb15 	stw	r4,-20(fp)
  80b464:	e17ffc15 	stw	r5,-16(fp)
  80b468:	e1bffd15 	stw	r6,-12(fp)
  80b46c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80b470:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80b474:	e0bffc17 	ldw	r2,-16(fp)
  80b478:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80b47c:	00003a06 	br	80b568 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80b480:	e0bffb17 	ldw	r2,-20(fp)
  80b484:	10800c17 	ldw	r2,48(r2)
  80b488:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80b48c:	e0bffb17 	ldw	r2,-20(fp)
  80b490:	10800d17 	ldw	r2,52(r2)
  80b494:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80b498:	e0fffa17 	ldw	r3,-24(fp)
  80b49c:	e0bff917 	ldw	r2,-28(fp)
  80b4a0:	1880062e 	bgeu	r3,r2,80b4bc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80b4a4:	e0fff917 	ldw	r3,-28(fp)
  80b4a8:	e0bffa17 	ldw	r2,-24(fp)
  80b4ac:	1885c83a 	sub	r2,r3,r2
  80b4b0:	10bfffc4 	addi	r2,r2,-1
  80b4b4:	e0bff815 	stw	r2,-32(fp)
  80b4b8:	00000c06 	br	80b4ec <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80b4bc:	e0bff917 	ldw	r2,-28(fp)
  80b4c0:	1005003a 	cmpeq	r2,r2,zero
  80b4c4:	1000051e 	bne	r2,zero,80b4dc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80b4c8:	00820004 	movi	r2,2048
  80b4cc:	e0fffa17 	ldw	r3,-24(fp)
  80b4d0:	10c5c83a 	sub	r2,r2,r3
  80b4d4:	e0bff815 	stw	r2,-32(fp)
  80b4d8:	00000406 	br	80b4ec <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80b4dc:	0081ffc4 	movi	r2,2047
  80b4e0:	e0fffa17 	ldw	r3,-24(fp)
  80b4e4:	10c5c83a 	sub	r2,r2,r3
  80b4e8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80b4ec:	e0bff817 	ldw	r2,-32(fp)
  80b4f0:	1005003a 	cmpeq	r2,r2,zero
  80b4f4:	10001f1e 	bne	r2,zero,80b574 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80b4f8:	e0fffd17 	ldw	r3,-12(fp)
  80b4fc:	e0bff817 	ldw	r2,-32(fp)
  80b500:	1880022e 	bgeu	r3,r2,80b50c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80b504:	e0bffd17 	ldw	r2,-12(fp)
  80b508:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80b50c:	e0bffb17 	ldw	r2,-20(fp)
  80b510:	10c20e04 	addi	r3,r2,2104
  80b514:	e0bffa17 	ldw	r2,-24(fp)
  80b518:	1885883a 	add	r2,r3,r2
  80b51c:	e0fffc17 	ldw	r3,-16(fp)
  80b520:	1009883a 	mov	r4,r2
  80b524:	180b883a 	mov	r5,r3
  80b528:	e1bff817 	ldw	r6,-32(fp)
  80b52c:	08057c40 	call	8057c4 <memcpy>
      ptr   += n;
  80b530:	e0fff817 	ldw	r3,-32(fp)
  80b534:	e0bffc17 	ldw	r2,-16(fp)
  80b538:	10c5883a 	add	r2,r2,r3
  80b53c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80b540:	e0fffd17 	ldw	r3,-12(fp)
  80b544:	e0bff817 	ldw	r2,-32(fp)
  80b548:	1885c83a 	sub	r2,r3,r2
  80b54c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b550:	e0fffa17 	ldw	r3,-24(fp)
  80b554:	e0bff817 	ldw	r2,-32(fp)
  80b558:	1885883a 	add	r2,r3,r2
  80b55c:	10c1ffcc 	andi	r3,r2,2047
  80b560:	e0bffb17 	ldw	r2,-20(fp)
  80b564:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80b568:	e0bffd17 	ldw	r2,-12(fp)
  80b56c:	10800048 	cmpgei	r2,r2,1
  80b570:	103fc31e 	bne	r2,zero,80b480 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b574:	0005303a 	rdctl	r2,status
  80b578:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b57c:	e0fff517 	ldw	r3,-44(fp)
  80b580:	00bfff84 	movi	r2,-2
  80b584:	1884703a 	and	r2,r3,r2
  80b588:	1001703a 	wrctl	status,r2
  
  return context;
  80b58c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80b590:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b594:	e0bffb17 	ldw	r2,-20(fp)
  80b598:	10800817 	ldw	r2,32(r2)
  80b59c:	10c00094 	ori	r3,r2,2
  80b5a0:	e0bffb17 	ldw	r2,-20(fp)
  80b5a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b5a8:	e0bffb17 	ldw	r2,-20(fp)
  80b5ac:	10800017 	ldw	r2,0(r2)
  80b5b0:	11000104 	addi	r4,r2,4
  80b5b4:	e0bffb17 	ldw	r2,-20(fp)
  80b5b8:	10800817 	ldw	r2,32(r2)
  80b5bc:	1007883a 	mov	r3,r2
  80b5c0:	2005883a 	mov	r2,r4
  80b5c4:	10c00035 	stwio	r3,0(r2)
  80b5c8:	e0bff717 	ldw	r2,-36(fp)
  80b5cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b5d0:	e0bff417 	ldw	r2,-48(fp)
  80b5d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80b5d8:	e0bffd17 	ldw	r2,-12(fp)
  80b5dc:	10800050 	cmplti	r2,r2,1
  80b5e0:	1000111e 	bne	r2,zero,80b628 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80b5e4:	e0bffe17 	ldw	r2,-8(fp)
  80b5e8:	1090000c 	andi	r2,r2,16384
  80b5ec:	1004c03a 	cmpne	r2,r2,zero
  80b5f0:	1000101e 	bne	r2,zero,80b634 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80b5f4:	e0bffb17 	ldw	r2,-20(fp)
  80b5f8:	10c00d17 	ldw	r3,52(r2)
  80b5fc:	e0bff917 	ldw	r2,-28(fp)
  80b600:	1880051e 	bne	r3,r2,80b618 <altera_avalon_jtag_uart_write+0x1c8>
  80b604:	e0bffb17 	ldw	r2,-20(fp)
  80b608:	10c00917 	ldw	r3,36(r2)
  80b60c:	e0bffb17 	ldw	r2,-20(fp)
  80b610:	10800117 	ldw	r2,4(r2)
  80b614:	18bff736 	bltu	r3,r2,80b5f4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80b618:	e0bffb17 	ldw	r2,-20(fp)
  80b61c:	10c00d17 	ldw	r3,52(r2)
  80b620:	e0bff917 	ldw	r2,-28(fp)
  80b624:	18800326 	beq	r3,r2,80b634 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  80b628:	e0bffd17 	ldw	r2,-12(fp)
  80b62c:	10800048 	cmpgei	r2,r2,1
  80b630:	103fcd1e 	bne	r2,zero,80b568 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80b634:	e0fffc17 	ldw	r3,-16(fp)
  80b638:	e0bff617 	ldw	r2,-40(fp)
  80b63c:	18800526 	beq	r3,r2,80b654 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80b640:	e0fffc17 	ldw	r3,-16(fp)
  80b644:	e0bff617 	ldw	r2,-40(fp)
  80b648:	1887c83a 	sub	r3,r3,r2
  80b64c:	e0ffff15 	stw	r3,-4(fp)
  80b650:	00000906 	br	80b678 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80b654:	e0bffe17 	ldw	r2,-8(fp)
  80b658:	1090000c 	andi	r2,r2,16384
  80b65c:	1005003a 	cmpeq	r2,r2,zero
  80b660:	1000031e 	bne	r2,zero,80b670 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80b664:	00bffd44 	movi	r2,-11
  80b668:	e0bfff15 	stw	r2,-4(fp)
  80b66c:	00000206 	br	80b678 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80b670:	00bffec4 	movi	r2,-5
  80b674:	e0bfff15 	stw	r2,-4(fp)
  80b678:	e0bfff17 	ldw	r2,-4(fp)
}
  80b67c:	e037883a 	mov	sp,fp
  80b680:	dfc00117 	ldw	ra,4(sp)
  80b684:	df000017 	ldw	fp,0(sp)
  80b688:	dec00204 	addi	sp,sp,8
  80b68c:	f800283a 	ret

0080b690 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80b690:	defff404 	addi	sp,sp,-48
  80b694:	df000b15 	stw	fp,44(sp)
  80b698:	df000b04 	addi	fp,sp,44
  80b69c:	e13ffb15 	stw	r4,-20(fp)
  80b6a0:	e17ffc15 	stw	r5,-16(fp)
  80b6a4:	e1bffd15 	stw	r6,-12(fp)
  80b6a8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80b6ac:	e03ff915 	stw	zero,-28(fp)
  80b6b0:	00802074 	movhi	r2,129
  80b6b4:	1080ba04 	addi	r2,r2,744
  80b6b8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80b6bc:	1005003a 	cmpeq	r2,r2,zero
  80b6c0:	1000411e 	bne	r2,zero,80b7c8 <alt_alarm_start+0x138>
  {
    if (alarm)
  80b6c4:	e0bffb17 	ldw	r2,-20(fp)
  80b6c8:	1005003a 	cmpeq	r2,r2,zero
  80b6cc:	10003b1e 	bne	r2,zero,80b7bc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80b6d0:	e0fffb17 	ldw	r3,-20(fp)
  80b6d4:	e0bffd17 	ldw	r2,-12(fp)
  80b6d8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80b6dc:	e0fffb17 	ldw	r3,-20(fp)
  80b6e0:	e0bffe17 	ldw	r2,-8(fp)
  80b6e4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b6e8:	0005303a 	rdctl	r2,status
  80b6ec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b6f0:	e0fff817 	ldw	r3,-32(fp)
  80b6f4:	00bfff84 	movi	r2,-2
  80b6f8:	1884703a 	and	r2,r3,r2
  80b6fc:	1001703a 	wrctl	status,r2
  
  return context;
  80b700:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80b704:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80b708:	00802074 	movhi	r2,129
  80b70c:	1080bb04 	addi	r2,r2,748
  80b710:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80b714:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80b718:	e0fffc17 	ldw	r3,-16(fp)
  80b71c:	e0bff917 	ldw	r2,-28(fp)
  80b720:	1885883a 	add	r2,r3,r2
  80b724:	10c00044 	addi	r3,r2,1
  80b728:	e0bffb17 	ldw	r2,-20(fp)
  80b72c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80b730:	e0bffb17 	ldw	r2,-20(fp)
  80b734:	10c00217 	ldw	r3,8(r2)
  80b738:	e0bff917 	ldw	r2,-28(fp)
  80b73c:	1880042e 	bgeu	r3,r2,80b750 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80b740:	e0fffb17 	ldw	r3,-20(fp)
  80b744:	00800044 	movi	r2,1
  80b748:	18800405 	stb	r2,16(r3)
  80b74c:	00000206 	br	80b758 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80b750:	e0bffb17 	ldw	r2,-20(fp)
  80b754:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80b758:	e0fffb17 	ldw	r3,-20(fp)
  80b75c:	00802074 	movhi	r2,129
  80b760:	10b9f504 	addi	r2,r2,-6188
  80b764:	e0bff615 	stw	r2,-40(fp)
  80b768:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80b76c:	e0fff717 	ldw	r3,-36(fp)
  80b770:	e0bff617 	ldw	r2,-40(fp)
  80b774:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80b778:	e0bff617 	ldw	r2,-40(fp)
  80b77c:	10c00017 	ldw	r3,0(r2)
  80b780:	e0bff717 	ldw	r2,-36(fp)
  80b784:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80b788:	e0bff617 	ldw	r2,-40(fp)
  80b78c:	10c00017 	ldw	r3,0(r2)
  80b790:	e0bff717 	ldw	r2,-36(fp)
  80b794:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80b798:	e0fff617 	ldw	r3,-40(fp)
  80b79c:	e0bff717 	ldw	r2,-36(fp)
  80b7a0:	18800015 	stw	r2,0(r3)
  80b7a4:	e0bffa17 	ldw	r2,-24(fp)
  80b7a8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b7ac:	e0bff517 	ldw	r2,-44(fp)
  80b7b0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80b7b4:	e03fff15 	stw	zero,-4(fp)
  80b7b8:	00000506 	br	80b7d0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80b7bc:	00bffa84 	movi	r2,-22
  80b7c0:	e0bfff15 	stw	r2,-4(fp)
  80b7c4:	00000206 	br	80b7d0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80b7c8:	00bfde84 	movi	r2,-134
  80b7cc:	e0bfff15 	stw	r2,-4(fp)
  80b7d0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80b7d4:	e037883a 	mov	sp,fp
  80b7d8:	df000017 	ldw	fp,0(sp)
  80b7dc:	dec00104 	addi	sp,sp,4
  80b7e0:	f800283a 	ret

0080b7e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80b7e4:	deffff04 	addi	sp,sp,-4
  80b7e8:	df000015 	stw	fp,0(sp)
  80b7ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80b7f0:	e037883a 	mov	sp,fp
  80b7f4:	df000017 	ldw	fp,0(sp)
  80b7f8:	dec00104 	addi	sp,sp,4
  80b7fc:	f800283a 	ret

0080b800 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80b800:	defff904 	addi	sp,sp,-28
  80b804:	dfc00615 	stw	ra,24(sp)
  80b808:	df000515 	stw	fp,20(sp)
  80b80c:	df000504 	addi	fp,sp,20
  80b810:	e13ffd15 	stw	r4,-12(fp)
  80b814:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80b818:	e0bffd17 	ldw	r2,-12(fp)
  80b81c:	1005003a 	cmpeq	r2,r2,zero
  80b820:	1000041e 	bne	r2,zero,80b834 <alt_dev_llist_insert+0x34>
  80b824:	e0bffd17 	ldw	r2,-12(fp)
  80b828:	10800217 	ldw	r2,8(r2)
  80b82c:	1004c03a 	cmpne	r2,r2,zero
  80b830:	1000071e 	bne	r2,zero,80b850 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80b834:	080b8b40 	call	80b8b4 <alt_get_errno>
  80b838:	1007883a 	mov	r3,r2
  80b83c:	00800584 	movi	r2,22
  80b840:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80b844:	00bffa84 	movi	r2,-22
  80b848:	e0bfff15 	stw	r2,-4(fp)
  80b84c:	00001306 	br	80b89c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80b850:	e0fffd17 	ldw	r3,-12(fp)
  80b854:	e0bffe17 	ldw	r2,-8(fp)
  80b858:	e0bffb15 	stw	r2,-20(fp)
  80b85c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80b860:	e0fffc17 	ldw	r3,-16(fp)
  80b864:	e0bffb17 	ldw	r2,-20(fp)
  80b868:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80b86c:	e0bffb17 	ldw	r2,-20(fp)
  80b870:	10c00017 	ldw	r3,0(r2)
  80b874:	e0bffc17 	ldw	r2,-16(fp)
  80b878:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80b87c:	e0bffb17 	ldw	r2,-20(fp)
  80b880:	10c00017 	ldw	r3,0(r2)
  80b884:	e0bffc17 	ldw	r2,-16(fp)
  80b888:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80b88c:	e0fffb17 	ldw	r3,-20(fp)
  80b890:	e0bffc17 	ldw	r2,-16(fp)
  80b894:	18800015 	stw	r2,0(r3)

  return 0;  
  80b898:	e03fff15 	stw	zero,-4(fp)
  80b89c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b8a0:	e037883a 	mov	sp,fp
  80b8a4:	dfc00117 	ldw	ra,4(sp)
  80b8a8:	df000017 	ldw	fp,0(sp)
  80b8ac:	dec00204 	addi	sp,sp,8
  80b8b0:	f800283a 	ret

0080b8b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b8b4:	defffd04 	addi	sp,sp,-12
  80b8b8:	dfc00215 	stw	ra,8(sp)
  80b8bc:	df000115 	stw	fp,4(sp)
  80b8c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b8c4:	00802074 	movhi	r2,129
  80b8c8:	10b9f204 	addi	r2,r2,-6200
  80b8cc:	10800017 	ldw	r2,0(r2)
  80b8d0:	1005003a 	cmpeq	r2,r2,zero
  80b8d4:	1000061e 	bne	r2,zero,80b8f0 <alt_get_errno+0x3c>
  80b8d8:	00802074 	movhi	r2,129
  80b8dc:	10b9f204 	addi	r2,r2,-6200
  80b8e0:	10800017 	ldw	r2,0(r2)
  80b8e4:	103ee83a 	callr	r2
  80b8e8:	e0bfff15 	stw	r2,-4(fp)
  80b8ec:	00000306 	br	80b8fc <alt_get_errno+0x48>
  80b8f0:	00802074 	movhi	r2,129
  80b8f4:	1080b504 	addi	r2,r2,724
  80b8f8:	e0bfff15 	stw	r2,-4(fp)
  80b8fc:	e0bfff17 	ldw	r2,-4(fp)
}
  80b900:	e037883a 	mov	sp,fp
  80b904:	dfc00117 	ldw	ra,4(sp)
  80b908:	df000017 	ldw	fp,0(sp)
  80b90c:	dec00204 	addi	sp,sp,8
  80b910:	f800283a 	ret

0080b914 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80b914:	defffd04 	addi	sp,sp,-12
  80b918:	dfc00215 	stw	ra,8(sp)
  80b91c:	df000115 	stw	fp,4(sp)
  80b920:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80b924:	00bfff04 	movi	r2,-4
  80b928:	00c02074 	movhi	r3,129
  80b92c:	18f25304 	addi	r3,r3,-14004
  80b930:	1885883a 	add	r2,r3,r2
  80b934:	e0bfff15 	stw	r2,-4(fp)
  80b938:	00000606 	br	80b954 <_do_ctors+0x40>
        (*ctor) (); 
  80b93c:	e0bfff17 	ldw	r2,-4(fp)
  80b940:	10800017 	ldw	r2,0(r2)
  80b944:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80b948:	e0bfff17 	ldw	r2,-4(fp)
  80b94c:	10bfff04 	addi	r2,r2,-4
  80b950:	e0bfff15 	stw	r2,-4(fp)
  80b954:	e0ffff17 	ldw	r3,-4(fp)
  80b958:	00802074 	movhi	r2,129
  80b95c:	10b25204 	addi	r2,r2,-14008
  80b960:	18bff62e 	bgeu	r3,r2,80b93c <_do_ctors+0x28>
        (*ctor) (); 
}
  80b964:	e037883a 	mov	sp,fp
  80b968:	dfc00117 	ldw	ra,4(sp)
  80b96c:	df000017 	ldw	fp,0(sp)
  80b970:	dec00204 	addi	sp,sp,8
  80b974:	f800283a 	ret

0080b978 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80b978:	defffd04 	addi	sp,sp,-12
  80b97c:	dfc00215 	stw	ra,8(sp)
  80b980:	df000115 	stw	fp,4(sp)
  80b984:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80b988:	00bfff04 	movi	r2,-4
  80b98c:	00c02074 	movhi	r3,129
  80b990:	18f25304 	addi	r3,r3,-14004
  80b994:	1885883a 	add	r2,r3,r2
  80b998:	e0bfff15 	stw	r2,-4(fp)
  80b99c:	00000606 	br	80b9b8 <_do_dtors+0x40>
        (*dtor) (); 
  80b9a0:	e0bfff17 	ldw	r2,-4(fp)
  80b9a4:	10800017 	ldw	r2,0(r2)
  80b9a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80b9ac:	e0bfff17 	ldw	r2,-4(fp)
  80b9b0:	10bfff04 	addi	r2,r2,-4
  80b9b4:	e0bfff15 	stw	r2,-4(fp)
  80b9b8:	e0ffff17 	ldw	r3,-4(fp)
  80b9bc:	00802074 	movhi	r2,129
  80b9c0:	10b25304 	addi	r2,r2,-14004
  80b9c4:	18bff62e 	bgeu	r3,r2,80b9a0 <_do_dtors+0x28>
        (*dtor) (); 
}
  80b9c8:	e037883a 	mov	sp,fp
  80b9cc:	dfc00117 	ldw	ra,4(sp)
  80b9d0:	df000017 	ldw	fp,0(sp)
  80b9d4:	dec00204 	addi	sp,sp,8
  80b9d8:	f800283a 	ret

0080b9dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80b9dc:	deffff04 	addi	sp,sp,-4
  80b9e0:	df000015 	stw	fp,0(sp)
  80b9e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  80b9e8:	e037883a 	mov	sp,fp
  80b9ec:	df000017 	ldw	fp,0(sp)
  80b9f0:	dec00104 	addi	sp,sp,4
  80b9f4:	f800283a 	ret

0080b9f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80b9f8:	defff904 	addi	sp,sp,-28
  80b9fc:	dfc00615 	stw	ra,24(sp)
  80ba00:	df000515 	stw	fp,20(sp)
  80ba04:	df000504 	addi	fp,sp,20
  80ba08:	e13ffc15 	stw	r4,-16(fp)
  80ba0c:	e17ffd15 	stw	r5,-12(fp)
  80ba10:	e1bffe15 	stw	r6,-8(fp)
  80ba14:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80ba18:	e0800217 	ldw	r2,8(fp)
  80ba1c:	d8800015 	stw	r2,0(sp)
  80ba20:	e13ffc17 	ldw	r4,-16(fp)
  80ba24:	e17ffd17 	ldw	r5,-12(fp)
  80ba28:	e1bffe17 	ldw	r6,-8(fp)
  80ba2c:	e1ffff17 	ldw	r7,-4(fp)
  80ba30:	080bbcc0 	call	80bbcc <alt_iic_isr_register>
}  
  80ba34:	e037883a 	mov	sp,fp
  80ba38:	dfc00117 	ldw	ra,4(sp)
  80ba3c:	df000017 	ldw	fp,0(sp)
  80ba40:	dec00204 	addi	sp,sp,8
  80ba44:	f800283a 	ret

0080ba48 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80ba48:	defff904 	addi	sp,sp,-28
  80ba4c:	df000615 	stw	fp,24(sp)
  80ba50:	df000604 	addi	fp,sp,24
  80ba54:	e13ffe15 	stw	r4,-8(fp)
  80ba58:	e17fff15 	stw	r5,-4(fp)
  80ba5c:	e0bfff17 	ldw	r2,-4(fp)
  80ba60:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ba64:	0005303a 	rdctl	r2,status
  80ba68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ba6c:	e0fffb17 	ldw	r3,-20(fp)
  80ba70:	00bfff84 	movi	r2,-2
  80ba74:	1884703a 	and	r2,r3,r2
  80ba78:	1001703a 	wrctl	status,r2
  
  return context;
  80ba7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ba80:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80ba84:	e0fffc17 	ldw	r3,-16(fp)
  80ba88:	00800044 	movi	r2,1
  80ba8c:	10c4983a 	sll	r2,r2,r3
  80ba90:	1007883a 	mov	r3,r2
  80ba94:	00802074 	movhi	r2,129
  80ba98:	1080b904 	addi	r2,r2,740
  80ba9c:	10800017 	ldw	r2,0(r2)
  80baa0:	1886b03a 	or	r3,r3,r2
  80baa4:	00802074 	movhi	r2,129
  80baa8:	1080b904 	addi	r2,r2,740
  80baac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80bab0:	00802074 	movhi	r2,129
  80bab4:	1080b904 	addi	r2,r2,740
  80bab8:	10800017 	ldw	r2,0(r2)
  80babc:	100170fa 	wrctl	ienable,r2
  80bac0:	e0bffd17 	ldw	r2,-12(fp)
  80bac4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bac8:	e0bffa17 	ldw	r2,-24(fp)
  80bacc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80bad0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80bad4:	e037883a 	mov	sp,fp
  80bad8:	df000017 	ldw	fp,0(sp)
  80badc:	dec00104 	addi	sp,sp,4
  80bae0:	f800283a 	ret

0080bae4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80bae4:	defff904 	addi	sp,sp,-28
  80bae8:	df000615 	stw	fp,24(sp)
  80baec:	df000604 	addi	fp,sp,24
  80baf0:	e13ffe15 	stw	r4,-8(fp)
  80baf4:	e17fff15 	stw	r5,-4(fp)
  80baf8:	e0bfff17 	ldw	r2,-4(fp)
  80bafc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bb00:	0005303a 	rdctl	r2,status
  80bb04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bb08:	e0fffb17 	ldw	r3,-20(fp)
  80bb0c:	00bfff84 	movi	r2,-2
  80bb10:	1884703a 	and	r2,r3,r2
  80bb14:	1001703a 	wrctl	status,r2
  
  return context;
  80bb18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80bb1c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80bb20:	e0fffc17 	ldw	r3,-16(fp)
  80bb24:	00800044 	movi	r2,1
  80bb28:	10c4983a 	sll	r2,r2,r3
  80bb2c:	0084303a 	nor	r2,zero,r2
  80bb30:	1007883a 	mov	r3,r2
  80bb34:	00802074 	movhi	r2,129
  80bb38:	1080b904 	addi	r2,r2,740
  80bb3c:	10800017 	ldw	r2,0(r2)
  80bb40:	1886703a 	and	r3,r3,r2
  80bb44:	00802074 	movhi	r2,129
  80bb48:	1080b904 	addi	r2,r2,740
  80bb4c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80bb50:	00802074 	movhi	r2,129
  80bb54:	1080b904 	addi	r2,r2,740
  80bb58:	10800017 	ldw	r2,0(r2)
  80bb5c:	100170fa 	wrctl	ienable,r2
  80bb60:	e0bffd17 	ldw	r2,-12(fp)
  80bb64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bb68:	e0bffa17 	ldw	r2,-24(fp)
  80bb6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80bb70:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80bb74:	e037883a 	mov	sp,fp
  80bb78:	df000017 	ldw	fp,0(sp)
  80bb7c:	dec00104 	addi	sp,sp,4
  80bb80:	f800283a 	ret

0080bb84 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80bb84:	defffc04 	addi	sp,sp,-16
  80bb88:	df000315 	stw	fp,12(sp)
  80bb8c:	df000304 	addi	fp,sp,12
  80bb90:	e13ffe15 	stw	r4,-8(fp)
  80bb94:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80bb98:	000530fa 	rdctl	r2,ienable
  80bb9c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80bba0:	e0ffff17 	ldw	r3,-4(fp)
  80bba4:	00800044 	movi	r2,1
  80bba8:	10c4983a 	sll	r2,r2,r3
  80bbac:	1007883a 	mov	r3,r2
  80bbb0:	e0bffd17 	ldw	r2,-12(fp)
  80bbb4:	1884703a 	and	r2,r3,r2
  80bbb8:	1004c03a 	cmpne	r2,r2,zero
}
  80bbbc:	e037883a 	mov	sp,fp
  80bbc0:	df000017 	ldw	fp,0(sp)
  80bbc4:	dec00104 	addi	sp,sp,4
  80bbc8:	f800283a 	ret

0080bbcc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80bbcc:	defff404 	addi	sp,sp,-48
  80bbd0:	dfc00b15 	stw	ra,44(sp)
  80bbd4:	df000a15 	stw	fp,40(sp)
  80bbd8:	df000a04 	addi	fp,sp,40
  80bbdc:	e13ffb15 	stw	r4,-20(fp)
  80bbe0:	e17ffc15 	stw	r5,-16(fp)
  80bbe4:	e1bffd15 	stw	r6,-12(fp)
  80bbe8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80bbec:	00bffa84 	movi	r2,-22
  80bbf0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80bbf4:	e0bffc17 	ldw	r2,-16(fp)
  80bbf8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80bbfc:	e0bff917 	ldw	r2,-28(fp)
  80bc00:	10800808 	cmpgei	r2,r2,32
  80bc04:	1000291e 	bne	r2,zero,80bcac <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bc08:	0005303a 	rdctl	r2,status
  80bc0c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bc10:	e0fff717 	ldw	r3,-36(fp)
  80bc14:	00bfff84 	movi	r2,-2
  80bc18:	1884703a 	and	r2,r3,r2
  80bc1c:	1001703a 	wrctl	status,r2
  
  return context;
  80bc20:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80bc24:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80bc28:	e0bff917 	ldw	r2,-28(fp)
  80bc2c:	00c02074 	movhi	r3,129
  80bc30:	18c0c604 	addi	r3,r3,792
  80bc34:	100490fa 	slli	r2,r2,3
  80bc38:	10c7883a 	add	r3,r2,r3
  80bc3c:	e0bffd17 	ldw	r2,-12(fp)
  80bc40:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80bc44:	e0bff917 	ldw	r2,-28(fp)
  80bc48:	00c02074 	movhi	r3,129
  80bc4c:	18c0c604 	addi	r3,r3,792
  80bc50:	100490fa 	slli	r2,r2,3
  80bc54:	10c5883a 	add	r2,r2,r3
  80bc58:	10c00104 	addi	r3,r2,4
  80bc5c:	e0bffe17 	ldw	r2,-8(fp)
  80bc60:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80bc64:	e0bffd17 	ldw	r2,-12(fp)
  80bc68:	1005003a 	cmpeq	r2,r2,zero
  80bc6c:	1000051e 	bne	r2,zero,80bc84 <alt_iic_isr_register+0xb8>
  80bc70:	e17ff917 	ldw	r5,-28(fp)
  80bc74:	e13ffb17 	ldw	r4,-20(fp)
  80bc78:	080ba480 	call	80ba48 <alt_ic_irq_enable>
  80bc7c:	e0bfff15 	stw	r2,-4(fp)
  80bc80:	00000406 	br	80bc94 <alt_iic_isr_register+0xc8>
  80bc84:	e17ff917 	ldw	r5,-28(fp)
  80bc88:	e13ffb17 	ldw	r4,-20(fp)
  80bc8c:	080bae40 	call	80bae4 <alt_ic_irq_disable>
  80bc90:	e0bfff15 	stw	r2,-4(fp)
  80bc94:	e0bfff17 	ldw	r2,-4(fp)
  80bc98:	e0bffa15 	stw	r2,-24(fp)
  80bc9c:	e0bff817 	ldw	r2,-32(fp)
  80bca0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bca4:	e0bff617 	ldw	r2,-40(fp)
  80bca8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80bcac:	e0bffa17 	ldw	r2,-24(fp)
}
  80bcb0:	e037883a 	mov	sp,fp
  80bcb4:	dfc00117 	ldw	ra,4(sp)
  80bcb8:	df000017 	ldw	fp,0(sp)
  80bcbc:	dec00204 	addi	sp,sp,8
  80bcc0:	f800283a 	ret

0080bcc4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80bcc4:	defff804 	addi	sp,sp,-32
  80bcc8:	dfc00715 	stw	ra,28(sp)
  80bccc:	df000615 	stw	fp,24(sp)
  80bcd0:	dc000515 	stw	r16,20(sp)
  80bcd4:	df000504 	addi	fp,sp,20
  80bcd8:	e13ffc15 	stw	r4,-16(fp)
  80bcdc:	e17ffd15 	stw	r5,-12(fp)
  80bce0:	e1bffe15 	stw	r6,-8(fp)
  80bce4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80bce8:	e13ffd17 	ldw	r4,-12(fp)
  80bcec:	e17ffe17 	ldw	r5,-8(fp)
  80bcf0:	e1bfff17 	ldw	r6,-4(fp)
  80bcf4:	080bf0c0 	call	80bf0c <open>
  80bcf8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80bcfc:	e0bffb17 	ldw	r2,-20(fp)
  80bd00:	1004803a 	cmplt	r2,r2,zero
  80bd04:	10001f1e 	bne	r2,zero,80bd84 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80bd08:	e13ffb17 	ldw	r4,-20(fp)
  80bd0c:	04002074 	movhi	r16,129
  80bd10:	84354e04 	addi	r16,r16,-10952
  80bd14:	01400304 	movi	r5,12
  80bd18:	08097300 	call	809730 <__mulsi3>
  80bd1c:	1405883a 	add	r2,r2,r16
  80bd20:	10c00017 	ldw	r3,0(r2)
  80bd24:	e0bffc17 	ldw	r2,-16(fp)
  80bd28:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80bd2c:	e13ffb17 	ldw	r4,-20(fp)
  80bd30:	04002074 	movhi	r16,129
  80bd34:	84354e04 	addi	r16,r16,-10952
  80bd38:	01400304 	movi	r5,12
  80bd3c:	08097300 	call	809730 <__mulsi3>
  80bd40:	1405883a 	add	r2,r2,r16
  80bd44:	10800104 	addi	r2,r2,4
  80bd48:	10c00017 	ldw	r3,0(r2)
  80bd4c:	e0bffc17 	ldw	r2,-16(fp)
  80bd50:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80bd54:	e13ffb17 	ldw	r4,-20(fp)
  80bd58:	04002074 	movhi	r16,129
  80bd5c:	84354e04 	addi	r16,r16,-10952
  80bd60:	01400304 	movi	r5,12
  80bd64:	08097300 	call	809730 <__mulsi3>
  80bd68:	1405883a 	add	r2,r2,r16
  80bd6c:	10800204 	addi	r2,r2,8
  80bd70:	10c00017 	ldw	r3,0(r2)
  80bd74:	e0bffc17 	ldw	r2,-16(fp)
  80bd78:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80bd7c:	e13ffb17 	ldw	r4,-20(fp)
  80bd80:	080a6780 	call	80a678 <alt_release_fd>
  }
} 
  80bd84:	e037883a 	mov	sp,fp
  80bd88:	dfc00217 	ldw	ra,8(sp)
  80bd8c:	df000117 	ldw	fp,4(sp)
  80bd90:	dc000017 	ldw	r16,0(sp)
  80bd94:	dec00304 	addi	sp,sp,12
  80bd98:	f800283a 	ret

0080bd9c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80bd9c:	defffb04 	addi	sp,sp,-20
  80bda0:	dfc00415 	stw	ra,16(sp)
  80bda4:	df000315 	stw	fp,12(sp)
  80bda8:	df000304 	addi	fp,sp,12
  80bdac:	e13ffd15 	stw	r4,-12(fp)
  80bdb0:	e17ffe15 	stw	r5,-8(fp)
  80bdb4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80bdb8:	01002074 	movhi	r4,129
  80bdbc:	21355104 	addi	r4,r4,-10940
  80bdc0:	e17ffd17 	ldw	r5,-12(fp)
  80bdc4:	01800044 	movi	r6,1
  80bdc8:	01c07fc4 	movi	r7,511
  80bdcc:	080bcc40 	call	80bcc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80bdd0:	01002074 	movhi	r4,129
  80bdd4:	21354e04 	addi	r4,r4,-10952
  80bdd8:	e17ffe17 	ldw	r5,-8(fp)
  80bddc:	000d883a 	mov	r6,zero
  80bde0:	01c07fc4 	movi	r7,511
  80bde4:	080bcc40 	call	80bcc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80bde8:	01002074 	movhi	r4,129
  80bdec:	21355404 	addi	r4,r4,-10928
  80bdf0:	e17fff17 	ldw	r5,-4(fp)
  80bdf4:	01800044 	movi	r6,1
  80bdf8:	01c07fc4 	movi	r7,511
  80bdfc:	080bcc40 	call	80bcc4 <alt_open_fd>
}  
  80be00:	e037883a 	mov	sp,fp
  80be04:	dfc00117 	ldw	ra,4(sp)
  80be08:	df000017 	ldw	fp,0(sp)
  80be0c:	dec00204 	addi	sp,sp,8
  80be10:	f800283a 	ret

0080be14 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80be14:	defffa04 	addi	sp,sp,-24
  80be18:	dfc00515 	stw	ra,20(sp)
  80be1c:	df000415 	stw	fp,16(sp)
  80be20:	dc000315 	stw	r16,12(sp)
  80be24:	df000304 	addi	fp,sp,12
  80be28:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80be2c:	e0bffe17 	ldw	r2,-8(fp)
  80be30:	10800217 	ldw	r2,8(r2)
  80be34:	10d00034 	orhi	r3,r2,16384
  80be38:	e0bffe17 	ldw	r2,-8(fp)
  80be3c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80be40:	e03ffd15 	stw	zero,-12(fp)
  80be44:	00002306 	br	80bed4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80be48:	e13ffd17 	ldw	r4,-12(fp)
  80be4c:	04002074 	movhi	r16,129
  80be50:	84354e04 	addi	r16,r16,-10952
  80be54:	01400304 	movi	r5,12
  80be58:	08097300 	call	809730 <__mulsi3>
  80be5c:	1405883a 	add	r2,r2,r16
  80be60:	10c00017 	ldw	r3,0(r2)
  80be64:	e0bffe17 	ldw	r2,-8(fp)
  80be68:	10800017 	ldw	r2,0(r2)
  80be6c:	1880161e 	bne	r3,r2,80bec8 <alt_file_locked+0xb4>
  80be70:	e13ffd17 	ldw	r4,-12(fp)
  80be74:	04002074 	movhi	r16,129
  80be78:	84354e04 	addi	r16,r16,-10952
  80be7c:	01400304 	movi	r5,12
  80be80:	08097300 	call	809730 <__mulsi3>
  80be84:	1405883a 	add	r2,r2,r16
  80be88:	10800204 	addi	r2,r2,8
  80be8c:	10800017 	ldw	r2,0(r2)
  80be90:	1004403a 	cmpge	r2,r2,zero
  80be94:	10000c1e 	bne	r2,zero,80bec8 <alt_file_locked+0xb4>
  80be98:	e13ffd17 	ldw	r4,-12(fp)
  80be9c:	01400304 	movi	r5,12
  80bea0:	08097300 	call	809730 <__mulsi3>
  80bea4:	1007883a 	mov	r3,r2
  80bea8:	00802074 	movhi	r2,129
  80beac:	10b54e04 	addi	r2,r2,-10952
  80beb0:	1887883a 	add	r3,r3,r2
  80beb4:	e0bffe17 	ldw	r2,-8(fp)
  80beb8:	18800326 	beq	r3,r2,80bec8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80bebc:	00bffcc4 	movi	r2,-13
  80bec0:	e0bfff15 	stw	r2,-4(fp)
  80bec4:	00000a06 	br	80bef0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80bec8:	e0bffd17 	ldw	r2,-12(fp)
  80becc:	10800044 	addi	r2,r2,1
  80bed0:	e0bffd15 	stw	r2,-12(fp)
  80bed4:	00802074 	movhi	r2,129
  80bed8:	10b9f104 	addi	r2,r2,-6204
  80bedc:	10800017 	ldw	r2,0(r2)
  80bee0:	1007883a 	mov	r3,r2
  80bee4:	e0bffd17 	ldw	r2,-12(fp)
  80bee8:	18bfd72e 	bgeu	r3,r2,80be48 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80beec:	e03fff15 	stw	zero,-4(fp)
  80bef0:	e0bfff17 	ldw	r2,-4(fp)
}
  80bef4:	e037883a 	mov	sp,fp
  80bef8:	dfc00217 	ldw	ra,8(sp)
  80befc:	df000117 	ldw	fp,4(sp)
  80bf00:	dc000017 	ldw	r16,0(sp)
  80bf04:	dec00304 	addi	sp,sp,12
  80bf08:	f800283a 	ret

0080bf0c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80bf0c:	defff404 	addi	sp,sp,-48
  80bf10:	dfc00b15 	stw	ra,44(sp)
  80bf14:	df000a15 	stw	fp,40(sp)
  80bf18:	df000a04 	addi	fp,sp,40
  80bf1c:	e13ffb15 	stw	r4,-20(fp)
  80bf20:	e17ffc15 	stw	r5,-16(fp)
  80bf24:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80bf28:	00bfffc4 	movi	r2,-1
  80bf2c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80bf30:	00bffb44 	movi	r2,-19
  80bf34:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80bf38:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80bf3c:	e13ffb17 	ldw	r4,-20(fp)
  80bf40:	01402074 	movhi	r5,129
  80bf44:	2979ef04 	addi	r5,r5,-6212
  80bf48:	080c2bc0 	call	80c2bc <alt_find_dev>
  80bf4c:	e0bffa15 	stw	r2,-24(fp)
  80bf50:	e0bffa17 	ldw	r2,-24(fp)
  80bf54:	1004c03a 	cmpne	r2,r2,zero
  80bf58:	1000051e 	bne	r2,zero,80bf70 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80bf5c:	e13ffb17 	ldw	r4,-20(fp)
  80bf60:	080c3500 	call	80c350 <alt_find_file>
  80bf64:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80bf68:	00800044 	movi	r2,1
  80bf6c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80bf70:	e0bffa17 	ldw	r2,-24(fp)
  80bf74:	1005003a 	cmpeq	r2,r2,zero
  80bf78:	1000311e 	bne	r2,zero,80c040 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80bf7c:	e13ffa17 	ldw	r4,-24(fp)
  80bf80:	080c4700 	call	80c470 <alt_get_fd>
  80bf84:	e0bff815 	stw	r2,-32(fp)
  80bf88:	e0bff817 	ldw	r2,-32(fp)
  80bf8c:	1004403a 	cmpge	r2,r2,zero
  80bf90:	1000031e 	bne	r2,zero,80bfa0 <open+0x94>
    {
      status = index;
  80bf94:	e0bff817 	ldw	r2,-32(fp)
  80bf98:	e0bff715 	stw	r2,-36(fp)
  80bf9c:	00002a06 	br	80c048 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  80bfa0:	e13ff817 	ldw	r4,-32(fp)
  80bfa4:	01400304 	movi	r5,12
  80bfa8:	08097300 	call	809730 <__mulsi3>
  80bfac:	1007883a 	mov	r3,r2
  80bfb0:	00802074 	movhi	r2,129
  80bfb4:	10b54e04 	addi	r2,r2,-10952
  80bfb8:	1885883a 	add	r2,r3,r2
  80bfbc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80bfc0:	e0fffc17 	ldw	r3,-16(fp)
  80bfc4:	00900034 	movhi	r2,16384
  80bfc8:	10bfffc4 	addi	r2,r2,-1
  80bfcc:	1886703a 	and	r3,r3,r2
  80bfd0:	e0bff917 	ldw	r2,-28(fp)
  80bfd4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80bfd8:	e0bff617 	ldw	r2,-40(fp)
  80bfdc:	1004c03a 	cmpne	r2,r2,zero
  80bfe0:	1000061e 	bne	r2,zero,80bffc <open+0xf0>
  80bfe4:	e13ff917 	ldw	r4,-28(fp)
  80bfe8:	080be140 	call	80be14 <alt_file_locked>
  80bfec:	e0bff715 	stw	r2,-36(fp)
  80bff0:	e0bff717 	ldw	r2,-36(fp)
  80bff4:	1004803a 	cmplt	r2,r2,zero
  80bff8:	1000131e 	bne	r2,zero,80c048 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80bffc:	e0bffa17 	ldw	r2,-24(fp)
  80c000:	10800317 	ldw	r2,12(r2)
  80c004:	1005003a 	cmpeq	r2,r2,zero
  80c008:	1000091e 	bne	r2,zero,80c030 <open+0x124>
  80c00c:	e0bffa17 	ldw	r2,-24(fp)
  80c010:	10800317 	ldw	r2,12(r2)
  80c014:	e13ff917 	ldw	r4,-28(fp)
  80c018:	e17ffb17 	ldw	r5,-20(fp)
  80c01c:	e1bffc17 	ldw	r6,-16(fp)
  80c020:	e1fffd17 	ldw	r7,-12(fp)
  80c024:	103ee83a 	callr	r2
  80c028:	e0bfff15 	stw	r2,-4(fp)
  80c02c:	00000106 	br	80c034 <open+0x128>
  80c030:	e03fff15 	stw	zero,-4(fp)
  80c034:	e0bfff17 	ldw	r2,-4(fp)
  80c038:	e0bff715 	stw	r2,-36(fp)
  80c03c:	00000206 	br	80c048 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80c040:	00bffb44 	movi	r2,-19
  80c044:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80c048:	e0bff717 	ldw	r2,-36(fp)
  80c04c:	1004403a 	cmpge	r2,r2,zero
  80c050:	1000091e 	bne	r2,zero,80c078 <open+0x16c>
  {
    alt_release_fd (index);  
  80c054:	e13ff817 	ldw	r4,-32(fp)
  80c058:	080a6780 	call	80a678 <alt_release_fd>
    ALT_ERRNO = -status;
  80c05c:	080c0980 	call	80c098 <alt_get_errno>
  80c060:	e0fff717 	ldw	r3,-36(fp)
  80c064:	00c7c83a 	sub	r3,zero,r3
  80c068:	10c00015 	stw	r3,0(r2)
    return -1;
  80c06c:	00bfffc4 	movi	r2,-1
  80c070:	e0bffe15 	stw	r2,-8(fp)
  80c074:	00000206 	br	80c080 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  80c078:	e0bff817 	ldw	r2,-32(fp)
  80c07c:	e0bffe15 	stw	r2,-8(fp)
  80c080:	e0bffe17 	ldw	r2,-8(fp)
}
  80c084:	e037883a 	mov	sp,fp
  80c088:	dfc00117 	ldw	ra,4(sp)
  80c08c:	df000017 	ldw	fp,0(sp)
  80c090:	dec00204 	addi	sp,sp,8
  80c094:	f800283a 	ret

0080c098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c098:	defffd04 	addi	sp,sp,-12
  80c09c:	dfc00215 	stw	ra,8(sp)
  80c0a0:	df000115 	stw	fp,4(sp)
  80c0a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c0a8:	00802074 	movhi	r2,129
  80c0ac:	10b9f204 	addi	r2,r2,-6200
  80c0b0:	10800017 	ldw	r2,0(r2)
  80c0b4:	1005003a 	cmpeq	r2,r2,zero
  80c0b8:	1000061e 	bne	r2,zero,80c0d4 <alt_get_errno+0x3c>
  80c0bc:	00802074 	movhi	r2,129
  80c0c0:	10b9f204 	addi	r2,r2,-6200
  80c0c4:	10800017 	ldw	r2,0(r2)
  80c0c8:	103ee83a 	callr	r2
  80c0cc:	e0bfff15 	stw	r2,-4(fp)
  80c0d0:	00000306 	br	80c0e0 <alt_get_errno+0x48>
  80c0d4:	00802074 	movhi	r2,129
  80c0d8:	1080b504 	addi	r2,r2,724
  80c0dc:	e0bfff15 	stw	r2,-4(fp)
  80c0e0:	e0bfff17 	ldw	r2,-4(fp)
}
  80c0e4:	e037883a 	mov	sp,fp
  80c0e8:	dfc00117 	ldw	ra,4(sp)
  80c0ec:	df000017 	ldw	fp,0(sp)
  80c0f0:	dec00204 	addi	sp,sp,8
  80c0f4:	f800283a 	ret

0080c0f8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80c0f8:	defffa04 	addi	sp,sp,-24
  80c0fc:	df000515 	stw	fp,20(sp)
  80c100:	df000504 	addi	fp,sp,20
  80c104:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c108:	0005303a 	rdctl	r2,status
  80c10c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c110:	e0fffd17 	ldw	r3,-12(fp)
  80c114:	00bfff84 	movi	r2,-2
  80c118:	1884703a 	and	r2,r3,r2
  80c11c:	1001703a 	wrctl	status,r2
  
  return context;
  80c120:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80c124:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80c128:	e0bfff17 	ldw	r2,-4(fp)
  80c12c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80c130:	e0bffc17 	ldw	r2,-16(fp)
  80c134:	10c00017 	ldw	r3,0(r2)
  80c138:	e0bffc17 	ldw	r2,-16(fp)
  80c13c:	10800117 	ldw	r2,4(r2)
  80c140:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80c144:	e0bffc17 	ldw	r2,-16(fp)
  80c148:	10c00117 	ldw	r3,4(r2)
  80c14c:	e0bffc17 	ldw	r2,-16(fp)
  80c150:	10800017 	ldw	r2,0(r2)
  80c154:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80c158:	e0fffc17 	ldw	r3,-16(fp)
  80c15c:	e0bffc17 	ldw	r2,-16(fp)
  80c160:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80c164:	e0fffc17 	ldw	r3,-16(fp)
  80c168:	e0bffc17 	ldw	r2,-16(fp)
  80c16c:	18800015 	stw	r2,0(r3)
  80c170:	e0bffe17 	ldw	r2,-8(fp)
  80c174:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c178:	e0bffb17 	ldw	r2,-20(fp)
  80c17c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80c180:	e037883a 	mov	sp,fp
  80c184:	df000017 	ldw	fp,0(sp)
  80c188:	dec00104 	addi	sp,sp,4
  80c18c:	f800283a 	ret

0080c190 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80c190:	defffb04 	addi	sp,sp,-20
  80c194:	dfc00415 	stw	ra,16(sp)
  80c198:	df000315 	stw	fp,12(sp)
  80c19c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80c1a0:	d0a00e17 	ldw	r2,-32712(gp)
  80c1a4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80c1a8:	d0a6d417 	ldw	r2,-25776(gp)
  80c1ac:	10800044 	addi	r2,r2,1
  80c1b0:	d0a6d415 	stw	r2,-25776(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c1b4:	00003106 	br	80c27c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80c1b8:	e0bffe17 	ldw	r2,-8(fp)
  80c1bc:	10800017 	ldw	r2,0(r2)
  80c1c0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80c1c4:	e0bffe17 	ldw	r2,-8(fp)
  80c1c8:	10800403 	ldbu	r2,16(r2)
  80c1cc:	10803fcc 	andi	r2,r2,255
  80c1d0:	1005003a 	cmpeq	r2,r2,zero
  80c1d4:	1000051e 	bne	r2,zero,80c1ec <alt_tick+0x5c>
  80c1d8:	d0a6d417 	ldw	r2,-25776(gp)
  80c1dc:	1004c03a 	cmpne	r2,r2,zero
  80c1e0:	1000021e 	bne	r2,zero,80c1ec <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80c1e4:	e0bffe17 	ldw	r2,-8(fp)
  80c1e8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80c1ec:	e0bffe17 	ldw	r2,-8(fp)
  80c1f0:	10c00217 	ldw	r3,8(r2)
  80c1f4:	d0a6d417 	ldw	r2,-25776(gp)
  80c1f8:	10c01e36 	bltu	r2,r3,80c274 <alt_tick+0xe4>
  80c1fc:	e0bffe17 	ldw	r2,-8(fp)
  80c200:	10800403 	ldbu	r2,16(r2)
  80c204:	10803fcc 	andi	r2,r2,255
  80c208:	1004c03a 	cmpne	r2,r2,zero
  80c20c:	1000191e 	bne	r2,zero,80c274 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80c210:	e0bffe17 	ldw	r2,-8(fp)
  80c214:	10c00317 	ldw	r3,12(r2)
  80c218:	e0bffe17 	ldw	r2,-8(fp)
  80c21c:	11000517 	ldw	r4,20(r2)
  80c220:	183ee83a 	callr	r3
  80c224:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80c228:	e0bffd17 	ldw	r2,-12(fp)
  80c22c:	1004c03a 	cmpne	r2,r2,zero
  80c230:	1000031e 	bne	r2,zero,80c240 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80c234:	e13ffe17 	ldw	r4,-8(fp)
  80c238:	080c0f80 	call	80c0f8 <alt_alarm_stop>
  80c23c:	00000d06 	br	80c274 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80c240:	e0bffe17 	ldw	r2,-8(fp)
  80c244:	10c00217 	ldw	r3,8(r2)
  80c248:	e0bffd17 	ldw	r2,-12(fp)
  80c24c:	1887883a 	add	r3,r3,r2
  80c250:	e0bffe17 	ldw	r2,-8(fp)
  80c254:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80c258:	e0bffe17 	ldw	r2,-8(fp)
  80c25c:	10c00217 	ldw	r3,8(r2)
  80c260:	d0a6d417 	ldw	r2,-25776(gp)
  80c264:	1880032e 	bgeu	r3,r2,80c274 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80c268:	e0fffe17 	ldw	r3,-8(fp)
  80c26c:	00800044 	movi	r2,1
  80c270:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80c274:	e0bfff17 	ldw	r2,-4(fp)
  80c278:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c27c:	d0e00e04 	addi	r3,gp,-32712
  80c280:	e0bffe17 	ldw	r2,-8(fp)
  80c284:	10ffcc1e 	bne	r2,r3,80c1b8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80c288:	e037883a 	mov	sp,fp
  80c28c:	dfc00117 	ldw	ra,4(sp)
  80c290:	df000017 	ldw	fp,0(sp)
  80c294:	dec00204 	addi	sp,sp,8
  80c298:	f800283a 	ret

0080c29c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  80c29c:	deffff04 	addi	sp,sp,-4
  80c2a0:	df000015 	stw	fp,0(sp)
  80c2a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80c2a8:	000170fa 	wrctl	ienable,zero
}
  80c2ac:	e037883a 	mov	sp,fp
  80c2b0:	df000017 	ldw	fp,0(sp)
  80c2b4:	dec00104 	addi	sp,sp,4
  80c2b8:	f800283a 	ret

0080c2bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80c2bc:	defff904 	addi	sp,sp,-28
  80c2c0:	dfc00615 	stw	ra,24(sp)
  80c2c4:	df000515 	stw	fp,20(sp)
  80c2c8:	df000504 	addi	fp,sp,20
  80c2cc:	e13ffd15 	stw	r4,-12(fp)
  80c2d0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80c2d4:	e0bffe17 	ldw	r2,-8(fp)
  80c2d8:	10800017 	ldw	r2,0(r2)
  80c2dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80c2e0:	e13ffd17 	ldw	r4,-12(fp)
  80c2e4:	08004e00 	call	8004e0 <strlen>
  80c2e8:	10800044 	addi	r2,r2,1
  80c2ec:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80c2f0:	00000d06 	br	80c328 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80c2f4:	e0bffc17 	ldw	r2,-16(fp)
  80c2f8:	11000217 	ldw	r4,8(r2)
  80c2fc:	e1bffb17 	ldw	r6,-20(fp)
  80c300:	e17ffd17 	ldw	r5,-12(fp)
  80c304:	080c58c0 	call	80c58c <memcmp>
  80c308:	1004c03a 	cmpne	r2,r2,zero
  80c30c:	1000031e 	bne	r2,zero,80c31c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80c310:	e0bffc17 	ldw	r2,-16(fp)
  80c314:	e0bfff15 	stw	r2,-4(fp)
  80c318:	00000706 	br	80c338 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80c31c:	e0bffc17 	ldw	r2,-16(fp)
  80c320:	10800017 	ldw	r2,0(r2)
  80c324:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80c328:	e0fffe17 	ldw	r3,-8(fp)
  80c32c:	e0bffc17 	ldw	r2,-16(fp)
  80c330:	10fff01e 	bne	r2,r3,80c2f4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80c334:	e03fff15 	stw	zero,-4(fp)
  80c338:	e0bfff17 	ldw	r2,-4(fp)
}
  80c33c:	e037883a 	mov	sp,fp
  80c340:	dfc00117 	ldw	ra,4(sp)
  80c344:	df000017 	ldw	fp,0(sp)
  80c348:	dec00204 	addi	sp,sp,8
  80c34c:	f800283a 	ret

0080c350 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80c350:	defffa04 	addi	sp,sp,-24
  80c354:	dfc00515 	stw	ra,20(sp)
  80c358:	df000415 	stw	fp,16(sp)
  80c35c:	df000404 	addi	fp,sp,16
  80c360:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80c364:	00802074 	movhi	r2,129
  80c368:	10b9ed04 	addi	r2,r2,-6220
  80c36c:	10800017 	ldw	r2,0(r2)
  80c370:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80c374:	00003306 	br	80c444 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80c378:	e0bffd17 	ldw	r2,-12(fp)
  80c37c:	11000217 	ldw	r4,8(r2)
  80c380:	08004e00 	call	8004e0 <strlen>
  80c384:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80c388:	e0bffd17 	ldw	r2,-12(fp)
  80c38c:	10c00217 	ldw	r3,8(r2)
  80c390:	e0bffc17 	ldw	r2,-16(fp)
  80c394:	1885883a 	add	r2,r3,r2
  80c398:	10bfffc4 	addi	r2,r2,-1
  80c39c:	10800003 	ldbu	r2,0(r2)
  80c3a0:	10803fcc 	andi	r2,r2,255
  80c3a4:	1080201c 	xori	r2,r2,128
  80c3a8:	10bfe004 	addi	r2,r2,-128
  80c3ac:	10800bd8 	cmpnei	r2,r2,47
  80c3b0:	1000031e 	bne	r2,zero,80c3c0 <alt_find_file+0x70>
    {
      len -= 1;
  80c3b4:	e0bffc17 	ldw	r2,-16(fp)
  80c3b8:	10bfffc4 	addi	r2,r2,-1
  80c3bc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80c3c0:	e0bffc17 	ldw	r2,-16(fp)
  80c3c4:	1007883a 	mov	r3,r2
  80c3c8:	e0bffe17 	ldw	r2,-8(fp)
  80c3cc:	1885883a 	add	r2,r3,r2
  80c3d0:	10800003 	ldbu	r2,0(r2)
  80c3d4:	10803fcc 	andi	r2,r2,255
  80c3d8:	1080201c 	xori	r2,r2,128
  80c3dc:	10bfe004 	addi	r2,r2,-128
  80c3e0:	10800be0 	cmpeqi	r2,r2,47
  80c3e4:	10000a1e 	bne	r2,zero,80c410 <alt_find_file+0xc0>
  80c3e8:	e0bffc17 	ldw	r2,-16(fp)
  80c3ec:	1007883a 	mov	r3,r2
  80c3f0:	e0bffe17 	ldw	r2,-8(fp)
  80c3f4:	1885883a 	add	r2,r3,r2
  80c3f8:	10800003 	ldbu	r2,0(r2)
  80c3fc:	10803fcc 	andi	r2,r2,255
  80c400:	1080201c 	xori	r2,r2,128
  80c404:	10bfe004 	addi	r2,r2,-128
  80c408:	1004c03a 	cmpne	r2,r2,zero
  80c40c:	10000a1e 	bne	r2,zero,80c438 <alt_find_file+0xe8>
  80c410:	e0bffd17 	ldw	r2,-12(fp)
  80c414:	11000217 	ldw	r4,8(r2)
  80c418:	e1bffc17 	ldw	r6,-16(fp)
  80c41c:	e17ffe17 	ldw	r5,-8(fp)
  80c420:	080c58c0 	call	80c58c <memcmp>
  80c424:	1004c03a 	cmpne	r2,r2,zero
  80c428:	1000031e 	bne	r2,zero,80c438 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80c42c:	e0bffd17 	ldw	r2,-12(fp)
  80c430:	e0bfff15 	stw	r2,-4(fp)
  80c434:	00000806 	br	80c458 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80c438:	e0bffd17 	ldw	r2,-12(fp)
  80c43c:	10800017 	ldw	r2,0(r2)
  80c440:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80c444:	00c02074 	movhi	r3,129
  80c448:	18f9ed04 	addi	r3,r3,-6220
  80c44c:	e0bffd17 	ldw	r2,-12(fp)
  80c450:	10ffc91e 	bne	r2,r3,80c378 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80c454:	e03fff15 	stw	zero,-4(fp)
  80c458:	e0bfff17 	ldw	r2,-4(fp)
}
  80c45c:	e037883a 	mov	sp,fp
  80c460:	dfc00117 	ldw	ra,4(sp)
  80c464:	df000017 	ldw	fp,0(sp)
  80c468:	dec00204 	addi	sp,sp,8
  80c46c:	f800283a 	ret

0080c470 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80c470:	defffa04 	addi	sp,sp,-24
  80c474:	dfc00515 	stw	ra,20(sp)
  80c478:	df000415 	stw	fp,16(sp)
  80c47c:	dc000315 	stw	r16,12(sp)
  80c480:	df000304 	addi	fp,sp,12
  80c484:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80c488:	00bffa04 	movi	r2,-24
  80c48c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80c490:	e03ffe15 	stw	zero,-8(fp)
  80c494:	00002006 	br	80c518 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  80c498:	e13ffe17 	ldw	r4,-8(fp)
  80c49c:	04002074 	movhi	r16,129
  80c4a0:	84354e04 	addi	r16,r16,-10952
  80c4a4:	01400304 	movi	r5,12
  80c4a8:	08097300 	call	809730 <__mulsi3>
  80c4ac:	1405883a 	add	r2,r2,r16
  80c4b0:	10800017 	ldw	r2,0(r2)
  80c4b4:	1004c03a 	cmpne	r2,r2,zero
  80c4b8:	1000141e 	bne	r2,zero,80c50c <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  80c4bc:	e13ffe17 	ldw	r4,-8(fp)
  80c4c0:	04002074 	movhi	r16,129
  80c4c4:	84354e04 	addi	r16,r16,-10952
  80c4c8:	01400304 	movi	r5,12
  80c4cc:	08097300 	call	809730 <__mulsi3>
  80c4d0:	1407883a 	add	r3,r2,r16
  80c4d4:	e0bfff17 	ldw	r2,-4(fp)
  80c4d8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80c4dc:	00802074 	movhi	r2,129
  80c4e0:	10b9f104 	addi	r2,r2,-6204
  80c4e4:	10c00017 	ldw	r3,0(r2)
  80c4e8:	e0bffe17 	ldw	r2,-8(fp)
  80c4ec:	1880040e 	bge	r3,r2,80c500 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  80c4f0:	00c02074 	movhi	r3,129
  80c4f4:	18f9f104 	addi	r3,r3,-6204
  80c4f8:	e0bffe17 	ldw	r2,-8(fp)
  80c4fc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80c500:	e0bffe17 	ldw	r2,-8(fp)
  80c504:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80c508:	00000606 	br	80c524 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80c50c:	e0bffe17 	ldw	r2,-8(fp)
  80c510:	10800044 	addi	r2,r2,1
  80c514:	e0bffe15 	stw	r2,-8(fp)
  80c518:	e0bffe17 	ldw	r2,-8(fp)
  80c51c:	10800810 	cmplti	r2,r2,32
  80c520:	103fdd1e 	bne	r2,zero,80c498 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80c524:	e0bffd17 	ldw	r2,-12(fp)
}
  80c528:	e037883a 	mov	sp,fp
  80c52c:	dfc00217 	ldw	ra,8(sp)
  80c530:	df000117 	ldw	fp,4(sp)
  80c534:	dc000017 	ldw	r16,0(sp)
  80c538:	dec00304 	addi	sp,sp,12
  80c53c:	f800283a 	ret

0080c540 <atexit>:
  80c540:	200b883a 	mov	r5,r4
  80c544:	000d883a 	mov	r6,zero
  80c548:	0009883a 	mov	r4,zero
  80c54c:	000f883a 	mov	r7,zero
  80c550:	080c6001 	jmpi	80c600 <__register_exitproc>

0080c554 <exit>:
  80c554:	defffe04 	addi	sp,sp,-8
  80c558:	000b883a 	mov	r5,zero
  80c55c:	dc000015 	stw	r16,0(sp)
  80c560:	dfc00115 	stw	ra,4(sp)
  80c564:	2021883a 	mov	r16,r4
  80c568:	080c7380 	call	80c738 <__call_exitprocs>
  80c56c:	00802074 	movhi	r2,129
  80c570:	10b9e804 	addi	r2,r2,-6240
  80c574:	11000017 	ldw	r4,0(r2)
  80c578:	20800f17 	ldw	r2,60(r4)
  80c57c:	10000126 	beq	r2,zero,80c584 <exit+0x30>
  80c580:	103ee83a 	callr	r2
  80c584:	8009883a 	mov	r4,r16
  80c588:	080c9280 	call	80c928 <_exit>

0080c58c <memcmp>:
  80c58c:	00c000c4 	movi	r3,3
  80c590:	1980032e 	bgeu	r3,r6,80c5a0 <memcmp+0x14>
  80c594:	2144b03a 	or	r2,r4,r5
  80c598:	10c4703a 	and	r2,r2,r3
  80c59c:	10000f26 	beq	r2,zero,80c5dc <memcmp+0x50>
  80c5a0:	31ffffc4 	addi	r7,r6,-1
  80c5a4:	3000061e 	bne	r6,zero,80c5c0 <memcmp+0x34>
  80c5a8:	00000a06 	br	80c5d4 <memcmp+0x48>
  80c5ac:	39ffffc4 	addi	r7,r7,-1
  80c5b0:	00bfffc4 	movi	r2,-1
  80c5b4:	21000044 	addi	r4,r4,1
  80c5b8:	29400044 	addi	r5,r5,1
  80c5bc:	38800526 	beq	r7,r2,80c5d4 <memcmp+0x48>
  80c5c0:	20c00003 	ldbu	r3,0(r4)
  80c5c4:	28800003 	ldbu	r2,0(r5)
  80c5c8:	18bff826 	beq	r3,r2,80c5ac <memcmp+0x20>
  80c5cc:	1885c83a 	sub	r2,r3,r2
  80c5d0:	f800283a 	ret
  80c5d4:	0005883a 	mov	r2,zero
  80c5d8:	f800283a 	ret
  80c5dc:	180f883a 	mov	r7,r3
  80c5e0:	20c00017 	ldw	r3,0(r4)
  80c5e4:	28800017 	ldw	r2,0(r5)
  80c5e8:	18bfed1e 	bne	r3,r2,80c5a0 <memcmp+0x14>
  80c5ec:	31bfff04 	addi	r6,r6,-4
  80c5f0:	21000104 	addi	r4,r4,4
  80c5f4:	29400104 	addi	r5,r5,4
  80c5f8:	39bff936 	bltu	r7,r6,80c5e0 <memcmp+0x54>
  80c5fc:	003fe806 	br	80c5a0 <memcmp+0x14>

0080c600 <__register_exitproc>:
  80c600:	defffa04 	addi	sp,sp,-24
  80c604:	00802074 	movhi	r2,129
  80c608:	10b9e804 	addi	r2,r2,-6240
  80c60c:	dc000015 	stw	r16,0(sp)
  80c610:	14000017 	ldw	r16,0(r2)
  80c614:	dd000415 	stw	r20,16(sp)
  80c618:	2829883a 	mov	r20,r5
  80c61c:	81405217 	ldw	r5,328(r16)
  80c620:	dcc00315 	stw	r19,12(sp)
  80c624:	dc800215 	stw	r18,8(sp)
  80c628:	dc400115 	stw	r17,4(sp)
  80c62c:	dfc00515 	stw	ra,20(sp)
  80c630:	2023883a 	mov	r17,r4
  80c634:	3027883a 	mov	r19,r6
  80c638:	3825883a 	mov	r18,r7
  80c63c:	28002526 	beq	r5,zero,80c6d4 <__register_exitproc+0xd4>
  80c640:	29000117 	ldw	r4,4(r5)
  80c644:	008007c4 	movi	r2,31
  80c648:	11002716 	blt	r2,r4,80c6e8 <__register_exitproc+0xe8>
  80c64c:	8800101e 	bne	r17,zero,80c690 <__register_exitproc+0x90>
  80c650:	2105883a 	add	r2,r4,r4
  80c654:	1085883a 	add	r2,r2,r2
  80c658:	20c00044 	addi	r3,r4,1
  80c65c:	1145883a 	add	r2,r2,r5
  80c660:	0009883a 	mov	r4,zero
  80c664:	15000215 	stw	r20,8(r2)
  80c668:	28c00115 	stw	r3,4(r5)
  80c66c:	2005883a 	mov	r2,r4
  80c670:	dfc00517 	ldw	ra,20(sp)
  80c674:	dd000417 	ldw	r20,16(sp)
  80c678:	dcc00317 	ldw	r19,12(sp)
  80c67c:	dc800217 	ldw	r18,8(sp)
  80c680:	dc400117 	ldw	r17,4(sp)
  80c684:	dc000017 	ldw	r16,0(sp)
  80c688:	dec00604 	addi	sp,sp,24
  80c68c:	f800283a 	ret
  80c690:	29802204 	addi	r6,r5,136
  80c694:	00800044 	movi	r2,1
  80c698:	110e983a 	sll	r7,r2,r4
  80c69c:	30c04017 	ldw	r3,256(r6)
  80c6a0:	2105883a 	add	r2,r4,r4
  80c6a4:	1085883a 	add	r2,r2,r2
  80c6a8:	1185883a 	add	r2,r2,r6
  80c6ac:	19c6b03a 	or	r3,r3,r7
  80c6b0:	14802015 	stw	r18,128(r2)
  80c6b4:	14c00015 	stw	r19,0(r2)
  80c6b8:	00800084 	movi	r2,2
  80c6bc:	30c04015 	stw	r3,256(r6)
  80c6c0:	88bfe31e 	bne	r17,r2,80c650 <__register_exitproc+0x50>
  80c6c4:	30804117 	ldw	r2,260(r6)
  80c6c8:	11c4b03a 	or	r2,r2,r7
  80c6cc:	30804115 	stw	r2,260(r6)
  80c6d0:	003fdf06 	br	80c650 <__register_exitproc+0x50>
  80c6d4:	00802074 	movhi	r2,129
  80c6d8:	10810604 	addi	r2,r2,1048
  80c6dc:	100b883a 	mov	r5,r2
  80c6e0:	80805215 	stw	r2,328(r16)
  80c6e4:	003fd606 	br	80c640 <__register_exitproc+0x40>
  80c6e8:	00800034 	movhi	r2,0
  80c6ec:	10800004 	addi	r2,r2,0
  80c6f0:	1000021e 	bne	r2,zero,80c6fc <__register_exitproc+0xfc>
  80c6f4:	013fffc4 	movi	r4,-1
  80c6f8:	003fdc06 	br	80c66c <__register_exitproc+0x6c>
  80c6fc:	01006404 	movi	r4,400
  80c700:	103ee83a 	callr	r2
  80c704:	1007883a 	mov	r3,r2
  80c708:	103ffa26 	beq	r2,zero,80c6f4 <__register_exitproc+0xf4>
  80c70c:	80805217 	ldw	r2,328(r16)
  80c710:	180b883a 	mov	r5,r3
  80c714:	18000115 	stw	zero,4(r3)
  80c718:	18800015 	stw	r2,0(r3)
  80c71c:	80c05215 	stw	r3,328(r16)
  80c720:	18006215 	stw	zero,392(r3)
  80c724:	18006315 	stw	zero,396(r3)
  80c728:	0009883a 	mov	r4,zero
  80c72c:	883fc826 	beq	r17,zero,80c650 <__register_exitproc+0x50>
  80c730:	003fd706 	br	80c690 <__register_exitproc+0x90>

0080c734 <register_fini>:
  80c734:	f800283a 	ret

0080c738 <__call_exitprocs>:
  80c738:	00802074 	movhi	r2,129
  80c73c:	10b9e804 	addi	r2,r2,-6240
  80c740:	10800017 	ldw	r2,0(r2)
  80c744:	defff304 	addi	sp,sp,-52
  80c748:	df000b15 	stw	fp,44(sp)
  80c74c:	d8800115 	stw	r2,4(sp)
  80c750:	00800034 	movhi	r2,0
  80c754:	10800004 	addi	r2,r2,0
  80c758:	1005003a 	cmpeq	r2,r2,zero
  80c75c:	d8800215 	stw	r2,8(sp)
  80c760:	d8800117 	ldw	r2,4(sp)
  80c764:	dd400815 	stw	r21,32(sp)
  80c768:	dd000715 	stw	r20,28(sp)
  80c76c:	10805204 	addi	r2,r2,328
  80c770:	dfc00c15 	stw	ra,48(sp)
  80c774:	ddc00a15 	stw	r23,40(sp)
  80c778:	dd800915 	stw	r22,36(sp)
  80c77c:	dcc00615 	stw	r19,24(sp)
  80c780:	dc800515 	stw	r18,20(sp)
  80c784:	dc400415 	stw	r17,16(sp)
  80c788:	dc000315 	stw	r16,12(sp)
  80c78c:	282b883a 	mov	r21,r5
  80c790:	2039883a 	mov	fp,r4
  80c794:	d8800015 	stw	r2,0(sp)
  80c798:	2829003a 	cmpeq	r20,r5,zero
  80c79c:	d8800117 	ldw	r2,4(sp)
  80c7a0:	14405217 	ldw	r17,328(r2)
  80c7a4:	88001026 	beq	r17,zero,80c7e8 <__call_exitprocs+0xb0>
  80c7a8:	ddc00017 	ldw	r23,0(sp)
  80c7ac:	88800117 	ldw	r2,4(r17)
  80c7b0:	8c802204 	addi	r18,r17,136
  80c7b4:	143fffc4 	addi	r16,r2,-1
  80c7b8:	80000916 	blt	r16,zero,80c7e0 <__call_exitprocs+0xa8>
  80c7bc:	05bfffc4 	movi	r22,-1
  80c7c0:	a000151e 	bne	r20,zero,80c818 <__call_exitprocs+0xe0>
  80c7c4:	8409883a 	add	r4,r16,r16
  80c7c8:	2105883a 	add	r2,r4,r4
  80c7cc:	1485883a 	add	r2,r2,r18
  80c7d0:	10c02017 	ldw	r3,128(r2)
  80c7d4:	a8c01126 	beq	r21,r3,80c81c <__call_exitprocs+0xe4>
  80c7d8:	843fffc4 	addi	r16,r16,-1
  80c7dc:	85bff81e 	bne	r16,r22,80c7c0 <__call_exitprocs+0x88>
  80c7e0:	d8800217 	ldw	r2,8(sp)
  80c7e4:	10003126 	beq	r2,zero,80c8ac <__call_exitprocs+0x174>
  80c7e8:	dfc00c17 	ldw	ra,48(sp)
  80c7ec:	df000b17 	ldw	fp,44(sp)
  80c7f0:	ddc00a17 	ldw	r23,40(sp)
  80c7f4:	dd800917 	ldw	r22,36(sp)
  80c7f8:	dd400817 	ldw	r21,32(sp)
  80c7fc:	dd000717 	ldw	r20,28(sp)
  80c800:	dcc00617 	ldw	r19,24(sp)
  80c804:	dc800517 	ldw	r18,20(sp)
  80c808:	dc400417 	ldw	r17,16(sp)
  80c80c:	dc000317 	ldw	r16,12(sp)
  80c810:	dec00d04 	addi	sp,sp,52
  80c814:	f800283a 	ret
  80c818:	8409883a 	add	r4,r16,r16
  80c81c:	88c00117 	ldw	r3,4(r17)
  80c820:	2105883a 	add	r2,r4,r4
  80c824:	1445883a 	add	r2,r2,r17
  80c828:	18ffffc4 	addi	r3,r3,-1
  80c82c:	11800217 	ldw	r6,8(r2)
  80c830:	1c001526 	beq	r3,r16,80c888 <__call_exitprocs+0x150>
  80c834:	10000215 	stw	zero,8(r2)
  80c838:	303fe726 	beq	r6,zero,80c7d8 <__call_exitprocs+0xa0>
  80c83c:	00c00044 	movi	r3,1
  80c840:	1c06983a 	sll	r3,r3,r16
  80c844:	90804017 	ldw	r2,256(r18)
  80c848:	8cc00117 	ldw	r19,4(r17)
  80c84c:	1884703a 	and	r2,r3,r2
  80c850:	10001426 	beq	r2,zero,80c8a4 <__call_exitprocs+0x16c>
  80c854:	90804117 	ldw	r2,260(r18)
  80c858:	1884703a 	and	r2,r3,r2
  80c85c:	10000c1e 	bne	r2,zero,80c890 <__call_exitprocs+0x158>
  80c860:	2105883a 	add	r2,r4,r4
  80c864:	1485883a 	add	r2,r2,r18
  80c868:	11400017 	ldw	r5,0(r2)
  80c86c:	e009883a 	mov	r4,fp
  80c870:	303ee83a 	callr	r6
  80c874:	88800117 	ldw	r2,4(r17)
  80c878:	98bfc81e 	bne	r19,r2,80c79c <__call_exitprocs+0x64>
  80c87c:	b8800017 	ldw	r2,0(r23)
  80c880:	147fd526 	beq	r2,r17,80c7d8 <__call_exitprocs+0xa0>
  80c884:	003fc506 	br	80c79c <__call_exitprocs+0x64>
  80c888:	8c000115 	stw	r16,4(r17)
  80c88c:	003fea06 	br	80c838 <__call_exitprocs+0x100>
  80c890:	2105883a 	add	r2,r4,r4
  80c894:	1485883a 	add	r2,r2,r18
  80c898:	11000017 	ldw	r4,0(r2)
  80c89c:	303ee83a 	callr	r6
  80c8a0:	003ff406 	br	80c874 <__call_exitprocs+0x13c>
  80c8a4:	303ee83a 	callr	r6
  80c8a8:	003ff206 	br	80c874 <__call_exitprocs+0x13c>
  80c8ac:	88800117 	ldw	r2,4(r17)
  80c8b0:	1000081e 	bne	r2,zero,80c8d4 <__call_exitprocs+0x19c>
  80c8b4:	89000017 	ldw	r4,0(r17)
  80c8b8:	20000726 	beq	r4,zero,80c8d8 <__call_exitprocs+0x1a0>
  80c8bc:	b9000015 	stw	r4,0(r23)
  80c8c0:	8809883a 	mov	r4,r17
  80c8c4:	00000000 	call	0 <__reset-0x800000>
  80c8c8:	bc400017 	ldw	r17,0(r23)
  80c8cc:	883fb71e 	bne	r17,zero,80c7ac <__call_exitprocs+0x74>
  80c8d0:	003fc506 	br	80c7e8 <__call_exitprocs+0xb0>
  80c8d4:	89000017 	ldw	r4,0(r17)
  80c8d8:	882f883a 	mov	r23,r17
  80c8dc:	2023883a 	mov	r17,r4
  80c8e0:	883fb21e 	bne	r17,zero,80c7ac <__call_exitprocs+0x74>
  80c8e4:	003fc006 	br	80c7e8 <__call_exitprocs+0xb0>

0080c8e8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80c8e8:	defffd04 	addi	sp,sp,-12
  80c8ec:	df000215 	stw	fp,8(sp)
  80c8f0:	df000204 	addi	fp,sp,8
  80c8f4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80c8f8:	e0bfff17 	ldw	r2,-4(fp)
  80c8fc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80c900:	e0bffe17 	ldw	r2,-8(fp)
  80c904:	1005003a 	cmpeq	r2,r2,zero
  80c908:	1000021e 	bne	r2,zero,80c914 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80c90c:	002af070 	cmpltui	zero,zero,43969
  80c910:	00000106 	br	80c918 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80c914:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80c918:	e037883a 	mov	sp,fp
  80c91c:	df000017 	ldw	fp,0(sp)
  80c920:	dec00104 	addi	sp,sp,4
  80c924:	f800283a 	ret

0080c928 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80c928:	defffd04 	addi	sp,sp,-12
  80c92c:	dfc00215 	stw	ra,8(sp)
  80c930:	df000115 	stw	fp,4(sp)
  80c934:	df000104 	addi	fp,sp,4
  80c938:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80c93c:	e13fff17 	ldw	r4,-4(fp)
  80c940:	080c8e80 	call	80c8e8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80c944:	003fff06 	br	80c944 <_exit+0x1c>
  80c948:	0080c734 	movhi	r2,796
