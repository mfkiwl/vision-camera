
color_blind.elf:     file format elf32-littlenios2
color_blind.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000cf00 memsz 0x0000cf00 flags r-x
    LOAD off    0x0000df20 vaddr 0x0080cf20 paddr 0x0080ea00 align 2**12
         filesz 0x00001ae0 memsz 0x00001ae0 flags rw-
    LOAD off    0x000104e0 vaddr 0x008104e0 paddr 0x008104e0 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c96c  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000400  0080cb20  0080cb20  0000db20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ae0  0080cf20  0080ea00  0000df20  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  008104e0  008104e0  000104e0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000fa00  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c58  00000000  00000000  0000fa28  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001304  00000000  00000000  00010680  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00022dab  00000000  00000000  00011984  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007825  00000000  00000000  0003472f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001349a  00000000  00000000  0003bf54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001808  00000000  00000000  0004f3f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000224c  00000000  00000000  00050bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bd46  00000000  00000000  00052e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0005eb8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  0005eba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006238b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006238e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00062391  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00062392  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00062393  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006239e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000623a9  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  000623b4  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003e  00000000  00000000  000623c0  2**0
                  CONTENTS, READONLY
 26 .jdi          0000510a  00000000  00000000  000623fe  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000808e4  00000000  00000000  00067508  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080cb20 l    d  .rodata	00000000 .rodata
0080cf20 l    d  .rwdata	00000000 .rwdata
008104e0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00800728 l     F .text	00000058 __sprint_r
0080cc26 l     O .rodata	00000010 blanks.3452
0080cc16 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
008027a4 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008041cc l     F .text	00000058 std
008042d8 l     F .text	00000008 __fp_lock
008042e0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0080cf20 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0080e9cc l     O .rwdata	00000004 charset
0080cc5c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0080cda4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080868c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
008097b8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080a0f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080a154 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080a258 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080a37c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080a45c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080a5bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080a7ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080e9f0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080aaa4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080d8dc l     O .rwdata	00001060 jtag_uart_0
0080e93c l     O .rwdata	00000030 AV_Config
0080e96c l     O .rwdata	00000054 Pixel_Buffer_DMA
0080ad80 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080afc0 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080b1e8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080ba88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080be98 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080bfe8 l     F .text	000000f8 alt_file_locked
0080c26c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080c908 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0080cabc l     F .text	00000040 alt_sim_halt
00805fbc g     F .text	00000094 _mprec_log10
008060a8 g     F .text	00000088 __any_on
00807860 g     F .text	00000070 _isatty_r
0080cd7c g     O .rodata	00000028 __mprec_tinytens
0080a61c g     F .text	0000006c alt_main
00800600 g     F .text	000000a0 _puts_r
0081053c g     O .bss	00000100 alt_irq
008078d0 g     F .text	00000078 _lseek_r
0080ea00 g       *ABS*	00000000 __flash_rwdata_start
008091ac g     F .text	00000088 __eqdf2
008107cc g       *ABS*	00000000 __alt_heap_start
00800588 g     F .text	00000044 printf
00807318 g     F .text	00000068 __sseek
00804234 g     F .text	000000a4 __sinit
00804f40 g     F .text	00000084 _setlocale_r
00804334 g     F .text	0000009c __sfmoreglue
0080a6a8 g     F .text	00000020 __malloc_unlock
00805a38 g     F .text	000000e0 memmove
00804324 g     F .text	00000010 _cleanup
00806130 g     F .text	000000bc _Balloc
008092bc g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000000c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008077ec g     F .text	00000074 _fstat_r
008104f8 g     O .bss	00000004 errno
00810500 g     O .bss	00000004 alt_argv
008169c0 g       *ABS*	00000000 _gp
0080d75c g     O .rwdata	00000180 alt_fd_list
0080c490 g     F .text	00000094 alt_find_dev
00805998 g     F .text	000000a0 memcpy
00804318 g     F .text	0000000c _cleanup_r
00809454 g     F .text	000000f8 __floatsidf
0080bf70 g     F .text	00000078 alt_io_redirect
008093cc g     F .text	00000088 __ltdf2
0080cb20 g       *ABS*	00000000 __DTOR_END__
008006a0 g     F .text	00000014 puts
00805f0c g     F .text	000000b0 __ratio
0080b400 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
008005cc g     F .text	00000034 _printf_r
008098f4 g     F .text	00000008 __udivsi3
0080a2b8 g     F .text	000000c4 isatty
0080cc8c g     O .rodata	000000c8 __mprec_tens
00804f1c g     F .text	00000008 __locale_charset
008104ec g     O .bss	00000004 __malloc_top_pad
0080e9c8 g     O .rwdata	00000004 __mb_cur_max
00804f24 g     F .text	0000000c _localeconv_r
00806894 g     F .text	0000003c __i2b
00804900 g     F .text	0000049c __sfvwrite_r
008072a0 g     F .text	00000070 _sbrk_r
00807948 g     F .text	00000078 _read_r
0080d320 g     O .rwdata	0000000c __lc_ctype
0080e9e8 g     O .rwdata	00000004 alt_max_fd
00809df4 g     F .text	00000138 __unpack_d
008076c8 g     F .text	00000110 _fclose_r
00804198 g     F .text	00000034 fflush
008104f0 g     O .bss	00000004 __malloc_max_sbrked_mem
00808b1c g     F .text	00000074 __adddf3
00805dec g     F .text	00000120 __b2d
0080802c g     F .text	00000660 __umoddi3
0080a4c8 g     F .text	000000f4 lseek
0080e9c4 g     O .rwdata	00000004 _global_impure_ptr
00806c3c g     F .text	000005f4 _realloc_r
008107cc g       *ABS*	00000000 __bss_end
0080bda0 g     F .text	000000f8 alt_iic_isr_register
0080c364 g     F .text	0000010c alt_tick
008079c0 g     F .text	0000066c __udivdi3
0080cd54 g     O .rodata	00000028 __mprec_bigtens
00806b1c g     F .text	00000120 __s2b
00809624 g     F .text	00000194 __floatunsidf
00805d0c g     F .text	00000060 __mcmp
00804300 g     F .text	00000018 __fp_lock_all
0080bd58 g     F .text	00000048 alt_ic_irq_enabled
0080c2cc g     F .text	00000098 alt_alarm_stop
00810508 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
0080d734 g     O .rwdata	00000028 alt_dev_null
0080b9b8 g     F .text	0000001c alt_dcache_flush_all
00805bd8 g     F .text	00000070 __hi0bits
0080954c g     F .text	000000d8 __fixdfsi
0080ea00 g       *ABS*	00000000 __ram_rwdata_end
0080e9e0 g     O .rwdata	00000008 alt_dev_list
0080a980 g     F .text	00000124 write
0080cf20 g       *ABS*	00000000 __ram_rodata_end
0080a180 g     F .text	000000d8 fstat
008069fc g     F .text	00000120 __pow5mult
008104e0 g     O .bss	00000004 __nlocale_changed
008098fc g     F .text	00000008 __umodsi3
008107cc g       *ABS*	00000000 end
0080af00 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080cb1c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00809a60 g     F .text	00000080 __clzsi2
0080b624 g     F .text	00000240 altera_avalon_jtag_uart_write
00804224 g     F .text	00000004 __sfp_lock_acquire
008058b4 g     F .text	000000e4 memchr
00800780 g     F .text	00001ec4 ___vfprintf_internal_r
008045ec g     F .text	00000314 _free_r
0080c90c g     F .text	000001b0 __call_exitprocs
008104e4 g     O .bss	00000004 __mlocale_changed
0080e9d4 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000003c _start
0081050c g     O .bss	00000004 _alt_tick_rate
008064f4 g     F .text	0000014c __lshift
00810510 g     O .bss	00000004 _alt_nticks
0080a6c8 g     F .text	00000124 read
0080ab38 g     F .text	00000248 alt_sys_init
0080c7d4 g     F .text	00000134 __register_exitproc
00806640 g     F .text	00000254 __multiply
0080b298 g     F .text	00000074 altera_avalon_jtag_uart_close
00809904 g     F .text	00000038 __mulsi3
0080cf20 g       *ABS*	00000000 __ram_rwdata_start
0080cb20 g       *ABS*	00000000 __ram_rodata_start
00810514 g     O .bss	00000028 __malloc_current_mallinfo
008061ec g     F .text	0000017c __d2b
0080adb8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080c644 g     F .text	000000d0 alt_get_fd
00809f2c g     F .text	000000c8 __fpcmp_parts_d
00807658 g     F .text	00000070 _close_r
0080c760 g     F .text	00000074 memcmp
0080ae68 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008107cc g       *ABS*	00000000 __alt_stack_base
0080aeb0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00802668 g     F .text	0000013c __swsetup_r
00808f54 g     F .text	00000258 __divdf3
008043d0 g     F .text	000000f0 __sfp
00806050 g     F .text	00000058 __copybits
0080d32c g     O .rwdata	00000408 __malloc_av_
00804230 g     F .text	00000004 __sinit_lock_release
00808b90 g     F .text	000003c4 __muldf3
008073fc g     F .text	00000060 __sread
0080c524 g     F .text	00000120 alt_find_file
0080b9d4 g     F .text	000000b4 alt_dev_llist_insert
0080a688 g     F .text	00000020 __malloc_lock
0080a8c4 g     F .text	000000bc sbrk
00803f9c g     F .text	000001fc _fflush_r
00807590 g     F .text	000000c8 _calloc_r
008104e0 g       *ABS*	00000000 __bss_start
00805b18 g     F .text	00000098 memset
0080023c g     F .text	0000034c main
00810504 g     O .bss	00000004 alt_envp
008104f4 g     O .bss	00000004 __malloc_max_total_mem
0080ae10 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
008001f0 g     F .text	0000004c write_pixel
00807310 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008077d8 g     F .text	00000014 fclose
0081063c g     O .bss	00000190 _atexit0
008029e8 g     F .text	000015b4 _dtoa_r
00805174 g     F .text	00000740 _malloc_r
0080e9ec g     O .rwdata	00000004 alt_errno
00804e64 g     F .text	000000b8 _fwalk
00809834 g     F .text	00000060 __divsi3
0080cdb0 g     O .rodata	00000014 __thenan_df
008044c0 g     F .text	0000012c _malloc_trim_r
0080cb20 g       *ABS*	00000000 __CTOR_END__
0080745c g     F .text	000000bc strcmp
0080cb20 g       *ABS*	00000000 __flash_rodata_start
0080cb20 g       *ABS*	00000000 __DTOR_LIST__
00809234 g     F .text	00000088 __nedf2
0080ab04 g     F .text	00000034 alt_irq_init
0080a84c g     F .text	00000078 alt_release_fd
0080cdc4 g     O .rodata	00000100 __clz_tab
008104e8 g     O .bss	00000004 _PathLocale
0080c714 g     F .text	00000014 atexit
00807518 g     F .text	00000078 _write_r
00804fc4 g     F .text	0000001c setlocale
0080e9c0 g     O .rwdata	00000004 _impure_ptr
008104fc g     O .bss	00000004 alt_argc
0080bb4c g     F .text	00000064 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00805d6c g     F .text	00000080 __ulp
00807230 g     F .text	00000040 __isinfd
008042e8 g     F .text	00000018 __fp_unlock_all
0080e9d8 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00804f30 g     F .text	00000010 localeconv
0080bbcc g     F .text	00000050 alt_ic_isr_register
0080ea00 g       *ABS*	00000000 _edata
008107cc g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080b30c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080bcb8 g     F .text	000000a0 alt_ic_irq_disable
01004000 g       *ABS*	00000000 __alt_mem_Onchip_Memory
00807380 g     F .text	0000007c __swrite
0080e9d0 g     O .rwdata	00000004 __malloc_trim_threshold
0080c470 g     F .text	00000020 altera_nios2_qsys_irq_init
0080c728 g     F .text	00000038 exit
00804d9c g     F .text	000000c8 _fwalk_reent
00806368 g     F .text	0000018c __mdiff
00809894 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00804228 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080cafc g     F .text	00000020 _exit
00807270 g     F .text	00000030 __isnand
0080b864 g     F .text	00000154 alt_alarm_start
0080993c g     F .text	00000124 __muldi3
00804fe0 g     F .text	00000194 __smakebuf_r
008006b4 g     F .text	00000074 strlen
0080c0e0 g     F .text	0000018c open
00809344 g     F .text	00000088 __gedf2
0080bbb0 g     F .text	0000001c alt_icache_flush_all
0080e9f4 g     O .rwdata	00000004 alt_priority_mask
0080bc1c g     F .text	0000009c alt_ic_irq_enable
00802644 g     F .text	00000024 __vfprintf_internal
00808a9c g     F .text	00000080 __subdf3
00805c48 g     F .text	000000c4 __lo0bits
0080e9f8 g     O .rwdata	00000008 alt_alarm_list
0080bae8 g     F .text	00000064 _do_ctors
00809ff4 g     F .text	00000100 close
0080a3dc g     F .text	00000080 alt_load
00809ae0 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0080422c g     F .text	00000004 __sinit_lock_acquire
008068d0 g     F .text	0000012c __multadd
00805bb0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406d14 	ori	at,at,436
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18c14f04 	addi	r3,r3,1340
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18c14f04 	addi	r3,r3,1340
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c0:	d69a7014 	ori	gp,gp,27072
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c8:	10813814 	ori	r2,r2,1248

    movhi r3, %hi(__bss_end)
  8001cc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001d0:	18c1f314 	ori	r3,r3,1996

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	080a3dc0 	call	80a3dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	080a61c0 	call	80a61c <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <write_pixel>:
#include <unistd.h>
#define PIXEL_BUFFER_BASE (volatile unsigned int ) 0x00000000
// pixel at (319, 119)
#define PIXEL_BUFFER_BASE_OFFSET (volatile unsigned int ) 0x0003BA7E

void write_pixel(int x, int y, short color) {
  8001f0:	defffb04 	addi	sp,sp,-20
  8001f4:	df000415 	stw	fp,16(sp)
  8001f8:	df000404 	addi	fp,sp,16
  8001fc:	e13ffd15 	stw	r4,-12(fp)
  800200:	e17ffe15 	stw	r5,-8(fp)
  800204:	e1bfff0d 	sth	r6,-4(fp)
	volatile short *vga_addr=(volatile short*)(0x00000000 + (y<<10) + (x<<1));
  800208:	e0bffe17 	ldw	r2,-8(fp)
  80020c:	100692ba 	slli	r3,r2,10
  800210:	e0bffd17 	ldw	r2,-12(fp)
  800214:	1085883a 	add	r2,r2,r2
  800218:	1885883a 	add	r2,r3,r2
  80021c:	e0bffc15 	stw	r2,-16(fp)
	*vga_addr=color;
  800220:	e0fffc17 	ldw	r3,-16(fp)
  800224:	e0bfff0b 	ldhu	r2,-4(fp)
  800228:	1880000d 	sth	r2,0(r3)
}
  80022c:	e037883a 	mov	sp,fp
  800230:	df000017 	ldw	fp,0(sp)
  800234:	dec00104 	addi	sp,sp,4
  800238:	f800283a 	ret

0080023c <main>:

int main()
{
  80023c:	defff204 	addi	sp,sp,-56
  800240:	dfc00d15 	stw	ra,52(sp)
  800244:	df000c15 	stw	fp,48(sp)
  800248:	df000c04 	addi	fp,sp,48
	printf("Hello from Nios II!\n");
  80024c:	01002074 	movhi	r4,129
  800250:	2132c804 	addi	r4,r4,-13536
  800254:	08006a00 	call	8006a0 <puts>
	int counter = 0;
  800258:	e03ffc15 	stw	zero,-16(fp)
  80025c:	00000006 	br	800260 <main+0x24>

	while(1) {
		// draw the reticle
		// left bar
		write_pixel(314, 240, 0xFFFF);
  800260:	01004e84 	movi	r4,314
  800264:	01403c04 	movi	r5,240
  800268:	01bfffc4 	movi	r6,-1
  80026c:	08001f00 	call	8001f0 <write_pixel>
		write_pixel(315, 240, 0xFFFF);
  800270:	01004ec4 	movi	r4,315
  800274:	01403c04 	movi	r5,240
  800278:	01bfffc4 	movi	r6,-1
  80027c:	08001f00 	call	8001f0 <write_pixel>
		write_pixel(316, 240, 0xFFFF);
  800280:	01004f04 	movi	r4,316
  800284:	01403c04 	movi	r5,240
  800288:	01bfffc4 	movi	r6,-1
  80028c:	08001f00 	call	8001f0 <write_pixel>
		write_pixel(317, 240, 0xFFFF);
  800290:	01004f44 	movi	r4,317
  800294:	01403c04 	movi	r5,240
  800298:	01bfffc4 	movi	r6,-1
  80029c:	08001f00 	call	8001f0 <write_pixel>
		// right bar
		write_pixel(323, 240, 0xFFFF);
  8002a0:	010050c4 	movi	r4,323
  8002a4:	01403c04 	movi	r5,240
  8002a8:	01bfffc4 	movi	r6,-1
  8002ac:	08001f00 	call	8001f0 <write_pixel>
		write_pixel(324, 240, 0xFFFF);
  8002b0:	01005104 	movi	r4,324
  8002b4:	01403c04 	movi	r5,240
  8002b8:	01bfffc4 	movi	r6,-1
  8002bc:	08001f00 	call	8001f0 <write_pixel>
		write_pixel(325, 240, 0xFFFF);
  8002c0:	01005144 	movi	r4,325
  8002c4:	01403c04 	movi	r5,240
  8002c8:	01bfffc4 	movi	r6,-1
  8002cc:	08001f00 	call	8001f0 <write_pixel>
		write_pixel(326, 240, 0xFFFF);
  8002d0:	01005184 	movi	r4,326
  8002d4:	01403c04 	movi	r5,240
  8002d8:	01bfffc4 	movi	r6,-1
  8002dc:	08001f00 	call	8001f0 <write_pixel>
//		write_pixel(320, 243, 0xFFFF);
//		write_pixel(320, 244, 0xFFFF);
//		write_pixel(320, 245, 0xFFFF);
//		write_pixel(320, 246, 0xFFFF);

		counter++;
  8002e0:	e0bffc17 	ldw	r2,-16(fp)
  8002e4:	10800044 	addi	r2,r2,1
  8002e8:	e0bffc15 	stw	r2,-16(fp)
		// Log color info every 10000 iterations
		if (counter > 10000) {
  8002ec:	e0bffc17 	ldw	r2,-16(fp)
  8002f0:	1089c450 	cmplti	r2,r2,10001
  8002f4:	103fda1e 	bne	r2,zero,800260 <main+0x24>
			int x = 319;
  8002f8:	00804fc4 	movi	r2,319
  8002fc:	e0bffb15 	stw	r2,-20(fp)
			int y = 119;
  800300:	00801dc4 	movi	r2,119
  800304:	e0bffa15 	stw	r2,-24(fp)
			volatile unsigned int base = PIXEL_BUFFER_BASE;
  800308:	e03ffd15 	stw	zero,-12(fp)
			volatile unsigned int offset = (x | (y << 10)) << 1;
  80030c:	e0bffa17 	ldw	r2,-24(fp)
  800310:	100692ba 	slli	r3,r2,10
  800314:	e0bffb17 	ldw	r2,-20(fp)
  800318:	1884b03a 	or	r2,r3,r2
  80031c:	1085883a 	add	r2,r2,r2
  800320:	e0bffe15 	stw	r2,-8(fp)
			volatile unsigned int position = base + offset;
  800324:	e0fffd17 	ldw	r3,-12(fp)
  800328:	e0bffe17 	ldw	r2,-8(fp)
  80032c:	1885883a 	add	r2,r3,r2
  800330:	e0bfff15 	stw	r2,-4(fp)
			unsigned int val = IORD_16DIRECT(position, 0);
  800334:	e0bfff17 	ldw	r2,-4(fp)
  800338:	1080002b 	ldhuio	r2,0(r2)
  80033c:	e0bff915 	stw	r2,-28(fp)
			int red = (val & (0x1F << 11)) >> 11;
  800340:	e0bff917 	ldw	r2,-28(fp)
  800344:	10be000c 	andi	r2,r2,63488
  800348:	1004d2fa 	srli	r2,r2,11
  80034c:	e0bff815 	stw	r2,-32(fp)
			red *= (255/31); // convert to 255 RGB scheme
  800350:	e0bff817 	ldw	r2,-32(fp)
  800354:	100490fa 	slli	r2,r2,3
  800358:	e0bff815 	stw	r2,-32(fp)
			// 0x1F is 11111
			int green = (val & (0x3F << 5)) >> 5;
  80035c:	e0bff917 	ldw	r2,-28(fp)
  800360:	1081f80c 	andi	r2,r2,2016
  800364:	1004d17a 	srli	r2,r2,5
  800368:	e0bff715 	stw	r2,-36(fp)
			green *= (255/63); // convert to 255 RGB scheme
  80036c:	e0bff717 	ldw	r2,-36(fp)
  800370:	1085883a 	add	r2,r2,r2
  800374:	1085883a 	add	r2,r2,r2
  800378:	e0bff715 	stw	r2,-36(fp)
			// 0x3F = 111111
			int blue = (val & 0x1F);
  80037c:	e0bff917 	ldw	r2,-28(fp)
  800380:	108007cc 	andi	r2,r2,31
  800384:	e0bff615 	stw	r2,-40(fp)
			blue *= (255/31); // convert to 255 RGB scheme
  800388:	e0bff617 	ldw	r2,-40(fp)
  80038c:	100490fa 	slli	r2,r2,3
  800390:	e0bff615 	stw	r2,-40(fp)
			// 0x1F is 11111
			counter = 0;
  800394:	e03ffc15 	stw	zero,-16(fp)
			printf("Pixel: (%d, %d) ", x, y);
  800398:	01002074 	movhi	r4,129
  80039c:	2132cd04 	addi	r4,r4,-13516
  8003a0:	e17ffb17 	ldw	r5,-20(fp)
  8003a4:	e1bffa17 	ldw	r6,-24(fp)
  8003a8:	08005880 	call	800588 <printf>
			printf("Red: %d Green: %d Blue: %d\n", red, green, blue);
  8003ac:	01002074 	movhi	r4,129
  8003b0:	2132d204 	addi	r4,r4,-13496
  8003b4:	e17ff817 	ldw	r5,-32(fp)
  8003b8:	e1bff717 	ldw	r6,-36(fp)
  8003bc:	e1fff617 	ldw	r7,-40(fp)
  8003c0:	08005880 	call	800588 <printf>
			//Log the color detected (Red, Orange, Yellow, Green, Blue, Indigo, Violet, Pink)
			char *color;
			int detected = 0;
  8003c4:	e03ff415 	stw	zero,-48(fp)

			if (red > 240) {
  8003c8:	e0bff817 	ldw	r2,-32(fp)
  8003cc:	10803c50 	cmplti	r2,r2,241
  8003d0:	1000301e 	bne	r2,zero,800494 <main+0x258>
				// Either red or orange or pink or yellow
				if (green < 100 && blue < 100) {
  8003d4:	e0bff717 	ldw	r2,-36(fp)
  8003d8:	10801908 	cmpgei	r2,r2,100
  8003dc:	1000091e 	bne	r2,zero,800404 <main+0x1c8>
  8003e0:	e0bff617 	ldw	r2,-40(fp)
  8003e4:	10801908 	cmpgei	r2,r2,100
  8003e8:	1000061e 	bne	r2,zero,800404 <main+0x1c8>
					color = "Red";
  8003ec:	00802074 	movhi	r2,129
  8003f0:	10b2d904 	addi	r2,r2,-13468
  8003f4:	e0bff515 	stw	r2,-44(fp)
					detected = 1;
  8003f8:	00800044 	movi	r2,1
  8003fc:	e0bff415 	stw	r2,-48(fp)
			char *color;
			int detected = 0;

			if (red > 240) {
				// Either red or orange or pink or yellow
				if (green < 100 && blue < 100) {
  800400:	00005906 	br	800568 <main+0x32c>
					color = "Red";
					detected = 1;
				}
				else if (green > 100 && blue < 100) {
  800404:	e0bff717 	ldw	r2,-36(fp)
  800408:	10801950 	cmplti	r2,r2,101
  80040c:	1000091e 	bne	r2,zero,800434 <main+0x1f8>
  800410:	e0bff617 	ldw	r2,-40(fp)
  800414:	10801908 	cmpgei	r2,r2,100
  800418:	1000061e 	bne	r2,zero,800434 <main+0x1f8>
					color = "Orange";
  80041c:	00802074 	movhi	r2,129
  800420:	10b2da04 	addi	r2,r2,-13464
  800424:	e0bff515 	stw	r2,-44(fp)
					detected = 1;
  800428:	00800044 	movi	r2,1
  80042c:	e0bff415 	stw	r2,-48(fp)
				// Either red or orange or pink or yellow
				if (green < 100 && blue < 100) {
					color = "Red";
					detected = 1;
				}
				else if (green > 100 && blue < 100) {
  800430:	00004d06 	br	800568 <main+0x32c>
					color = "Orange";
					detected = 1;
				}
				else if (green < 150 && blue > 240) {
  800434:	e0bff717 	ldw	r2,-36(fp)
  800438:	10802588 	cmpgei	r2,r2,150
  80043c:	1000091e 	bne	r2,zero,800464 <main+0x228>
  800440:	e0bff617 	ldw	r2,-40(fp)
  800444:	10803c50 	cmplti	r2,r2,241
  800448:	1000061e 	bne	r2,zero,800464 <main+0x228>
					color = "Pink";
  80044c:	00802074 	movhi	r2,129
  800450:	10b2dc04 	addi	r2,r2,-13456
  800454:	e0bff515 	stw	r2,-44(fp)
					detected = 1;
  800458:	00800044 	movi	r2,1
  80045c:	e0bff415 	stw	r2,-48(fp)
				}
				else if (green > 100 && blue < 100) {
					color = "Orange";
					detected = 1;
				}
				else if (green < 150 && blue > 240) {
  800460:	00004106 	br	800568 <main+0x32c>
					color = "Pink";
					detected = 1;
				}
				else if (green > 240 && blue < 175) {
  800464:	e0bff717 	ldw	r2,-36(fp)
  800468:	10803c50 	cmplti	r2,r2,241
  80046c:	10003e1e 	bne	r2,zero,800568 <main+0x32c>
  800470:	e0bff617 	ldw	r2,-40(fp)
  800474:	10802bc8 	cmpgei	r2,r2,175
  800478:	10003b1e 	bne	r2,zero,800568 <main+0x32c>
					color = "Yellow";
  80047c:	00802074 	movhi	r2,129
  800480:	10b2de04 	addi	r2,r2,-13448
  800484:	e0bff515 	stw	r2,-44(fp)
					detected = 1;
  800488:	00800044 	movi	r2,1
  80048c:	e0bff415 	stw	r2,-48(fp)
  800490:	00003506 	br	800568 <main+0x32c>
				}
			} else if (green > 240) {
  800494:	e0bff717 	ldw	r2,-36(fp)
  800498:	10803c50 	cmplti	r2,r2,241
  80049c:	10000c1e 	bne	r2,zero,8004d0 <main+0x294>
				// If green
				if (red < 150 && blue < 150) {
  8004a0:	e0bff817 	ldw	r2,-32(fp)
  8004a4:	10802588 	cmpgei	r2,r2,150
  8004a8:	10002f1e 	bne	r2,zero,800568 <main+0x32c>
  8004ac:	e0bff617 	ldw	r2,-40(fp)
  8004b0:	10802588 	cmpgei	r2,r2,150
  8004b4:	10002c1e 	bne	r2,zero,800568 <main+0x32c>
					color = "Green";
  8004b8:	00802074 	movhi	r2,129
  8004bc:	10b2e004 	addi	r2,r2,-13440
  8004c0:	e0bff515 	stw	r2,-44(fp)
					detected = 1;
  8004c4:	00800044 	movi	r2,1
  8004c8:	e0bff415 	stw	r2,-48(fp)
  8004cc:	00002606 	br	800568 <main+0x32c>
				}
			} else if (blue > 240) {
  8004d0:	e0bff617 	ldw	r2,-40(fp)
  8004d4:	10803c50 	cmplti	r2,r2,241
  8004d8:	1000231e 	bne	r2,zero,800568 <main+0x32c>
				// Either indigo, violet, or blue
				if (red < 50 && green < 100) {
  8004dc:	e0bff817 	ldw	r2,-32(fp)
  8004e0:	10800c88 	cmpgei	r2,r2,50
  8004e4:	1000091e 	bne	r2,zero,80050c <main+0x2d0>
  8004e8:	e0bff717 	ldw	r2,-36(fp)
  8004ec:	10801908 	cmpgei	r2,r2,100
  8004f0:	1000061e 	bne	r2,zero,80050c <main+0x2d0>
					color = "Indigo";
  8004f4:	00802074 	movhi	r2,129
  8004f8:	10b2e204 	addi	r2,r2,-13432
  8004fc:	e0bff515 	stw	r2,-44(fp)
					detected = 1;
  800500:	00800044 	movi	r2,1
  800504:	e0bff415 	stw	r2,-48(fp)
					color = "Green";
					detected = 1;
				}
			} else if (blue > 240) {
				// Either indigo, violet, or blue
				if (red < 50 && green < 100) {
  800508:	00001706 	br	800568 <main+0x32c>
					color = "Indigo";
					detected = 1;
				}
				else if (red < 100 && green < 100) {
  80050c:	e0bff817 	ldw	r2,-32(fp)
  800510:	10801908 	cmpgei	r2,r2,100
  800514:	1000091e 	bne	r2,zero,80053c <main+0x300>
  800518:	e0bff717 	ldw	r2,-36(fp)
  80051c:	10801908 	cmpgei	r2,r2,100
  800520:	1000061e 	bne	r2,zero,80053c <main+0x300>
					color = "Violet";
  800524:	00802074 	movhi	r2,129
  800528:	10b2e404 	addi	r2,r2,-13424
  80052c:	e0bff515 	stw	r2,-44(fp)
					detected = 1;
  800530:	00800044 	movi	r2,1
  800534:	e0bff415 	stw	r2,-48(fp)
				// Either indigo, violet, or blue
				if (red < 50 && green < 100) {
					color = "Indigo";
					detected = 1;
				}
				else if (red < 100 && green < 100) {
  800538:	00000b06 	br	800568 <main+0x32c>
					color = "Violet";
					detected = 1;
				}
				else if (red < 75 && green < 175) {
  80053c:	e0bff817 	ldw	r2,-32(fp)
  800540:	108012c8 	cmpgei	r2,r2,75
  800544:	1000081e 	bne	r2,zero,800568 <main+0x32c>
  800548:	e0bff717 	ldw	r2,-36(fp)
  80054c:	10802bc8 	cmpgei	r2,r2,175
  800550:	1000051e 	bne	r2,zero,800568 <main+0x32c>
					color = "Blue";
  800554:	00802074 	movhi	r2,129
  800558:	10b2e604 	addi	r2,r2,-13416
  80055c:	e0bff515 	stw	r2,-44(fp)
					detected = 1;
  800560:	00800044 	movi	r2,1
  800564:	e0bff415 	stw	r2,-48(fp)
				}
			}

			if (detected == 1)
  800568:	e0bff417 	ldw	r2,-48(fp)
  80056c:	10800058 	cmpnei	r2,r2,1
  800570:	103f3b1e 	bne	r2,zero,800260 <main+0x24>
				printf("Color Detected: %s\n", color);
  800574:	01002074 	movhi	r4,129
  800578:	2132e804 	addi	r4,r4,-13408
  80057c:	e17ff517 	ldw	r5,-44(fp)
  800580:	08005880 	call	800588 <printf>
		}
  }
  800584:	003f3606 	br	800260 <main+0x24>

00800588 <printf>:
  800588:	defffb04 	addi	sp,sp,-20
  80058c:	dfc00115 	stw	ra,4(sp)
  800590:	d9400215 	stw	r5,8(sp)
  800594:	d9800315 	stw	r6,12(sp)
  800598:	d9c00415 	stw	r7,16(sp)
  80059c:	00802074 	movhi	r2,129
  8005a0:	10ba7004 	addi	r2,r2,-5696
  8005a4:	10c00017 	ldw	r3,0(r2)
  8005a8:	200b883a 	mov	r5,r4
  8005ac:	d8800204 	addi	r2,sp,8
  8005b0:	19000217 	ldw	r4,8(r3)
  8005b4:	100d883a 	mov	r6,r2
  8005b8:	d8800015 	stw	r2,0(sp)
  8005bc:	08026440 	call	802644 <__vfprintf_internal>
  8005c0:	dfc00117 	ldw	ra,4(sp)
  8005c4:	dec00504 	addi	sp,sp,20
  8005c8:	f800283a 	ret

008005cc <_printf_r>:
  8005cc:	defffc04 	addi	sp,sp,-16
  8005d0:	dfc00115 	stw	ra,4(sp)
  8005d4:	d9800215 	stw	r6,8(sp)
  8005d8:	d9c00315 	stw	r7,12(sp)
  8005dc:	280d883a 	mov	r6,r5
  8005e0:	21400217 	ldw	r5,8(r4)
  8005e4:	d8c00204 	addi	r3,sp,8
  8005e8:	180f883a 	mov	r7,r3
  8005ec:	d8c00015 	stw	r3,0(sp)
  8005f0:	08007800 	call	800780 <___vfprintf_internal_r>
  8005f4:	dfc00117 	ldw	ra,4(sp)
  8005f8:	dec00404 	addi	sp,sp,16
  8005fc:	f800283a 	ret

00800600 <_puts_r>:
  800600:	defff604 	addi	sp,sp,-40
  800604:	dc400715 	stw	r17,28(sp)
  800608:	2023883a 	mov	r17,r4
  80060c:	2809883a 	mov	r4,r5
  800610:	dfc00915 	stw	ra,36(sp)
  800614:	dcc00815 	stw	r19,32(sp)
  800618:	2827883a 	mov	r19,r5
  80061c:	08006b40 	call	8006b4 <strlen>
  800620:	89400217 	ldw	r5,8(r17)
  800624:	00c02074 	movhi	r3,129
  800628:	18f2ed04 	addi	r3,r3,-13388
  80062c:	01c00044 	movi	r7,1
  800630:	12000044 	addi	r8,r2,1
  800634:	d8c00515 	stw	r3,20(sp)
  800638:	d9c00615 	stw	r7,24(sp)
  80063c:	d8c00304 	addi	r3,sp,12
  800640:	01c00084 	movi	r7,2
  800644:	8809883a 	mov	r4,r17
  800648:	d80d883a 	mov	r6,sp
  80064c:	d8c00015 	stw	r3,0(sp)
  800650:	dcc00315 	stw	r19,12(sp)
  800654:	da000215 	stw	r8,8(sp)
  800658:	d9c00115 	stw	r7,4(sp)
  80065c:	d8800415 	stw	r2,16(sp)
  800660:	08049000 	call	804900 <__sfvwrite_r>
  800664:	00ffffc4 	movi	r3,-1
  800668:	10000626 	beq	r2,zero,800684 <_puts_r+0x84>
  80066c:	1805883a 	mov	r2,r3
  800670:	dfc00917 	ldw	ra,36(sp)
  800674:	dcc00817 	ldw	r19,32(sp)
  800678:	dc400717 	ldw	r17,28(sp)
  80067c:	dec00a04 	addi	sp,sp,40
  800680:	f800283a 	ret
  800684:	00c00284 	movi	r3,10
  800688:	1805883a 	mov	r2,r3
  80068c:	dfc00917 	ldw	ra,36(sp)
  800690:	dcc00817 	ldw	r19,32(sp)
  800694:	dc400717 	ldw	r17,28(sp)
  800698:	dec00a04 	addi	sp,sp,40
  80069c:	f800283a 	ret

008006a0 <puts>:
  8006a0:	00802074 	movhi	r2,129
  8006a4:	10ba7004 	addi	r2,r2,-5696
  8006a8:	200b883a 	mov	r5,r4
  8006ac:	11000017 	ldw	r4,0(r2)
  8006b0:	08006001 	jmpi	800600 <_puts_r>

008006b4 <strlen>:
  8006b4:	208000cc 	andi	r2,r4,3
  8006b8:	2011883a 	mov	r8,r4
  8006bc:	1000161e 	bne	r2,zero,800718 <strlen+0x64>
  8006c0:	20c00017 	ldw	r3,0(r4)
  8006c4:	017fbff4 	movhi	r5,65279
  8006c8:	297fbfc4 	addi	r5,r5,-257
  8006cc:	01e02074 	movhi	r7,32897
  8006d0:	39e02004 	addi	r7,r7,-32640
  8006d4:	1945883a 	add	r2,r3,r5
  8006d8:	11c4703a 	and	r2,r2,r7
  8006dc:	00c6303a 	nor	r3,zero,r3
  8006e0:	1886703a 	and	r3,r3,r2
  8006e4:	18000c1e 	bne	r3,zero,800718 <strlen+0x64>
  8006e8:	280d883a 	mov	r6,r5
  8006ec:	380b883a 	mov	r5,r7
  8006f0:	21000104 	addi	r4,r4,4
  8006f4:	20800017 	ldw	r2,0(r4)
  8006f8:	1187883a 	add	r3,r2,r6
  8006fc:	1946703a 	and	r3,r3,r5
  800700:	0084303a 	nor	r2,zero,r2
  800704:	10c4703a 	and	r2,r2,r3
  800708:	103ff926 	beq	r2,zero,8006f0 <strlen+0x3c>
  80070c:	20800007 	ldb	r2,0(r4)
  800710:	10000326 	beq	r2,zero,800720 <strlen+0x6c>
  800714:	21000044 	addi	r4,r4,1
  800718:	20800007 	ldb	r2,0(r4)
  80071c:	103ffd1e 	bne	r2,zero,800714 <strlen+0x60>
  800720:	2205c83a 	sub	r2,r4,r8
  800724:	f800283a 	ret

00800728 <__sprint_r>:
  800728:	30800217 	ldw	r2,8(r6)
  80072c:	defffe04 	addi	sp,sp,-8
  800730:	dc000015 	stw	r16,0(sp)
  800734:	dfc00115 	stw	ra,4(sp)
  800738:	3021883a 	mov	r16,r6
  80073c:	0007883a 	mov	r3,zero
  800740:	1000061e 	bne	r2,zero,80075c <__sprint_r+0x34>
  800744:	1805883a 	mov	r2,r3
  800748:	30000115 	stw	zero,4(r6)
  80074c:	dfc00117 	ldw	ra,4(sp)
  800750:	dc000017 	ldw	r16,0(sp)
  800754:	dec00204 	addi	sp,sp,8
  800758:	f800283a 	ret
  80075c:	08049000 	call	804900 <__sfvwrite_r>
  800760:	1007883a 	mov	r3,r2
  800764:	1805883a 	mov	r2,r3
  800768:	80000115 	stw	zero,4(r16)
  80076c:	80000215 	stw	zero,8(r16)
  800770:	dfc00117 	ldw	ra,4(sp)
  800774:	dc000017 	ldw	r16,0(sp)
  800778:	dec00204 	addi	sp,sp,8
  80077c:	f800283a 	ret

00800780 <___vfprintf_internal_r>:
  800780:	defea404 	addi	sp,sp,-1392
  800784:	dd815815 	stw	r22,1376(sp)
  800788:	dc015215 	stw	r16,1352(sp)
  80078c:	d9c15115 	stw	r7,1348(sp)
  800790:	dfc15b15 	stw	ra,1388(sp)
  800794:	df015a15 	stw	fp,1384(sp)
  800798:	ddc15915 	stw	r23,1380(sp)
  80079c:	dd415715 	stw	r21,1372(sp)
  8007a0:	dd015615 	stw	r20,1368(sp)
  8007a4:	dcc15515 	stw	r19,1364(sp)
  8007a8:	dc815415 	stw	r18,1360(sp)
  8007ac:	dc415315 	stw	r17,1356(sp)
  8007b0:	282d883a 	mov	r22,r5
  8007b4:	3021883a 	mov	r16,r6
  8007b8:	d9014f15 	stw	r4,1340(sp)
  8007bc:	0804f240 	call	804f24 <_localeconv_r>
  8007c0:	10800017 	ldw	r2,0(r2)
  8007c4:	d9c15117 	ldw	r7,1348(sp)
  8007c8:	d8814915 	stw	r2,1316(sp)
  8007cc:	d8814f17 	ldw	r2,1340(sp)
  8007d0:	10000226 	beq	r2,zero,8007dc <___vfprintf_internal_r+0x5c>
  8007d4:	10800e17 	ldw	r2,56(r2)
  8007d8:	10020d26 	beq	r2,zero,801010 <___vfprintf_internal_r+0x890>
  8007dc:	b080030b 	ldhu	r2,12(r22)
  8007e0:	1080020c 	andi	r2,r2,8
  8007e4:	10020e26 	beq	r2,zero,801020 <___vfprintf_internal_r+0x8a0>
  8007e8:	b0800417 	ldw	r2,16(r22)
  8007ec:	10020c26 	beq	r2,zero,801020 <___vfprintf_internal_r+0x8a0>
  8007f0:	b200030b 	ldhu	r8,12(r22)
  8007f4:	00800284 	movi	r2,10
  8007f8:	40c0068c 	andi	r3,r8,26
  8007fc:	18802f1e 	bne	r3,r2,8008bc <___vfprintf_internal_r+0x13c>
  800800:	b080038f 	ldh	r2,14(r22)
  800804:	10002d16 	blt	r2,zero,8008bc <___vfprintf_internal_r+0x13c>
  800808:	b240038b 	ldhu	r9,14(r22)
  80080c:	b2800717 	ldw	r10,28(r22)
  800810:	b2c00917 	ldw	r11,36(r22)
  800814:	d9014f17 	ldw	r4,1340(sp)
  800818:	dc402904 	addi	r17,sp,164
  80081c:	d8804004 	addi	r2,sp,256
  800820:	00c10004 	movi	r3,1024
  800824:	423fff4c 	andi	r8,r8,65533
  800828:	800d883a 	mov	r6,r16
  80082c:	880b883a 	mov	r5,r17
  800830:	da002c0d 	sth	r8,176(sp)
  800834:	da402c8d 	sth	r9,178(sp)
  800838:	da803015 	stw	r10,192(sp)
  80083c:	dac03215 	stw	r11,200(sp)
  800840:	d8802d15 	stw	r2,180(sp)
  800844:	d8c02e15 	stw	r3,184(sp)
  800848:	d8802915 	stw	r2,164(sp)
  80084c:	d8c02b15 	stw	r3,172(sp)
  800850:	d8002f15 	stw	zero,188(sp)
  800854:	08007800 	call	800780 <___vfprintf_internal_r>
  800858:	d8814b15 	stw	r2,1324(sp)
  80085c:	10000416 	blt	r2,zero,800870 <___vfprintf_internal_r+0xf0>
  800860:	d9014f17 	ldw	r4,1340(sp)
  800864:	880b883a 	mov	r5,r17
  800868:	0803f9c0 	call	803f9c <_fflush_r>
  80086c:	1002321e 	bne	r2,zero,801138 <___vfprintf_internal_r+0x9b8>
  800870:	d8802c0b 	ldhu	r2,176(sp)
  800874:	1080100c 	andi	r2,r2,64
  800878:	10000326 	beq	r2,zero,800888 <___vfprintf_internal_r+0x108>
  80087c:	b080030b 	ldhu	r2,12(r22)
  800880:	10801014 	ori	r2,r2,64
  800884:	b080030d 	sth	r2,12(r22)
  800888:	d8814b17 	ldw	r2,1324(sp)
  80088c:	dfc15b17 	ldw	ra,1388(sp)
  800890:	df015a17 	ldw	fp,1384(sp)
  800894:	ddc15917 	ldw	r23,1380(sp)
  800898:	dd815817 	ldw	r22,1376(sp)
  80089c:	dd415717 	ldw	r21,1372(sp)
  8008a0:	dd015617 	ldw	r20,1368(sp)
  8008a4:	dcc15517 	ldw	r19,1364(sp)
  8008a8:	dc815417 	ldw	r18,1360(sp)
  8008ac:	dc415317 	ldw	r17,1356(sp)
  8008b0:	dc015217 	ldw	r16,1352(sp)
  8008b4:	dec15c04 	addi	sp,sp,1392
  8008b8:	f800283a 	ret
  8008bc:	0005883a 	mov	r2,zero
  8008c0:	0007883a 	mov	r3,zero
  8008c4:	dd401904 	addi	r21,sp,100
  8008c8:	d8814215 	stw	r2,1288(sp)
  8008cc:	802f883a 	mov	r23,r16
  8008d0:	d8c14315 	stw	r3,1292(sp)
  8008d4:	d8014b15 	stw	zero,1324(sp)
  8008d8:	d8014815 	stw	zero,1312(sp)
  8008dc:	d8014415 	stw	zero,1296(sp)
  8008e0:	d8014715 	stw	zero,1308(sp)
  8008e4:	dd400c15 	stw	r21,48(sp)
  8008e8:	d8000e15 	stw	zero,56(sp)
  8008ec:	d8000d15 	stw	zero,52(sp)
  8008f0:	b8800007 	ldb	r2,0(r23)
  8008f4:	10001926 	beq	r2,zero,80095c <___vfprintf_internal_r+0x1dc>
  8008f8:	00c00944 	movi	r3,37
  8008fc:	10c01726 	beq	r2,r3,80095c <___vfprintf_internal_r+0x1dc>
  800900:	b821883a 	mov	r16,r23
  800904:	00000106 	br	80090c <___vfprintf_internal_r+0x18c>
  800908:	10c00326 	beq	r2,r3,800918 <___vfprintf_internal_r+0x198>
  80090c:	84000044 	addi	r16,r16,1
  800910:	80800007 	ldb	r2,0(r16)
  800914:	103ffc1e 	bne	r2,zero,800908 <___vfprintf_internal_r+0x188>
  800918:	85e7c83a 	sub	r19,r16,r23
  80091c:	98000e26 	beq	r19,zero,800958 <___vfprintf_internal_r+0x1d8>
  800920:	dc800e17 	ldw	r18,56(sp)
  800924:	dc400d17 	ldw	r17,52(sp)
  800928:	008001c4 	movi	r2,7
  80092c:	94e5883a 	add	r18,r18,r19
  800930:	8c400044 	addi	r17,r17,1
  800934:	adc00015 	stw	r23,0(r21)
  800938:	dc800e15 	stw	r18,56(sp)
  80093c:	acc00115 	stw	r19,4(r21)
  800940:	dc400d15 	stw	r17,52(sp)
  800944:	14428b16 	blt	r2,r17,801374 <___vfprintf_internal_r+0xbf4>
  800948:	ad400204 	addi	r21,r21,8
  80094c:	d9014b17 	ldw	r4,1324(sp)
  800950:	24c9883a 	add	r4,r4,r19
  800954:	d9014b15 	stw	r4,1324(sp)
  800958:	802f883a 	mov	r23,r16
  80095c:	b8800007 	ldb	r2,0(r23)
  800960:	10013c26 	beq	r2,zero,800e54 <___vfprintf_internal_r+0x6d4>
  800964:	bdc00044 	addi	r23,r23,1
  800968:	d8000405 	stb	zero,16(sp)
  80096c:	b8c00007 	ldb	r3,0(r23)
  800970:	04ffffc4 	movi	r19,-1
  800974:	d8014c15 	stw	zero,1328(sp)
  800978:	d8014a15 	stw	zero,1320(sp)
  80097c:	d8c14d15 	stw	r3,1332(sp)
  800980:	bdc00044 	addi	r23,r23,1
  800984:	d9414d17 	ldw	r5,1332(sp)
  800988:	00801604 	movi	r2,88
  80098c:	28fff804 	addi	r3,r5,-32
  800990:	10c06036 	bltu	r2,r3,800b14 <___vfprintf_internal_r+0x394>
  800994:	18c5883a 	add	r2,r3,r3
  800998:	1085883a 	add	r2,r2,r2
  80099c:	00c02034 	movhi	r3,128
  8009a0:	18c26c04 	addi	r3,r3,2480
  8009a4:	10c5883a 	add	r2,r2,r3
  8009a8:	11000017 	ldw	r4,0(r2)
  8009ac:	2000683a 	jmp	r4
  8009b0:	00801924 	muli	r2,zero,100
  8009b4:	00800b14 	movui	r2,44
  8009b8:	00800b14 	movui	r2,44
  8009bc:	00801910 	cmplti	r2,zero,100
  8009c0:	00800b14 	movui	r2,44
  8009c4:	00800b14 	movui	r2,44
  8009c8:	00800b14 	movui	r2,44
  8009cc:	00800b14 	movui	r2,44
  8009d0:	00800b14 	movui	r2,44
  8009d4:	00800b14 	movui	r2,44
  8009d8:	008016f0 	cmpltui	r2,zero,91
  8009dc:	00801900 	call	80190 <__reset-0x77fe70>
  8009e0:	00800b14 	movui	r2,44
  8009e4:	00801708 	cmpgei	r2,zero,92
  8009e8:	008019a8 	cmpgeui	r2,zero,102
  8009ec:	00800b14 	movui	r2,44
  8009f0:	00801994 	movui	r2,102
  8009f4:	00801950 	cmplti	r2,zero,101
  8009f8:	00801950 	cmplti	r2,zero,101
  8009fc:	00801950 	cmplti	r2,zero,101
  800a00:	00801950 	cmplti	r2,zero,101
  800a04:	00801950 	cmplti	r2,zero,101
  800a08:	00801950 	cmplti	r2,zero,101
  800a0c:	00801950 	cmplti	r2,zero,101
  800a10:	00801950 	cmplti	r2,zero,101
  800a14:	00801950 	cmplti	r2,zero,101
  800a18:	00800b14 	movui	r2,44
  800a1c:	00800b14 	movui	r2,44
  800a20:	00800b14 	movui	r2,44
  800a24:	00800b14 	movui	r2,44
  800a28:	00800b14 	movui	r2,44
  800a2c:	00800b14 	movui	r2,44
  800a30:	00800b14 	movui	r2,44
  800a34:	00800b14 	movui	r2,44
  800a38:	00800b14 	movui	r2,44
  800a3c:	00800b14 	movui	r2,44
  800a40:	0080116c 	andhi	r2,zero,69
  800a44:	008017d8 	cmpnei	r2,zero,95
  800a48:	00800b14 	movui	r2,44
  800a4c:	008017d8 	cmpnei	r2,zero,95
  800a50:	00800b14 	movui	r2,44
  800a54:	00800b14 	movui	r2,44
  800a58:	00800b14 	movui	r2,44
  800a5c:	00800b14 	movui	r2,44
  800a60:	0080193c 	xorhi	r2,zero,100
  800a64:	00800b14 	movui	r2,44
  800a68:	00800b14 	movui	r2,44
  800a6c:	00801220 	cmpeqi	r2,zero,72
  800a70:	00800b14 	movui	r2,44
  800a74:	00800b14 	movui	r2,44
  800a78:	00800b14 	movui	r2,44
  800a7c:	00800b14 	movui	r2,44
  800a80:	00800b14 	movui	r2,44
  800a84:	0080126c 	andhi	r2,zero,73
  800a88:	00800b14 	movui	r2,44
  800a8c:	00800b14 	movui	r2,44
  800a90:	0080188c 	andi	r2,zero,98
  800a94:	00800b14 	movui	r2,44
  800a98:	00800b14 	movui	r2,44
  800a9c:	00800b14 	movui	r2,44
  800aa0:	00800b14 	movui	r2,44
  800aa4:	00800b14 	movui	r2,44
  800aa8:	00800b14 	movui	r2,44
  800aac:	00800b14 	movui	r2,44
  800ab0:	00800b14 	movui	r2,44
  800ab4:	00800b14 	movui	r2,44
  800ab8:	00800b14 	movui	r2,44
  800abc:	00801860 	cmpeqi	r2,zero,97
  800ac0:	00801178 	rdprs	r2,zero,69
  800ac4:	008017d8 	cmpnei	r2,zero,95
  800ac8:	008017d8 	cmpnei	r2,zero,95
  800acc:	008017d8 	cmpnei	r2,zero,95
  800ad0:	008017c4 	movi	r2,95
  800ad4:	00801178 	rdprs	r2,zero,69
  800ad8:	00800b14 	movui	r2,44
  800adc:	00800b14 	movui	r2,44
  800ae0:	0080174c 	andi	r2,zero,93
  800ae4:	00800b14 	movui	r2,44
  800ae8:	0080171c 	xori	r2,zero,92
  800aec:	0080122c 	andhi	r2,zero,72
  800af0:	0080177c 	xorhi	r2,zero,93
  800af4:	00801768 	cmpgeui	r2,zero,93
  800af8:	00800b14 	movui	r2,44
  800afc:	00801a10 	cmplti	r2,zero,104
  800b00:	00800b14 	movui	r2,44
  800b04:	00801278 	rdprs	r2,zero,73
  800b08:	00800b14 	movui	r2,44
  800b0c:	00800b14 	movui	r2,44
  800b10:	008018f0 	cmpltui	r2,zero,99
  800b14:	d9014d17 	ldw	r4,1332(sp)
  800b18:	2000ce26 	beq	r4,zero,800e54 <___vfprintf_internal_r+0x6d4>
  800b1c:	01400044 	movi	r5,1
  800b20:	d9800f04 	addi	r6,sp,60
  800b24:	d9c14015 	stw	r7,1280(sp)
  800b28:	d9414515 	stw	r5,1300(sp)
  800b2c:	d9814115 	stw	r6,1284(sp)
  800b30:	280f883a 	mov	r7,r5
  800b34:	d9000f05 	stb	r4,60(sp)
  800b38:	d8000405 	stb	zero,16(sp)
  800b3c:	d8014615 	stw	zero,1304(sp)
  800b40:	d8c14c17 	ldw	r3,1328(sp)
  800b44:	1880008c 	andi	r2,r3,2
  800b48:	1005003a 	cmpeq	r2,r2,zero
  800b4c:	d8815015 	stw	r2,1344(sp)
  800b50:	1000031e 	bne	r2,zero,800b60 <___vfprintf_internal_r+0x3e0>
  800b54:	d9014517 	ldw	r4,1300(sp)
  800b58:	21000084 	addi	r4,r4,2
  800b5c:	d9014515 	stw	r4,1300(sp)
  800b60:	d9414c17 	ldw	r5,1328(sp)
  800b64:	2940210c 	andi	r5,r5,132
  800b68:	d9414e15 	stw	r5,1336(sp)
  800b6c:	28002d1e 	bne	r5,zero,800c24 <___vfprintf_internal_r+0x4a4>
  800b70:	d9814a17 	ldw	r6,1320(sp)
  800b74:	d8814517 	ldw	r2,1300(sp)
  800b78:	30a1c83a 	sub	r16,r6,r2
  800b7c:	0400290e 	bge	zero,r16,800c24 <___vfprintf_internal_r+0x4a4>
  800b80:	00800404 	movi	r2,16
  800b84:	14045e0e 	bge	r2,r16,801d00 <___vfprintf_internal_r+0x1580>
  800b88:	dc800e17 	ldw	r18,56(sp)
  800b8c:	dc400d17 	ldw	r17,52(sp)
  800b90:	1027883a 	mov	r19,r2
  800b94:	07002074 	movhi	fp,129
  800b98:	e7330984 	addi	fp,fp,-13274
  800b9c:	050001c4 	movi	r20,7
  800ba0:	00000306 	br	800bb0 <___vfprintf_internal_r+0x430>
  800ba4:	843ffc04 	addi	r16,r16,-16
  800ba8:	ad400204 	addi	r21,r21,8
  800bac:	9c00130e 	bge	r19,r16,800bfc <___vfprintf_internal_r+0x47c>
  800bb0:	94800404 	addi	r18,r18,16
  800bb4:	8c400044 	addi	r17,r17,1
  800bb8:	af000015 	stw	fp,0(r21)
  800bbc:	acc00115 	stw	r19,4(r21)
  800bc0:	dc800e15 	stw	r18,56(sp)
  800bc4:	dc400d15 	stw	r17,52(sp)
  800bc8:	a47ff60e 	bge	r20,r17,800ba4 <___vfprintf_internal_r+0x424>
  800bcc:	d9014f17 	ldw	r4,1340(sp)
  800bd0:	b00b883a 	mov	r5,r22
  800bd4:	d9800c04 	addi	r6,sp,48
  800bd8:	d9c15115 	stw	r7,1348(sp)
  800bdc:	08007280 	call	800728 <__sprint_r>
  800be0:	d9c15117 	ldw	r7,1348(sp)
  800be4:	10009e1e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  800be8:	843ffc04 	addi	r16,r16,-16
  800bec:	dc800e17 	ldw	r18,56(sp)
  800bf0:	dc400d17 	ldw	r17,52(sp)
  800bf4:	dd401904 	addi	r21,sp,100
  800bf8:	9c3fed16 	blt	r19,r16,800bb0 <___vfprintf_internal_r+0x430>
  800bfc:	9425883a 	add	r18,r18,r16
  800c00:	8c400044 	addi	r17,r17,1
  800c04:	008001c4 	movi	r2,7
  800c08:	af000015 	stw	fp,0(r21)
  800c0c:	ac000115 	stw	r16,4(r21)
  800c10:	dc800e15 	stw	r18,56(sp)
  800c14:	dc400d15 	stw	r17,52(sp)
  800c18:	1441f516 	blt	r2,r17,8013f0 <___vfprintf_internal_r+0xc70>
  800c1c:	ad400204 	addi	r21,r21,8
  800c20:	00000206 	br	800c2c <___vfprintf_internal_r+0x4ac>
  800c24:	dc800e17 	ldw	r18,56(sp)
  800c28:	dc400d17 	ldw	r17,52(sp)
  800c2c:	d8800407 	ldb	r2,16(sp)
  800c30:	10000b26 	beq	r2,zero,800c60 <___vfprintf_internal_r+0x4e0>
  800c34:	00800044 	movi	r2,1
  800c38:	94800044 	addi	r18,r18,1
  800c3c:	8c400044 	addi	r17,r17,1
  800c40:	a8800115 	stw	r2,4(r21)
  800c44:	d8c00404 	addi	r3,sp,16
  800c48:	008001c4 	movi	r2,7
  800c4c:	a8c00015 	stw	r3,0(r21)
  800c50:	dc800e15 	stw	r18,56(sp)
  800c54:	dc400d15 	stw	r17,52(sp)
  800c58:	1441da16 	blt	r2,r17,8013c4 <___vfprintf_internal_r+0xc44>
  800c5c:	ad400204 	addi	r21,r21,8
  800c60:	d9015017 	ldw	r4,1344(sp)
  800c64:	20000b1e 	bne	r4,zero,800c94 <___vfprintf_internal_r+0x514>
  800c68:	d8800444 	addi	r2,sp,17
  800c6c:	94800084 	addi	r18,r18,2
  800c70:	8c400044 	addi	r17,r17,1
  800c74:	a8800015 	stw	r2,0(r21)
  800c78:	00c00084 	movi	r3,2
  800c7c:	008001c4 	movi	r2,7
  800c80:	a8c00115 	stw	r3,4(r21)
  800c84:	dc800e15 	stw	r18,56(sp)
  800c88:	dc400d15 	stw	r17,52(sp)
  800c8c:	1441c216 	blt	r2,r17,801398 <___vfprintf_internal_r+0xc18>
  800c90:	ad400204 	addi	r21,r21,8
  800c94:	d9414e17 	ldw	r5,1336(sp)
  800c98:	00802004 	movi	r2,128
  800c9c:	2880b126 	beq	r5,r2,800f64 <___vfprintf_internal_r+0x7e4>
  800ca0:	d8c14617 	ldw	r3,1304(sp)
  800ca4:	19e1c83a 	sub	r16,r3,r7
  800ca8:	0400260e 	bge	zero,r16,800d44 <___vfprintf_internal_r+0x5c4>
  800cac:	00800404 	movi	r2,16
  800cb0:	1403cf0e 	bge	r2,r16,801bf0 <___vfprintf_internal_r+0x1470>
  800cb4:	1027883a 	mov	r19,r2
  800cb8:	07002074 	movhi	fp,129
  800cbc:	e7330584 	addi	fp,fp,-13290
  800cc0:	050001c4 	movi	r20,7
  800cc4:	00000306 	br	800cd4 <___vfprintf_internal_r+0x554>
  800cc8:	843ffc04 	addi	r16,r16,-16
  800ccc:	ad400204 	addi	r21,r21,8
  800cd0:	9c00130e 	bge	r19,r16,800d20 <___vfprintf_internal_r+0x5a0>
  800cd4:	94800404 	addi	r18,r18,16
  800cd8:	8c400044 	addi	r17,r17,1
  800cdc:	af000015 	stw	fp,0(r21)
  800ce0:	acc00115 	stw	r19,4(r21)
  800ce4:	dc800e15 	stw	r18,56(sp)
  800ce8:	dc400d15 	stw	r17,52(sp)
  800cec:	a47ff60e 	bge	r20,r17,800cc8 <___vfprintf_internal_r+0x548>
  800cf0:	d9014f17 	ldw	r4,1340(sp)
  800cf4:	b00b883a 	mov	r5,r22
  800cf8:	d9800c04 	addi	r6,sp,48
  800cfc:	d9c15115 	stw	r7,1348(sp)
  800d00:	08007280 	call	800728 <__sprint_r>
  800d04:	d9c15117 	ldw	r7,1348(sp)
  800d08:	1000551e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  800d0c:	843ffc04 	addi	r16,r16,-16
  800d10:	dc800e17 	ldw	r18,56(sp)
  800d14:	dc400d17 	ldw	r17,52(sp)
  800d18:	dd401904 	addi	r21,sp,100
  800d1c:	9c3fed16 	blt	r19,r16,800cd4 <___vfprintf_internal_r+0x554>
  800d20:	9425883a 	add	r18,r18,r16
  800d24:	8c400044 	addi	r17,r17,1
  800d28:	008001c4 	movi	r2,7
  800d2c:	af000015 	stw	fp,0(r21)
  800d30:	ac000115 	stw	r16,4(r21)
  800d34:	dc800e15 	stw	r18,56(sp)
  800d38:	dc400d15 	stw	r17,52(sp)
  800d3c:	14418216 	blt	r2,r17,801348 <___vfprintf_internal_r+0xbc8>
  800d40:	ad400204 	addi	r21,r21,8
  800d44:	d9014c17 	ldw	r4,1328(sp)
  800d48:	2080400c 	andi	r2,r4,256
  800d4c:	10004a1e 	bne	r2,zero,800e78 <___vfprintf_internal_r+0x6f8>
  800d50:	d9414117 	ldw	r5,1284(sp)
  800d54:	91e5883a 	add	r18,r18,r7
  800d58:	8c400044 	addi	r17,r17,1
  800d5c:	008001c4 	movi	r2,7
  800d60:	a9400015 	stw	r5,0(r21)
  800d64:	a9c00115 	stw	r7,4(r21)
  800d68:	dc800e15 	stw	r18,56(sp)
  800d6c:	dc400d15 	stw	r17,52(sp)
  800d70:	14416716 	blt	r2,r17,801310 <___vfprintf_internal_r+0xb90>
  800d74:	a8c00204 	addi	r3,r21,8
  800d78:	d9814c17 	ldw	r6,1328(sp)
  800d7c:	3080010c 	andi	r2,r6,4
  800d80:	10002826 	beq	r2,zero,800e24 <___vfprintf_internal_r+0x6a4>
  800d84:	d8814a17 	ldw	r2,1320(sp)
  800d88:	d9014517 	ldw	r4,1300(sp)
  800d8c:	1121c83a 	sub	r16,r2,r4
  800d90:	0400240e 	bge	zero,r16,800e24 <___vfprintf_internal_r+0x6a4>
  800d94:	00800404 	movi	r2,16
  800d98:	1404550e 	bge	r2,r16,801ef0 <___vfprintf_internal_r+0x1770>
  800d9c:	dc400d17 	ldw	r17,52(sp)
  800da0:	1027883a 	mov	r19,r2
  800da4:	07002074 	movhi	fp,129
  800da8:	e7330984 	addi	fp,fp,-13274
  800dac:	050001c4 	movi	r20,7
  800db0:	00000306 	br	800dc0 <___vfprintf_internal_r+0x640>
  800db4:	843ffc04 	addi	r16,r16,-16
  800db8:	18c00204 	addi	r3,r3,8
  800dbc:	9c00110e 	bge	r19,r16,800e04 <___vfprintf_internal_r+0x684>
  800dc0:	94800404 	addi	r18,r18,16
  800dc4:	8c400044 	addi	r17,r17,1
  800dc8:	1f000015 	stw	fp,0(r3)
  800dcc:	1cc00115 	stw	r19,4(r3)
  800dd0:	dc800e15 	stw	r18,56(sp)
  800dd4:	dc400d15 	stw	r17,52(sp)
  800dd8:	a47ff60e 	bge	r20,r17,800db4 <___vfprintf_internal_r+0x634>
  800ddc:	d9014f17 	ldw	r4,1340(sp)
  800de0:	b00b883a 	mov	r5,r22
  800de4:	d9800c04 	addi	r6,sp,48
  800de8:	08007280 	call	800728 <__sprint_r>
  800dec:	10001c1e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  800df0:	843ffc04 	addi	r16,r16,-16
  800df4:	dc800e17 	ldw	r18,56(sp)
  800df8:	dc400d17 	ldw	r17,52(sp)
  800dfc:	d8c01904 	addi	r3,sp,100
  800e00:	9c3fef16 	blt	r19,r16,800dc0 <___vfprintf_internal_r+0x640>
  800e04:	9425883a 	add	r18,r18,r16
  800e08:	8c400044 	addi	r17,r17,1
  800e0c:	008001c4 	movi	r2,7
  800e10:	1f000015 	stw	fp,0(r3)
  800e14:	1c000115 	stw	r16,4(r3)
  800e18:	dc800e15 	stw	r18,56(sp)
  800e1c:	dc400d15 	stw	r17,52(sp)
  800e20:	1440cb16 	blt	r2,r17,801150 <___vfprintf_internal_r+0x9d0>
  800e24:	d8814a17 	ldw	r2,1320(sp)
  800e28:	d9414517 	ldw	r5,1300(sp)
  800e2c:	1140010e 	bge	r2,r5,800e34 <___vfprintf_internal_r+0x6b4>
  800e30:	2805883a 	mov	r2,r5
  800e34:	d9814b17 	ldw	r6,1324(sp)
  800e38:	308d883a 	add	r6,r6,r2
  800e3c:	d9814b15 	stw	r6,1324(sp)
  800e40:	90013b1e 	bne	r18,zero,801330 <___vfprintf_internal_r+0xbb0>
  800e44:	d9c14017 	ldw	r7,1280(sp)
  800e48:	dd401904 	addi	r21,sp,100
  800e4c:	d8000d15 	stw	zero,52(sp)
  800e50:	003ea706 	br	8008f0 <___vfprintf_internal_r+0x170>
  800e54:	d8800e17 	ldw	r2,56(sp)
  800e58:	1005451e 	bne	r2,zero,802370 <___vfprintf_internal_r+0x1bf0>
  800e5c:	d8000d15 	stw	zero,52(sp)
  800e60:	b080030b 	ldhu	r2,12(r22)
  800e64:	1080100c 	andi	r2,r2,64
  800e68:	103e8726 	beq	r2,zero,800888 <___vfprintf_internal_r+0x108>
  800e6c:	00bfffc4 	movi	r2,-1
  800e70:	d8814b15 	stw	r2,1324(sp)
  800e74:	003e8406 	br	800888 <___vfprintf_internal_r+0x108>
  800e78:	d9814d17 	ldw	r6,1332(sp)
  800e7c:	00801944 	movi	r2,101
  800e80:	11806e16 	blt	r2,r6,80103c <___vfprintf_internal_r+0x8bc>
  800e84:	d9414717 	ldw	r5,1308(sp)
  800e88:	00c00044 	movi	r3,1
  800e8c:	1943490e 	bge	r3,r5,801bb4 <___vfprintf_internal_r+0x1434>
  800e90:	d8814117 	ldw	r2,1284(sp)
  800e94:	94800044 	addi	r18,r18,1
  800e98:	8c400044 	addi	r17,r17,1
  800e9c:	a8800015 	stw	r2,0(r21)
  800ea0:	008001c4 	movi	r2,7
  800ea4:	a8c00115 	stw	r3,4(r21)
  800ea8:	dc800e15 	stw	r18,56(sp)
  800eac:	dc400d15 	stw	r17,52(sp)
  800eb0:	1441ca16 	blt	r2,r17,8015dc <___vfprintf_internal_r+0xe5c>
  800eb4:	a8c00204 	addi	r3,r21,8
  800eb8:	d9014917 	ldw	r4,1316(sp)
  800ebc:	00800044 	movi	r2,1
  800ec0:	94800044 	addi	r18,r18,1
  800ec4:	8c400044 	addi	r17,r17,1
  800ec8:	18800115 	stw	r2,4(r3)
  800ecc:	008001c4 	movi	r2,7
  800ed0:	19000015 	stw	r4,0(r3)
  800ed4:	dc800e15 	stw	r18,56(sp)
  800ed8:	dc400d15 	stw	r17,52(sp)
  800edc:	1441b616 	blt	r2,r17,8015b8 <___vfprintf_internal_r+0xe38>
  800ee0:	1cc00204 	addi	r19,r3,8
  800ee4:	d9014217 	ldw	r4,1288(sp)
  800ee8:	d9414317 	ldw	r5,1292(sp)
  800eec:	000d883a 	mov	r6,zero
  800ef0:	000f883a 	mov	r7,zero
  800ef4:	08092340 	call	809234 <__nedf2>
  800ef8:	10017426 	beq	r2,zero,8014cc <___vfprintf_internal_r+0xd4c>
  800efc:	d9414717 	ldw	r5,1308(sp)
  800f00:	d9814117 	ldw	r6,1284(sp)
  800f04:	8c400044 	addi	r17,r17,1
  800f08:	2c85883a 	add	r2,r5,r18
  800f0c:	14bfffc4 	addi	r18,r2,-1
  800f10:	28bfffc4 	addi	r2,r5,-1
  800f14:	30c00044 	addi	r3,r6,1
  800f18:	98800115 	stw	r2,4(r19)
  800f1c:	008001c4 	movi	r2,7
  800f20:	98c00015 	stw	r3,0(r19)
  800f24:	dc800e15 	stw	r18,56(sp)
  800f28:	dc400d15 	stw	r17,52(sp)
  800f2c:	14418e16 	blt	r2,r17,801568 <___vfprintf_internal_r+0xde8>
  800f30:	9cc00204 	addi	r19,r19,8
  800f34:	d9414817 	ldw	r5,1312(sp)
  800f38:	d8800804 	addi	r2,sp,32
  800f3c:	8c400044 	addi	r17,r17,1
  800f40:	9165883a 	add	r18,r18,r5
  800f44:	98800015 	stw	r2,0(r19)
  800f48:	008001c4 	movi	r2,7
  800f4c:	99400115 	stw	r5,4(r19)
  800f50:	dc800e15 	stw	r18,56(sp)
  800f54:	dc400d15 	stw	r17,52(sp)
  800f58:	1440ed16 	blt	r2,r17,801310 <___vfprintf_internal_r+0xb90>
  800f5c:	98c00204 	addi	r3,r19,8
  800f60:	003f8506 	br	800d78 <___vfprintf_internal_r+0x5f8>
  800f64:	d9814a17 	ldw	r6,1320(sp)
  800f68:	d8814517 	ldw	r2,1300(sp)
  800f6c:	30a1c83a 	sub	r16,r6,r2
  800f70:	043f4b0e 	bge	zero,r16,800ca0 <___vfprintf_internal_r+0x520>
  800f74:	00800404 	movi	r2,16
  800f78:	14043a0e 	bge	r2,r16,802064 <___vfprintf_internal_r+0x18e4>
  800f7c:	1027883a 	mov	r19,r2
  800f80:	07002074 	movhi	fp,129
  800f84:	e7330584 	addi	fp,fp,-13290
  800f88:	050001c4 	movi	r20,7
  800f8c:	00000306 	br	800f9c <___vfprintf_internal_r+0x81c>
  800f90:	843ffc04 	addi	r16,r16,-16
  800f94:	ad400204 	addi	r21,r21,8
  800f98:	9c00130e 	bge	r19,r16,800fe8 <___vfprintf_internal_r+0x868>
  800f9c:	94800404 	addi	r18,r18,16
  800fa0:	8c400044 	addi	r17,r17,1
  800fa4:	af000015 	stw	fp,0(r21)
  800fa8:	acc00115 	stw	r19,4(r21)
  800fac:	dc800e15 	stw	r18,56(sp)
  800fb0:	dc400d15 	stw	r17,52(sp)
  800fb4:	a47ff60e 	bge	r20,r17,800f90 <___vfprintf_internal_r+0x810>
  800fb8:	d9014f17 	ldw	r4,1340(sp)
  800fbc:	b00b883a 	mov	r5,r22
  800fc0:	d9800c04 	addi	r6,sp,48
  800fc4:	d9c15115 	stw	r7,1348(sp)
  800fc8:	08007280 	call	800728 <__sprint_r>
  800fcc:	d9c15117 	ldw	r7,1348(sp)
  800fd0:	103fa31e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  800fd4:	843ffc04 	addi	r16,r16,-16
  800fd8:	dc800e17 	ldw	r18,56(sp)
  800fdc:	dc400d17 	ldw	r17,52(sp)
  800fe0:	dd401904 	addi	r21,sp,100
  800fe4:	9c3fed16 	blt	r19,r16,800f9c <___vfprintf_internal_r+0x81c>
  800fe8:	9425883a 	add	r18,r18,r16
  800fec:	8c400044 	addi	r17,r17,1
  800ff0:	008001c4 	movi	r2,7
  800ff4:	af000015 	stw	fp,0(r21)
  800ff8:	ac000115 	stw	r16,4(r21)
  800ffc:	dc800e15 	stw	r18,56(sp)
  801000:	dc400d15 	stw	r17,52(sp)
  801004:	14416116 	blt	r2,r17,80158c <___vfprintf_internal_r+0xe0c>
  801008:	ad400204 	addi	r21,r21,8
  80100c:	003f2406 	br	800ca0 <___vfprintf_internal_r+0x520>
  801010:	d9014f17 	ldw	r4,1340(sp)
  801014:	08042340 	call	804234 <__sinit>
  801018:	d9c15117 	ldw	r7,1348(sp)
  80101c:	003def06 	br	8007dc <___vfprintf_internal_r+0x5c>
  801020:	d9014f17 	ldw	r4,1340(sp)
  801024:	b00b883a 	mov	r5,r22
  801028:	d9c15115 	stw	r7,1348(sp)
  80102c:	08026680 	call	802668 <__swsetup_r>
  801030:	d9c15117 	ldw	r7,1348(sp)
  801034:	103dee26 	beq	r2,zero,8007f0 <___vfprintf_internal_r+0x70>
  801038:	003f8c06 	br	800e6c <___vfprintf_internal_r+0x6ec>
  80103c:	d9014217 	ldw	r4,1288(sp)
  801040:	d9414317 	ldw	r5,1292(sp)
  801044:	000d883a 	mov	r6,zero
  801048:	000f883a 	mov	r7,zero
  80104c:	08091ac0 	call	8091ac <__eqdf2>
  801050:	1000f21e 	bne	r2,zero,80141c <___vfprintf_internal_r+0xc9c>
  801054:	00802074 	movhi	r2,129
  801058:	10b30504 	addi	r2,r2,-13292
  80105c:	94800044 	addi	r18,r18,1
  801060:	8c400044 	addi	r17,r17,1
  801064:	a8800015 	stw	r2,0(r21)
  801068:	00c00044 	movi	r3,1
  80106c:	008001c4 	movi	r2,7
  801070:	a8c00115 	stw	r3,4(r21)
  801074:	dc800e15 	stw	r18,56(sp)
  801078:	dc400d15 	stw	r17,52(sp)
  80107c:	14430016 	blt	r2,r17,801c80 <___vfprintf_internal_r+0x1500>
  801080:	a8c00204 	addi	r3,r21,8
  801084:	d8800517 	ldw	r2,20(sp)
  801088:	d9014717 	ldw	r4,1308(sp)
  80108c:	11015c0e 	bge	r2,r4,801600 <___vfprintf_internal_r+0xe80>
  801090:	dc400d17 	ldw	r17,52(sp)
  801094:	d9814917 	ldw	r6,1316(sp)
  801098:	00800044 	movi	r2,1
  80109c:	94800044 	addi	r18,r18,1
  8010a0:	8c400044 	addi	r17,r17,1
  8010a4:	18800115 	stw	r2,4(r3)
  8010a8:	008001c4 	movi	r2,7
  8010ac:	19800015 	stw	r6,0(r3)
  8010b0:	dc800e15 	stw	r18,56(sp)
  8010b4:	dc400d15 	stw	r17,52(sp)
  8010b8:	14431616 	blt	r2,r17,801d14 <___vfprintf_internal_r+0x1594>
  8010bc:	18c00204 	addi	r3,r3,8
  8010c0:	d8814717 	ldw	r2,1308(sp)
  8010c4:	143fffc4 	addi	r16,r2,-1
  8010c8:	043f2b0e 	bge	zero,r16,800d78 <___vfprintf_internal_r+0x5f8>
  8010cc:	00800404 	movi	r2,16
  8010d0:	1402a80e 	bge	r2,r16,801b74 <___vfprintf_internal_r+0x13f4>
  8010d4:	dc400d17 	ldw	r17,52(sp)
  8010d8:	1027883a 	mov	r19,r2
  8010dc:	07002074 	movhi	fp,129
  8010e0:	e7330584 	addi	fp,fp,-13290
  8010e4:	050001c4 	movi	r20,7
  8010e8:	00000306 	br	8010f8 <___vfprintf_internal_r+0x978>
  8010ec:	18c00204 	addi	r3,r3,8
  8010f0:	843ffc04 	addi	r16,r16,-16
  8010f4:	9c02a20e 	bge	r19,r16,801b80 <___vfprintf_internal_r+0x1400>
  8010f8:	94800404 	addi	r18,r18,16
  8010fc:	8c400044 	addi	r17,r17,1
  801100:	1f000015 	stw	fp,0(r3)
  801104:	1cc00115 	stw	r19,4(r3)
  801108:	dc800e15 	stw	r18,56(sp)
  80110c:	dc400d15 	stw	r17,52(sp)
  801110:	a47ff60e 	bge	r20,r17,8010ec <___vfprintf_internal_r+0x96c>
  801114:	d9014f17 	ldw	r4,1340(sp)
  801118:	b00b883a 	mov	r5,r22
  80111c:	d9800c04 	addi	r6,sp,48
  801120:	08007280 	call	800728 <__sprint_r>
  801124:	103f4e1e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  801128:	dc800e17 	ldw	r18,56(sp)
  80112c:	dc400d17 	ldw	r17,52(sp)
  801130:	d8c01904 	addi	r3,sp,100
  801134:	003fee06 	br	8010f0 <___vfprintf_internal_r+0x970>
  801138:	d8802c0b 	ldhu	r2,176(sp)
  80113c:	00ffffc4 	movi	r3,-1
  801140:	d8c14b15 	stw	r3,1324(sp)
  801144:	1080100c 	andi	r2,r2,64
  801148:	103dcc1e 	bne	r2,zero,80087c <___vfprintf_internal_r+0xfc>
  80114c:	003dce06 	br	800888 <___vfprintf_internal_r+0x108>
  801150:	d9014f17 	ldw	r4,1340(sp)
  801154:	b00b883a 	mov	r5,r22
  801158:	d9800c04 	addi	r6,sp,48
  80115c:	08007280 	call	800728 <__sprint_r>
  801160:	103f3f1e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  801164:	dc800e17 	ldw	r18,56(sp)
  801168:	003f2e06 	br	800e24 <___vfprintf_internal_r+0x6a4>
  80116c:	d9414c17 	ldw	r5,1328(sp)
  801170:	29400414 	ori	r5,r5,16
  801174:	d9414c15 	stw	r5,1328(sp)
  801178:	d9814c17 	ldw	r6,1328(sp)
  80117c:	3080080c 	andi	r2,r6,32
  801180:	10014f1e 	bne	r2,zero,8016c0 <___vfprintf_internal_r+0xf40>
  801184:	d8c14c17 	ldw	r3,1328(sp)
  801188:	1880040c 	andi	r2,r3,16
  80118c:	1002f01e 	bne	r2,zero,801d50 <___vfprintf_internal_r+0x15d0>
  801190:	d9014c17 	ldw	r4,1328(sp)
  801194:	2080100c 	andi	r2,r4,64
  801198:	1002ed26 	beq	r2,zero,801d50 <___vfprintf_internal_r+0x15d0>
  80119c:	3880000f 	ldh	r2,0(r7)
  8011a0:	39c00104 	addi	r7,r7,4
  8011a4:	d9c14015 	stw	r7,1280(sp)
  8011a8:	1023d7fa 	srai	r17,r2,31
  8011ac:	1021883a 	mov	r16,r2
  8011b0:	88037816 	blt	r17,zero,801f94 <___vfprintf_internal_r+0x1814>
  8011b4:	01000044 	movi	r4,1
  8011b8:	98000416 	blt	r19,zero,8011cc <___vfprintf_internal_r+0xa4c>
  8011bc:	d8c14c17 	ldw	r3,1328(sp)
  8011c0:	00bfdfc4 	movi	r2,-129
  8011c4:	1886703a 	and	r3,r3,r2
  8011c8:	d8c14c15 	stw	r3,1328(sp)
  8011cc:	8444b03a 	or	r2,r16,r17
  8011d0:	10022c1e 	bne	r2,zero,801a84 <___vfprintf_internal_r+0x1304>
  8011d4:	98022b1e 	bne	r19,zero,801a84 <___vfprintf_internal_r+0x1304>
  8011d8:	20803fcc 	andi	r2,r4,255
  8011dc:	1002a126 	beq	r2,zero,801c64 <___vfprintf_internal_r+0x14e4>
  8011e0:	d8c01904 	addi	r3,sp,100
  8011e4:	dd000f04 	addi	r20,sp,60
  8011e8:	d8c14115 	stw	r3,1284(sp)
  8011ec:	d8c14117 	ldw	r3,1284(sp)
  8011f0:	dcc14515 	stw	r19,1300(sp)
  8011f4:	a0c5c83a 	sub	r2,r20,r3
  8011f8:	11c00a04 	addi	r7,r2,40
  8011fc:	99c0010e 	bge	r19,r7,801204 <___vfprintf_internal_r+0xa84>
  801200:	d9c14515 	stw	r7,1300(sp)
  801204:	dcc14615 	stw	r19,1304(sp)
  801208:	d8800407 	ldb	r2,16(sp)
  80120c:	103e4c26 	beq	r2,zero,800b40 <___vfprintf_internal_r+0x3c0>
  801210:	d8814517 	ldw	r2,1300(sp)
  801214:	10800044 	addi	r2,r2,1
  801218:	d8814515 	stw	r2,1300(sp)
  80121c:	003e4806 	br	800b40 <___vfprintf_internal_r+0x3c0>
  801220:	d9814c17 	ldw	r6,1328(sp)
  801224:	31800414 	ori	r6,r6,16
  801228:	d9814c15 	stw	r6,1328(sp)
  80122c:	d8c14c17 	ldw	r3,1328(sp)
  801230:	1880080c 	andi	r2,r3,32
  801234:	1001271e 	bne	r2,zero,8016d4 <___vfprintf_internal_r+0xf54>
  801238:	d9414c17 	ldw	r5,1328(sp)
  80123c:	2880040c 	andi	r2,r5,16
  801240:	1002bc1e 	bne	r2,zero,801d34 <___vfprintf_internal_r+0x15b4>
  801244:	d9814c17 	ldw	r6,1328(sp)
  801248:	3080100c 	andi	r2,r6,64
  80124c:	1002b926 	beq	r2,zero,801d34 <___vfprintf_internal_r+0x15b4>
  801250:	3c00000b 	ldhu	r16,0(r7)
  801254:	0009883a 	mov	r4,zero
  801258:	39c00104 	addi	r7,r7,4
  80125c:	0023883a 	mov	r17,zero
  801260:	d9c14015 	stw	r7,1280(sp)
  801264:	d8000405 	stb	zero,16(sp)
  801268:	003fd306 	br	8011b8 <___vfprintf_internal_r+0xa38>
  80126c:	d9014c17 	ldw	r4,1328(sp)
  801270:	21000414 	ori	r4,r4,16
  801274:	d9014c15 	stw	r4,1328(sp)
  801278:	d9414c17 	ldw	r5,1328(sp)
  80127c:	2880080c 	andi	r2,r5,32
  801280:	1001081e 	bne	r2,zero,8016a4 <___vfprintf_internal_r+0xf24>
  801284:	d8c14c17 	ldw	r3,1328(sp)
  801288:	1880040c 	andi	r2,r3,16
  80128c:	1002b61e 	bne	r2,zero,801d68 <___vfprintf_internal_r+0x15e8>
  801290:	d9014c17 	ldw	r4,1328(sp)
  801294:	2080100c 	andi	r2,r4,64
  801298:	1002b326 	beq	r2,zero,801d68 <___vfprintf_internal_r+0x15e8>
  80129c:	3c00000b 	ldhu	r16,0(r7)
  8012a0:	01000044 	movi	r4,1
  8012a4:	39c00104 	addi	r7,r7,4
  8012a8:	0023883a 	mov	r17,zero
  8012ac:	d9c14015 	stw	r7,1280(sp)
  8012b0:	d8000405 	stb	zero,16(sp)
  8012b4:	003fc006 	br	8011b8 <___vfprintf_internal_r+0xa38>
  8012b8:	d9014f17 	ldw	r4,1340(sp)
  8012bc:	b00b883a 	mov	r5,r22
  8012c0:	d9800c04 	addi	r6,sp,48
  8012c4:	08007280 	call	800728 <__sprint_r>
  8012c8:	103ee51e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  8012cc:	dc800e17 	ldw	r18,56(sp)
  8012d0:	d8c01904 	addi	r3,sp,100
  8012d4:	d9814c17 	ldw	r6,1328(sp)
  8012d8:	3080004c 	andi	r2,r6,1
  8012dc:	1005003a 	cmpeq	r2,r2,zero
  8012e0:	103ea51e 	bne	r2,zero,800d78 <___vfprintf_internal_r+0x5f8>
  8012e4:	00800044 	movi	r2,1
  8012e8:	dc400d17 	ldw	r17,52(sp)
  8012ec:	18800115 	stw	r2,4(r3)
  8012f0:	d8814917 	ldw	r2,1316(sp)
  8012f4:	94800044 	addi	r18,r18,1
  8012f8:	8c400044 	addi	r17,r17,1
  8012fc:	18800015 	stw	r2,0(r3)
  801300:	008001c4 	movi	r2,7
  801304:	dc800e15 	stw	r18,56(sp)
  801308:	dc400d15 	stw	r17,52(sp)
  80130c:	1442240e 	bge	r2,r17,801ba0 <___vfprintf_internal_r+0x1420>
  801310:	d9014f17 	ldw	r4,1340(sp)
  801314:	b00b883a 	mov	r5,r22
  801318:	d9800c04 	addi	r6,sp,48
  80131c:	08007280 	call	800728 <__sprint_r>
  801320:	103ecf1e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  801324:	dc800e17 	ldw	r18,56(sp)
  801328:	d8c01904 	addi	r3,sp,100
  80132c:	003e9206 	br	800d78 <___vfprintf_internal_r+0x5f8>
  801330:	d9014f17 	ldw	r4,1340(sp)
  801334:	b00b883a 	mov	r5,r22
  801338:	d9800c04 	addi	r6,sp,48
  80133c:	08007280 	call	800728 <__sprint_r>
  801340:	103ec026 	beq	r2,zero,800e44 <___vfprintf_internal_r+0x6c4>
  801344:	003ec606 	br	800e60 <___vfprintf_internal_r+0x6e0>
  801348:	d9014f17 	ldw	r4,1340(sp)
  80134c:	b00b883a 	mov	r5,r22
  801350:	d9800c04 	addi	r6,sp,48
  801354:	d9c15115 	stw	r7,1348(sp)
  801358:	08007280 	call	800728 <__sprint_r>
  80135c:	d9c15117 	ldw	r7,1348(sp)
  801360:	103ebf1e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  801364:	dc800e17 	ldw	r18,56(sp)
  801368:	dc400d17 	ldw	r17,52(sp)
  80136c:	dd401904 	addi	r21,sp,100
  801370:	003e7406 	br	800d44 <___vfprintf_internal_r+0x5c4>
  801374:	d9014f17 	ldw	r4,1340(sp)
  801378:	b00b883a 	mov	r5,r22
  80137c:	d9800c04 	addi	r6,sp,48
  801380:	d9c15115 	stw	r7,1348(sp)
  801384:	08007280 	call	800728 <__sprint_r>
  801388:	d9c15117 	ldw	r7,1348(sp)
  80138c:	103eb41e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  801390:	dd401904 	addi	r21,sp,100
  801394:	003d6d06 	br	80094c <___vfprintf_internal_r+0x1cc>
  801398:	d9014f17 	ldw	r4,1340(sp)
  80139c:	b00b883a 	mov	r5,r22
  8013a0:	d9800c04 	addi	r6,sp,48
  8013a4:	d9c15115 	stw	r7,1348(sp)
  8013a8:	08007280 	call	800728 <__sprint_r>
  8013ac:	d9c15117 	ldw	r7,1348(sp)
  8013b0:	103eab1e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  8013b4:	dc800e17 	ldw	r18,56(sp)
  8013b8:	dc400d17 	ldw	r17,52(sp)
  8013bc:	dd401904 	addi	r21,sp,100
  8013c0:	003e3406 	br	800c94 <___vfprintf_internal_r+0x514>
  8013c4:	d9014f17 	ldw	r4,1340(sp)
  8013c8:	b00b883a 	mov	r5,r22
  8013cc:	d9800c04 	addi	r6,sp,48
  8013d0:	d9c15115 	stw	r7,1348(sp)
  8013d4:	08007280 	call	800728 <__sprint_r>
  8013d8:	d9c15117 	ldw	r7,1348(sp)
  8013dc:	103ea01e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  8013e0:	dc800e17 	ldw	r18,56(sp)
  8013e4:	dc400d17 	ldw	r17,52(sp)
  8013e8:	dd401904 	addi	r21,sp,100
  8013ec:	003e1c06 	br	800c60 <___vfprintf_internal_r+0x4e0>
  8013f0:	d9014f17 	ldw	r4,1340(sp)
  8013f4:	b00b883a 	mov	r5,r22
  8013f8:	d9800c04 	addi	r6,sp,48
  8013fc:	d9c15115 	stw	r7,1348(sp)
  801400:	08007280 	call	800728 <__sprint_r>
  801404:	d9c15117 	ldw	r7,1348(sp)
  801408:	103e951e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  80140c:	dc800e17 	ldw	r18,56(sp)
  801410:	dc400d17 	ldw	r17,52(sp)
  801414:	dd401904 	addi	r21,sp,100
  801418:	003e0406 	br	800c2c <___vfprintf_internal_r+0x4ac>
  80141c:	d9000517 	ldw	r4,20(sp)
  801420:	0102580e 	bge	zero,r4,801d84 <___vfprintf_internal_r+0x1604>
  801424:	d9814717 	ldw	r6,1308(sp)
  801428:	21807a16 	blt	r4,r6,801614 <___vfprintf_internal_r+0xe94>
  80142c:	d8814117 	ldw	r2,1284(sp)
  801430:	91a5883a 	add	r18,r18,r6
  801434:	8c400044 	addi	r17,r17,1
  801438:	a8800015 	stw	r2,0(r21)
  80143c:	008001c4 	movi	r2,7
  801440:	a9800115 	stw	r6,4(r21)
  801444:	dc800e15 	stw	r18,56(sp)
  801448:	dc400d15 	stw	r17,52(sp)
  80144c:	1442fc16 	blt	r2,r17,802040 <___vfprintf_internal_r+0x18c0>
  801450:	a8c00204 	addi	r3,r21,8
  801454:	d9414717 	ldw	r5,1308(sp)
  801458:	2161c83a 	sub	r16,r4,r5
  80145c:	043f9d0e 	bge	zero,r16,8012d4 <___vfprintf_internal_r+0xb54>
  801460:	00800404 	movi	r2,16
  801464:	1402190e 	bge	r2,r16,801ccc <___vfprintf_internal_r+0x154c>
  801468:	dc400d17 	ldw	r17,52(sp)
  80146c:	1027883a 	mov	r19,r2
  801470:	07002074 	movhi	fp,129
  801474:	e7330584 	addi	fp,fp,-13290
  801478:	050001c4 	movi	r20,7
  80147c:	00000306 	br	80148c <___vfprintf_internal_r+0xd0c>
  801480:	18c00204 	addi	r3,r3,8
  801484:	843ffc04 	addi	r16,r16,-16
  801488:	9c02130e 	bge	r19,r16,801cd8 <___vfprintf_internal_r+0x1558>
  80148c:	94800404 	addi	r18,r18,16
  801490:	8c400044 	addi	r17,r17,1
  801494:	1f000015 	stw	fp,0(r3)
  801498:	1cc00115 	stw	r19,4(r3)
  80149c:	dc800e15 	stw	r18,56(sp)
  8014a0:	dc400d15 	stw	r17,52(sp)
  8014a4:	a47ff60e 	bge	r20,r17,801480 <___vfprintf_internal_r+0xd00>
  8014a8:	d9014f17 	ldw	r4,1340(sp)
  8014ac:	b00b883a 	mov	r5,r22
  8014b0:	d9800c04 	addi	r6,sp,48
  8014b4:	08007280 	call	800728 <__sprint_r>
  8014b8:	103e691e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  8014bc:	dc800e17 	ldw	r18,56(sp)
  8014c0:	dc400d17 	ldw	r17,52(sp)
  8014c4:	d8c01904 	addi	r3,sp,100
  8014c8:	003fee06 	br	801484 <___vfprintf_internal_r+0xd04>
  8014cc:	d8814717 	ldw	r2,1308(sp)
  8014d0:	143fffc4 	addi	r16,r2,-1
  8014d4:	043e970e 	bge	zero,r16,800f34 <___vfprintf_internal_r+0x7b4>
  8014d8:	00800404 	movi	r2,16
  8014dc:	1400180e 	bge	r2,r16,801540 <___vfprintf_internal_r+0xdc0>
  8014e0:	1029883a 	mov	r20,r2
  8014e4:	07002074 	movhi	fp,129
  8014e8:	e7330584 	addi	fp,fp,-13290
  8014ec:	054001c4 	movi	r21,7
  8014f0:	00000306 	br	801500 <___vfprintf_internal_r+0xd80>
  8014f4:	9cc00204 	addi	r19,r19,8
  8014f8:	843ffc04 	addi	r16,r16,-16
  8014fc:	a400120e 	bge	r20,r16,801548 <___vfprintf_internal_r+0xdc8>
  801500:	94800404 	addi	r18,r18,16
  801504:	8c400044 	addi	r17,r17,1
  801508:	9f000015 	stw	fp,0(r19)
  80150c:	9d000115 	stw	r20,4(r19)
  801510:	dc800e15 	stw	r18,56(sp)
  801514:	dc400d15 	stw	r17,52(sp)
  801518:	ac7ff60e 	bge	r21,r17,8014f4 <___vfprintf_internal_r+0xd74>
  80151c:	d9014f17 	ldw	r4,1340(sp)
  801520:	b00b883a 	mov	r5,r22
  801524:	d9800c04 	addi	r6,sp,48
  801528:	08007280 	call	800728 <__sprint_r>
  80152c:	103e4c1e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  801530:	dc800e17 	ldw	r18,56(sp)
  801534:	dc400d17 	ldw	r17,52(sp)
  801538:	dcc01904 	addi	r19,sp,100
  80153c:	003fee06 	br	8014f8 <___vfprintf_internal_r+0xd78>
  801540:	07002074 	movhi	fp,129
  801544:	e7330584 	addi	fp,fp,-13290
  801548:	9425883a 	add	r18,r18,r16
  80154c:	8c400044 	addi	r17,r17,1
  801550:	008001c4 	movi	r2,7
  801554:	9f000015 	stw	fp,0(r19)
  801558:	9c000115 	stw	r16,4(r19)
  80155c:	dc800e15 	stw	r18,56(sp)
  801560:	dc400d15 	stw	r17,52(sp)
  801564:	147e720e 	bge	r2,r17,800f30 <___vfprintf_internal_r+0x7b0>
  801568:	d9014f17 	ldw	r4,1340(sp)
  80156c:	b00b883a 	mov	r5,r22
  801570:	d9800c04 	addi	r6,sp,48
  801574:	08007280 	call	800728 <__sprint_r>
  801578:	103e391e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  80157c:	dc800e17 	ldw	r18,56(sp)
  801580:	dc400d17 	ldw	r17,52(sp)
  801584:	dcc01904 	addi	r19,sp,100
  801588:	003e6a06 	br	800f34 <___vfprintf_internal_r+0x7b4>
  80158c:	d9014f17 	ldw	r4,1340(sp)
  801590:	b00b883a 	mov	r5,r22
  801594:	d9800c04 	addi	r6,sp,48
  801598:	d9c15115 	stw	r7,1348(sp)
  80159c:	08007280 	call	800728 <__sprint_r>
  8015a0:	d9c15117 	ldw	r7,1348(sp)
  8015a4:	103e2e1e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  8015a8:	dc800e17 	ldw	r18,56(sp)
  8015ac:	dc400d17 	ldw	r17,52(sp)
  8015b0:	dd401904 	addi	r21,sp,100
  8015b4:	003dba06 	br	800ca0 <___vfprintf_internal_r+0x520>
  8015b8:	d9014f17 	ldw	r4,1340(sp)
  8015bc:	b00b883a 	mov	r5,r22
  8015c0:	d9800c04 	addi	r6,sp,48
  8015c4:	08007280 	call	800728 <__sprint_r>
  8015c8:	103e251e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  8015cc:	dc800e17 	ldw	r18,56(sp)
  8015d0:	dc400d17 	ldw	r17,52(sp)
  8015d4:	dcc01904 	addi	r19,sp,100
  8015d8:	003e4206 	br	800ee4 <___vfprintf_internal_r+0x764>
  8015dc:	d9014f17 	ldw	r4,1340(sp)
  8015e0:	b00b883a 	mov	r5,r22
  8015e4:	d9800c04 	addi	r6,sp,48
  8015e8:	08007280 	call	800728 <__sprint_r>
  8015ec:	103e1c1e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  8015f0:	dc800e17 	ldw	r18,56(sp)
  8015f4:	dc400d17 	ldw	r17,52(sp)
  8015f8:	d8c01904 	addi	r3,sp,100
  8015fc:	003e2e06 	br	800eb8 <___vfprintf_internal_r+0x738>
  801600:	d9414c17 	ldw	r5,1328(sp)
  801604:	2880004c 	andi	r2,r5,1
  801608:	1005003a 	cmpeq	r2,r2,zero
  80160c:	103dda1e 	bne	r2,zero,800d78 <___vfprintf_internal_r+0x5f8>
  801610:	003e9f06 	br	801090 <___vfprintf_internal_r+0x910>
  801614:	d8c14117 	ldw	r3,1284(sp)
  801618:	9125883a 	add	r18,r18,r4
  80161c:	8c400044 	addi	r17,r17,1
  801620:	008001c4 	movi	r2,7
  801624:	a8c00015 	stw	r3,0(r21)
  801628:	a9000115 	stw	r4,4(r21)
  80162c:	dc800e15 	stw	r18,56(sp)
  801630:	dc400d15 	stw	r17,52(sp)
  801634:	14426c16 	blt	r2,r17,801fe8 <___vfprintf_internal_r+0x1868>
  801638:	a8c00204 	addi	r3,r21,8
  80163c:	d9414917 	ldw	r5,1316(sp)
  801640:	00800044 	movi	r2,1
  801644:	94800044 	addi	r18,r18,1
  801648:	8c400044 	addi	r17,r17,1
  80164c:	18800115 	stw	r2,4(r3)
  801650:	008001c4 	movi	r2,7
  801654:	19400015 	stw	r5,0(r3)
  801658:	dc800e15 	stw	r18,56(sp)
  80165c:	dc400d15 	stw	r17,52(sp)
  801660:	2021883a 	mov	r16,r4
  801664:	14425616 	blt	r2,r17,801fc0 <___vfprintf_internal_r+0x1840>
  801668:	19400204 	addi	r5,r3,8
  80166c:	d9814717 	ldw	r6,1308(sp)
  801670:	8c400044 	addi	r17,r17,1
  801674:	dc400d15 	stw	r17,52(sp)
  801678:	3107c83a 	sub	r3,r6,r4
  80167c:	d9014117 	ldw	r4,1284(sp)
  801680:	90e5883a 	add	r18,r18,r3
  801684:	28c00115 	stw	r3,4(r5)
  801688:	8105883a 	add	r2,r16,r4
  80168c:	28800015 	stw	r2,0(r5)
  801690:	008001c4 	movi	r2,7
  801694:	dc800e15 	stw	r18,56(sp)
  801698:	147f1d16 	blt	r2,r17,801310 <___vfprintf_internal_r+0xb90>
  80169c:	28c00204 	addi	r3,r5,8
  8016a0:	003db506 	br	800d78 <___vfprintf_internal_r+0x5f8>
  8016a4:	3c000017 	ldw	r16,0(r7)
  8016a8:	3c400117 	ldw	r17,4(r7)
  8016ac:	39800204 	addi	r6,r7,8
  8016b0:	01000044 	movi	r4,1
  8016b4:	d9814015 	stw	r6,1280(sp)
  8016b8:	d8000405 	stb	zero,16(sp)
  8016bc:	003ebe06 	br	8011b8 <___vfprintf_internal_r+0xa38>
  8016c0:	3c000017 	ldw	r16,0(r7)
  8016c4:	3c400117 	ldw	r17,4(r7)
  8016c8:	38800204 	addi	r2,r7,8
  8016cc:	d8814015 	stw	r2,1280(sp)
  8016d0:	003eb706 	br	8011b0 <___vfprintf_internal_r+0xa30>
  8016d4:	3c000017 	ldw	r16,0(r7)
  8016d8:	3c400117 	ldw	r17,4(r7)
  8016dc:	39000204 	addi	r4,r7,8
  8016e0:	d9014015 	stw	r4,1280(sp)
  8016e4:	0009883a 	mov	r4,zero
  8016e8:	d8000405 	stb	zero,16(sp)
  8016ec:	003eb206 	br	8011b8 <___vfprintf_internal_r+0xa38>
  8016f0:	38c00017 	ldw	r3,0(r7)
  8016f4:	39c00104 	addi	r7,r7,4
  8016f8:	d8c14a15 	stw	r3,1320(sp)
  8016fc:	1800d70e 	bge	r3,zero,801a5c <___vfprintf_internal_r+0x12dc>
  801700:	00c7c83a 	sub	r3,zero,r3
  801704:	d8c14a15 	stw	r3,1320(sp)
  801708:	d9014c17 	ldw	r4,1328(sp)
  80170c:	b8c00007 	ldb	r3,0(r23)
  801710:	21000114 	ori	r4,r4,4
  801714:	d9014c15 	stw	r4,1328(sp)
  801718:	003c9806 	br	80097c <___vfprintf_internal_r+0x1fc>
  80171c:	d9814c17 	ldw	r6,1328(sp)
  801720:	3080080c 	andi	r2,r6,32
  801724:	1001f626 	beq	r2,zero,801f00 <___vfprintf_internal_r+0x1780>
  801728:	d9014b17 	ldw	r4,1324(sp)
  80172c:	38800017 	ldw	r2,0(r7)
  801730:	39c00104 	addi	r7,r7,4
  801734:	d9c14015 	stw	r7,1280(sp)
  801738:	2007d7fa 	srai	r3,r4,31
  80173c:	d9c14017 	ldw	r7,1280(sp)
  801740:	11000015 	stw	r4,0(r2)
  801744:	10c00115 	stw	r3,4(r2)
  801748:	003c6906 	br	8008f0 <___vfprintf_internal_r+0x170>
  80174c:	b8c00007 	ldb	r3,0(r23)
  801750:	00801b04 	movi	r2,108
  801754:	18825526 	beq	r3,r2,8020ac <___vfprintf_internal_r+0x192c>
  801758:	d9414c17 	ldw	r5,1328(sp)
  80175c:	29400414 	ori	r5,r5,16
  801760:	d9414c15 	stw	r5,1328(sp)
  801764:	003c8506 	br	80097c <___vfprintf_internal_r+0x1fc>
  801768:	d9814c17 	ldw	r6,1328(sp)
  80176c:	b8c00007 	ldb	r3,0(r23)
  801770:	31800814 	ori	r6,r6,32
  801774:	d9814c15 	stw	r6,1328(sp)
  801778:	003c8006 	br	80097c <___vfprintf_internal_r+0x1fc>
  80177c:	d8814c17 	ldw	r2,1328(sp)
  801780:	3c000017 	ldw	r16,0(r7)
  801784:	00c01e04 	movi	r3,120
  801788:	10800094 	ori	r2,r2,2
  80178c:	d8814c15 	stw	r2,1328(sp)
  801790:	39c00104 	addi	r7,r7,4
  801794:	01402074 	movhi	r5,129
  801798:	2972ee04 	addi	r5,r5,-13384
  80179c:	00800c04 	movi	r2,48
  8017a0:	0023883a 	mov	r17,zero
  8017a4:	01000084 	movi	r4,2
  8017a8:	d9c14015 	stw	r7,1280(sp)
  8017ac:	d8c14d15 	stw	r3,1332(sp)
  8017b0:	d9414415 	stw	r5,1296(sp)
  8017b4:	d8800445 	stb	r2,17(sp)
  8017b8:	d8c00485 	stb	r3,18(sp)
  8017bc:	d8000405 	stb	zero,16(sp)
  8017c0:	003e7d06 	br	8011b8 <___vfprintf_internal_r+0xa38>
  8017c4:	d8814c17 	ldw	r2,1328(sp)
  8017c8:	b8c00007 	ldb	r3,0(r23)
  8017cc:	10801014 	ori	r2,r2,64
  8017d0:	d8814c15 	stw	r2,1328(sp)
  8017d4:	003c6906 	br	80097c <___vfprintf_internal_r+0x1fc>
  8017d8:	d9414c17 	ldw	r5,1328(sp)
  8017dc:	2880020c 	andi	r2,r5,8
  8017e0:	1001e526 	beq	r2,zero,801f78 <___vfprintf_internal_r+0x17f8>
  8017e4:	39800017 	ldw	r6,0(r7)
  8017e8:	38800204 	addi	r2,r7,8
  8017ec:	d8814015 	stw	r2,1280(sp)
  8017f0:	d9814215 	stw	r6,1288(sp)
  8017f4:	39c00117 	ldw	r7,4(r7)
  8017f8:	d9c14315 	stw	r7,1292(sp)
  8017fc:	d9014217 	ldw	r4,1288(sp)
  801800:	d9414317 	ldw	r5,1292(sp)
  801804:	08072300 	call	807230 <__isinfd>
  801808:	10021d26 	beq	r2,zero,802080 <___vfprintf_internal_r+0x1900>
  80180c:	d9014217 	ldw	r4,1288(sp)
  801810:	d9414317 	ldw	r5,1292(sp)
  801814:	000d883a 	mov	r6,zero
  801818:	000f883a 	mov	r7,zero
  80181c:	08093cc0 	call	8093cc <__ltdf2>
  801820:	1002d016 	blt	r2,zero,802364 <___vfprintf_internal_r+0x1be4>
  801824:	d9414d17 	ldw	r5,1332(sp)
  801828:	008011c4 	movi	r2,71
  80182c:	11421016 	blt	r2,r5,802070 <___vfprintf_internal_r+0x18f0>
  801830:	01802074 	movhi	r6,129
  801834:	31b2f304 	addi	r6,r6,-13364
  801838:	d9814115 	stw	r6,1284(sp)
  80183c:	d9014c17 	ldw	r4,1328(sp)
  801840:	00c000c4 	movi	r3,3
  801844:	00bfdfc4 	movi	r2,-129
  801848:	2088703a 	and	r4,r4,r2
  80184c:	180f883a 	mov	r7,r3
  801850:	d8c14515 	stw	r3,1300(sp)
  801854:	d9014c15 	stw	r4,1328(sp)
  801858:	d8014615 	stw	zero,1304(sp)
  80185c:	003e6a06 	br	801208 <___vfprintf_internal_r+0xa88>
  801860:	38800017 	ldw	r2,0(r7)
  801864:	00c00044 	movi	r3,1
  801868:	39c00104 	addi	r7,r7,4
  80186c:	d9c14015 	stw	r7,1280(sp)
  801870:	d9000f04 	addi	r4,sp,60
  801874:	180f883a 	mov	r7,r3
  801878:	d8c14515 	stw	r3,1300(sp)
  80187c:	d9014115 	stw	r4,1284(sp)
  801880:	d8800f05 	stb	r2,60(sp)
  801884:	d8000405 	stb	zero,16(sp)
  801888:	003cac06 	br	800b3c <___vfprintf_internal_r+0x3bc>
  80188c:	01402074 	movhi	r5,129
  801890:	2972f904 	addi	r5,r5,-13340
  801894:	d9414415 	stw	r5,1296(sp)
  801898:	d9814c17 	ldw	r6,1328(sp)
  80189c:	3080080c 	andi	r2,r6,32
  8018a0:	1000ff26 	beq	r2,zero,801ca0 <___vfprintf_internal_r+0x1520>
  8018a4:	3c000017 	ldw	r16,0(r7)
  8018a8:	3c400117 	ldw	r17,4(r7)
  8018ac:	38800204 	addi	r2,r7,8
  8018b0:	d8814015 	stw	r2,1280(sp)
  8018b4:	d9414c17 	ldw	r5,1328(sp)
  8018b8:	2880004c 	andi	r2,r5,1
  8018bc:	1005003a 	cmpeq	r2,r2,zero
  8018c0:	1000b91e 	bne	r2,zero,801ba8 <___vfprintf_internal_r+0x1428>
  8018c4:	8444b03a 	or	r2,r16,r17
  8018c8:	1000b726 	beq	r2,zero,801ba8 <___vfprintf_internal_r+0x1428>
  8018cc:	d9814d17 	ldw	r6,1332(sp)
  8018d0:	29400094 	ori	r5,r5,2
  8018d4:	00800c04 	movi	r2,48
  8018d8:	01000084 	movi	r4,2
  8018dc:	d9414c15 	stw	r5,1328(sp)
  8018e0:	d8800445 	stb	r2,17(sp)
  8018e4:	d9800485 	stb	r6,18(sp)
  8018e8:	d8000405 	stb	zero,16(sp)
  8018ec:	003e3206 	br	8011b8 <___vfprintf_internal_r+0xa38>
  8018f0:	01802074 	movhi	r6,129
  8018f4:	31b2ee04 	addi	r6,r6,-13384
  8018f8:	d9814415 	stw	r6,1296(sp)
  8018fc:	003fe606 	br	801898 <___vfprintf_internal_r+0x1118>
  801900:	00800ac4 	movi	r2,43
  801904:	d8800405 	stb	r2,16(sp)
  801908:	b8c00007 	ldb	r3,0(r23)
  80190c:	003c1b06 	br	80097c <___vfprintf_internal_r+0x1fc>
  801910:	d8814c17 	ldw	r2,1328(sp)
  801914:	b8c00007 	ldb	r3,0(r23)
  801918:	10800054 	ori	r2,r2,1
  80191c:	d8814c15 	stw	r2,1328(sp)
  801920:	003c1606 	br	80097c <___vfprintf_internal_r+0x1fc>
  801924:	d8800407 	ldb	r2,16(sp)
  801928:	10004c1e 	bne	r2,zero,801a5c <___vfprintf_internal_r+0x12dc>
  80192c:	00800804 	movi	r2,32
  801930:	d8800405 	stb	r2,16(sp)
  801934:	b8c00007 	ldb	r3,0(r23)
  801938:	003c1006 	br	80097c <___vfprintf_internal_r+0x1fc>
  80193c:	d9814c17 	ldw	r6,1328(sp)
  801940:	b8c00007 	ldb	r3,0(r23)
  801944:	31800214 	ori	r6,r6,8
  801948:	d9814c15 	stw	r6,1328(sp)
  80194c:	003c0b06 	br	80097c <___vfprintf_internal_r+0x1fc>
  801950:	0009883a 	mov	r4,zero
  801954:	04000244 	movi	r16,9
  801958:	01400284 	movi	r5,10
  80195c:	d9c15115 	stw	r7,1348(sp)
  801960:	08099040 	call	809904 <__mulsi3>
  801964:	b9000007 	ldb	r4,0(r23)
  801968:	d8c14d17 	ldw	r3,1332(sp)
  80196c:	bdc00044 	addi	r23,r23,1
  801970:	d9014d15 	stw	r4,1332(sp)
  801974:	d9414d17 	ldw	r5,1332(sp)
  801978:	1885883a 	add	r2,r3,r2
  80197c:	113ff404 	addi	r4,r2,-48
  801980:	28bff404 	addi	r2,r5,-48
  801984:	d9c15117 	ldw	r7,1348(sp)
  801988:	80bff32e 	bgeu	r16,r2,801958 <___vfprintf_internal_r+0x11d8>
  80198c:	d9014a15 	stw	r4,1320(sp)
  801990:	003bfc06 	br	800984 <___vfprintf_internal_r+0x204>
  801994:	d8814c17 	ldw	r2,1328(sp)
  801998:	b8c00007 	ldb	r3,0(r23)
  80199c:	10802014 	ori	r2,r2,128
  8019a0:	d8814c15 	stw	r2,1328(sp)
  8019a4:	003bf506 	br	80097c <___vfprintf_internal_r+0x1fc>
  8019a8:	b8c00007 	ldb	r3,0(r23)
  8019ac:	00800a84 	movi	r2,42
  8019b0:	bdc00044 	addi	r23,r23,1
  8019b4:	18831826 	beq	r3,r2,802618 <___vfprintf_internal_r+0x1e98>
  8019b8:	d8c14d15 	stw	r3,1332(sp)
  8019bc:	18bff404 	addi	r2,r3,-48
  8019c0:	00c00244 	movi	r3,9
  8019c4:	18827b36 	bltu	r3,r2,8023b4 <___vfprintf_internal_r+0x1c34>
  8019c8:	1821883a 	mov	r16,r3
  8019cc:	0009883a 	mov	r4,zero
  8019d0:	01400284 	movi	r5,10
  8019d4:	d9c15115 	stw	r7,1348(sp)
  8019d8:	08099040 	call	809904 <__mulsi3>
  8019dc:	d9414d17 	ldw	r5,1332(sp)
  8019e0:	b9800007 	ldb	r6,0(r23)
  8019e4:	d9c15117 	ldw	r7,1348(sp)
  8019e8:	1145883a 	add	r2,r2,r5
  8019ec:	113ff404 	addi	r4,r2,-48
  8019f0:	30bff404 	addi	r2,r6,-48
  8019f4:	d9814d15 	stw	r6,1332(sp)
  8019f8:	bdc00044 	addi	r23,r23,1
  8019fc:	80bff42e 	bgeu	r16,r2,8019d0 <___vfprintf_internal_r+0x1250>
  801a00:	2027883a 	mov	r19,r4
  801a04:	203bdf0e 	bge	r4,zero,800984 <___vfprintf_internal_r+0x204>
  801a08:	04ffffc4 	movi	r19,-1
  801a0c:	003bdd06 	br	800984 <___vfprintf_internal_r+0x204>
  801a10:	d8000405 	stb	zero,16(sp)
  801a14:	39800017 	ldw	r6,0(r7)
  801a18:	39c00104 	addi	r7,r7,4
  801a1c:	d9c14015 	stw	r7,1280(sp)
  801a20:	d9814115 	stw	r6,1284(sp)
  801a24:	3001c926 	beq	r6,zero,80214c <___vfprintf_internal_r+0x19cc>
  801a28:	98000e16 	blt	r19,zero,801a64 <___vfprintf_internal_r+0x12e4>
  801a2c:	d9014117 	ldw	r4,1284(sp)
  801a30:	000b883a 	mov	r5,zero
  801a34:	980d883a 	mov	r6,r19
  801a38:	08058b40 	call	8058b4 <memchr>
  801a3c:	10025926 	beq	r2,zero,8023a4 <___vfprintf_internal_r+0x1c24>
  801a40:	d8c14117 	ldw	r3,1284(sp)
  801a44:	10cfc83a 	sub	r7,r2,r3
  801a48:	99c19e16 	blt	r19,r7,8020c4 <___vfprintf_internal_r+0x1944>
  801a4c:	d9c14515 	stw	r7,1300(sp)
  801a50:	38000916 	blt	r7,zero,801a78 <___vfprintf_internal_r+0x12f8>
  801a54:	d8014615 	stw	zero,1304(sp)
  801a58:	003deb06 	br	801208 <___vfprintf_internal_r+0xa88>
  801a5c:	b8c00007 	ldb	r3,0(r23)
  801a60:	003bc606 	br	80097c <___vfprintf_internal_r+0x1fc>
  801a64:	d9014117 	ldw	r4,1284(sp)
  801a68:	08006b40 	call	8006b4 <strlen>
  801a6c:	d8814515 	stw	r2,1300(sp)
  801a70:	100f883a 	mov	r7,r2
  801a74:	103ff70e 	bge	r2,zero,801a54 <___vfprintf_internal_r+0x12d4>
  801a78:	d8014515 	stw	zero,1300(sp)
  801a7c:	d8014615 	stw	zero,1304(sp)
  801a80:	003de106 	br	801208 <___vfprintf_internal_r+0xa88>
  801a84:	20c03fcc 	andi	r3,r4,255
  801a88:	00800044 	movi	r2,1
  801a8c:	18802d26 	beq	r3,r2,801b44 <___vfprintf_internal_r+0x13c4>
  801a90:	18800e36 	bltu	r3,r2,801acc <___vfprintf_internal_r+0x134c>
  801a94:	00800084 	movi	r2,2
  801a98:	1880fa26 	beq	r3,r2,801e84 <___vfprintf_internal_r+0x1704>
  801a9c:	01002074 	movhi	r4,129
  801aa0:	2132fe04 	addi	r4,r4,-13320
  801aa4:	08006b40 	call	8006b4 <strlen>
  801aa8:	100f883a 	mov	r7,r2
  801aac:	dcc14515 	stw	r19,1300(sp)
  801ab0:	9880010e 	bge	r19,r2,801ab8 <___vfprintf_internal_r+0x1338>
  801ab4:	d8814515 	stw	r2,1300(sp)
  801ab8:	00802074 	movhi	r2,129
  801abc:	10b2fe04 	addi	r2,r2,-13320
  801ac0:	dcc14615 	stw	r19,1304(sp)
  801ac4:	d8814115 	stw	r2,1284(sp)
  801ac8:	003dcf06 	br	801208 <___vfprintf_internal_r+0xa88>
  801acc:	d9401904 	addi	r5,sp,100
  801ad0:	dd000f04 	addi	r20,sp,60
  801ad4:	d9414115 	stw	r5,1284(sp)
  801ad8:	880a977a 	slli	r5,r17,29
  801adc:	d9814117 	ldw	r6,1284(sp)
  801ae0:	8004d0fa 	srli	r2,r16,3
  801ae4:	8806d0fa 	srli	r3,r17,3
  801ae8:	810001cc 	andi	r4,r16,7
  801aec:	2884b03a 	or	r2,r5,r2
  801af0:	31bfffc4 	addi	r6,r6,-1
  801af4:	21000c04 	addi	r4,r4,48
  801af8:	d9814115 	stw	r6,1284(sp)
  801afc:	10cab03a 	or	r5,r2,r3
  801b00:	31000005 	stb	r4,0(r6)
  801b04:	1021883a 	mov	r16,r2
  801b08:	1823883a 	mov	r17,r3
  801b0c:	283ff21e 	bne	r5,zero,801ad8 <___vfprintf_internal_r+0x1358>
  801b10:	d8c14c17 	ldw	r3,1328(sp)
  801b14:	1880004c 	andi	r2,r3,1
  801b18:	1005003a 	cmpeq	r2,r2,zero
  801b1c:	103db31e 	bne	r2,zero,8011ec <___vfprintf_internal_r+0xa6c>
  801b20:	20803fcc 	andi	r2,r4,255
  801b24:	1080201c 	xori	r2,r2,128
  801b28:	10bfe004 	addi	r2,r2,-128
  801b2c:	00c00c04 	movi	r3,48
  801b30:	10fdae26 	beq	r2,r3,8011ec <___vfprintf_internal_r+0xa6c>
  801b34:	31bfffc4 	addi	r6,r6,-1
  801b38:	d9814115 	stw	r6,1284(sp)
  801b3c:	30c00005 	stb	r3,0(r6)
  801b40:	003daa06 	br	8011ec <___vfprintf_internal_r+0xa6c>
  801b44:	88800068 	cmpgeui	r2,r17,1
  801b48:	10002c1e 	bne	r2,zero,801bfc <___vfprintf_internal_r+0x147c>
  801b4c:	8800021e 	bne	r17,zero,801b58 <___vfprintf_internal_r+0x13d8>
  801b50:	00800244 	movi	r2,9
  801b54:	14002936 	bltu	r2,r16,801bfc <___vfprintf_internal_r+0x147c>
  801b58:	d90018c4 	addi	r4,sp,99
  801b5c:	dd000f04 	addi	r20,sp,60
  801b60:	d9014115 	stw	r4,1284(sp)
  801b64:	d9014117 	ldw	r4,1284(sp)
  801b68:	80800c04 	addi	r2,r16,48
  801b6c:	20800005 	stb	r2,0(r4)
  801b70:	003d9e06 	br	8011ec <___vfprintf_internal_r+0xa6c>
  801b74:	dc400d17 	ldw	r17,52(sp)
  801b78:	07002074 	movhi	fp,129
  801b7c:	e7330584 	addi	fp,fp,-13290
  801b80:	9425883a 	add	r18,r18,r16
  801b84:	8c400044 	addi	r17,r17,1
  801b88:	008001c4 	movi	r2,7
  801b8c:	1f000015 	stw	fp,0(r3)
  801b90:	1c000115 	stw	r16,4(r3)
  801b94:	dc800e15 	stw	r18,56(sp)
  801b98:	dc400d15 	stw	r17,52(sp)
  801b9c:	147ddc16 	blt	r2,r17,801310 <___vfprintf_internal_r+0xb90>
  801ba0:	18c00204 	addi	r3,r3,8
  801ba4:	003c7406 	br	800d78 <___vfprintf_internal_r+0x5f8>
  801ba8:	01000084 	movi	r4,2
  801bac:	d8000405 	stb	zero,16(sp)
  801bb0:	003d8106 	br	8011b8 <___vfprintf_internal_r+0xa38>
  801bb4:	d9814c17 	ldw	r6,1328(sp)
  801bb8:	30c4703a 	and	r2,r6,r3
  801bbc:	1005003a 	cmpeq	r2,r2,zero
  801bc0:	103cb326 	beq	r2,zero,800e90 <___vfprintf_internal_r+0x710>
  801bc4:	d9014117 	ldw	r4,1284(sp)
  801bc8:	94800044 	addi	r18,r18,1
  801bcc:	8c400044 	addi	r17,r17,1
  801bd0:	008001c4 	movi	r2,7
  801bd4:	a9000015 	stw	r4,0(r21)
  801bd8:	a8c00115 	stw	r3,4(r21)
  801bdc:	dc800e15 	stw	r18,56(sp)
  801be0:	dc400d15 	stw	r17,52(sp)
  801be4:	147e6016 	blt	r2,r17,801568 <___vfprintf_internal_r+0xde8>
  801be8:	acc00204 	addi	r19,r21,8
  801bec:	003cd106 	br	800f34 <___vfprintf_internal_r+0x7b4>
  801bf0:	07002074 	movhi	fp,129
  801bf4:	e7330584 	addi	fp,fp,-13290
  801bf8:	003c4906 	br	800d20 <___vfprintf_internal_r+0x5a0>
  801bfc:	dd000f04 	addi	r20,sp,60
  801c00:	dc801904 	addi	r18,sp,100
  801c04:	8009883a 	mov	r4,r16
  801c08:	880b883a 	mov	r5,r17
  801c0c:	01800284 	movi	r6,10
  801c10:	000f883a 	mov	r7,zero
  801c14:	080802c0 	call	80802c <__umoddi3>
  801c18:	12000c04 	addi	r8,r2,48
  801c1c:	94bfffc4 	addi	r18,r18,-1
  801c20:	8009883a 	mov	r4,r16
  801c24:	880b883a 	mov	r5,r17
  801c28:	01800284 	movi	r6,10
  801c2c:	000f883a 	mov	r7,zero
  801c30:	92000005 	stb	r8,0(r18)
  801c34:	08079c00 	call	8079c0 <__udivdi3>
  801c38:	1009883a 	mov	r4,r2
  801c3c:	1021883a 	mov	r16,r2
  801c40:	18800068 	cmpgeui	r2,r3,1
  801c44:	1823883a 	mov	r17,r3
  801c48:	103fee1e 	bne	r2,zero,801c04 <___vfprintf_internal_r+0x1484>
  801c4c:	1800021e 	bne	r3,zero,801c58 <___vfprintf_internal_r+0x14d8>
  801c50:	00800244 	movi	r2,9
  801c54:	113feb36 	bltu	r2,r4,801c04 <___vfprintf_internal_r+0x1484>
  801c58:	94bfffc4 	addi	r18,r18,-1
  801c5c:	dc814115 	stw	r18,1284(sp)
  801c60:	003fc006 	br	801b64 <___vfprintf_internal_r+0x13e4>
  801c64:	d9014c17 	ldw	r4,1328(sp)
  801c68:	2080004c 	andi	r2,r4,1
  801c6c:	10009a1e 	bne	r2,zero,801ed8 <___vfprintf_internal_r+0x1758>
  801c70:	d9401904 	addi	r5,sp,100
  801c74:	dd000f04 	addi	r20,sp,60
  801c78:	d9414115 	stw	r5,1284(sp)
  801c7c:	003d5b06 	br	8011ec <___vfprintf_internal_r+0xa6c>
  801c80:	d9014f17 	ldw	r4,1340(sp)
  801c84:	b00b883a 	mov	r5,r22
  801c88:	d9800c04 	addi	r6,sp,48
  801c8c:	08007280 	call	800728 <__sprint_r>
  801c90:	103c731e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  801c94:	dc800e17 	ldw	r18,56(sp)
  801c98:	d8c01904 	addi	r3,sp,100
  801c9c:	003cf906 	br	801084 <___vfprintf_internal_r+0x904>
  801ca0:	d8c14c17 	ldw	r3,1328(sp)
  801ca4:	1880040c 	andi	r2,r3,16
  801ca8:	1000711e 	bne	r2,zero,801e70 <___vfprintf_internal_r+0x16f0>
  801cac:	d9014c17 	ldw	r4,1328(sp)
  801cb0:	2080100c 	andi	r2,r4,64
  801cb4:	10006e26 	beq	r2,zero,801e70 <___vfprintf_internal_r+0x16f0>
  801cb8:	3c00000b 	ldhu	r16,0(r7)
  801cbc:	0023883a 	mov	r17,zero
  801cc0:	39c00104 	addi	r7,r7,4
  801cc4:	d9c14015 	stw	r7,1280(sp)
  801cc8:	003efa06 	br	8018b4 <___vfprintf_internal_r+0x1134>
  801ccc:	dc400d17 	ldw	r17,52(sp)
  801cd0:	07002074 	movhi	fp,129
  801cd4:	e7330584 	addi	fp,fp,-13290
  801cd8:	9425883a 	add	r18,r18,r16
  801cdc:	8c400044 	addi	r17,r17,1
  801ce0:	008001c4 	movi	r2,7
  801ce4:	1f000015 	stw	fp,0(r3)
  801ce8:	1c000115 	stw	r16,4(r3)
  801cec:	dc800e15 	stw	r18,56(sp)
  801cf0:	dc400d15 	stw	r17,52(sp)
  801cf4:	147d7016 	blt	r2,r17,8012b8 <___vfprintf_internal_r+0xb38>
  801cf8:	18c00204 	addi	r3,r3,8
  801cfc:	003d7506 	br	8012d4 <___vfprintf_internal_r+0xb54>
  801d00:	dc800e17 	ldw	r18,56(sp)
  801d04:	dc400d17 	ldw	r17,52(sp)
  801d08:	07002074 	movhi	fp,129
  801d0c:	e7330984 	addi	fp,fp,-13274
  801d10:	003bba06 	br	800bfc <___vfprintf_internal_r+0x47c>
  801d14:	d9014f17 	ldw	r4,1340(sp)
  801d18:	b00b883a 	mov	r5,r22
  801d1c:	d9800c04 	addi	r6,sp,48
  801d20:	08007280 	call	800728 <__sprint_r>
  801d24:	103c4e1e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  801d28:	dc800e17 	ldw	r18,56(sp)
  801d2c:	d8c01904 	addi	r3,sp,100
  801d30:	003ce306 	br	8010c0 <___vfprintf_internal_r+0x940>
  801d34:	3c000017 	ldw	r16,0(r7)
  801d38:	0009883a 	mov	r4,zero
  801d3c:	39c00104 	addi	r7,r7,4
  801d40:	0023883a 	mov	r17,zero
  801d44:	d9c14015 	stw	r7,1280(sp)
  801d48:	d8000405 	stb	zero,16(sp)
  801d4c:	003d1a06 	br	8011b8 <___vfprintf_internal_r+0xa38>
  801d50:	38800017 	ldw	r2,0(r7)
  801d54:	39c00104 	addi	r7,r7,4
  801d58:	d9c14015 	stw	r7,1280(sp)
  801d5c:	1023d7fa 	srai	r17,r2,31
  801d60:	1021883a 	mov	r16,r2
  801d64:	003d1206 	br	8011b0 <___vfprintf_internal_r+0xa30>
  801d68:	3c000017 	ldw	r16,0(r7)
  801d6c:	01000044 	movi	r4,1
  801d70:	39c00104 	addi	r7,r7,4
  801d74:	0023883a 	mov	r17,zero
  801d78:	d9c14015 	stw	r7,1280(sp)
  801d7c:	d8000405 	stb	zero,16(sp)
  801d80:	003d0d06 	br	8011b8 <___vfprintf_internal_r+0xa38>
  801d84:	00802074 	movhi	r2,129
  801d88:	10b30504 	addi	r2,r2,-13292
  801d8c:	94800044 	addi	r18,r18,1
  801d90:	8c400044 	addi	r17,r17,1
  801d94:	a8800015 	stw	r2,0(r21)
  801d98:	00c00044 	movi	r3,1
  801d9c:	008001c4 	movi	r2,7
  801da0:	a8c00115 	stw	r3,4(r21)
  801da4:	dc800e15 	stw	r18,56(sp)
  801da8:	dc400d15 	stw	r17,52(sp)
  801dac:	1440ca16 	blt	r2,r17,8020d8 <___vfprintf_internal_r+0x1958>
  801db0:	a8c00204 	addi	r3,r21,8
  801db4:	2000061e 	bne	r4,zero,801dd0 <___vfprintf_internal_r+0x1650>
  801db8:	d9414717 	ldw	r5,1308(sp)
  801dbc:	2800041e 	bne	r5,zero,801dd0 <___vfprintf_internal_r+0x1650>
  801dc0:	d9814c17 	ldw	r6,1328(sp)
  801dc4:	3080004c 	andi	r2,r6,1
  801dc8:	1005003a 	cmpeq	r2,r2,zero
  801dcc:	103bea1e 	bne	r2,zero,800d78 <___vfprintf_internal_r+0x5f8>
  801dd0:	00800044 	movi	r2,1
  801dd4:	dc400d17 	ldw	r17,52(sp)
  801dd8:	18800115 	stw	r2,4(r3)
  801ddc:	d8814917 	ldw	r2,1316(sp)
  801de0:	94800044 	addi	r18,r18,1
  801de4:	8c400044 	addi	r17,r17,1
  801de8:	18800015 	stw	r2,0(r3)
  801dec:	008001c4 	movi	r2,7
  801df0:	dc800e15 	stw	r18,56(sp)
  801df4:	dc400d15 	stw	r17,52(sp)
  801df8:	1440ca16 	blt	r2,r17,802124 <___vfprintf_internal_r+0x19a4>
  801dfc:	18c00204 	addi	r3,r3,8
  801e00:	0121c83a 	sub	r16,zero,r4
  801e04:	0400500e 	bge	zero,r16,801f48 <___vfprintf_internal_r+0x17c8>
  801e08:	00800404 	movi	r2,16
  801e0c:	1400800e 	bge	r2,r16,802010 <___vfprintf_internal_r+0x1890>
  801e10:	1027883a 	mov	r19,r2
  801e14:	07002074 	movhi	fp,129
  801e18:	e7330584 	addi	fp,fp,-13290
  801e1c:	050001c4 	movi	r20,7
  801e20:	00000306 	br	801e30 <___vfprintf_internal_r+0x16b0>
  801e24:	18c00204 	addi	r3,r3,8
  801e28:	843ffc04 	addi	r16,r16,-16
  801e2c:	9c007a0e 	bge	r19,r16,802018 <___vfprintf_internal_r+0x1898>
  801e30:	94800404 	addi	r18,r18,16
  801e34:	8c400044 	addi	r17,r17,1
  801e38:	1f000015 	stw	fp,0(r3)
  801e3c:	1cc00115 	stw	r19,4(r3)
  801e40:	dc800e15 	stw	r18,56(sp)
  801e44:	dc400d15 	stw	r17,52(sp)
  801e48:	a47ff60e 	bge	r20,r17,801e24 <___vfprintf_internal_r+0x16a4>
  801e4c:	d9014f17 	ldw	r4,1340(sp)
  801e50:	b00b883a 	mov	r5,r22
  801e54:	d9800c04 	addi	r6,sp,48
  801e58:	08007280 	call	800728 <__sprint_r>
  801e5c:	103c001e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  801e60:	dc800e17 	ldw	r18,56(sp)
  801e64:	dc400d17 	ldw	r17,52(sp)
  801e68:	d8c01904 	addi	r3,sp,100
  801e6c:	003fee06 	br	801e28 <___vfprintf_internal_r+0x16a8>
  801e70:	3c000017 	ldw	r16,0(r7)
  801e74:	0023883a 	mov	r17,zero
  801e78:	39c00104 	addi	r7,r7,4
  801e7c:	d9c14015 	stw	r7,1280(sp)
  801e80:	003e8c06 	br	8018b4 <___vfprintf_internal_r+0x1134>
  801e84:	d9401904 	addi	r5,sp,100
  801e88:	dd000f04 	addi	r20,sp,60
  801e8c:	d9414115 	stw	r5,1284(sp)
  801e90:	d9814417 	ldw	r6,1296(sp)
  801e94:	880a973a 	slli	r5,r17,28
  801e98:	8004d13a 	srli	r2,r16,4
  801e9c:	810003cc 	andi	r4,r16,15
  801ea0:	3109883a 	add	r4,r6,r4
  801ea4:	2884b03a 	or	r2,r5,r2
  801ea8:	21400003 	ldbu	r5,0(r4)
  801eac:	d9014117 	ldw	r4,1284(sp)
  801eb0:	8806d13a 	srli	r3,r17,4
  801eb4:	1021883a 	mov	r16,r2
  801eb8:	213fffc4 	addi	r4,r4,-1
  801ebc:	d9014115 	stw	r4,1284(sp)
  801ec0:	d9814117 	ldw	r6,1284(sp)
  801ec4:	10c8b03a 	or	r4,r2,r3
  801ec8:	1823883a 	mov	r17,r3
  801ecc:	31400005 	stb	r5,0(r6)
  801ed0:	203fef1e 	bne	r4,zero,801e90 <___vfprintf_internal_r+0x1710>
  801ed4:	003cc506 	br	8011ec <___vfprintf_internal_r+0xa6c>
  801ed8:	00800c04 	movi	r2,48
  801edc:	d98018c4 	addi	r6,sp,99
  801ee0:	dd000f04 	addi	r20,sp,60
  801ee4:	d88018c5 	stb	r2,99(sp)
  801ee8:	d9814115 	stw	r6,1284(sp)
  801eec:	003cbf06 	br	8011ec <___vfprintf_internal_r+0xa6c>
  801ef0:	dc400d17 	ldw	r17,52(sp)
  801ef4:	07002074 	movhi	fp,129
  801ef8:	e7330984 	addi	fp,fp,-13274
  801efc:	003bc106 	br	800e04 <___vfprintf_internal_r+0x684>
  801f00:	d9414c17 	ldw	r5,1328(sp)
  801f04:	2880040c 	andi	r2,r5,16
  801f08:	10007c26 	beq	r2,zero,8020fc <___vfprintf_internal_r+0x197c>
  801f0c:	38800017 	ldw	r2,0(r7)
  801f10:	39c00104 	addi	r7,r7,4
  801f14:	d9c14015 	stw	r7,1280(sp)
  801f18:	d9814b17 	ldw	r6,1324(sp)
  801f1c:	d9c14017 	ldw	r7,1280(sp)
  801f20:	11800015 	stw	r6,0(r2)
  801f24:	003a7206 	br	8008f0 <___vfprintf_internal_r+0x170>
  801f28:	d9014f17 	ldw	r4,1340(sp)
  801f2c:	b00b883a 	mov	r5,r22
  801f30:	d9800c04 	addi	r6,sp,48
  801f34:	08007280 	call	800728 <__sprint_r>
  801f38:	103bc91e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  801f3c:	dc800e17 	ldw	r18,56(sp)
  801f40:	dc400d17 	ldw	r17,52(sp)
  801f44:	d8c01904 	addi	r3,sp,100
  801f48:	d9014717 	ldw	r4,1308(sp)
  801f4c:	d9414117 	ldw	r5,1284(sp)
  801f50:	8c400044 	addi	r17,r17,1
  801f54:	9125883a 	add	r18,r18,r4
  801f58:	008001c4 	movi	r2,7
  801f5c:	19400015 	stw	r5,0(r3)
  801f60:	19000115 	stw	r4,4(r3)
  801f64:	dc800e15 	stw	r18,56(sp)
  801f68:	dc400d15 	stw	r17,52(sp)
  801f6c:	147ce816 	blt	r2,r17,801310 <___vfprintf_internal_r+0xb90>
  801f70:	18c00204 	addi	r3,r3,8
  801f74:	003b8006 	br	800d78 <___vfprintf_internal_r+0x5f8>
  801f78:	38c00017 	ldw	r3,0(r7)
  801f7c:	39000204 	addi	r4,r7,8
  801f80:	d9014015 	stw	r4,1280(sp)
  801f84:	d8c14215 	stw	r3,1288(sp)
  801f88:	39c00117 	ldw	r7,4(r7)
  801f8c:	d9c14315 	stw	r7,1292(sp)
  801f90:	003e1a06 	br	8017fc <___vfprintf_internal_r+0x107c>
  801f94:	0005883a 	mov	r2,zero
  801f98:	1409c83a 	sub	r4,r2,r16
  801f9c:	1105803a 	cmpltu	r2,r2,r4
  801fa0:	044bc83a 	sub	r5,zero,r17
  801fa4:	2885c83a 	sub	r2,r5,r2
  801fa8:	2021883a 	mov	r16,r4
  801fac:	1023883a 	mov	r17,r2
  801fb0:	01000044 	movi	r4,1
  801fb4:	00800b44 	movi	r2,45
  801fb8:	d8800405 	stb	r2,16(sp)
  801fbc:	003c7e06 	br	8011b8 <___vfprintf_internal_r+0xa38>
  801fc0:	d9014f17 	ldw	r4,1340(sp)
  801fc4:	b00b883a 	mov	r5,r22
  801fc8:	d9800c04 	addi	r6,sp,48
  801fcc:	08007280 	call	800728 <__sprint_r>
  801fd0:	103ba31e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  801fd4:	dc800e17 	ldw	r18,56(sp)
  801fd8:	dc400d17 	ldw	r17,52(sp)
  801fdc:	d9000517 	ldw	r4,20(sp)
  801fe0:	d9401904 	addi	r5,sp,100
  801fe4:	003da106 	br	80166c <___vfprintf_internal_r+0xeec>
  801fe8:	d9014f17 	ldw	r4,1340(sp)
  801fec:	b00b883a 	mov	r5,r22
  801ff0:	d9800c04 	addi	r6,sp,48
  801ff4:	08007280 	call	800728 <__sprint_r>
  801ff8:	103b991e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  801ffc:	dc800e17 	ldw	r18,56(sp)
  802000:	dc400d17 	ldw	r17,52(sp)
  802004:	d9000517 	ldw	r4,20(sp)
  802008:	d8c01904 	addi	r3,sp,100
  80200c:	003d8b06 	br	80163c <___vfprintf_internal_r+0xebc>
  802010:	07002074 	movhi	fp,129
  802014:	e7330584 	addi	fp,fp,-13290
  802018:	9425883a 	add	r18,r18,r16
  80201c:	8c400044 	addi	r17,r17,1
  802020:	008001c4 	movi	r2,7
  802024:	1f000015 	stw	fp,0(r3)
  802028:	1c000115 	stw	r16,4(r3)
  80202c:	dc800e15 	stw	r18,56(sp)
  802030:	dc400d15 	stw	r17,52(sp)
  802034:	147fbc16 	blt	r2,r17,801f28 <___vfprintf_internal_r+0x17a8>
  802038:	18c00204 	addi	r3,r3,8
  80203c:	003fc206 	br	801f48 <___vfprintf_internal_r+0x17c8>
  802040:	d9014f17 	ldw	r4,1340(sp)
  802044:	b00b883a 	mov	r5,r22
  802048:	d9800c04 	addi	r6,sp,48
  80204c:	08007280 	call	800728 <__sprint_r>
  802050:	103b831e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  802054:	dc800e17 	ldw	r18,56(sp)
  802058:	d9000517 	ldw	r4,20(sp)
  80205c:	d8c01904 	addi	r3,sp,100
  802060:	003cfc06 	br	801454 <___vfprintf_internal_r+0xcd4>
  802064:	07002074 	movhi	fp,129
  802068:	e7330584 	addi	fp,fp,-13290
  80206c:	003bde06 	br	800fe8 <___vfprintf_internal_r+0x868>
  802070:	00802074 	movhi	r2,129
  802074:	10b2f404 	addi	r2,r2,-13360
  802078:	d8814115 	stw	r2,1284(sp)
  80207c:	003def06 	br	80183c <___vfprintf_internal_r+0x10bc>
  802080:	d9014217 	ldw	r4,1288(sp)
  802084:	d9414317 	ldw	r5,1292(sp)
  802088:	08072700 	call	807270 <__isnand>
  80208c:	10003926 	beq	r2,zero,802174 <___vfprintf_internal_r+0x19f4>
  802090:	d9414d17 	ldw	r5,1332(sp)
  802094:	008011c4 	movi	r2,71
  802098:	1140ce16 	blt	r2,r5,8023d4 <___vfprintf_internal_r+0x1c54>
  80209c:	01802074 	movhi	r6,129
  8020a0:	31b2f504 	addi	r6,r6,-13356
  8020a4:	d9814115 	stw	r6,1284(sp)
  8020a8:	003de406 	br	80183c <___vfprintf_internal_r+0x10bc>
  8020ac:	d9014c17 	ldw	r4,1328(sp)
  8020b0:	bdc00044 	addi	r23,r23,1
  8020b4:	b8c00007 	ldb	r3,0(r23)
  8020b8:	21000814 	ori	r4,r4,32
  8020bc:	d9014c15 	stw	r4,1328(sp)
  8020c0:	003a2e06 	br	80097c <___vfprintf_internal_r+0x1fc>
  8020c4:	dcc14515 	stw	r19,1300(sp)
  8020c8:	98011016 	blt	r19,zero,80250c <___vfprintf_internal_r+0x1d8c>
  8020cc:	980f883a 	mov	r7,r19
  8020d0:	d8014615 	stw	zero,1304(sp)
  8020d4:	003c4c06 	br	801208 <___vfprintf_internal_r+0xa88>
  8020d8:	d9014f17 	ldw	r4,1340(sp)
  8020dc:	b00b883a 	mov	r5,r22
  8020e0:	d9800c04 	addi	r6,sp,48
  8020e4:	08007280 	call	800728 <__sprint_r>
  8020e8:	103b5d1e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  8020ec:	dc800e17 	ldw	r18,56(sp)
  8020f0:	d9000517 	ldw	r4,20(sp)
  8020f4:	d8c01904 	addi	r3,sp,100
  8020f8:	003f2e06 	br	801db4 <___vfprintf_internal_r+0x1634>
  8020fc:	d8c14c17 	ldw	r3,1328(sp)
  802100:	1880100c 	andi	r2,r3,64
  802104:	1000a026 	beq	r2,zero,802388 <___vfprintf_internal_r+0x1c08>
  802108:	38800017 	ldw	r2,0(r7)
  80210c:	39c00104 	addi	r7,r7,4
  802110:	d9c14015 	stw	r7,1280(sp)
  802114:	d9014b17 	ldw	r4,1324(sp)
  802118:	d9c14017 	ldw	r7,1280(sp)
  80211c:	1100000d 	sth	r4,0(r2)
  802120:	0039f306 	br	8008f0 <___vfprintf_internal_r+0x170>
  802124:	d9014f17 	ldw	r4,1340(sp)
  802128:	b00b883a 	mov	r5,r22
  80212c:	d9800c04 	addi	r6,sp,48
  802130:	08007280 	call	800728 <__sprint_r>
  802134:	103b4a1e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  802138:	dc800e17 	ldw	r18,56(sp)
  80213c:	dc400d17 	ldw	r17,52(sp)
  802140:	d9000517 	ldw	r4,20(sp)
  802144:	d8c01904 	addi	r3,sp,100
  802148:	003f2d06 	br	801e00 <___vfprintf_internal_r+0x1680>
  80214c:	00800184 	movi	r2,6
  802150:	14c09a36 	bltu	r2,r19,8023bc <___vfprintf_internal_r+0x1c3c>
  802154:	dcc14515 	stw	r19,1300(sp)
  802158:	9800010e 	bge	r19,zero,802160 <___vfprintf_internal_r+0x19e0>
  80215c:	d8014515 	stw	zero,1300(sp)
  802160:	00802074 	movhi	r2,129
  802164:	10b2f704 	addi	r2,r2,-13348
  802168:	980f883a 	mov	r7,r19
  80216c:	d8814115 	stw	r2,1284(sp)
  802170:	003a7206 	br	800b3c <___vfprintf_internal_r+0x3bc>
  802174:	00bfffc4 	movi	r2,-1
  802178:	9880e226 	beq	r19,r2,802504 <___vfprintf_internal_r+0x1d84>
  80217c:	d9414d17 	ldw	r5,1332(sp)
  802180:	008019c4 	movi	r2,103
  802184:	2880dc26 	beq	r5,r2,8024f8 <___vfprintf_internal_r+0x1d78>
  802188:	008011c4 	movi	r2,71
  80218c:	2880da26 	beq	r5,r2,8024f8 <___vfprintf_internal_r+0x1d78>
  802190:	d9414c17 	ldw	r5,1328(sp)
  802194:	d9014317 	ldw	r4,1292(sp)
  802198:	d9814217 	ldw	r6,1288(sp)
  80219c:	29404014 	ori	r5,r5,256
  8021a0:	d9414c15 	stw	r5,1328(sp)
  8021a4:	2000cc16 	blt	r4,zero,8024d8 <___vfprintf_internal_r+0x1d58>
  8021a8:	3021883a 	mov	r16,r6
  8021ac:	2023883a 	mov	r17,r4
  8021b0:	0039883a 	mov	fp,zero
  8021b4:	d9414d17 	ldw	r5,1332(sp)
  8021b8:	00801984 	movi	r2,102
  8021bc:	2880b726 	beq	r5,r2,80249c <___vfprintf_internal_r+0x1d1c>
  8021c0:	00801184 	movi	r2,70
  8021c4:	2880b526 	beq	r5,r2,80249c <___vfprintf_internal_r+0x1d1c>
  8021c8:	00801944 	movi	r2,101
  8021cc:	2880c826 	beq	r5,r2,8024f0 <___vfprintf_internal_r+0x1d70>
  8021d0:	00801144 	movi	r2,69
  8021d4:	2880c626 	beq	r5,r2,8024f0 <___vfprintf_internal_r+0x1d70>
  8021d8:	9829883a 	mov	r20,r19
  8021dc:	d9014f17 	ldw	r4,1340(sp)
  8021e0:	d8800504 	addi	r2,sp,20
  8021e4:	880d883a 	mov	r6,r17
  8021e8:	d8800115 	stw	r2,4(sp)
  8021ec:	d8c00604 	addi	r3,sp,24
  8021f0:	d8800704 	addi	r2,sp,28
  8021f4:	800b883a 	mov	r5,r16
  8021f8:	01c00084 	movi	r7,2
  8021fc:	d8c00215 	stw	r3,8(sp)
  802200:	d8800315 	stw	r2,12(sp)
  802204:	dd000015 	stw	r20,0(sp)
  802208:	08029e80 	call	8029e8 <_dtoa_r>
  80220c:	d9814d17 	ldw	r6,1332(sp)
  802210:	d8814115 	stw	r2,1284(sp)
  802214:	008019c4 	movi	r2,103
  802218:	30809526 	beq	r6,r2,802470 <___vfprintf_internal_r+0x1cf0>
  80221c:	d8c14d17 	ldw	r3,1332(sp)
  802220:	008011c4 	movi	r2,71
  802224:	18809226 	beq	r3,r2,802470 <___vfprintf_internal_r+0x1cf0>
  802228:	d9414117 	ldw	r5,1284(sp)
  80222c:	d9814d17 	ldw	r6,1332(sp)
  802230:	00801984 	movi	r2,102
  802234:	2d25883a 	add	r18,r5,r20
  802238:	30808626 	beq	r6,r2,802454 <___vfprintf_internal_r+0x1cd4>
  80223c:	00801184 	movi	r2,70
  802240:	30808426 	beq	r6,r2,802454 <___vfprintf_internal_r+0x1cd4>
  802244:	000d883a 	mov	r6,zero
  802248:	000f883a 	mov	r7,zero
  80224c:	880b883a 	mov	r5,r17
  802250:	8009883a 	mov	r4,r16
  802254:	08091ac0 	call	8091ac <__eqdf2>
  802258:	1000751e 	bne	r2,zero,802430 <___vfprintf_internal_r+0x1cb0>
  80225c:	9005883a 	mov	r2,r18
  802260:	dc800715 	stw	r18,28(sp)
  802264:	d9014117 	ldw	r4,1284(sp)
  802268:	d9414d17 	ldw	r5,1332(sp)
  80226c:	00c019c4 	movi	r3,103
  802270:	1125c83a 	sub	r18,r2,r4
  802274:	28c06826 	beq	r5,r3,802418 <___vfprintf_internal_r+0x1c98>
  802278:	008011c4 	movi	r2,71
  80227c:	28806626 	beq	r5,r2,802418 <___vfprintf_internal_r+0x1c98>
  802280:	d9000517 	ldw	r4,20(sp)
  802284:	d8c14d17 	ldw	r3,1332(sp)
  802288:	00801944 	movi	r2,101
  80228c:	10c05516 	blt	r2,r3,8023e4 <___vfprintf_internal_r+0x1c64>
  802290:	213fffc4 	addi	r4,r4,-1
  802294:	d9000515 	stw	r4,20(sp)
  802298:	d8c00805 	stb	r3,32(sp)
  80229c:	2021883a 	mov	r16,r4
  8022a0:	2000c116 	blt	r4,zero,8025a8 <___vfprintf_internal_r+0x1e28>
  8022a4:	00800ac4 	movi	r2,43
  8022a8:	d8800845 	stb	r2,33(sp)
  8022ac:	00800244 	movi	r2,9
  8022b0:	1400af0e 	bge	r2,r16,802570 <___vfprintf_internal_r+0x1df0>
  8022b4:	1027883a 	mov	r19,r2
  8022b8:	dc400b84 	addi	r17,sp,46
  8022bc:	8009883a 	mov	r4,r16
  8022c0:	01400284 	movi	r5,10
  8022c4:	08098940 	call	809894 <__modsi3>
  8022c8:	10800c04 	addi	r2,r2,48
  8022cc:	8c7fffc4 	addi	r17,r17,-1
  8022d0:	8009883a 	mov	r4,r16
  8022d4:	01400284 	movi	r5,10
  8022d8:	88800005 	stb	r2,0(r17)
  8022dc:	08098340 	call	809834 <__divsi3>
  8022e0:	1021883a 	mov	r16,r2
  8022e4:	98bff516 	blt	r19,r2,8022bc <___vfprintf_internal_r+0x1b3c>
  8022e8:	10c00c04 	addi	r3,r2,48
  8022ec:	d88009c4 	addi	r2,sp,39
  8022f0:	108001c4 	addi	r2,r2,7
  8022f4:	897fffc4 	addi	r5,r17,-1
  8022f8:	88ffffc5 	stb	r3,-1(r17)
  8022fc:	2880a72e 	bgeu	r5,r2,80259c <___vfprintf_internal_r+0x1e1c>
  802300:	1009883a 	mov	r4,r2
  802304:	d9800804 	addi	r6,sp,32
  802308:	d8c00884 	addi	r3,sp,34
  80230c:	28800003 	ldbu	r2,0(r5)
  802310:	29400044 	addi	r5,r5,1
  802314:	18800005 	stb	r2,0(r3)
  802318:	18c00044 	addi	r3,r3,1
  80231c:	293ffb36 	bltu	r5,r4,80230c <___vfprintf_internal_r+0x1b8c>
  802320:	1987c83a 	sub	r3,r3,r6
  802324:	00800044 	movi	r2,1
  802328:	d8c14815 	stw	r3,1312(sp)
  80232c:	90cf883a 	add	r7,r18,r3
  802330:	1480960e 	bge	r2,r18,80258c <___vfprintf_internal_r+0x1e0c>
  802334:	39c00044 	addi	r7,r7,1
  802338:	d9c14515 	stw	r7,1300(sp)
  80233c:	38003416 	blt	r7,zero,802410 <___vfprintf_internal_r+0x1c90>
  802340:	e0803fcc 	andi	r2,fp,255
  802344:	1080201c 	xori	r2,r2,128
  802348:	10bfe004 	addi	r2,r2,-128
  80234c:	10004e26 	beq	r2,zero,802488 <___vfprintf_internal_r+0x1d08>
  802350:	00800b44 	movi	r2,45
  802354:	dc814715 	stw	r18,1308(sp)
  802358:	d8014615 	stw	zero,1304(sp)
  80235c:	d8800405 	stb	r2,16(sp)
  802360:	003bab06 	br	801210 <___vfprintf_internal_r+0xa90>
  802364:	00800b44 	movi	r2,45
  802368:	d8800405 	stb	r2,16(sp)
  80236c:	003d2d06 	br	801824 <___vfprintf_internal_r+0x10a4>
  802370:	d9014f17 	ldw	r4,1340(sp)
  802374:	b00b883a 	mov	r5,r22
  802378:	d9800c04 	addi	r6,sp,48
  80237c:	08007280 	call	800728 <__sprint_r>
  802380:	103ab71e 	bne	r2,zero,800e60 <___vfprintf_internal_r+0x6e0>
  802384:	003ab506 	br	800e5c <___vfprintf_internal_r+0x6dc>
  802388:	38800017 	ldw	r2,0(r7)
  80238c:	39c00104 	addi	r7,r7,4
  802390:	d9c14015 	stw	r7,1280(sp)
  802394:	d9414b17 	ldw	r5,1324(sp)
  802398:	d9c14017 	ldw	r7,1280(sp)
  80239c:	11400015 	stw	r5,0(r2)
  8023a0:	00395306 	br	8008f0 <___vfprintf_internal_r+0x170>
  8023a4:	980f883a 	mov	r7,r19
  8023a8:	dcc14515 	stw	r19,1300(sp)
  8023ac:	d8014615 	stw	zero,1304(sp)
  8023b0:	003b9506 	br	801208 <___vfprintf_internal_r+0xa88>
  8023b4:	0027883a 	mov	r19,zero
  8023b8:	00397206 	br	800984 <___vfprintf_internal_r+0x204>
  8023bc:	00c02074 	movhi	r3,129
  8023c0:	18f2f704 	addi	r3,r3,-13348
  8023c4:	100f883a 	mov	r7,r2
  8023c8:	d8814515 	stw	r2,1300(sp)
  8023cc:	d8c14115 	stw	r3,1284(sp)
  8023d0:	0039da06 	br	800b3c <___vfprintf_internal_r+0x3bc>
  8023d4:	00802074 	movhi	r2,129
  8023d8:	10b2f604 	addi	r2,r2,-13352
  8023dc:	d8814115 	stw	r2,1284(sp)
  8023e0:	003d1606 	br	80183c <___vfprintf_internal_r+0x10bc>
  8023e4:	d9414d17 	ldw	r5,1332(sp)
  8023e8:	00801984 	movi	r2,102
  8023ec:	28804926 	beq	r5,r2,802514 <___vfprintf_internal_r+0x1d94>
  8023f0:	200f883a 	mov	r7,r4
  8023f4:	24805716 	blt	r4,r18,802554 <___vfprintf_internal_r+0x1dd4>
  8023f8:	d9414c17 	ldw	r5,1328(sp)
  8023fc:	2880004c 	andi	r2,r5,1
  802400:	10000126 	beq	r2,zero,802408 <___vfprintf_internal_r+0x1c88>
  802404:	21c00044 	addi	r7,r4,1
  802408:	d9c14515 	stw	r7,1300(sp)
  80240c:	383fcc0e 	bge	r7,zero,802340 <___vfprintf_internal_r+0x1bc0>
  802410:	d8014515 	stw	zero,1300(sp)
  802414:	003fca06 	br	802340 <___vfprintf_internal_r+0x1bc0>
  802418:	d9000517 	ldw	r4,20(sp)
  80241c:	00bfff04 	movi	r2,-4
  802420:	1100480e 	bge	r2,r4,802544 <___vfprintf_internal_r+0x1dc4>
  802424:	99004716 	blt	r19,r4,802544 <___vfprintf_internal_r+0x1dc4>
  802428:	d8c14d15 	stw	r3,1332(sp)
  80242c:	003ff006 	br	8023f0 <___vfprintf_internal_r+0x1c70>
  802430:	d8800717 	ldw	r2,28(sp)
  802434:	14bf8b2e 	bgeu	r2,r18,802264 <___vfprintf_internal_r+0x1ae4>
  802438:	9007883a 	mov	r3,r18
  80243c:	01000c04 	movi	r4,48
  802440:	11000005 	stb	r4,0(r2)
  802444:	10800044 	addi	r2,r2,1
  802448:	d8800715 	stw	r2,28(sp)
  80244c:	18bffc1e 	bne	r3,r2,802440 <___vfprintf_internal_r+0x1cc0>
  802450:	003f8406 	br	802264 <___vfprintf_internal_r+0x1ae4>
  802454:	d8814117 	ldw	r2,1284(sp)
  802458:	10c00007 	ldb	r3,0(r2)
  80245c:	00800c04 	movi	r2,48
  802460:	18805b26 	beq	r3,r2,8025d0 <___vfprintf_internal_r+0x1e50>
  802464:	d9000517 	ldw	r4,20(sp)
  802468:	9125883a 	add	r18,r18,r4
  80246c:	003f7506 	br	802244 <___vfprintf_internal_r+0x1ac4>
  802470:	d9014c17 	ldw	r4,1328(sp)
  802474:	2080004c 	andi	r2,r4,1
  802478:	1005003a 	cmpeq	r2,r2,zero
  80247c:	103f6a26 	beq	r2,zero,802228 <___vfprintf_internal_r+0x1aa8>
  802480:	d8800717 	ldw	r2,28(sp)
  802484:	003f7706 	br	802264 <___vfprintf_internal_r+0x1ae4>
  802488:	d9c14515 	stw	r7,1300(sp)
  80248c:	38004d16 	blt	r7,zero,8025c4 <___vfprintf_internal_r+0x1e44>
  802490:	dc814715 	stw	r18,1308(sp)
  802494:	d8014615 	stw	zero,1304(sp)
  802498:	003b5b06 	br	801208 <___vfprintf_internal_r+0xa88>
  80249c:	d9014f17 	ldw	r4,1340(sp)
  8024a0:	d8800504 	addi	r2,sp,20
  8024a4:	d8800115 	stw	r2,4(sp)
  8024a8:	d8c00604 	addi	r3,sp,24
  8024ac:	d8800704 	addi	r2,sp,28
  8024b0:	800b883a 	mov	r5,r16
  8024b4:	880d883a 	mov	r6,r17
  8024b8:	01c000c4 	movi	r7,3
  8024bc:	d8c00215 	stw	r3,8(sp)
  8024c0:	d8800315 	stw	r2,12(sp)
  8024c4:	dcc00015 	stw	r19,0(sp)
  8024c8:	9829883a 	mov	r20,r19
  8024cc:	08029e80 	call	8029e8 <_dtoa_r>
  8024d0:	d8814115 	stw	r2,1284(sp)
  8024d4:	003f5106 	br	80221c <___vfprintf_internal_r+0x1a9c>
  8024d8:	d8c14217 	ldw	r3,1288(sp)
  8024dc:	d9014317 	ldw	r4,1292(sp)
  8024e0:	07000b44 	movi	fp,45
  8024e4:	1821883a 	mov	r16,r3
  8024e8:	2460003c 	xorhi	r17,r4,32768
  8024ec:	003f3106 	br	8021b4 <___vfprintf_internal_r+0x1a34>
  8024f0:	9d000044 	addi	r20,r19,1
  8024f4:	003f3906 	br	8021dc <___vfprintf_internal_r+0x1a5c>
  8024f8:	983f251e 	bne	r19,zero,802190 <___vfprintf_internal_r+0x1a10>
  8024fc:	04c00044 	movi	r19,1
  802500:	003f2306 	br	802190 <___vfprintf_internal_r+0x1a10>
  802504:	04c00184 	movi	r19,6
  802508:	003f2106 	br	802190 <___vfprintf_internal_r+0x1a10>
  80250c:	d8014515 	stw	zero,1300(sp)
  802510:	003eee06 	br	8020cc <___vfprintf_internal_r+0x194c>
  802514:	200f883a 	mov	r7,r4
  802518:	0100370e 	bge	zero,r4,8025f8 <___vfprintf_internal_r+0x1e78>
  80251c:	9800031e 	bne	r19,zero,80252c <___vfprintf_internal_r+0x1dac>
  802520:	d9814c17 	ldw	r6,1328(sp)
  802524:	3080004c 	andi	r2,r6,1
  802528:	103fb726 	beq	r2,zero,802408 <___vfprintf_internal_r+0x1c88>
  80252c:	20800044 	addi	r2,r4,1
  802530:	98a7883a 	add	r19,r19,r2
  802534:	dcc14515 	stw	r19,1300(sp)
  802538:	980f883a 	mov	r7,r19
  80253c:	983f800e 	bge	r19,zero,802340 <___vfprintf_internal_r+0x1bc0>
  802540:	003fb306 	br	802410 <___vfprintf_internal_r+0x1c90>
  802544:	d9814d17 	ldw	r6,1332(sp)
  802548:	31bfff84 	addi	r6,r6,-2
  80254c:	d9814d15 	stw	r6,1332(sp)
  802550:	003f4c06 	br	802284 <___vfprintf_internal_r+0x1b04>
  802554:	0100180e 	bge	zero,r4,8025b8 <___vfprintf_internal_r+0x1e38>
  802558:	00800044 	movi	r2,1
  80255c:	1485883a 	add	r2,r2,r18
  802560:	d8814515 	stw	r2,1300(sp)
  802564:	100f883a 	mov	r7,r2
  802568:	103f750e 	bge	r2,zero,802340 <___vfprintf_internal_r+0x1bc0>
  80256c:	003fa806 	br	802410 <___vfprintf_internal_r+0x1c90>
  802570:	80c00c04 	addi	r3,r16,48
  802574:	00800c04 	movi	r2,48
  802578:	d8c008c5 	stb	r3,35(sp)
  80257c:	d9800804 	addi	r6,sp,32
  802580:	d8c00904 	addi	r3,sp,36
  802584:	d8800885 	stb	r2,34(sp)
  802588:	003f6506 	br	802320 <___vfprintf_internal_r+0x1ba0>
  80258c:	d9014c17 	ldw	r4,1328(sp)
  802590:	2084703a 	and	r2,r4,r2
  802594:	103f9c26 	beq	r2,zero,802408 <___vfprintf_internal_r+0x1c88>
  802598:	003f6606 	br	802334 <___vfprintf_internal_r+0x1bb4>
  80259c:	d9800804 	addi	r6,sp,32
  8025a0:	d8c00884 	addi	r3,sp,34
  8025a4:	003f5e06 	br	802320 <___vfprintf_internal_r+0x1ba0>
  8025a8:	00800b44 	movi	r2,45
  8025ac:	0121c83a 	sub	r16,zero,r4
  8025b0:	d8800845 	stb	r2,33(sp)
  8025b4:	003f3d06 	br	8022ac <___vfprintf_internal_r+0x1b2c>
  8025b8:	00800084 	movi	r2,2
  8025bc:	1105c83a 	sub	r2,r2,r4
  8025c0:	003fe606 	br	80255c <___vfprintf_internal_r+0x1ddc>
  8025c4:	d8014515 	stw	zero,1300(sp)
  8025c8:	dc814715 	stw	r18,1308(sp)
  8025cc:	003fb106 	br	802494 <___vfprintf_internal_r+0x1d14>
  8025d0:	000d883a 	mov	r6,zero
  8025d4:	000f883a 	mov	r7,zero
  8025d8:	8009883a 	mov	r4,r16
  8025dc:	880b883a 	mov	r5,r17
  8025e0:	08092340 	call	809234 <__nedf2>
  8025e4:	103f9f26 	beq	r2,zero,802464 <___vfprintf_internal_r+0x1ce4>
  8025e8:	00800044 	movi	r2,1
  8025ec:	1509c83a 	sub	r4,r2,r20
  8025f0:	d9000515 	stw	r4,20(sp)
  8025f4:	003f9b06 	br	802464 <___vfprintf_internal_r+0x1ce4>
  8025f8:	98000d1e 	bne	r19,zero,802630 <___vfprintf_internal_r+0x1eb0>
  8025fc:	d8c14c17 	ldw	r3,1328(sp)
  802600:	1880004c 	andi	r2,r3,1
  802604:	10000a1e 	bne	r2,zero,802630 <___vfprintf_internal_r+0x1eb0>
  802608:	01000044 	movi	r4,1
  80260c:	200f883a 	mov	r7,r4
  802610:	d9014515 	stw	r4,1300(sp)
  802614:	003f4a06 	br	802340 <___vfprintf_internal_r+0x1bc0>
  802618:	3cc00017 	ldw	r19,0(r7)
  80261c:	39c00104 	addi	r7,r7,4
  802620:	983d0e0e 	bge	r19,zero,801a5c <___vfprintf_internal_r+0x12dc>
  802624:	b8c00007 	ldb	r3,0(r23)
  802628:	04ffffc4 	movi	r19,-1
  80262c:	0038d306 	br	80097c <___vfprintf_internal_r+0x1fc>
  802630:	9cc00084 	addi	r19,r19,2
  802634:	dcc14515 	stw	r19,1300(sp)
  802638:	980f883a 	mov	r7,r19
  80263c:	983f400e 	bge	r19,zero,802340 <___vfprintf_internal_r+0x1bc0>
  802640:	003f7306 	br	802410 <___vfprintf_internal_r+0x1c90>

00802644 <__vfprintf_internal>:
  802644:	00802074 	movhi	r2,129
  802648:	10ba7004 	addi	r2,r2,-5696
  80264c:	2013883a 	mov	r9,r4
  802650:	11000017 	ldw	r4,0(r2)
  802654:	2805883a 	mov	r2,r5
  802658:	300f883a 	mov	r7,r6
  80265c:	480b883a 	mov	r5,r9
  802660:	100d883a 	mov	r6,r2
  802664:	08007801 	jmpi	800780 <___vfprintf_internal_r>

00802668 <__swsetup_r>:
  802668:	00802074 	movhi	r2,129
  80266c:	10ba7004 	addi	r2,r2,-5696
  802670:	10c00017 	ldw	r3,0(r2)
  802674:	defffd04 	addi	sp,sp,-12
  802678:	dc400115 	stw	r17,4(sp)
  80267c:	dc000015 	stw	r16,0(sp)
  802680:	dfc00215 	stw	ra,8(sp)
  802684:	2023883a 	mov	r17,r4
  802688:	2821883a 	mov	r16,r5
  80268c:	18000226 	beq	r3,zero,802698 <__swsetup_r+0x30>
  802690:	18800e17 	ldw	r2,56(r3)
  802694:	10001f26 	beq	r2,zero,802714 <__swsetup_r+0xac>
  802698:	8100030b 	ldhu	r4,12(r16)
  80269c:	2080020c 	andi	r2,r4,8
  8026a0:	10002826 	beq	r2,zero,802744 <__swsetup_r+0xdc>
  8026a4:	81400417 	ldw	r5,16(r16)
  8026a8:	28001d26 	beq	r5,zero,802720 <__swsetup_r+0xb8>
  8026ac:	2080004c 	andi	r2,r4,1
  8026b0:	1005003a 	cmpeq	r2,r2,zero
  8026b4:	10000b26 	beq	r2,zero,8026e4 <__swsetup_r+0x7c>
  8026b8:	2080008c 	andi	r2,r4,2
  8026bc:	10001226 	beq	r2,zero,802708 <__swsetup_r+0xa0>
  8026c0:	0005883a 	mov	r2,zero
  8026c4:	80800215 	stw	r2,8(r16)
  8026c8:	28000b26 	beq	r5,zero,8026f8 <__swsetup_r+0x90>
  8026cc:	0005883a 	mov	r2,zero
  8026d0:	dfc00217 	ldw	ra,8(sp)
  8026d4:	dc400117 	ldw	r17,4(sp)
  8026d8:	dc000017 	ldw	r16,0(sp)
  8026dc:	dec00304 	addi	sp,sp,12
  8026e0:	f800283a 	ret
  8026e4:	80800517 	ldw	r2,20(r16)
  8026e8:	80000215 	stw	zero,8(r16)
  8026ec:	0085c83a 	sub	r2,zero,r2
  8026f0:	80800615 	stw	r2,24(r16)
  8026f4:	283ff51e 	bne	r5,zero,8026cc <__swsetup_r+0x64>
  8026f8:	2080200c 	andi	r2,r4,128
  8026fc:	103ff326 	beq	r2,zero,8026cc <__swsetup_r+0x64>
  802700:	00bfffc4 	movi	r2,-1
  802704:	003ff206 	br	8026d0 <__swsetup_r+0x68>
  802708:	80800517 	ldw	r2,20(r16)
  80270c:	80800215 	stw	r2,8(r16)
  802710:	003fed06 	br	8026c8 <__swsetup_r+0x60>
  802714:	1809883a 	mov	r4,r3
  802718:	08042340 	call	804234 <__sinit>
  80271c:	003fde06 	br	802698 <__swsetup_r+0x30>
  802720:	20c0a00c 	andi	r3,r4,640
  802724:	00808004 	movi	r2,512
  802728:	18bfe026 	beq	r3,r2,8026ac <__swsetup_r+0x44>
  80272c:	8809883a 	mov	r4,r17
  802730:	800b883a 	mov	r5,r16
  802734:	0804fe00 	call	804fe0 <__smakebuf_r>
  802738:	8100030b 	ldhu	r4,12(r16)
  80273c:	81400417 	ldw	r5,16(r16)
  802740:	003fda06 	br	8026ac <__swsetup_r+0x44>
  802744:	2080040c 	andi	r2,r4,16
  802748:	103fed26 	beq	r2,zero,802700 <__swsetup_r+0x98>
  80274c:	2080010c 	andi	r2,r4,4
  802750:	10001226 	beq	r2,zero,80279c <__swsetup_r+0x134>
  802754:	81400c17 	ldw	r5,48(r16)
  802758:	28000526 	beq	r5,zero,802770 <__swsetup_r+0x108>
  80275c:	80801004 	addi	r2,r16,64
  802760:	28800226 	beq	r5,r2,80276c <__swsetup_r+0x104>
  802764:	8809883a 	mov	r4,r17
  802768:	08045ec0 	call	8045ec <_free_r>
  80276c:	80000c15 	stw	zero,48(r16)
  802770:	8080030b 	ldhu	r2,12(r16)
  802774:	81400417 	ldw	r5,16(r16)
  802778:	80000115 	stw	zero,4(r16)
  80277c:	10bff6cc 	andi	r2,r2,65499
  802780:	8080030d 	sth	r2,12(r16)
  802784:	81400015 	stw	r5,0(r16)
  802788:	8080030b 	ldhu	r2,12(r16)
  80278c:	10800214 	ori	r2,r2,8
  802790:	113fffcc 	andi	r4,r2,65535
  802794:	8080030d 	sth	r2,12(r16)
  802798:	003fc306 	br	8026a8 <__swsetup_r+0x40>
  80279c:	81400417 	ldw	r5,16(r16)
  8027a0:	003ff906 	br	802788 <__swsetup_r+0x120>

008027a4 <quorem>:
  8027a4:	28c00417 	ldw	r3,16(r5)
  8027a8:	20800417 	ldw	r2,16(r4)
  8027ac:	defff104 	addi	sp,sp,-60
  8027b0:	dfc00e15 	stw	ra,56(sp)
  8027b4:	df000d15 	stw	fp,52(sp)
  8027b8:	ddc00c15 	stw	r23,48(sp)
  8027bc:	dd800b15 	stw	r22,44(sp)
  8027c0:	dd400a15 	stw	r21,40(sp)
  8027c4:	dd000915 	stw	r20,36(sp)
  8027c8:	dcc00815 	stw	r19,32(sp)
  8027cc:	dc800715 	stw	r18,28(sp)
  8027d0:	dc400615 	stw	r17,24(sp)
  8027d4:	dc000515 	stw	r16,20(sp)
  8027d8:	d9000315 	stw	r4,12(sp)
  8027dc:	d9400415 	stw	r5,16(sp)
  8027e0:	10c07f16 	blt	r2,r3,8029e0 <quorem+0x23c>
  8027e4:	1d3fffc4 	addi	r20,r3,-1
  8027e8:	d8c00417 	ldw	r3,16(sp)
  8027ec:	d9000317 	ldw	r4,12(sp)
  8027f0:	a505883a 	add	r2,r20,r20
  8027f4:	1085883a 	add	r2,r2,r2
  8027f8:	1cc00504 	addi	r19,r3,20
  8027fc:	25c00504 	addi	r23,r4,20
  802800:	98ad883a 	add	r22,r19,r2
  802804:	15c7883a 	add	r3,r2,r23
  802808:	b1400017 	ldw	r5,0(r22)
  80280c:	19000017 	ldw	r4,0(r3)
  802810:	d8c00015 	stw	r3,0(sp)
  802814:	29400044 	addi	r5,r5,1
  802818:	d9000215 	stw	r4,8(sp)
  80281c:	08098f40 	call	8098f4 <__udivsi3>
  802820:	1039883a 	mov	fp,r2
  802824:	10003d1e 	bne	r2,zero,80291c <quorem+0x178>
  802828:	d9400417 	ldw	r5,16(sp)
  80282c:	d9000317 	ldw	r4,12(sp)
  802830:	0805d0c0 	call	805d0c <__mcmp>
  802834:	10002c16 	blt	r2,zero,8028e8 <quorem+0x144>
  802838:	e7000044 	addi	fp,fp,1
  80283c:	b80f883a 	mov	r7,r23
  802840:	0011883a 	mov	r8,zero
  802844:	0009883a 	mov	r4,zero
  802848:	99400017 	ldw	r5,0(r19)
  80284c:	38c00017 	ldw	r3,0(r7)
  802850:	9cc00104 	addi	r19,r19,4
  802854:	28bfffcc 	andi	r2,r5,65535
  802858:	2085883a 	add	r2,r4,r2
  80285c:	11bfffcc 	andi	r6,r2,65535
  802860:	193fffcc 	andi	r4,r3,65535
  802864:	1004d43a 	srli	r2,r2,16
  802868:	280ad43a 	srli	r5,r5,16
  80286c:	2189c83a 	sub	r4,r4,r6
  802870:	2209883a 	add	r4,r4,r8
  802874:	1806d43a 	srli	r3,r3,16
  802878:	288b883a 	add	r5,r5,r2
  80287c:	200dd43a 	srai	r6,r4,16
  802880:	28bfffcc 	andi	r2,r5,65535
  802884:	1887c83a 	sub	r3,r3,r2
  802888:	1987883a 	add	r3,r3,r6
  80288c:	3900000d 	sth	r4,0(r7)
  802890:	38c0008d 	sth	r3,2(r7)
  802894:	2808d43a 	srli	r4,r5,16
  802898:	39c00104 	addi	r7,r7,4
  80289c:	1811d43a 	srai	r8,r3,16
  8028a0:	b4ffe92e 	bgeu	r22,r19,802848 <quorem+0xa4>
  8028a4:	a505883a 	add	r2,r20,r20
  8028a8:	1085883a 	add	r2,r2,r2
  8028ac:	b885883a 	add	r2,r23,r2
  8028b0:	10c00017 	ldw	r3,0(r2)
  8028b4:	18000c1e 	bne	r3,zero,8028e8 <quorem+0x144>
  8028b8:	113fff04 	addi	r4,r2,-4
  8028bc:	b900082e 	bgeu	r23,r4,8028e0 <quorem+0x13c>
  8028c0:	10bfff17 	ldw	r2,-4(r2)
  8028c4:	10000326 	beq	r2,zero,8028d4 <quorem+0x130>
  8028c8:	00000506 	br	8028e0 <quorem+0x13c>
  8028cc:	20800017 	ldw	r2,0(r4)
  8028d0:	1000031e 	bne	r2,zero,8028e0 <quorem+0x13c>
  8028d4:	213fff04 	addi	r4,r4,-4
  8028d8:	a53fffc4 	addi	r20,r20,-1
  8028dc:	b93ffb36 	bltu	r23,r4,8028cc <quorem+0x128>
  8028e0:	d9000317 	ldw	r4,12(sp)
  8028e4:	25000415 	stw	r20,16(r4)
  8028e8:	e005883a 	mov	r2,fp
  8028ec:	dfc00e17 	ldw	ra,56(sp)
  8028f0:	df000d17 	ldw	fp,52(sp)
  8028f4:	ddc00c17 	ldw	r23,48(sp)
  8028f8:	dd800b17 	ldw	r22,44(sp)
  8028fc:	dd400a17 	ldw	r21,40(sp)
  802900:	dd000917 	ldw	r20,36(sp)
  802904:	dcc00817 	ldw	r19,32(sp)
  802908:	dc800717 	ldw	r18,28(sp)
  80290c:	dc400617 	ldw	r17,24(sp)
  802910:	dc000517 	ldw	r16,20(sp)
  802914:	dec00f04 	addi	sp,sp,60
  802918:	f800283a 	ret
  80291c:	b823883a 	mov	r17,r23
  802920:	9825883a 	mov	r18,r19
  802924:	d8000115 	stw	zero,4(sp)
  802928:	002b883a 	mov	r21,zero
  80292c:	94000017 	ldw	r16,0(r18)
  802930:	e009883a 	mov	r4,fp
  802934:	94800104 	addi	r18,r18,4
  802938:	817fffcc 	andi	r5,r16,65535
  80293c:	08099040 	call	809904 <__mulsi3>
  802940:	800ad43a 	srli	r5,r16,16
  802944:	e009883a 	mov	r4,fp
  802948:	a8a1883a 	add	r16,r21,r2
  80294c:	08099040 	call	809904 <__mulsi3>
  802950:	89000017 	ldw	r4,0(r17)
  802954:	80ffffcc 	andi	r3,r16,65535
  802958:	8020d43a 	srli	r16,r16,16
  80295c:	217fffcc 	andi	r5,r4,65535
  802960:	28cbc83a 	sub	r5,r5,r3
  802964:	d8c00117 	ldw	r3,4(sp)
  802968:	2008d43a 	srli	r4,r4,16
  80296c:	1405883a 	add	r2,r2,r16
  802970:	28cb883a 	add	r5,r5,r3
  802974:	280dd43a 	srai	r6,r5,16
  802978:	10ffffcc 	andi	r3,r2,65535
  80297c:	20c9c83a 	sub	r4,r4,r3
  802980:	2189883a 	add	r4,r4,r6
  802984:	8900008d 	sth	r4,2(r17)
  802988:	2009d43a 	srai	r4,r4,16
  80298c:	8940000d 	sth	r5,0(r17)
  802990:	102ad43a 	srli	r21,r2,16
  802994:	8c400104 	addi	r17,r17,4
  802998:	d9000115 	stw	r4,4(sp)
  80299c:	b4bfe32e 	bgeu	r22,r18,80292c <quorem+0x188>
  8029a0:	d9000217 	ldw	r4,8(sp)
  8029a4:	203fa01e 	bne	r4,zero,802828 <quorem+0x84>
  8029a8:	d8800017 	ldw	r2,0(sp)
  8029ac:	10ffff04 	addi	r3,r2,-4
  8029b0:	b8c0082e 	bgeu	r23,r3,8029d4 <quorem+0x230>
  8029b4:	10bfff17 	ldw	r2,-4(r2)
  8029b8:	10000326 	beq	r2,zero,8029c8 <quorem+0x224>
  8029bc:	00000506 	br	8029d4 <quorem+0x230>
  8029c0:	18800017 	ldw	r2,0(r3)
  8029c4:	1000031e 	bne	r2,zero,8029d4 <quorem+0x230>
  8029c8:	18ffff04 	addi	r3,r3,-4
  8029cc:	a53fffc4 	addi	r20,r20,-1
  8029d0:	b8fffb36 	bltu	r23,r3,8029c0 <quorem+0x21c>
  8029d4:	d8c00317 	ldw	r3,12(sp)
  8029d8:	1d000415 	stw	r20,16(r3)
  8029dc:	003f9206 	br	802828 <quorem+0x84>
  8029e0:	0005883a 	mov	r2,zero
  8029e4:	003fc106 	br	8028ec <quorem+0x148>

008029e8 <_dtoa_r>:
  8029e8:	22001017 	ldw	r8,64(r4)
  8029ec:	deffda04 	addi	sp,sp,-152
  8029f0:	dd402115 	stw	r21,132(sp)
  8029f4:	dd002015 	stw	r20,128(sp)
  8029f8:	dc801e15 	stw	r18,120(sp)
  8029fc:	dc401d15 	stw	r17,116(sp)
  802a00:	dfc02515 	stw	ra,148(sp)
  802a04:	df002415 	stw	fp,144(sp)
  802a08:	ddc02315 	stw	r23,140(sp)
  802a0c:	dd802215 	stw	r22,136(sp)
  802a10:	dcc01f15 	stw	r19,124(sp)
  802a14:	dc001c15 	stw	r16,112(sp)
  802a18:	d9001615 	stw	r4,88(sp)
  802a1c:	3023883a 	mov	r17,r6
  802a20:	2829883a 	mov	r20,r5
  802a24:	d9c01715 	stw	r7,92(sp)
  802a28:	dc802817 	ldw	r18,160(sp)
  802a2c:	302b883a 	mov	r21,r6
  802a30:	40000a26 	beq	r8,zero,802a5c <_dtoa_r+0x74>
  802a34:	20801117 	ldw	r2,68(r4)
  802a38:	400b883a 	mov	r5,r8
  802a3c:	40800115 	stw	r2,4(r8)
  802a40:	20c01117 	ldw	r3,68(r4)
  802a44:	00800044 	movi	r2,1
  802a48:	10c4983a 	sll	r2,r2,r3
  802a4c:	40800215 	stw	r2,8(r8)
  802a50:	0805bb00 	call	805bb0 <_Bfree>
  802a54:	d8c01617 	ldw	r3,88(sp)
  802a58:	18001015 	stw	zero,64(r3)
  802a5c:	8800a316 	blt	r17,zero,802cec <_dtoa_r+0x304>
  802a60:	90000015 	stw	zero,0(r18)
  802a64:	a8dffc2c 	andhi	r3,r21,32752
  802a68:	009ffc34 	movhi	r2,32752
  802a6c:	18809126 	beq	r3,r2,802cb4 <_dtoa_r+0x2cc>
  802a70:	000d883a 	mov	r6,zero
  802a74:	000f883a 	mov	r7,zero
  802a78:	a009883a 	mov	r4,r20
  802a7c:	a80b883a 	mov	r5,r21
  802a80:	dd001215 	stw	r20,72(sp)
  802a84:	dd401315 	stw	r21,76(sp)
  802a88:	08092340 	call	809234 <__nedf2>
  802a8c:	1000171e 	bne	r2,zero,802aec <_dtoa_r+0x104>
  802a90:	d9802717 	ldw	r6,156(sp)
  802a94:	00800044 	movi	r2,1
  802a98:	30800015 	stw	r2,0(r6)
  802a9c:	d8802917 	ldw	r2,164(sp)
  802aa0:	10029b26 	beq	r2,zero,803510 <_dtoa_r+0xb28>
  802aa4:	d9002917 	ldw	r4,164(sp)
  802aa8:	00802074 	movhi	r2,129
  802aac:	10b30544 	addi	r2,r2,-13291
  802ab0:	10ffffc4 	addi	r3,r2,-1
  802ab4:	20800015 	stw	r2,0(r4)
  802ab8:	1805883a 	mov	r2,r3
  802abc:	dfc02517 	ldw	ra,148(sp)
  802ac0:	df002417 	ldw	fp,144(sp)
  802ac4:	ddc02317 	ldw	r23,140(sp)
  802ac8:	dd802217 	ldw	r22,136(sp)
  802acc:	dd402117 	ldw	r21,132(sp)
  802ad0:	dd002017 	ldw	r20,128(sp)
  802ad4:	dcc01f17 	ldw	r19,124(sp)
  802ad8:	dc801e17 	ldw	r18,120(sp)
  802adc:	dc401d17 	ldw	r17,116(sp)
  802ae0:	dc001c17 	ldw	r16,112(sp)
  802ae4:	dec02604 	addi	sp,sp,152
  802ae8:	f800283a 	ret
  802aec:	d9001617 	ldw	r4,88(sp)
  802af0:	d9401217 	ldw	r5,72(sp)
  802af4:	d8800104 	addi	r2,sp,4
  802af8:	a80d883a 	mov	r6,r21
  802afc:	d9c00204 	addi	r7,sp,8
  802b00:	d8800015 	stw	r2,0(sp)
  802b04:	08061ec0 	call	8061ec <__d2b>
  802b08:	d8800715 	stw	r2,28(sp)
  802b0c:	a804d53a 	srli	r2,r21,20
  802b10:	1101ffcc 	andi	r4,r2,2047
  802b14:	20008626 	beq	r4,zero,802d30 <_dtoa_r+0x348>
  802b18:	d8c01217 	ldw	r3,72(sp)
  802b1c:	00800434 	movhi	r2,16
  802b20:	10bfffc4 	addi	r2,r2,-1
  802b24:	ddc00117 	ldw	r23,4(sp)
  802b28:	a884703a 	and	r2,r21,r2
  802b2c:	1811883a 	mov	r8,r3
  802b30:	124ffc34 	orhi	r9,r2,16368
  802b34:	25bf0044 	addi	r22,r4,-1023
  802b38:	d8000815 	stw	zero,32(sp)
  802b3c:	0005883a 	mov	r2,zero
  802b40:	00cffe34 	movhi	r3,16376
  802b44:	480b883a 	mov	r5,r9
  802b48:	4009883a 	mov	r4,r8
  802b4c:	180f883a 	mov	r7,r3
  802b50:	100d883a 	mov	r6,r2
  802b54:	0808a9c0 	call	808a9c <__subdf3>
  802b58:	0218dbf4 	movhi	r8,25455
  802b5c:	4210d844 	addi	r8,r8,17249
  802b60:	024ff4f4 	movhi	r9,16339
  802b64:	4a61e9c4 	addi	r9,r9,-30809
  802b68:	480f883a 	mov	r7,r9
  802b6c:	400d883a 	mov	r6,r8
  802b70:	180b883a 	mov	r5,r3
  802b74:	1009883a 	mov	r4,r2
  802b78:	0808b900 	call	808b90 <__muldf3>
  802b7c:	0222d874 	movhi	r8,35681
  802b80:	42322cc4 	addi	r8,r8,-14157
  802b84:	024ff1f4 	movhi	r9,16327
  802b88:	4a628a04 	addi	r9,r9,-30168
  802b8c:	480f883a 	mov	r7,r9
  802b90:	400d883a 	mov	r6,r8
  802b94:	180b883a 	mov	r5,r3
  802b98:	1009883a 	mov	r4,r2
  802b9c:	0808b1c0 	call	808b1c <__adddf3>
  802ba0:	b009883a 	mov	r4,r22
  802ba4:	1021883a 	mov	r16,r2
  802ba8:	1823883a 	mov	r17,r3
  802bac:	08094540 	call	809454 <__floatsidf>
  802bb0:	021427f4 	movhi	r8,20639
  802bb4:	421e7ec4 	addi	r8,r8,31227
  802bb8:	024ff4f4 	movhi	r9,16339
  802bbc:	4a5104c4 	addi	r9,r9,17427
  802bc0:	480f883a 	mov	r7,r9
  802bc4:	400d883a 	mov	r6,r8
  802bc8:	180b883a 	mov	r5,r3
  802bcc:	1009883a 	mov	r4,r2
  802bd0:	0808b900 	call	808b90 <__muldf3>
  802bd4:	180f883a 	mov	r7,r3
  802bd8:	880b883a 	mov	r5,r17
  802bdc:	100d883a 	mov	r6,r2
  802be0:	8009883a 	mov	r4,r16
  802be4:	0808b1c0 	call	808b1c <__adddf3>
  802be8:	1009883a 	mov	r4,r2
  802bec:	180b883a 	mov	r5,r3
  802bf0:	1021883a 	mov	r16,r2
  802bf4:	1823883a 	mov	r17,r3
  802bf8:	080954c0 	call	80954c <__fixdfsi>
  802bfc:	000d883a 	mov	r6,zero
  802c00:	000f883a 	mov	r7,zero
  802c04:	8009883a 	mov	r4,r16
  802c08:	880b883a 	mov	r5,r17
  802c0c:	d8800d15 	stw	r2,52(sp)
  802c10:	08093cc0 	call	8093cc <__ltdf2>
  802c14:	10031716 	blt	r2,zero,803874 <_dtoa_r+0xe8c>
  802c18:	d8c00d17 	ldw	r3,52(sp)
  802c1c:	00800584 	movi	r2,22
  802c20:	10c1482e 	bgeu	r2,r3,803144 <_dtoa_r+0x75c>
  802c24:	01000044 	movi	r4,1
  802c28:	d9000c15 	stw	r4,48(sp)
  802c2c:	bd85c83a 	sub	r2,r23,r22
  802c30:	11bfffc4 	addi	r6,r2,-1
  802c34:	30030b16 	blt	r6,zero,803864 <_dtoa_r+0xe7c>
  802c38:	d9800a15 	stw	r6,40(sp)
  802c3c:	d8001115 	stw	zero,68(sp)
  802c40:	d8c00d17 	ldw	r3,52(sp)
  802c44:	1802ff16 	blt	r3,zero,803844 <_dtoa_r+0xe5c>
  802c48:	d9000a17 	ldw	r4,40(sp)
  802c4c:	d8c00915 	stw	r3,36(sp)
  802c50:	d8001015 	stw	zero,64(sp)
  802c54:	20c9883a 	add	r4,r4,r3
  802c58:	d9000a15 	stw	r4,40(sp)
  802c5c:	d9001717 	ldw	r4,92(sp)
  802c60:	00800244 	movi	r2,9
  802c64:	11004636 	bltu	r2,r4,802d80 <_dtoa_r+0x398>
  802c68:	00800144 	movi	r2,5
  802c6c:	11020416 	blt	r2,r4,803480 <_dtoa_r+0xa98>
  802c70:	04400044 	movi	r17,1
  802c74:	d8c01717 	ldw	r3,92(sp)
  802c78:	00800144 	movi	r2,5
  802c7c:	10c1ed36 	bltu	r2,r3,803434 <_dtoa_r+0xa4c>
  802c80:	18c5883a 	add	r2,r3,r3
  802c84:	1085883a 	add	r2,r2,r2
  802c88:	00c02034 	movhi	r3,128
  802c8c:	18cb2704 	addi	r3,r3,11420
  802c90:	10c5883a 	add	r2,r2,r3
  802c94:	11000017 	ldw	r4,0(r2)
  802c98:	2000683a 	jmp	r4
  802c9c:	00802d88 	cmpgei	r2,zero,182
  802ca0:	00802d88 	cmpgei	r2,zero,182
  802ca4:	00803788 	cmpgei	r2,zero,222
  802ca8:	00803760 	cmpeqi	r2,zero,221
  802cac:	008037a4 	muli	r2,zero,222
  802cb0:	008037b0 	cmpltui	r2,zero,222
  802cb4:	d9002717 	ldw	r4,156(sp)
  802cb8:	0089c3c4 	movi	r2,9999
  802cbc:	20800015 	stw	r2,0(r4)
  802cc0:	a0001026 	beq	r20,zero,802d04 <_dtoa_r+0x31c>
  802cc4:	00c02074 	movhi	r3,129
  802cc8:	18f31104 	addi	r3,r3,-13244
  802ccc:	d9802917 	ldw	r6,164(sp)
  802cd0:	303f7926 	beq	r6,zero,802ab8 <_dtoa_r+0xd0>
  802cd4:	188000c7 	ldb	r2,3(r3)
  802cd8:	190000c4 	addi	r4,r3,3
  802cdc:	1000101e 	bne	r2,zero,802d20 <_dtoa_r+0x338>
  802ce0:	d8802917 	ldw	r2,164(sp)
  802ce4:	11000015 	stw	r4,0(r2)
  802ce8:	003f7306 	br	802ab8 <_dtoa_r+0xd0>
  802cec:	00a00034 	movhi	r2,32768
  802cf0:	10bfffc4 	addi	r2,r2,-1
  802cf4:	00c00044 	movi	r3,1
  802cf8:	88aa703a 	and	r21,r17,r2
  802cfc:	90c00015 	stw	r3,0(r18)
  802d00:	003f5806 	br	802a64 <_dtoa_r+0x7c>
  802d04:	00800434 	movhi	r2,16
  802d08:	10bfffc4 	addi	r2,r2,-1
  802d0c:	a884703a 	and	r2,r21,r2
  802d10:	103fec1e 	bne	r2,zero,802cc4 <_dtoa_r+0x2dc>
  802d14:	00c02074 	movhi	r3,129
  802d18:	18f30e04 	addi	r3,r3,-13256
  802d1c:	003feb06 	br	802ccc <_dtoa_r+0x2e4>
  802d20:	d8802917 	ldw	r2,164(sp)
  802d24:	19000204 	addi	r4,r3,8
  802d28:	11000015 	stw	r4,0(r2)
  802d2c:	003f6206 	br	802ab8 <_dtoa_r+0xd0>
  802d30:	ddc00117 	ldw	r23,4(sp)
  802d34:	d8800217 	ldw	r2,8(sp)
  802d38:	01000804 	movi	r4,32
  802d3c:	b8c10c84 	addi	r3,r23,1074
  802d40:	18a3883a 	add	r17,r3,r2
  802d44:	2441b80e 	bge	r4,r17,803428 <_dtoa_r+0xa40>
  802d48:	00c01004 	movi	r3,64
  802d4c:	1c47c83a 	sub	r3,r3,r17
  802d50:	88bff804 	addi	r2,r17,-32
  802d54:	a8c6983a 	sll	r3,r21,r3
  802d58:	a084d83a 	srl	r2,r20,r2
  802d5c:	1888b03a 	or	r4,r3,r2
  802d60:	08096240 	call	809624 <__floatunsidf>
  802d64:	1011883a 	mov	r8,r2
  802d68:	00bf8434 	movhi	r2,65040
  802d6c:	01000044 	movi	r4,1
  802d70:	10d3883a 	add	r9,r2,r3
  802d74:	8dbef344 	addi	r22,r17,-1075
  802d78:	d9000815 	stw	r4,32(sp)
  802d7c:	003f6f06 	br	802b3c <_dtoa_r+0x154>
  802d80:	d8001715 	stw	zero,92(sp)
  802d84:	04400044 	movi	r17,1
  802d88:	00bfffc4 	movi	r2,-1
  802d8c:	00c00044 	movi	r3,1
  802d90:	d8800e15 	stw	r2,56(sp)
  802d94:	d8002615 	stw	zero,152(sp)
  802d98:	d8800f15 	stw	r2,60(sp)
  802d9c:	d8c00b15 	stw	r3,44(sp)
  802da0:	1021883a 	mov	r16,r2
  802da4:	d8801617 	ldw	r2,88(sp)
  802da8:	10001115 	stw	zero,68(r2)
  802dac:	d8801617 	ldw	r2,88(sp)
  802db0:	11401117 	ldw	r5,68(r2)
  802db4:	1009883a 	mov	r4,r2
  802db8:	08061300 	call	806130 <_Balloc>
  802dbc:	d8c01617 	ldw	r3,88(sp)
  802dc0:	d8800515 	stw	r2,20(sp)
  802dc4:	18801015 	stw	r2,64(r3)
  802dc8:	00800384 	movi	r2,14
  802dcc:	14006836 	bltu	r2,r16,802f70 <_dtoa_r+0x588>
  802dd0:	8805003a 	cmpeq	r2,r17,zero
  802dd4:	1000661e 	bne	r2,zero,802f70 <_dtoa_r+0x588>
  802dd8:	d9000d17 	ldw	r4,52(sp)
  802ddc:	0102300e 	bge	zero,r4,8036a0 <_dtoa_r+0xcb8>
  802de0:	208003cc 	andi	r2,r4,15
  802de4:	100490fa 	slli	r2,r2,3
  802de8:	2025d13a 	srai	r18,r4,4
  802dec:	00c02074 	movhi	r3,129
  802df0:	18f32304 	addi	r3,r3,-13172
  802df4:	10c5883a 	add	r2,r2,r3
  802df8:	90c0040c 	andi	r3,r18,16
  802dfc:	14000017 	ldw	r16,0(r2)
  802e00:	14400117 	ldw	r17,4(r2)
  802e04:	18036a1e 	bne	r3,zero,803bb0 <_dtoa_r+0x11c8>
  802e08:	05800084 	movi	r22,2
  802e0c:	90001026 	beq	r18,zero,802e50 <_dtoa_r+0x468>
  802e10:	04c02074 	movhi	r19,129
  802e14:	9cf35504 	addi	r19,r19,-12972
  802e18:	9080004c 	andi	r2,r18,1
  802e1c:	1005003a 	cmpeq	r2,r2,zero
  802e20:	1000081e 	bne	r2,zero,802e44 <_dtoa_r+0x45c>
  802e24:	99800017 	ldw	r6,0(r19)
  802e28:	99c00117 	ldw	r7,4(r19)
  802e2c:	880b883a 	mov	r5,r17
  802e30:	8009883a 	mov	r4,r16
  802e34:	0808b900 	call	808b90 <__muldf3>
  802e38:	1021883a 	mov	r16,r2
  802e3c:	b5800044 	addi	r22,r22,1
  802e40:	1823883a 	mov	r17,r3
  802e44:	9025d07a 	srai	r18,r18,1
  802e48:	9cc00204 	addi	r19,r19,8
  802e4c:	903ff21e 	bne	r18,zero,802e18 <_dtoa_r+0x430>
  802e50:	a80b883a 	mov	r5,r21
  802e54:	a009883a 	mov	r4,r20
  802e58:	880f883a 	mov	r7,r17
  802e5c:	800d883a 	mov	r6,r16
  802e60:	0808f540 	call	808f54 <__divdf3>
  802e64:	1029883a 	mov	r20,r2
  802e68:	182b883a 	mov	r21,r3
  802e6c:	d8c00c17 	ldw	r3,48(sp)
  802e70:	1805003a 	cmpeq	r2,r3,zero
  802e74:	1000081e 	bne	r2,zero,802e98 <_dtoa_r+0x4b0>
  802e78:	0005883a 	mov	r2,zero
  802e7c:	00cffc34 	movhi	r3,16368
  802e80:	180f883a 	mov	r7,r3
  802e84:	a009883a 	mov	r4,r20
  802e88:	a80b883a 	mov	r5,r21
  802e8c:	100d883a 	mov	r6,r2
  802e90:	08093cc0 	call	8093cc <__ltdf2>
  802e94:	1003fe16 	blt	r2,zero,803e90 <_dtoa_r+0x14a8>
  802e98:	b009883a 	mov	r4,r22
  802e9c:	08094540 	call	809454 <__floatsidf>
  802ea0:	180b883a 	mov	r5,r3
  802ea4:	1009883a 	mov	r4,r2
  802ea8:	a00d883a 	mov	r6,r20
  802eac:	a80f883a 	mov	r7,r21
  802eb0:	0808b900 	call	808b90 <__muldf3>
  802eb4:	0011883a 	mov	r8,zero
  802eb8:	02500734 	movhi	r9,16412
  802ebc:	1009883a 	mov	r4,r2
  802ec0:	180b883a 	mov	r5,r3
  802ec4:	480f883a 	mov	r7,r9
  802ec8:	400d883a 	mov	r6,r8
  802ecc:	0808b1c0 	call	808b1c <__adddf3>
  802ed0:	d9000f17 	ldw	r4,60(sp)
  802ed4:	102d883a 	mov	r22,r2
  802ed8:	00bf3034 	movhi	r2,64704
  802edc:	18b9883a 	add	fp,r3,r2
  802ee0:	e02f883a 	mov	r23,fp
  802ee4:	20028f1e 	bne	r4,zero,803924 <_dtoa_r+0xf3c>
  802ee8:	0005883a 	mov	r2,zero
  802eec:	00d00534 	movhi	r3,16404
  802ef0:	a009883a 	mov	r4,r20
  802ef4:	a80b883a 	mov	r5,r21
  802ef8:	180f883a 	mov	r7,r3
  802efc:	100d883a 	mov	r6,r2
  802f00:	0808a9c0 	call	808a9c <__subdf3>
  802f04:	1009883a 	mov	r4,r2
  802f08:	e00f883a 	mov	r7,fp
  802f0c:	180b883a 	mov	r5,r3
  802f10:	b00d883a 	mov	r6,r22
  802f14:	1025883a 	mov	r18,r2
  802f18:	1827883a 	mov	r19,r3
  802f1c:	08092bc0 	call	8092bc <__gtdf2>
  802f20:	00834f16 	blt	zero,r2,803c60 <_dtoa_r+0x1278>
  802f24:	e0e0003c 	xorhi	r3,fp,32768
  802f28:	9009883a 	mov	r4,r18
  802f2c:	980b883a 	mov	r5,r19
  802f30:	180f883a 	mov	r7,r3
  802f34:	b00d883a 	mov	r6,r22
  802f38:	08093cc0 	call	8093cc <__ltdf2>
  802f3c:	1000080e 	bge	r2,zero,802f60 <_dtoa_r+0x578>
  802f40:	0027883a 	mov	r19,zero
  802f44:	0025883a 	mov	r18,zero
  802f48:	d8802617 	ldw	r2,152(sp)
  802f4c:	df000517 	ldw	fp,20(sp)
  802f50:	d8000615 	stw	zero,24(sp)
  802f54:	0084303a 	nor	r2,zero,r2
  802f58:	d8800d15 	stw	r2,52(sp)
  802f5c:	00019b06 	br	8035cc <_dtoa_r+0xbe4>
  802f60:	d9801217 	ldw	r6,72(sp)
  802f64:	d8801317 	ldw	r2,76(sp)
  802f68:	3029883a 	mov	r20,r6
  802f6c:	102b883a 	mov	r21,r2
  802f70:	d8c00217 	ldw	r3,8(sp)
  802f74:	18008516 	blt	r3,zero,80318c <_dtoa_r+0x7a4>
  802f78:	d9000d17 	ldw	r4,52(sp)
  802f7c:	00800384 	movi	r2,14
  802f80:	11008216 	blt	r2,r4,80318c <_dtoa_r+0x7a4>
  802f84:	200490fa 	slli	r2,r4,3
  802f88:	d9802617 	ldw	r6,152(sp)
  802f8c:	00c02074 	movhi	r3,129
  802f90:	18f32304 	addi	r3,r3,-13172
  802f94:	10c5883a 	add	r2,r2,r3
  802f98:	14800017 	ldw	r18,0(r2)
  802f9c:	14c00117 	ldw	r19,4(r2)
  802fa0:	30031e16 	blt	r6,zero,803c1c <_dtoa_r+0x1234>
  802fa4:	d9000517 	ldw	r4,20(sp)
  802fa8:	d8c00f17 	ldw	r3,60(sp)
  802fac:	a823883a 	mov	r17,r21
  802fb0:	a021883a 	mov	r16,r20
  802fb4:	192b883a 	add	r21,r3,r4
  802fb8:	2039883a 	mov	fp,r4
  802fbc:	00000f06 	br	802ffc <_dtoa_r+0x614>
  802fc0:	0005883a 	mov	r2,zero
  802fc4:	00d00934 	movhi	r3,16420
  802fc8:	5009883a 	mov	r4,r10
  802fcc:	580b883a 	mov	r5,r11
  802fd0:	180f883a 	mov	r7,r3
  802fd4:	100d883a 	mov	r6,r2
  802fd8:	0808b900 	call	808b90 <__muldf3>
  802fdc:	180b883a 	mov	r5,r3
  802fe0:	000d883a 	mov	r6,zero
  802fe4:	000f883a 	mov	r7,zero
  802fe8:	1009883a 	mov	r4,r2
  802fec:	1021883a 	mov	r16,r2
  802ff0:	1823883a 	mov	r17,r3
  802ff4:	08092340 	call	809234 <__nedf2>
  802ff8:	10004526 	beq	r2,zero,803110 <_dtoa_r+0x728>
  802ffc:	900d883a 	mov	r6,r18
  803000:	980f883a 	mov	r7,r19
  803004:	8009883a 	mov	r4,r16
  803008:	880b883a 	mov	r5,r17
  80300c:	0808f540 	call	808f54 <__divdf3>
  803010:	180b883a 	mov	r5,r3
  803014:	1009883a 	mov	r4,r2
  803018:	080954c0 	call	80954c <__fixdfsi>
  80301c:	1009883a 	mov	r4,r2
  803020:	1029883a 	mov	r20,r2
  803024:	08094540 	call	809454 <__floatsidf>
  803028:	180f883a 	mov	r7,r3
  80302c:	9009883a 	mov	r4,r18
  803030:	980b883a 	mov	r5,r19
  803034:	100d883a 	mov	r6,r2
  803038:	0808b900 	call	808b90 <__muldf3>
  80303c:	180f883a 	mov	r7,r3
  803040:	880b883a 	mov	r5,r17
  803044:	8009883a 	mov	r4,r16
  803048:	100d883a 	mov	r6,r2
  80304c:	0808a9c0 	call	808a9c <__subdf3>
  803050:	1015883a 	mov	r10,r2
  803054:	a0800c04 	addi	r2,r20,48
  803058:	e0800005 	stb	r2,0(fp)
  80305c:	e7000044 	addi	fp,fp,1
  803060:	1817883a 	mov	r11,r3
  803064:	e57fd61e 	bne	fp,r21,802fc0 <_dtoa_r+0x5d8>
  803068:	500d883a 	mov	r6,r10
  80306c:	180f883a 	mov	r7,r3
  803070:	5009883a 	mov	r4,r10
  803074:	180b883a 	mov	r5,r3
  803078:	0808b1c0 	call	808b1c <__adddf3>
  80307c:	100d883a 	mov	r6,r2
  803080:	9009883a 	mov	r4,r18
  803084:	980b883a 	mov	r5,r19
  803088:	180f883a 	mov	r7,r3
  80308c:	1021883a 	mov	r16,r2
  803090:	1823883a 	mov	r17,r3
  803094:	08093cc0 	call	8093cc <__ltdf2>
  803098:	10000816 	blt	r2,zero,8030bc <_dtoa_r+0x6d4>
  80309c:	980b883a 	mov	r5,r19
  8030a0:	800d883a 	mov	r6,r16
  8030a4:	880f883a 	mov	r7,r17
  8030a8:	9009883a 	mov	r4,r18
  8030ac:	08091ac0 	call	8091ac <__eqdf2>
  8030b0:	1000171e 	bne	r2,zero,803110 <_dtoa_r+0x728>
  8030b4:	a080004c 	andi	r2,r20,1
  8030b8:	10001526 	beq	r2,zero,803110 <_dtoa_r+0x728>
  8030bc:	d8800d17 	ldw	r2,52(sp)
  8030c0:	d8800415 	stw	r2,16(sp)
  8030c4:	e009883a 	mov	r4,fp
  8030c8:	213fffc4 	addi	r4,r4,-1
  8030cc:	20c00007 	ldb	r3,0(r4)
  8030d0:	00800e44 	movi	r2,57
  8030d4:	1880081e 	bne	r3,r2,8030f8 <_dtoa_r+0x710>
  8030d8:	d8800517 	ldw	r2,20(sp)
  8030dc:	113ffa1e 	bne	r2,r4,8030c8 <_dtoa_r+0x6e0>
  8030e0:	d8c00417 	ldw	r3,16(sp)
  8030e4:	d9800517 	ldw	r6,20(sp)
  8030e8:	00800c04 	movi	r2,48
  8030ec:	18c00044 	addi	r3,r3,1
  8030f0:	d8c00415 	stw	r3,16(sp)
  8030f4:	30800005 	stb	r2,0(r6)
  8030f8:	20800003 	ldbu	r2,0(r4)
  8030fc:	d8c00417 	ldw	r3,16(sp)
  803100:	27000044 	addi	fp,r4,1
  803104:	10800044 	addi	r2,r2,1
  803108:	d8c00d15 	stw	r3,52(sp)
  80310c:	20800005 	stb	r2,0(r4)
  803110:	d9001617 	ldw	r4,88(sp)
  803114:	d9400717 	ldw	r5,28(sp)
  803118:	0805bb00 	call	805bb0 <_Bfree>
  80311c:	e0000005 	stb	zero,0(fp)
  803120:	d9800d17 	ldw	r6,52(sp)
  803124:	d8c02717 	ldw	r3,156(sp)
  803128:	d9002917 	ldw	r4,164(sp)
  80312c:	30800044 	addi	r2,r6,1
  803130:	18800015 	stw	r2,0(r3)
  803134:	20029c26 	beq	r4,zero,803ba8 <_dtoa_r+0x11c0>
  803138:	d8c00517 	ldw	r3,20(sp)
  80313c:	27000015 	stw	fp,0(r4)
  803140:	003e5d06 	br	802ab8 <_dtoa_r+0xd0>
  803144:	d9800d17 	ldw	r6,52(sp)
  803148:	00c02074 	movhi	r3,129
  80314c:	18f32304 	addi	r3,r3,-13172
  803150:	d9001217 	ldw	r4,72(sp)
  803154:	300490fa 	slli	r2,r6,3
  803158:	d9401317 	ldw	r5,76(sp)
  80315c:	10c5883a 	add	r2,r2,r3
  803160:	12000017 	ldw	r8,0(r2)
  803164:	12400117 	ldw	r9,4(r2)
  803168:	400d883a 	mov	r6,r8
  80316c:	480f883a 	mov	r7,r9
  803170:	08093cc0 	call	8093cc <__ltdf2>
  803174:	1000030e 	bge	r2,zero,803184 <_dtoa_r+0x79c>
  803178:	d8800d17 	ldw	r2,52(sp)
  80317c:	10bfffc4 	addi	r2,r2,-1
  803180:	d8800d15 	stw	r2,52(sp)
  803184:	d8000c15 	stw	zero,48(sp)
  803188:	003ea806 	br	802c2c <_dtoa_r+0x244>
  80318c:	d9000b17 	ldw	r4,44(sp)
  803190:	202cc03a 	cmpne	r22,r4,zero
  803194:	b000c71e 	bne	r22,zero,8034b4 <_dtoa_r+0xacc>
  803198:	dc001117 	ldw	r16,68(sp)
  80319c:	dc801017 	ldw	r18,64(sp)
  8031a0:	0027883a 	mov	r19,zero
  8031a4:	04000b0e 	bge	zero,r16,8031d4 <_dtoa_r+0x7ec>
  8031a8:	d8c00a17 	ldw	r3,40(sp)
  8031ac:	00c0090e 	bge	zero,r3,8031d4 <_dtoa_r+0x7ec>
  8031b0:	8005883a 	mov	r2,r16
  8031b4:	1c011316 	blt	r3,r16,803604 <_dtoa_r+0xc1c>
  8031b8:	d9000a17 	ldw	r4,40(sp)
  8031bc:	d9801117 	ldw	r6,68(sp)
  8031c0:	80a1c83a 	sub	r16,r16,r2
  8031c4:	2089c83a 	sub	r4,r4,r2
  8031c8:	308dc83a 	sub	r6,r6,r2
  8031cc:	d9000a15 	stw	r4,40(sp)
  8031d0:	d9801115 	stw	r6,68(sp)
  8031d4:	d8801017 	ldw	r2,64(sp)
  8031d8:	0080150e 	bge	zero,r2,803230 <_dtoa_r+0x848>
  8031dc:	d8c00b17 	ldw	r3,44(sp)
  8031e0:	1805003a 	cmpeq	r2,r3,zero
  8031e4:	1001c91e 	bne	r2,zero,80390c <_dtoa_r+0xf24>
  8031e8:	04800e0e 	bge	zero,r18,803224 <_dtoa_r+0x83c>
  8031ec:	d9001617 	ldw	r4,88(sp)
  8031f0:	980b883a 	mov	r5,r19
  8031f4:	900d883a 	mov	r6,r18
  8031f8:	08069fc0 	call	8069fc <__pow5mult>
  8031fc:	d9001617 	ldw	r4,88(sp)
  803200:	d9800717 	ldw	r6,28(sp)
  803204:	100b883a 	mov	r5,r2
  803208:	1027883a 	mov	r19,r2
  80320c:	08066400 	call	806640 <__multiply>
  803210:	d9001617 	ldw	r4,88(sp)
  803214:	d9400717 	ldw	r5,28(sp)
  803218:	1023883a 	mov	r17,r2
  80321c:	0805bb00 	call	805bb0 <_Bfree>
  803220:	dc400715 	stw	r17,28(sp)
  803224:	d9001017 	ldw	r4,64(sp)
  803228:	248dc83a 	sub	r6,r4,r18
  80322c:	30010e1e 	bne	r6,zero,803668 <_dtoa_r+0xc80>
  803230:	d9001617 	ldw	r4,88(sp)
  803234:	04400044 	movi	r17,1
  803238:	880b883a 	mov	r5,r17
  80323c:	08068940 	call	806894 <__i2b>
  803240:	d9800917 	ldw	r6,36(sp)
  803244:	1025883a 	mov	r18,r2
  803248:	0180040e 	bge	zero,r6,80325c <_dtoa_r+0x874>
  80324c:	d9001617 	ldw	r4,88(sp)
  803250:	100b883a 	mov	r5,r2
  803254:	08069fc0 	call	8069fc <__pow5mult>
  803258:	1025883a 	mov	r18,r2
  80325c:	d8801717 	ldw	r2,92(sp)
  803260:	8880f30e 	bge	r17,r2,803630 <_dtoa_r+0xc48>
  803264:	0023883a 	mov	r17,zero
  803268:	d9800917 	ldw	r6,36(sp)
  80326c:	30019e1e 	bne	r6,zero,8038e8 <_dtoa_r+0xf00>
  803270:	00c00044 	movi	r3,1
  803274:	d9000a17 	ldw	r4,40(sp)
  803278:	20c5883a 	add	r2,r4,r3
  80327c:	10c007cc 	andi	r3,r2,31
  803280:	1800841e 	bne	r3,zero,803494 <_dtoa_r+0xaac>
  803284:	00800704 	movi	r2,28
  803288:	d9000a17 	ldw	r4,40(sp)
  80328c:	d9801117 	ldw	r6,68(sp)
  803290:	80a1883a 	add	r16,r16,r2
  803294:	2089883a 	add	r4,r4,r2
  803298:	308d883a 	add	r6,r6,r2
  80329c:	d9000a15 	stw	r4,40(sp)
  8032a0:	d9801115 	stw	r6,68(sp)
  8032a4:	d8801117 	ldw	r2,68(sp)
  8032a8:	0080050e 	bge	zero,r2,8032c0 <_dtoa_r+0x8d8>
  8032ac:	d9400717 	ldw	r5,28(sp)
  8032b0:	d9001617 	ldw	r4,88(sp)
  8032b4:	100d883a 	mov	r6,r2
  8032b8:	08064f40 	call	8064f4 <__lshift>
  8032bc:	d8800715 	stw	r2,28(sp)
  8032c0:	d8c00a17 	ldw	r3,40(sp)
  8032c4:	00c0050e 	bge	zero,r3,8032dc <_dtoa_r+0x8f4>
  8032c8:	d9001617 	ldw	r4,88(sp)
  8032cc:	900b883a 	mov	r5,r18
  8032d0:	180d883a 	mov	r6,r3
  8032d4:	08064f40 	call	8064f4 <__lshift>
  8032d8:	1025883a 	mov	r18,r2
  8032dc:	d9000c17 	ldw	r4,48(sp)
  8032e0:	2005003a 	cmpeq	r2,r4,zero
  8032e4:	10016f26 	beq	r2,zero,8038a4 <_dtoa_r+0xebc>
  8032e8:	d9000f17 	ldw	r4,60(sp)
  8032ec:	0102170e 	bge	zero,r4,803b4c <_dtoa_r+0x1164>
  8032f0:	d9800b17 	ldw	r6,44(sp)
  8032f4:	3005003a 	cmpeq	r2,r6,zero
  8032f8:	1000881e 	bne	r2,zero,80351c <_dtoa_r+0xb34>
  8032fc:	0400050e 	bge	zero,r16,803314 <_dtoa_r+0x92c>
  803300:	d9001617 	ldw	r4,88(sp)
  803304:	980b883a 	mov	r5,r19
  803308:	800d883a 	mov	r6,r16
  80330c:	08064f40 	call	8064f4 <__lshift>
  803310:	1027883a 	mov	r19,r2
  803314:	8804c03a 	cmpne	r2,r17,zero
  803318:	1002541e 	bne	r2,zero,803c6c <_dtoa_r+0x1284>
  80331c:	980b883a 	mov	r5,r19
  803320:	dd800517 	ldw	r22,20(sp)
  803324:	dcc00615 	stw	r19,24(sp)
  803328:	a700004c 	andi	fp,r20,1
  80332c:	2827883a 	mov	r19,r5
  803330:	d9000717 	ldw	r4,28(sp)
  803334:	900b883a 	mov	r5,r18
  803338:	08027a40 	call	8027a4 <quorem>
  80333c:	d9000717 	ldw	r4,28(sp)
  803340:	d9400617 	ldw	r5,24(sp)
  803344:	1023883a 	mov	r17,r2
  803348:	8dc00c04 	addi	r23,r17,48
  80334c:	0805d0c0 	call	805d0c <__mcmp>
  803350:	d9001617 	ldw	r4,88(sp)
  803354:	900b883a 	mov	r5,r18
  803358:	980d883a 	mov	r6,r19
  80335c:	1029883a 	mov	r20,r2
  803360:	08063680 	call	806368 <__mdiff>
  803364:	102b883a 	mov	r21,r2
  803368:	10800317 	ldw	r2,12(r2)
  80336c:	1001281e 	bne	r2,zero,803810 <_dtoa_r+0xe28>
  803370:	d9000717 	ldw	r4,28(sp)
  803374:	a80b883a 	mov	r5,r21
  803378:	0805d0c0 	call	805d0c <__mcmp>
  80337c:	d9001617 	ldw	r4,88(sp)
  803380:	1021883a 	mov	r16,r2
  803384:	a80b883a 	mov	r5,r21
  803388:	0805bb00 	call	805bb0 <_Bfree>
  80338c:	8000041e 	bne	r16,zero,8033a0 <_dtoa_r+0x9b8>
  803390:	d8801717 	ldw	r2,92(sp)
  803394:	1000021e 	bne	r2,zero,8033a0 <_dtoa_r+0x9b8>
  803398:	e004c03a 	cmpne	r2,fp,zero
  80339c:	10011726 	beq	r2,zero,8037fc <_dtoa_r+0xe14>
  8033a0:	a0010616 	blt	r20,zero,8037bc <_dtoa_r+0xdd4>
  8033a4:	a000041e 	bne	r20,zero,8033b8 <_dtoa_r+0x9d0>
  8033a8:	d8c01717 	ldw	r3,92(sp)
  8033ac:	1800021e 	bne	r3,zero,8033b8 <_dtoa_r+0x9d0>
  8033b0:	e004c03a 	cmpne	r2,fp,zero
  8033b4:	10010126 	beq	r2,zero,8037bc <_dtoa_r+0xdd4>
  8033b8:	04023d16 	blt	zero,r16,803cb0 <_dtoa_r+0x12c8>
  8033bc:	b5c00005 	stb	r23,0(r22)
  8033c0:	d9800517 	ldw	r6,20(sp)
  8033c4:	d9000f17 	ldw	r4,60(sp)
  8033c8:	b5800044 	addi	r22,r22,1
  8033cc:	3105883a 	add	r2,r6,r4
  8033d0:	b0806526 	beq	r22,r2,803568 <_dtoa_r+0xb80>
  8033d4:	d9400717 	ldw	r5,28(sp)
  8033d8:	d9001617 	ldw	r4,88(sp)
  8033dc:	01800284 	movi	r6,10
  8033e0:	000f883a 	mov	r7,zero
  8033e4:	08068d00 	call	8068d0 <__multadd>
  8033e8:	d8800715 	stw	r2,28(sp)
  8033ec:	d8800617 	ldw	r2,24(sp)
  8033f0:	14c10c26 	beq	r2,r19,803824 <_dtoa_r+0xe3c>
  8033f4:	d9400617 	ldw	r5,24(sp)
  8033f8:	d9001617 	ldw	r4,88(sp)
  8033fc:	01800284 	movi	r6,10
  803400:	000f883a 	mov	r7,zero
  803404:	08068d00 	call	8068d0 <__multadd>
  803408:	d9001617 	ldw	r4,88(sp)
  80340c:	980b883a 	mov	r5,r19
  803410:	01800284 	movi	r6,10
  803414:	000f883a 	mov	r7,zero
  803418:	d8800615 	stw	r2,24(sp)
  80341c:	08068d00 	call	8068d0 <__multadd>
  803420:	1027883a 	mov	r19,r2
  803424:	003fc206 	br	803330 <_dtoa_r+0x948>
  803428:	2445c83a 	sub	r2,r4,r17
  80342c:	a088983a 	sll	r4,r20,r2
  803430:	003e4b06 	br	802d60 <_dtoa_r+0x378>
  803434:	01bfffc4 	movi	r6,-1
  803438:	00800044 	movi	r2,1
  80343c:	d9800e15 	stw	r6,56(sp)
  803440:	d9800f15 	stw	r6,60(sp)
  803444:	d8800b15 	stw	r2,44(sp)
  803448:	d8c01617 	ldw	r3,88(sp)
  80344c:	008005c4 	movi	r2,23
  803450:	18001115 	stw	zero,68(r3)
  803454:	1580082e 	bgeu	r2,r22,803478 <_dtoa_r+0xa90>
  803458:	00c00104 	movi	r3,4
  80345c:	0009883a 	mov	r4,zero
  803460:	18c7883a 	add	r3,r3,r3
  803464:	18800504 	addi	r2,r3,20
  803468:	21000044 	addi	r4,r4,1
  80346c:	b0bffc2e 	bgeu	r22,r2,803460 <_dtoa_r+0xa78>
  803470:	d9801617 	ldw	r6,88(sp)
  803474:	31001115 	stw	r4,68(r6)
  803478:	dc000f17 	ldw	r16,60(sp)
  80347c:	003e4b06 	br	802dac <_dtoa_r+0x3c4>
  803480:	d9801717 	ldw	r6,92(sp)
  803484:	0023883a 	mov	r17,zero
  803488:	31bfff04 	addi	r6,r6,-4
  80348c:	d9801715 	stw	r6,92(sp)
  803490:	003df806 	br	802c74 <_dtoa_r+0x28c>
  803494:	00800804 	movi	r2,32
  803498:	10c9c83a 	sub	r4,r2,r3
  80349c:	00c00104 	movi	r3,4
  8034a0:	19005a16 	blt	r3,r4,80360c <_dtoa_r+0xc24>
  8034a4:	008000c4 	movi	r2,3
  8034a8:	113f7e16 	blt	r2,r4,8032a4 <_dtoa_r+0x8bc>
  8034ac:	20800704 	addi	r2,r4,28
  8034b0:	003f7506 	br	803288 <_dtoa_r+0x8a0>
  8034b4:	d9801717 	ldw	r6,92(sp)
  8034b8:	00800044 	movi	r2,1
  8034bc:	1180a10e 	bge	r2,r6,803744 <_dtoa_r+0xd5c>
  8034c0:	d9800f17 	ldw	r6,60(sp)
  8034c4:	d8c01017 	ldw	r3,64(sp)
  8034c8:	30bfffc4 	addi	r2,r6,-1
  8034cc:	1881c616 	blt	r3,r2,803be8 <_dtoa_r+0x1200>
  8034d0:	18a5c83a 	sub	r18,r3,r2
  8034d4:	d8800f17 	ldw	r2,60(sp)
  8034d8:	10026216 	blt	r2,zero,803e64 <_dtoa_r+0x147c>
  8034dc:	dc001117 	ldw	r16,68(sp)
  8034e0:	1007883a 	mov	r3,r2
  8034e4:	d9800a17 	ldw	r6,40(sp)
  8034e8:	d8801117 	ldw	r2,68(sp)
  8034ec:	d9001617 	ldw	r4,88(sp)
  8034f0:	30cd883a 	add	r6,r6,r3
  8034f4:	10c5883a 	add	r2,r2,r3
  8034f8:	01400044 	movi	r5,1
  8034fc:	d9800a15 	stw	r6,40(sp)
  803500:	d8801115 	stw	r2,68(sp)
  803504:	08068940 	call	806894 <__i2b>
  803508:	1027883a 	mov	r19,r2
  80350c:	003f2506 	br	8031a4 <_dtoa_r+0x7bc>
  803510:	00c02074 	movhi	r3,129
  803514:	18f30504 	addi	r3,r3,-13292
  803518:	003d6706 	br	802ab8 <_dtoa_r+0xd0>
  80351c:	dd800517 	ldw	r22,20(sp)
  803520:	04000044 	movi	r16,1
  803524:	00000706 	br	803544 <_dtoa_r+0xb5c>
  803528:	d9400717 	ldw	r5,28(sp)
  80352c:	d9001617 	ldw	r4,88(sp)
  803530:	01800284 	movi	r6,10
  803534:	000f883a 	mov	r7,zero
  803538:	08068d00 	call	8068d0 <__multadd>
  80353c:	d8800715 	stw	r2,28(sp)
  803540:	84000044 	addi	r16,r16,1
  803544:	d9000717 	ldw	r4,28(sp)
  803548:	900b883a 	mov	r5,r18
  80354c:	08027a40 	call	8027a4 <quorem>
  803550:	15c00c04 	addi	r23,r2,48
  803554:	b5c00005 	stb	r23,0(r22)
  803558:	d8c00f17 	ldw	r3,60(sp)
  80355c:	b5800044 	addi	r22,r22,1
  803560:	80fff116 	blt	r16,r3,803528 <_dtoa_r+0xb40>
  803564:	d8000615 	stw	zero,24(sp)
  803568:	d9400717 	ldw	r5,28(sp)
  80356c:	d9001617 	ldw	r4,88(sp)
  803570:	01800044 	movi	r6,1
  803574:	08064f40 	call	8064f4 <__lshift>
  803578:	1009883a 	mov	r4,r2
  80357c:	900b883a 	mov	r5,r18
  803580:	d8800715 	stw	r2,28(sp)
  803584:	0805d0c0 	call	805d0c <__mcmp>
  803588:	00803c0e 	bge	zero,r2,80367c <_dtoa_r+0xc94>
  80358c:	b009883a 	mov	r4,r22
  803590:	213fffc4 	addi	r4,r4,-1
  803594:	21400003 	ldbu	r5,0(r4)
  803598:	00800e44 	movi	r2,57
  80359c:	28c03fcc 	andi	r3,r5,255
  8035a0:	18c0201c 	xori	r3,r3,128
  8035a4:	18ffe004 	addi	r3,r3,-128
  8035a8:	1881981e 	bne	r3,r2,803c0c <_dtoa_r+0x1224>
  8035ac:	d9800517 	ldw	r6,20(sp)
  8035b0:	21bff71e 	bne	r4,r6,803590 <_dtoa_r+0xba8>
  8035b4:	d8800d17 	ldw	r2,52(sp)
  8035b8:	37000044 	addi	fp,r6,1
  8035bc:	10800044 	addi	r2,r2,1
  8035c0:	d8800d15 	stw	r2,52(sp)
  8035c4:	00800c44 	movi	r2,49
  8035c8:	30800005 	stb	r2,0(r6)
  8035cc:	d9001617 	ldw	r4,88(sp)
  8035d0:	900b883a 	mov	r5,r18
  8035d4:	0805bb00 	call	805bb0 <_Bfree>
  8035d8:	983ecd26 	beq	r19,zero,803110 <_dtoa_r+0x728>
  8035dc:	d8c00617 	ldw	r3,24(sp)
  8035e0:	18000426 	beq	r3,zero,8035f4 <_dtoa_r+0xc0c>
  8035e4:	1cc00326 	beq	r3,r19,8035f4 <_dtoa_r+0xc0c>
  8035e8:	d9001617 	ldw	r4,88(sp)
  8035ec:	180b883a 	mov	r5,r3
  8035f0:	0805bb00 	call	805bb0 <_Bfree>
  8035f4:	d9001617 	ldw	r4,88(sp)
  8035f8:	980b883a 	mov	r5,r19
  8035fc:	0805bb00 	call	805bb0 <_Bfree>
  803600:	003ec306 	br	803110 <_dtoa_r+0x728>
  803604:	1805883a 	mov	r2,r3
  803608:	003eeb06 	br	8031b8 <_dtoa_r+0x7d0>
  80360c:	d9800a17 	ldw	r6,40(sp)
  803610:	d8c01117 	ldw	r3,68(sp)
  803614:	20bfff04 	addi	r2,r4,-4
  803618:	308d883a 	add	r6,r6,r2
  80361c:	1887883a 	add	r3,r3,r2
  803620:	80a1883a 	add	r16,r16,r2
  803624:	d9800a15 	stw	r6,40(sp)
  803628:	d8c01115 	stw	r3,68(sp)
  80362c:	003f1d06 	br	8032a4 <_dtoa_r+0x8bc>
  803630:	a03f0c1e 	bne	r20,zero,803264 <_dtoa_r+0x87c>
  803634:	00800434 	movhi	r2,16
  803638:	10bfffc4 	addi	r2,r2,-1
  80363c:	a884703a 	and	r2,r21,r2
  803640:	103f081e 	bne	r2,zero,803264 <_dtoa_r+0x87c>
  803644:	a89ffc2c 	andhi	r2,r21,32752
  803648:	103f0626 	beq	r2,zero,803264 <_dtoa_r+0x87c>
  80364c:	d8c01117 	ldw	r3,68(sp)
  803650:	d9000a17 	ldw	r4,40(sp)
  803654:	18c00044 	addi	r3,r3,1
  803658:	21000044 	addi	r4,r4,1
  80365c:	d8c01115 	stw	r3,68(sp)
  803660:	d9000a15 	stw	r4,40(sp)
  803664:	003f0006 	br	803268 <_dtoa_r+0x880>
  803668:	d9400717 	ldw	r5,28(sp)
  80366c:	d9001617 	ldw	r4,88(sp)
  803670:	08069fc0 	call	8069fc <__pow5mult>
  803674:	d8800715 	stw	r2,28(sp)
  803678:	003eed06 	br	803230 <_dtoa_r+0x848>
  80367c:	1000021e 	bne	r2,zero,803688 <_dtoa_r+0xca0>
  803680:	b880004c 	andi	r2,r23,1
  803684:	103fc11e 	bne	r2,zero,80358c <_dtoa_r+0xba4>
  803688:	b5bfffc4 	addi	r22,r22,-1
  80368c:	b0c00007 	ldb	r3,0(r22)
  803690:	00800c04 	movi	r2,48
  803694:	18bffc26 	beq	r3,r2,803688 <_dtoa_r+0xca0>
  803698:	b7000044 	addi	fp,r22,1
  80369c:	003fcb06 	br	8035cc <_dtoa_r+0xbe4>
  8036a0:	d9800d17 	ldw	r6,52(sp)
  8036a4:	018fc83a 	sub	r7,zero,r6
  8036a8:	3801f726 	beq	r7,zero,803e88 <_dtoa_r+0x14a0>
  8036ac:	398003cc 	andi	r6,r7,15
  8036b0:	300c90fa 	slli	r6,r6,3
  8036b4:	01402074 	movhi	r5,129
  8036b8:	29732304 	addi	r5,r5,-13172
  8036bc:	d9001217 	ldw	r4,72(sp)
  8036c0:	314d883a 	add	r6,r6,r5
  8036c4:	30c00117 	ldw	r3,4(r6)
  8036c8:	30800017 	ldw	r2,0(r6)
  8036cc:	d9401317 	ldw	r5,76(sp)
  8036d0:	3821d13a 	srai	r16,r7,4
  8036d4:	100d883a 	mov	r6,r2
  8036d8:	180f883a 	mov	r7,r3
  8036dc:	0808b900 	call	808b90 <__muldf3>
  8036e0:	1011883a 	mov	r8,r2
  8036e4:	1813883a 	mov	r9,r3
  8036e8:	1029883a 	mov	r20,r2
  8036ec:	182b883a 	mov	r21,r3
  8036f0:	8001e526 	beq	r16,zero,803e88 <_dtoa_r+0x14a0>
  8036f4:	05800084 	movi	r22,2
  8036f8:	04402074 	movhi	r17,129
  8036fc:	8c735504 	addi	r17,r17,-12972
  803700:	8080004c 	andi	r2,r16,1
  803704:	1005003a 	cmpeq	r2,r2,zero
  803708:	1000081e 	bne	r2,zero,80372c <_dtoa_r+0xd44>
  80370c:	89800017 	ldw	r6,0(r17)
  803710:	89c00117 	ldw	r7,4(r17)
  803714:	480b883a 	mov	r5,r9
  803718:	4009883a 	mov	r4,r8
  80371c:	0808b900 	call	808b90 <__muldf3>
  803720:	1011883a 	mov	r8,r2
  803724:	b5800044 	addi	r22,r22,1
  803728:	1813883a 	mov	r9,r3
  80372c:	8021d07a 	srai	r16,r16,1
  803730:	8c400204 	addi	r17,r17,8
  803734:	803ff21e 	bne	r16,zero,803700 <_dtoa_r+0xd18>
  803738:	4029883a 	mov	r20,r8
  80373c:	482b883a 	mov	r21,r9
  803740:	003dca06 	br	802e6c <_dtoa_r+0x484>
  803744:	d9000817 	ldw	r4,32(sp)
  803748:	2005003a 	cmpeq	r2,r4,zero
  80374c:	1001f61e 	bne	r2,zero,803f28 <_dtoa_r+0x1540>
  803750:	dc001117 	ldw	r16,68(sp)
  803754:	dc801017 	ldw	r18,64(sp)
  803758:	18c10cc4 	addi	r3,r3,1075
  80375c:	003f6106 	br	8034e4 <_dtoa_r+0xafc>
  803760:	d8000b15 	stw	zero,44(sp)
  803764:	d9802617 	ldw	r6,152(sp)
  803768:	d8c00d17 	ldw	r3,52(sp)
  80376c:	30800044 	addi	r2,r6,1
  803770:	18ad883a 	add	r22,r3,r2
  803774:	b13fffc4 	addi	r4,r22,-1
  803778:	d9000e15 	stw	r4,56(sp)
  80377c:	0581f60e 	bge	zero,r22,803f58 <_dtoa_r+0x1570>
  803780:	dd800f15 	stw	r22,60(sp)
  803784:	003f3006 	br	803448 <_dtoa_r+0xa60>
  803788:	d8000b15 	stw	zero,44(sp)
  80378c:	d9002617 	ldw	r4,152(sp)
  803790:	0101eb0e 	bge	zero,r4,803f40 <_dtoa_r+0x1558>
  803794:	202d883a 	mov	r22,r4
  803798:	d9000e15 	stw	r4,56(sp)
  80379c:	d9000f15 	stw	r4,60(sp)
  8037a0:	003f2906 	br	803448 <_dtoa_r+0xa60>
  8037a4:	01800044 	movi	r6,1
  8037a8:	d9800b15 	stw	r6,44(sp)
  8037ac:	003ff706 	br	80378c <_dtoa_r+0xda4>
  8037b0:	01000044 	movi	r4,1
  8037b4:	d9000b15 	stw	r4,44(sp)
  8037b8:	003fea06 	br	803764 <_dtoa_r+0xd7c>
  8037bc:	04000c0e 	bge	zero,r16,8037f0 <_dtoa_r+0xe08>
  8037c0:	d9400717 	ldw	r5,28(sp)
  8037c4:	d9001617 	ldw	r4,88(sp)
  8037c8:	01800044 	movi	r6,1
  8037cc:	08064f40 	call	8064f4 <__lshift>
  8037d0:	1009883a 	mov	r4,r2
  8037d4:	900b883a 	mov	r5,r18
  8037d8:	d8800715 	stw	r2,28(sp)
  8037dc:	0805d0c0 	call	805d0c <__mcmp>
  8037e0:	0081e00e 	bge	zero,r2,803f64 <_dtoa_r+0x157c>
  8037e4:	bdc00044 	addi	r23,r23,1
  8037e8:	00800e84 	movi	r2,58
  8037ec:	b881a226 	beq	r23,r2,803e78 <_dtoa_r+0x1490>
  8037f0:	b7000044 	addi	fp,r22,1
  8037f4:	b5c00005 	stb	r23,0(r22)
  8037f8:	003f7406 	br	8035cc <_dtoa_r+0xbe4>
  8037fc:	00800e44 	movi	r2,57
  803800:	b8819d26 	beq	r23,r2,803e78 <_dtoa_r+0x1490>
  803804:	053ffa0e 	bge	zero,r20,8037f0 <_dtoa_r+0xe08>
  803808:	8dc00c44 	addi	r23,r17,49
  80380c:	003ff806 	br	8037f0 <_dtoa_r+0xe08>
  803810:	d9001617 	ldw	r4,88(sp)
  803814:	a80b883a 	mov	r5,r21
  803818:	04000044 	movi	r16,1
  80381c:	0805bb00 	call	805bb0 <_Bfree>
  803820:	003edf06 	br	8033a0 <_dtoa_r+0x9b8>
  803824:	d9001617 	ldw	r4,88(sp)
  803828:	980b883a 	mov	r5,r19
  80382c:	01800284 	movi	r6,10
  803830:	000f883a 	mov	r7,zero
  803834:	08068d00 	call	8068d0 <__multadd>
  803838:	1027883a 	mov	r19,r2
  80383c:	d8800615 	stw	r2,24(sp)
  803840:	003ebb06 	br	803330 <_dtoa_r+0x948>
  803844:	d9801117 	ldw	r6,68(sp)
  803848:	d8800d17 	ldw	r2,52(sp)
  80384c:	d8000915 	stw	zero,36(sp)
  803850:	308dc83a 	sub	r6,r6,r2
  803854:	0087c83a 	sub	r3,zero,r2
  803858:	d9801115 	stw	r6,68(sp)
  80385c:	d8c01015 	stw	r3,64(sp)
  803860:	003cfe06 	br	802c5c <_dtoa_r+0x274>
  803864:	018dc83a 	sub	r6,zero,r6
  803868:	d9801115 	stw	r6,68(sp)
  80386c:	d8000a15 	stw	zero,40(sp)
  803870:	003cf306 	br	802c40 <_dtoa_r+0x258>
  803874:	d9000d17 	ldw	r4,52(sp)
  803878:	08094540 	call	809454 <__floatsidf>
  80387c:	880b883a 	mov	r5,r17
  803880:	8009883a 	mov	r4,r16
  803884:	180f883a 	mov	r7,r3
  803888:	100d883a 	mov	r6,r2
  80388c:	08092340 	call	809234 <__nedf2>
  803890:	103ce126 	beq	r2,zero,802c18 <_dtoa_r+0x230>
  803894:	d9800d17 	ldw	r6,52(sp)
  803898:	31bfffc4 	addi	r6,r6,-1
  80389c:	d9800d15 	stw	r6,52(sp)
  8038a0:	003cdd06 	br	802c18 <_dtoa_r+0x230>
  8038a4:	d9000717 	ldw	r4,28(sp)
  8038a8:	900b883a 	mov	r5,r18
  8038ac:	0805d0c0 	call	805d0c <__mcmp>
  8038b0:	103e8d0e 	bge	r2,zero,8032e8 <_dtoa_r+0x900>
  8038b4:	d9400717 	ldw	r5,28(sp)
  8038b8:	d9001617 	ldw	r4,88(sp)
  8038bc:	01800284 	movi	r6,10
  8038c0:	000f883a 	mov	r7,zero
  8038c4:	08068d00 	call	8068d0 <__multadd>
  8038c8:	d9800d17 	ldw	r6,52(sp)
  8038cc:	d8800715 	stw	r2,28(sp)
  8038d0:	31bfffc4 	addi	r6,r6,-1
  8038d4:	d9800d15 	stw	r6,52(sp)
  8038d8:	b001a71e 	bne	r22,zero,803f78 <_dtoa_r+0x1590>
  8038dc:	d8800e17 	ldw	r2,56(sp)
  8038e0:	d8800f15 	stw	r2,60(sp)
  8038e4:	003e8006 	br	8032e8 <_dtoa_r+0x900>
  8038e8:	90800417 	ldw	r2,16(r18)
  8038ec:	1085883a 	add	r2,r2,r2
  8038f0:	1085883a 	add	r2,r2,r2
  8038f4:	1485883a 	add	r2,r2,r18
  8038f8:	11000417 	ldw	r4,16(r2)
  8038fc:	0805bd80 	call	805bd8 <__hi0bits>
  803900:	00c00804 	movi	r3,32
  803904:	1887c83a 	sub	r3,r3,r2
  803908:	003e5a06 	br	803274 <_dtoa_r+0x88c>
  80390c:	d9400717 	ldw	r5,28(sp)
  803910:	d9801017 	ldw	r6,64(sp)
  803914:	d9001617 	ldw	r4,88(sp)
  803918:	08069fc0 	call	8069fc <__pow5mult>
  80391c:	d8800715 	stw	r2,28(sp)
  803920:	003e4306 	br	803230 <_dtoa_r+0x848>
  803924:	d9800f17 	ldw	r6,60(sp)
  803928:	d8800d17 	ldw	r2,52(sp)
  80392c:	d9800315 	stw	r6,12(sp)
  803930:	d8800415 	stw	r2,16(sp)
  803934:	d8c00b17 	ldw	r3,44(sp)
  803938:	1805003a 	cmpeq	r2,r3,zero
  80393c:	1000e21e 	bne	r2,zero,803cc8 <_dtoa_r+0x12e0>
  803940:	d9000317 	ldw	r4,12(sp)
  803944:	0005883a 	mov	r2,zero
  803948:	00cff834 	movhi	r3,16352
  80394c:	200c90fa 	slli	r6,r4,3
  803950:	01002074 	movhi	r4,129
  803954:	21332304 	addi	r4,r4,-13172
  803958:	180b883a 	mov	r5,r3
  80395c:	310d883a 	add	r6,r6,r4
  803960:	327fff17 	ldw	r9,-4(r6)
  803964:	323ffe17 	ldw	r8,-8(r6)
  803968:	1009883a 	mov	r4,r2
  80396c:	480f883a 	mov	r7,r9
  803970:	400d883a 	mov	r6,r8
  803974:	0808f540 	call	808f54 <__divdf3>
  803978:	180b883a 	mov	r5,r3
  80397c:	b00d883a 	mov	r6,r22
  803980:	b80f883a 	mov	r7,r23
  803984:	1009883a 	mov	r4,r2
  803988:	0808a9c0 	call	808a9c <__subdf3>
  80398c:	a80b883a 	mov	r5,r21
  803990:	a009883a 	mov	r4,r20
  803994:	d8c01915 	stw	r3,100(sp)
  803998:	d8801815 	stw	r2,96(sp)
  80399c:	080954c0 	call	80954c <__fixdfsi>
  8039a0:	1009883a 	mov	r4,r2
  8039a4:	1027883a 	mov	r19,r2
  8039a8:	08094540 	call	809454 <__floatsidf>
  8039ac:	a80b883a 	mov	r5,r21
  8039b0:	a009883a 	mov	r4,r20
  8039b4:	180f883a 	mov	r7,r3
  8039b8:	100d883a 	mov	r6,r2
  8039bc:	0808a9c0 	call	808a9c <__subdf3>
  8039c0:	d9801817 	ldw	r6,96(sp)
  8039c4:	1823883a 	mov	r17,r3
  8039c8:	d8801415 	stw	r2,80(sp)
  8039cc:	302d883a 	mov	r22,r6
  8039d0:	d9800517 	ldw	r6,20(sp)
  8039d4:	9cc00c04 	addi	r19,r19,48
  8039d8:	dc401515 	stw	r17,84(sp)
  8039dc:	d8c01917 	ldw	r3,100(sp)
  8039e0:	34c00005 	stb	r19,0(r6)
  8039e4:	d8800517 	ldw	r2,20(sp)
  8039e8:	d9401917 	ldw	r5,100(sp)
  8039ec:	d9801417 	ldw	r6,80(sp)
  8039f0:	b009883a 	mov	r4,r22
  8039f4:	880f883a 	mov	r7,r17
  8039f8:	182f883a 	mov	r23,r3
  8039fc:	17000044 	addi	fp,r2,1
  803a00:	08092bc0 	call	8092bc <__gtdf2>
  803a04:	00804e16 	blt	zero,r2,803b40 <_dtoa_r+0x1158>
  803a08:	d9801417 	ldw	r6,80(sp)
  803a0c:	0005883a 	mov	r2,zero
  803a10:	00cffc34 	movhi	r3,16368
  803a14:	180b883a 	mov	r5,r3
  803a18:	880f883a 	mov	r7,r17
  803a1c:	1009883a 	mov	r4,r2
  803a20:	0808a9c0 	call	808a9c <__subdf3>
  803a24:	d9401917 	ldw	r5,100(sp)
  803a28:	180f883a 	mov	r7,r3
  803a2c:	b009883a 	mov	r4,r22
  803a30:	100d883a 	mov	r6,r2
  803a34:	08092bc0 	call	8092bc <__gtdf2>
  803a38:	00bda216 	blt	zero,r2,8030c4 <_dtoa_r+0x6dc>
  803a3c:	d8c00317 	ldw	r3,12(sp)
  803a40:	00800044 	movi	r2,1
  803a44:	10c01216 	blt	r2,r3,803a90 <_dtoa_r+0x10a8>
  803a48:	003d4506 	br	802f60 <_dtoa_r+0x578>
  803a4c:	d9801417 	ldw	r6,80(sp)
  803a50:	0005883a 	mov	r2,zero
  803a54:	00cffc34 	movhi	r3,16368
  803a58:	180b883a 	mov	r5,r3
  803a5c:	880f883a 	mov	r7,r17
  803a60:	1009883a 	mov	r4,r2
  803a64:	0808a9c0 	call	808a9c <__subdf3>
  803a68:	d9c01b17 	ldw	r7,108(sp)
  803a6c:	180b883a 	mov	r5,r3
  803a70:	1009883a 	mov	r4,r2
  803a74:	b00d883a 	mov	r6,r22
  803a78:	08093cc0 	call	8093cc <__ltdf2>
  803a7c:	103d9116 	blt	r2,zero,8030c4 <_dtoa_r+0x6dc>
  803a80:	d9800517 	ldw	r6,20(sp)
  803a84:	d9000317 	ldw	r4,12(sp)
  803a88:	3105883a 	add	r2,r6,r4
  803a8c:	e0bd3426 	beq	fp,r2,802f60 <_dtoa_r+0x578>
  803a90:	04500934 	movhi	r17,16420
  803a94:	0021883a 	mov	r16,zero
  803a98:	b80b883a 	mov	r5,r23
  803a9c:	b009883a 	mov	r4,r22
  803aa0:	800d883a 	mov	r6,r16
  803aa4:	880f883a 	mov	r7,r17
  803aa8:	0808b900 	call	808b90 <__muldf3>
  803aac:	d9401517 	ldw	r5,84(sp)
  803ab0:	d9001417 	ldw	r4,80(sp)
  803ab4:	880f883a 	mov	r7,r17
  803ab8:	000d883a 	mov	r6,zero
  803abc:	d8801a15 	stw	r2,104(sp)
  803ac0:	d8c01b15 	stw	r3,108(sp)
  803ac4:	0808b900 	call	808b90 <__muldf3>
  803ac8:	180b883a 	mov	r5,r3
  803acc:	1009883a 	mov	r4,r2
  803ad0:	1823883a 	mov	r17,r3
  803ad4:	1021883a 	mov	r16,r2
  803ad8:	080954c0 	call	80954c <__fixdfsi>
  803adc:	1009883a 	mov	r4,r2
  803ae0:	102b883a 	mov	r21,r2
  803ae4:	08094540 	call	809454 <__floatsidf>
  803ae8:	880b883a 	mov	r5,r17
  803aec:	8009883a 	mov	r4,r16
  803af0:	180f883a 	mov	r7,r3
  803af4:	100d883a 	mov	r6,r2
  803af8:	0808a9c0 	call	808a9c <__subdf3>
  803afc:	1021883a 	mov	r16,r2
  803b00:	d9001b17 	ldw	r4,108(sp)
  803b04:	1823883a 	mov	r17,r3
  803b08:	dc001415 	stw	r16,80(sp)
  803b0c:	ad400c04 	addi	r21,r21,48
  803b10:	dc401515 	stw	r17,84(sp)
  803b14:	d8801a17 	ldw	r2,104(sp)
  803b18:	e5400005 	stb	r21,0(fp)
  803b1c:	202f883a 	mov	r23,r4
  803b20:	d9c01b17 	ldw	r7,108(sp)
  803b24:	d9001417 	ldw	r4,80(sp)
  803b28:	880b883a 	mov	r5,r17
  803b2c:	100d883a 	mov	r6,r2
  803b30:	102d883a 	mov	r22,r2
  803b34:	e7000044 	addi	fp,fp,1
  803b38:	08093cc0 	call	8093cc <__ltdf2>
  803b3c:	103fc30e 	bge	r2,zero,803a4c <_dtoa_r+0x1064>
  803b40:	d9000417 	ldw	r4,16(sp)
  803b44:	d9000d15 	stw	r4,52(sp)
  803b48:	003d7106 	br	803110 <_dtoa_r+0x728>
  803b4c:	d9801717 	ldw	r6,92(sp)
  803b50:	00800084 	movi	r2,2
  803b54:	11bde60e 	bge	r2,r6,8032f0 <_dtoa_r+0x908>
  803b58:	203cfb1e 	bne	r4,zero,802f48 <_dtoa_r+0x560>
  803b5c:	d9001617 	ldw	r4,88(sp)
  803b60:	900b883a 	mov	r5,r18
  803b64:	01800144 	movi	r6,5
  803b68:	000f883a 	mov	r7,zero
  803b6c:	08068d00 	call	8068d0 <__multadd>
  803b70:	d9000717 	ldw	r4,28(sp)
  803b74:	100b883a 	mov	r5,r2
  803b78:	1025883a 	mov	r18,r2
  803b7c:	0805d0c0 	call	805d0c <__mcmp>
  803b80:	00bcf10e 	bge	zero,r2,802f48 <_dtoa_r+0x560>
  803b84:	d8c00d17 	ldw	r3,52(sp)
  803b88:	d9000517 	ldw	r4,20(sp)
  803b8c:	d8000615 	stw	zero,24(sp)
  803b90:	18c00044 	addi	r3,r3,1
  803b94:	d8c00d15 	stw	r3,52(sp)
  803b98:	00800c44 	movi	r2,49
  803b9c:	27000044 	addi	fp,r4,1
  803ba0:	20800005 	stb	r2,0(r4)
  803ba4:	003e8906 	br	8035cc <_dtoa_r+0xbe4>
  803ba8:	d8c00517 	ldw	r3,20(sp)
  803bac:	003bc206 	br	802ab8 <_dtoa_r+0xd0>
  803bb0:	01802074 	movhi	r6,129
  803bb4:	31b35504 	addi	r6,r6,-12972
  803bb8:	30c00917 	ldw	r3,36(r6)
  803bbc:	30800817 	ldw	r2,32(r6)
  803bc0:	d9001217 	ldw	r4,72(sp)
  803bc4:	d9401317 	ldw	r5,76(sp)
  803bc8:	180f883a 	mov	r7,r3
  803bcc:	100d883a 	mov	r6,r2
  803bd0:	0808f540 	call	808f54 <__divdf3>
  803bd4:	948003cc 	andi	r18,r18,15
  803bd8:	058000c4 	movi	r22,3
  803bdc:	1029883a 	mov	r20,r2
  803be0:	182b883a 	mov	r21,r3
  803be4:	003c8906 	br	802e0c <_dtoa_r+0x424>
  803be8:	d9001017 	ldw	r4,64(sp)
  803bec:	d9800917 	ldw	r6,36(sp)
  803bf0:	0025883a 	mov	r18,zero
  803bf4:	1105c83a 	sub	r2,r2,r4
  803bf8:	2089883a 	add	r4,r4,r2
  803bfc:	308d883a 	add	r6,r6,r2
  803c00:	d9001015 	stw	r4,64(sp)
  803c04:	d9800915 	stw	r6,36(sp)
  803c08:	003e3206 	br	8034d4 <_dtoa_r+0xaec>
  803c0c:	28800044 	addi	r2,r5,1
  803c10:	27000044 	addi	fp,r4,1
  803c14:	20800005 	stb	r2,0(r4)
  803c18:	003e6c06 	br	8035cc <_dtoa_r+0xbe4>
  803c1c:	d8800f17 	ldw	r2,60(sp)
  803c20:	00bce016 	blt	zero,r2,802fa4 <_dtoa_r+0x5bc>
  803c24:	d9800f17 	ldw	r6,60(sp)
  803c28:	303cc51e 	bne	r6,zero,802f40 <_dtoa_r+0x558>
  803c2c:	0005883a 	mov	r2,zero
  803c30:	00d00534 	movhi	r3,16404
  803c34:	980b883a 	mov	r5,r19
  803c38:	180f883a 	mov	r7,r3
  803c3c:	9009883a 	mov	r4,r18
  803c40:	100d883a 	mov	r6,r2
  803c44:	0808b900 	call	808b90 <__muldf3>
  803c48:	180b883a 	mov	r5,r3
  803c4c:	a80f883a 	mov	r7,r21
  803c50:	1009883a 	mov	r4,r2
  803c54:	a00d883a 	mov	r6,r20
  803c58:	08093440 	call	809344 <__gedf2>
  803c5c:	103cb80e 	bge	r2,zero,802f40 <_dtoa_r+0x558>
  803c60:	0027883a 	mov	r19,zero
  803c64:	0025883a 	mov	r18,zero
  803c68:	003fc606 	br	803b84 <_dtoa_r+0x119c>
  803c6c:	99400117 	ldw	r5,4(r19)
  803c70:	d9001617 	ldw	r4,88(sp)
  803c74:	08061300 	call	806130 <_Balloc>
  803c78:	99800417 	ldw	r6,16(r19)
  803c7c:	11000304 	addi	r4,r2,12
  803c80:	99400304 	addi	r5,r19,12
  803c84:	318d883a 	add	r6,r6,r6
  803c88:	318d883a 	add	r6,r6,r6
  803c8c:	31800204 	addi	r6,r6,8
  803c90:	1023883a 	mov	r17,r2
  803c94:	08059980 	call	805998 <memcpy>
  803c98:	d9001617 	ldw	r4,88(sp)
  803c9c:	880b883a 	mov	r5,r17
  803ca0:	01800044 	movi	r6,1
  803ca4:	08064f40 	call	8064f4 <__lshift>
  803ca8:	100b883a 	mov	r5,r2
  803cac:	003d9c06 	br	803320 <_dtoa_r+0x938>
  803cb0:	00800e44 	movi	r2,57
  803cb4:	b8807026 	beq	r23,r2,803e78 <_dtoa_r+0x1490>
  803cb8:	b8800044 	addi	r2,r23,1
  803cbc:	b7000044 	addi	fp,r22,1
  803cc0:	b0800005 	stb	r2,0(r22)
  803cc4:	003e4106 	br	8035cc <_dtoa_r+0xbe4>
  803cc8:	d8800317 	ldw	r2,12(sp)
  803ccc:	01802074 	movhi	r6,129
  803cd0:	31b32304 	addi	r6,r6,-13172
  803cd4:	b009883a 	mov	r4,r22
  803cd8:	100e90fa 	slli	r7,r2,3
  803cdc:	b80b883a 	mov	r5,r23
  803ce0:	398f883a 	add	r7,r7,r6
  803ce4:	38bffe17 	ldw	r2,-8(r7)
  803ce8:	d9800517 	ldw	r6,20(sp)
  803cec:	38ffff17 	ldw	r3,-4(r7)
  803cf0:	37000044 	addi	fp,r6,1
  803cf4:	180f883a 	mov	r7,r3
  803cf8:	100d883a 	mov	r6,r2
  803cfc:	0808b900 	call	808b90 <__muldf3>
  803d00:	a80b883a 	mov	r5,r21
  803d04:	a009883a 	mov	r4,r20
  803d08:	182f883a 	mov	r23,r3
  803d0c:	102d883a 	mov	r22,r2
  803d10:	080954c0 	call	80954c <__fixdfsi>
  803d14:	1009883a 	mov	r4,r2
  803d18:	1027883a 	mov	r19,r2
  803d1c:	08094540 	call	809454 <__floatsidf>
  803d20:	a80b883a 	mov	r5,r21
  803d24:	a009883a 	mov	r4,r20
  803d28:	180f883a 	mov	r7,r3
  803d2c:	100d883a 	mov	r6,r2
  803d30:	0808a9c0 	call	808a9c <__subdf3>
  803d34:	180b883a 	mov	r5,r3
  803d38:	d8c00517 	ldw	r3,20(sp)
  803d3c:	9cc00c04 	addi	r19,r19,48
  803d40:	1009883a 	mov	r4,r2
  803d44:	1cc00005 	stb	r19,0(r3)
  803d48:	2021883a 	mov	r16,r4
  803d4c:	d9000317 	ldw	r4,12(sp)
  803d50:	00800044 	movi	r2,1
  803d54:	2823883a 	mov	r17,r5
  803d58:	20802226 	beq	r4,r2,803de4 <_dtoa_r+0x13fc>
  803d5c:	1029883a 	mov	r20,r2
  803d60:	0005883a 	mov	r2,zero
  803d64:	00d00934 	movhi	r3,16420
  803d68:	180f883a 	mov	r7,r3
  803d6c:	100d883a 	mov	r6,r2
  803d70:	880b883a 	mov	r5,r17
  803d74:	8009883a 	mov	r4,r16
  803d78:	0808b900 	call	808b90 <__muldf3>
  803d7c:	180b883a 	mov	r5,r3
  803d80:	1009883a 	mov	r4,r2
  803d84:	1823883a 	mov	r17,r3
  803d88:	1021883a 	mov	r16,r2
  803d8c:	080954c0 	call	80954c <__fixdfsi>
  803d90:	1009883a 	mov	r4,r2
  803d94:	102b883a 	mov	r21,r2
  803d98:	08094540 	call	809454 <__floatsidf>
  803d9c:	880b883a 	mov	r5,r17
  803da0:	8009883a 	mov	r4,r16
  803da4:	180f883a 	mov	r7,r3
  803da8:	100d883a 	mov	r6,r2
  803dac:	0808a9c0 	call	808a9c <__subdf3>
  803db0:	180b883a 	mov	r5,r3
  803db4:	d8c00517 	ldw	r3,20(sp)
  803db8:	1009883a 	mov	r4,r2
  803dbc:	ad400c04 	addi	r21,r21,48
  803dc0:	1d05883a 	add	r2,r3,r20
  803dc4:	15400005 	stb	r21,0(r2)
  803dc8:	2021883a 	mov	r16,r4
  803dcc:	d9000317 	ldw	r4,12(sp)
  803dd0:	a5000044 	addi	r20,r20,1
  803dd4:	2823883a 	mov	r17,r5
  803dd8:	a13fe11e 	bne	r20,r4,803d60 <_dtoa_r+0x1378>
  803ddc:	e505883a 	add	r2,fp,r20
  803de0:	173fffc4 	addi	fp,r2,-1
  803de4:	0025883a 	mov	r18,zero
  803de8:	04cff834 	movhi	r19,16352
  803dec:	b009883a 	mov	r4,r22
  803df0:	b80b883a 	mov	r5,r23
  803df4:	900d883a 	mov	r6,r18
  803df8:	980f883a 	mov	r7,r19
  803dfc:	0808b1c0 	call	808b1c <__adddf3>
  803e00:	180b883a 	mov	r5,r3
  803e04:	1009883a 	mov	r4,r2
  803e08:	800d883a 	mov	r6,r16
  803e0c:	880f883a 	mov	r7,r17
  803e10:	08093cc0 	call	8093cc <__ltdf2>
  803e14:	103cab16 	blt	r2,zero,8030c4 <_dtoa_r+0x6dc>
  803e18:	0009883a 	mov	r4,zero
  803e1c:	980b883a 	mov	r5,r19
  803e20:	b80f883a 	mov	r7,r23
  803e24:	b00d883a 	mov	r6,r22
  803e28:	0808a9c0 	call	808a9c <__subdf3>
  803e2c:	180b883a 	mov	r5,r3
  803e30:	880f883a 	mov	r7,r17
  803e34:	1009883a 	mov	r4,r2
  803e38:	800d883a 	mov	r6,r16
  803e3c:	08092bc0 	call	8092bc <__gtdf2>
  803e40:	00bc470e 	bge	zero,r2,802f60 <_dtoa_r+0x578>
  803e44:	00c00c04 	movi	r3,48
  803e48:	e73fffc4 	addi	fp,fp,-1
  803e4c:	e0800007 	ldb	r2,0(fp)
  803e50:	10fffd26 	beq	r2,r3,803e48 <_dtoa_r+0x1460>
  803e54:	d9800417 	ldw	r6,16(sp)
  803e58:	e7000044 	addi	fp,fp,1
  803e5c:	d9800d15 	stw	r6,52(sp)
  803e60:	003cab06 	br	803110 <_dtoa_r+0x728>
  803e64:	d8c00f17 	ldw	r3,60(sp)
  803e68:	d9001117 	ldw	r4,68(sp)
  803e6c:	20e1c83a 	sub	r16,r4,r3
  803e70:	0007883a 	mov	r3,zero
  803e74:	003d9b06 	br	8034e4 <_dtoa_r+0xafc>
  803e78:	00800e44 	movi	r2,57
  803e7c:	b0800005 	stb	r2,0(r22)
  803e80:	b5800044 	addi	r22,r22,1
  803e84:	003dc106 	br	80358c <_dtoa_r+0xba4>
  803e88:	05800084 	movi	r22,2
  803e8c:	003bf706 	br	802e6c <_dtoa_r+0x484>
  803e90:	d9000f17 	ldw	r4,60(sp)
  803e94:	013c000e 	bge	zero,r4,802e98 <_dtoa_r+0x4b0>
  803e98:	d9800e17 	ldw	r6,56(sp)
  803e9c:	01bc300e 	bge	zero,r6,802f60 <_dtoa_r+0x578>
  803ea0:	0005883a 	mov	r2,zero
  803ea4:	00d00934 	movhi	r3,16420
  803ea8:	a80b883a 	mov	r5,r21
  803eac:	180f883a 	mov	r7,r3
  803eb0:	a009883a 	mov	r4,r20
  803eb4:	100d883a 	mov	r6,r2
  803eb8:	0808b900 	call	808b90 <__muldf3>
  803ebc:	b1000044 	addi	r4,r22,1
  803ec0:	1021883a 	mov	r16,r2
  803ec4:	1823883a 	mov	r17,r3
  803ec8:	08094540 	call	809454 <__floatsidf>
  803ecc:	880b883a 	mov	r5,r17
  803ed0:	8009883a 	mov	r4,r16
  803ed4:	180f883a 	mov	r7,r3
  803ed8:	100d883a 	mov	r6,r2
  803edc:	0808b900 	call	808b90 <__muldf3>
  803ee0:	0011883a 	mov	r8,zero
  803ee4:	02500734 	movhi	r9,16412
  803ee8:	180b883a 	mov	r5,r3
  803eec:	480f883a 	mov	r7,r9
  803ef0:	1009883a 	mov	r4,r2
  803ef4:	400d883a 	mov	r6,r8
  803ef8:	0808b1c0 	call	808b1c <__adddf3>
  803efc:	102d883a 	mov	r22,r2
  803f00:	00bf3034 	movhi	r2,64704
  803f04:	10ef883a 	add	r23,r2,r3
  803f08:	d8800d17 	ldw	r2,52(sp)
  803f0c:	d8c00e17 	ldw	r3,56(sp)
  803f10:	8029883a 	mov	r20,r16
  803f14:	10bfffc4 	addi	r2,r2,-1
  803f18:	882b883a 	mov	r21,r17
  803f1c:	d8800415 	stw	r2,16(sp)
  803f20:	d8c00315 	stw	r3,12(sp)
  803f24:	003e8306 	br	803934 <_dtoa_r+0xf4c>
  803f28:	d8800117 	ldw	r2,4(sp)
  803f2c:	dc001117 	ldw	r16,68(sp)
  803f30:	dc801017 	ldw	r18,64(sp)
  803f34:	00c00d84 	movi	r3,54
  803f38:	1887c83a 	sub	r3,r3,r2
  803f3c:	003d6906 	br	8034e4 <_dtoa_r+0xafc>
  803f40:	01800044 	movi	r6,1
  803f44:	3021883a 	mov	r16,r6
  803f48:	d9800f15 	stw	r6,60(sp)
  803f4c:	d9802615 	stw	r6,152(sp)
  803f50:	d9800e15 	stw	r6,56(sp)
  803f54:	003b9306 	br	802da4 <_dtoa_r+0x3bc>
  803f58:	b021883a 	mov	r16,r22
  803f5c:	dd800f15 	stw	r22,60(sp)
  803f60:	003b9006 	br	802da4 <_dtoa_r+0x3bc>
  803f64:	103e221e 	bne	r2,zero,8037f0 <_dtoa_r+0xe08>
  803f68:	b880004c 	andi	r2,r23,1
  803f6c:	1005003a 	cmpeq	r2,r2,zero
  803f70:	103e1f1e 	bne	r2,zero,8037f0 <_dtoa_r+0xe08>
  803f74:	003e1b06 	br	8037e4 <_dtoa_r+0xdfc>
  803f78:	d9001617 	ldw	r4,88(sp)
  803f7c:	980b883a 	mov	r5,r19
  803f80:	01800284 	movi	r6,10
  803f84:	000f883a 	mov	r7,zero
  803f88:	08068d00 	call	8068d0 <__multadd>
  803f8c:	d8c00e17 	ldw	r3,56(sp)
  803f90:	1027883a 	mov	r19,r2
  803f94:	d8c00f15 	stw	r3,60(sp)
  803f98:	003cd306 	br	8032e8 <_dtoa_r+0x900>

00803f9c <_fflush_r>:
  803f9c:	defffb04 	addi	sp,sp,-20
  803fa0:	dcc00315 	stw	r19,12(sp)
  803fa4:	dc800215 	stw	r18,8(sp)
  803fa8:	dfc00415 	stw	ra,16(sp)
  803fac:	dc400115 	stw	r17,4(sp)
  803fb0:	dc000015 	stw	r16,0(sp)
  803fb4:	2027883a 	mov	r19,r4
  803fb8:	2825883a 	mov	r18,r5
  803fbc:	20000226 	beq	r4,zero,803fc8 <_fflush_r+0x2c>
  803fc0:	20800e17 	ldw	r2,56(r4)
  803fc4:	10005626 	beq	r2,zero,804120 <_fflush_r+0x184>
  803fc8:	9100030b 	ldhu	r4,12(r18)
  803fcc:	20ffffcc 	andi	r3,r4,65535
  803fd0:	18e0001c 	xori	r3,r3,32768
  803fd4:	18e00004 	addi	r3,r3,-32768
  803fd8:	1880020c 	andi	r2,r3,8
  803fdc:	1000261e 	bne	r2,zero,804078 <_fflush_r+0xdc>
  803fe0:	90c00117 	ldw	r3,4(r18)
  803fe4:	20820014 	ori	r2,r4,2048
  803fe8:	9080030d 	sth	r2,12(r18)
  803fec:	1009883a 	mov	r4,r2
  803ff0:	00c0400e 	bge	zero,r3,8040f4 <_fflush_r+0x158>
  803ff4:	92000a17 	ldw	r8,40(r18)
  803ff8:	40004026 	beq	r8,zero,8040fc <_fflush_r+0x160>
  803ffc:	2084000c 	andi	r2,r4,4096
  804000:	10005326 	beq	r2,zero,804150 <_fflush_r+0x1b4>
  804004:	94001417 	ldw	r16,80(r18)
  804008:	9080030b 	ldhu	r2,12(r18)
  80400c:	1080010c 	andi	r2,r2,4
  804010:	1000481e 	bne	r2,zero,804134 <_fflush_r+0x198>
  804014:	91400717 	ldw	r5,28(r18)
  804018:	9809883a 	mov	r4,r19
  80401c:	800d883a 	mov	r6,r16
  804020:	000f883a 	mov	r7,zero
  804024:	403ee83a 	callr	r8
  804028:	8080261e 	bne	r16,r2,8040c4 <_fflush_r+0x128>
  80402c:	9080030b 	ldhu	r2,12(r18)
  804030:	91000417 	ldw	r4,16(r18)
  804034:	90000115 	stw	zero,4(r18)
  804038:	10bdffcc 	andi	r2,r2,63487
  80403c:	10ffffcc 	andi	r3,r2,65535
  804040:	18c4000c 	andi	r3,r3,4096
  804044:	9080030d 	sth	r2,12(r18)
  804048:	91000015 	stw	r4,0(r18)
  80404c:	18002b26 	beq	r3,zero,8040fc <_fflush_r+0x160>
  804050:	0007883a 	mov	r3,zero
  804054:	1805883a 	mov	r2,r3
  804058:	94001415 	stw	r16,80(r18)
  80405c:	dfc00417 	ldw	ra,16(sp)
  804060:	dcc00317 	ldw	r19,12(sp)
  804064:	dc800217 	ldw	r18,8(sp)
  804068:	dc400117 	ldw	r17,4(sp)
  80406c:	dc000017 	ldw	r16,0(sp)
  804070:	dec00504 	addi	sp,sp,20
  804074:	f800283a 	ret
  804078:	94400417 	ldw	r17,16(r18)
  80407c:	88001f26 	beq	r17,zero,8040fc <_fflush_r+0x160>
  804080:	90800017 	ldw	r2,0(r18)
  804084:	18c000cc 	andi	r3,r3,3
  804088:	94400015 	stw	r17,0(r18)
  80408c:	1461c83a 	sub	r16,r2,r17
  804090:	18002526 	beq	r3,zero,804128 <_fflush_r+0x18c>
  804094:	0005883a 	mov	r2,zero
  804098:	90800215 	stw	r2,8(r18)
  80409c:	0400170e 	bge	zero,r16,8040fc <_fflush_r+0x160>
  8040a0:	90c00917 	ldw	r3,36(r18)
  8040a4:	91400717 	ldw	r5,28(r18)
  8040a8:	880d883a 	mov	r6,r17
  8040ac:	800f883a 	mov	r7,r16
  8040b0:	9809883a 	mov	r4,r19
  8040b4:	183ee83a 	callr	r3
  8040b8:	88a3883a 	add	r17,r17,r2
  8040bc:	80a1c83a 	sub	r16,r16,r2
  8040c0:	00bff616 	blt	zero,r2,80409c <_fflush_r+0x100>
  8040c4:	9080030b 	ldhu	r2,12(r18)
  8040c8:	00ffffc4 	movi	r3,-1
  8040cc:	10801014 	ori	r2,r2,64
  8040d0:	9080030d 	sth	r2,12(r18)
  8040d4:	1805883a 	mov	r2,r3
  8040d8:	dfc00417 	ldw	ra,16(sp)
  8040dc:	dcc00317 	ldw	r19,12(sp)
  8040e0:	dc800217 	ldw	r18,8(sp)
  8040e4:	dc400117 	ldw	r17,4(sp)
  8040e8:	dc000017 	ldw	r16,0(sp)
  8040ec:	dec00504 	addi	sp,sp,20
  8040f0:	f800283a 	ret
  8040f4:	90800f17 	ldw	r2,60(r18)
  8040f8:	00bfbe16 	blt	zero,r2,803ff4 <_fflush_r+0x58>
  8040fc:	0007883a 	mov	r3,zero
  804100:	1805883a 	mov	r2,r3
  804104:	dfc00417 	ldw	ra,16(sp)
  804108:	dcc00317 	ldw	r19,12(sp)
  80410c:	dc800217 	ldw	r18,8(sp)
  804110:	dc400117 	ldw	r17,4(sp)
  804114:	dc000017 	ldw	r16,0(sp)
  804118:	dec00504 	addi	sp,sp,20
  80411c:	f800283a 	ret
  804120:	08042340 	call	804234 <__sinit>
  804124:	003fa806 	br	803fc8 <_fflush_r+0x2c>
  804128:	90800517 	ldw	r2,20(r18)
  80412c:	90800215 	stw	r2,8(r18)
  804130:	003fda06 	br	80409c <_fflush_r+0x100>
  804134:	90800117 	ldw	r2,4(r18)
  804138:	90c00c17 	ldw	r3,48(r18)
  80413c:	80a1c83a 	sub	r16,r16,r2
  804140:	183fb426 	beq	r3,zero,804014 <_fflush_r+0x78>
  804144:	90800f17 	ldw	r2,60(r18)
  804148:	80a1c83a 	sub	r16,r16,r2
  80414c:	003fb106 	br	804014 <_fflush_r+0x78>
  804150:	91400717 	ldw	r5,28(r18)
  804154:	9809883a 	mov	r4,r19
  804158:	000d883a 	mov	r6,zero
  80415c:	01c00044 	movi	r7,1
  804160:	403ee83a 	callr	r8
  804164:	1021883a 	mov	r16,r2
  804168:	00bfffc4 	movi	r2,-1
  80416c:	80800226 	beq	r16,r2,804178 <_fflush_r+0x1dc>
  804170:	92000a17 	ldw	r8,40(r18)
  804174:	003fa406 	br	804008 <_fflush_r+0x6c>
  804178:	98c00017 	ldw	r3,0(r19)
  80417c:	00800744 	movi	r2,29
  804180:	18bfde26 	beq	r3,r2,8040fc <_fflush_r+0x160>
  804184:	9080030b 	ldhu	r2,12(r18)
  804188:	8007883a 	mov	r3,r16
  80418c:	10801014 	ori	r2,r2,64
  804190:	9080030d 	sth	r2,12(r18)
  804194:	003fcf06 	br	8040d4 <_fflush_r+0x138>

00804198 <fflush>:
  804198:	01402034 	movhi	r5,128
  80419c:	294fe704 	addi	r5,r5,16284
  8041a0:	2007883a 	mov	r3,r4
  8041a4:	20000526 	beq	r4,zero,8041bc <fflush+0x24>
  8041a8:	00802074 	movhi	r2,129
  8041ac:	10ba7004 	addi	r2,r2,-5696
  8041b0:	11000017 	ldw	r4,0(r2)
  8041b4:	180b883a 	mov	r5,r3
  8041b8:	0803f9c1 	jmpi	803f9c <_fflush_r>
  8041bc:	00802074 	movhi	r2,129
  8041c0:	10ba7104 	addi	r2,r2,-5692
  8041c4:	11000017 	ldw	r4,0(r2)
  8041c8:	0804d9c1 	jmpi	804d9c <_fwalk_reent>

008041cc <std>:
  8041cc:	00802034 	movhi	r2,128
  8041d0:	109cc404 	addi	r2,r2,29456
  8041d4:	20800b15 	stw	r2,44(r4)
  8041d8:	00802034 	movhi	r2,128
  8041dc:	109cff04 	addi	r2,r2,29692
  8041e0:	20800815 	stw	r2,32(r4)
  8041e4:	00c02034 	movhi	r3,128
  8041e8:	18dce004 	addi	r3,r3,29568
  8041ec:	00802034 	movhi	r2,128
  8041f0:	109cc604 	addi	r2,r2,29464
  8041f4:	2140030d 	sth	r5,12(r4)
  8041f8:	2180038d 	sth	r6,14(r4)
  8041fc:	20c00915 	stw	r3,36(r4)
  804200:	20800a15 	stw	r2,40(r4)
  804204:	20000015 	stw	zero,0(r4)
  804208:	20000115 	stw	zero,4(r4)
  80420c:	20000215 	stw	zero,8(r4)
  804210:	20000415 	stw	zero,16(r4)
  804214:	20000515 	stw	zero,20(r4)
  804218:	20000615 	stw	zero,24(r4)
  80421c:	21000715 	stw	r4,28(r4)
  804220:	f800283a 	ret

00804224 <__sfp_lock_acquire>:
  804224:	f800283a 	ret

00804228 <__sfp_lock_release>:
  804228:	f800283a 	ret

0080422c <__sinit_lock_acquire>:
  80422c:	f800283a 	ret

00804230 <__sinit_lock_release>:
  804230:	f800283a 	ret

00804234 <__sinit>:
  804234:	20800e17 	ldw	r2,56(r4)
  804238:	defffd04 	addi	sp,sp,-12
  80423c:	dc400115 	stw	r17,4(sp)
  804240:	dc000015 	stw	r16,0(sp)
  804244:	dfc00215 	stw	ra,8(sp)
  804248:	04400044 	movi	r17,1
  80424c:	01400104 	movi	r5,4
  804250:	000d883a 	mov	r6,zero
  804254:	2021883a 	mov	r16,r4
  804258:	2200bb04 	addi	r8,r4,748
  80425c:	200f883a 	mov	r7,r4
  804260:	10000526 	beq	r2,zero,804278 <__sinit+0x44>
  804264:	dfc00217 	ldw	ra,8(sp)
  804268:	dc400117 	ldw	r17,4(sp)
  80426c:	dc000017 	ldw	r16,0(sp)
  804270:	dec00304 	addi	sp,sp,12
  804274:	f800283a 	ret
  804278:	21000117 	ldw	r4,4(r4)
  80427c:	00802034 	movhi	r2,128
  804280:	1090c604 	addi	r2,r2,17176
  804284:	00c000c4 	movi	r3,3
  804288:	80800f15 	stw	r2,60(r16)
  80428c:	80c0b915 	stw	r3,740(r16)
  804290:	8200ba15 	stw	r8,744(r16)
  804294:	84400e15 	stw	r17,56(r16)
  804298:	8000b815 	stw	zero,736(r16)
  80429c:	08041cc0 	call	8041cc <std>
  8042a0:	81000217 	ldw	r4,8(r16)
  8042a4:	880d883a 	mov	r6,r17
  8042a8:	800f883a 	mov	r7,r16
  8042ac:	01400284 	movi	r5,10
  8042b0:	08041cc0 	call	8041cc <std>
  8042b4:	81000317 	ldw	r4,12(r16)
  8042b8:	800f883a 	mov	r7,r16
  8042bc:	01400484 	movi	r5,18
  8042c0:	01800084 	movi	r6,2
  8042c4:	dfc00217 	ldw	ra,8(sp)
  8042c8:	dc400117 	ldw	r17,4(sp)
  8042cc:	dc000017 	ldw	r16,0(sp)
  8042d0:	dec00304 	addi	sp,sp,12
  8042d4:	08041cc1 	jmpi	8041cc <std>

008042d8 <__fp_lock>:
  8042d8:	0005883a 	mov	r2,zero
  8042dc:	f800283a 	ret

008042e0 <__fp_unlock>:
  8042e0:	0005883a 	mov	r2,zero
  8042e4:	f800283a 	ret

008042e8 <__fp_unlock_all>:
  8042e8:	00802074 	movhi	r2,129
  8042ec:	10ba7004 	addi	r2,r2,-5696
  8042f0:	11000017 	ldw	r4,0(r2)
  8042f4:	01402034 	movhi	r5,128
  8042f8:	2950b804 	addi	r5,r5,17120
  8042fc:	0804e641 	jmpi	804e64 <_fwalk>

00804300 <__fp_lock_all>:
  804300:	00802074 	movhi	r2,129
  804304:	10ba7004 	addi	r2,r2,-5696
  804308:	11000017 	ldw	r4,0(r2)
  80430c:	01402034 	movhi	r5,128
  804310:	2950b604 	addi	r5,r5,17112
  804314:	0804e641 	jmpi	804e64 <_fwalk>

00804318 <_cleanup_r>:
  804318:	01402034 	movhi	r5,128
  80431c:	295df604 	addi	r5,r5,30680
  804320:	0804e641 	jmpi	804e64 <_fwalk>

00804324 <_cleanup>:
  804324:	00802074 	movhi	r2,129
  804328:	10ba7104 	addi	r2,r2,-5692
  80432c:	11000017 	ldw	r4,0(r2)
  804330:	08043181 	jmpi	804318 <_cleanup_r>

00804334 <__sfmoreglue>:
  804334:	defffc04 	addi	sp,sp,-16
  804338:	dc000015 	stw	r16,0(sp)
  80433c:	2821883a 	mov	r16,r5
  804340:	dc400115 	stw	r17,4(sp)
  804344:	01401704 	movi	r5,92
  804348:	2023883a 	mov	r17,r4
  80434c:	8009883a 	mov	r4,r16
  804350:	dfc00315 	stw	ra,12(sp)
  804354:	dcc00215 	stw	r19,8(sp)
  804358:	08099040 	call	809904 <__mulsi3>
  80435c:	11400304 	addi	r5,r2,12
  804360:	8809883a 	mov	r4,r17
  804364:	1027883a 	mov	r19,r2
  804368:	08051740 	call	805174 <_malloc_r>
  80436c:	10c00304 	addi	r3,r2,12
  804370:	1023883a 	mov	r17,r2
  804374:	1809883a 	mov	r4,r3
  804378:	980d883a 	mov	r6,r19
  80437c:	000b883a 	mov	r5,zero
  804380:	10000b26 	beq	r2,zero,8043b0 <__sfmoreglue+0x7c>
  804384:	14000115 	stw	r16,4(r2)
  804388:	10c00215 	stw	r3,8(r2)
  80438c:	10000015 	stw	zero,0(r2)
  804390:	0805b180 	call	805b18 <memset>
  804394:	8805883a 	mov	r2,r17
  804398:	dfc00317 	ldw	ra,12(sp)
  80439c:	dcc00217 	ldw	r19,8(sp)
  8043a0:	dc400117 	ldw	r17,4(sp)
  8043a4:	dc000017 	ldw	r16,0(sp)
  8043a8:	dec00404 	addi	sp,sp,16
  8043ac:	f800283a 	ret
  8043b0:	0023883a 	mov	r17,zero
  8043b4:	8805883a 	mov	r2,r17
  8043b8:	dfc00317 	ldw	ra,12(sp)
  8043bc:	dcc00217 	ldw	r19,8(sp)
  8043c0:	dc400117 	ldw	r17,4(sp)
  8043c4:	dc000017 	ldw	r16,0(sp)
  8043c8:	dec00404 	addi	sp,sp,16
  8043cc:	f800283a 	ret

008043d0 <__sfp>:
  8043d0:	defffd04 	addi	sp,sp,-12
  8043d4:	00802074 	movhi	r2,129
  8043d8:	10ba7104 	addi	r2,r2,-5692
  8043dc:	dc000015 	stw	r16,0(sp)
  8043e0:	14000017 	ldw	r16,0(r2)
  8043e4:	dc400115 	stw	r17,4(sp)
  8043e8:	dfc00215 	stw	ra,8(sp)
  8043ec:	80800e17 	ldw	r2,56(r16)
  8043f0:	2023883a 	mov	r17,r4
  8043f4:	10002626 	beq	r2,zero,804490 <__sfp+0xc0>
  8043f8:	8400b804 	addi	r16,r16,736
  8043fc:	80800117 	ldw	r2,4(r16)
  804400:	81000217 	ldw	r4,8(r16)
  804404:	10ffffc4 	addi	r3,r2,-1
  804408:	18000916 	blt	r3,zero,804430 <__sfp+0x60>
  80440c:	2080030f 	ldh	r2,12(r4)
  804410:	10000b26 	beq	r2,zero,804440 <__sfp+0x70>
  804414:	017fffc4 	movi	r5,-1
  804418:	00000206 	br	804424 <__sfp+0x54>
  80441c:	2080030f 	ldh	r2,12(r4)
  804420:	10000726 	beq	r2,zero,804440 <__sfp+0x70>
  804424:	18ffffc4 	addi	r3,r3,-1
  804428:	21001704 	addi	r4,r4,92
  80442c:	197ffb1e 	bne	r3,r5,80441c <__sfp+0x4c>
  804430:	80800017 	ldw	r2,0(r16)
  804434:	10001926 	beq	r2,zero,80449c <__sfp+0xcc>
  804438:	1021883a 	mov	r16,r2
  80443c:	003fef06 	br	8043fc <__sfp+0x2c>
  804440:	00bfffc4 	movi	r2,-1
  804444:	00c00044 	movi	r3,1
  804448:	2080038d 	sth	r2,14(r4)
  80444c:	20c0030d 	sth	r3,12(r4)
  804450:	20000015 	stw	zero,0(r4)
  804454:	20000215 	stw	zero,8(r4)
  804458:	20000115 	stw	zero,4(r4)
  80445c:	20000415 	stw	zero,16(r4)
  804460:	20000515 	stw	zero,20(r4)
  804464:	20000615 	stw	zero,24(r4)
  804468:	20000c15 	stw	zero,48(r4)
  80446c:	20000d15 	stw	zero,52(r4)
  804470:	20001115 	stw	zero,68(r4)
  804474:	20001215 	stw	zero,72(r4)
  804478:	2005883a 	mov	r2,r4
  80447c:	dfc00217 	ldw	ra,8(sp)
  804480:	dc400117 	ldw	r17,4(sp)
  804484:	dc000017 	ldw	r16,0(sp)
  804488:	dec00304 	addi	sp,sp,12
  80448c:	f800283a 	ret
  804490:	8009883a 	mov	r4,r16
  804494:	08042340 	call	804234 <__sinit>
  804498:	003fd706 	br	8043f8 <__sfp+0x28>
  80449c:	8809883a 	mov	r4,r17
  8044a0:	01400104 	movi	r5,4
  8044a4:	08043340 	call	804334 <__sfmoreglue>
  8044a8:	80800015 	stw	r2,0(r16)
  8044ac:	103fe21e 	bne	r2,zero,804438 <__sfp+0x68>
  8044b0:	00800304 	movi	r2,12
  8044b4:	0009883a 	mov	r4,zero
  8044b8:	88800015 	stw	r2,0(r17)
  8044bc:	003fee06 	br	804478 <__sfp+0xa8>

008044c0 <_malloc_trim_r>:
  8044c0:	defffb04 	addi	sp,sp,-20
  8044c4:	dcc00315 	stw	r19,12(sp)
  8044c8:	04c02074 	movhi	r19,129
  8044cc:	9cf4cb04 	addi	r19,r19,-11476
  8044d0:	dc800215 	stw	r18,8(sp)
  8044d4:	dc400115 	stw	r17,4(sp)
  8044d8:	dc000015 	stw	r16,0(sp)
  8044dc:	2823883a 	mov	r17,r5
  8044e0:	2025883a 	mov	r18,r4
  8044e4:	dfc00415 	stw	ra,16(sp)
  8044e8:	080a6880 	call	80a688 <__malloc_lock>
  8044ec:	98800217 	ldw	r2,8(r19)
  8044f0:	9009883a 	mov	r4,r18
  8044f4:	000b883a 	mov	r5,zero
  8044f8:	10c00117 	ldw	r3,4(r2)
  8044fc:	00bfff04 	movi	r2,-4
  804500:	18a0703a 	and	r16,r3,r2
  804504:	8463c83a 	sub	r17,r16,r17
  804508:	8c43fbc4 	addi	r17,r17,4079
  80450c:	8822d33a 	srli	r17,r17,12
  804510:	0083ffc4 	movi	r2,4095
  804514:	8c7fffc4 	addi	r17,r17,-1
  804518:	8822933a 	slli	r17,r17,12
  80451c:	1440060e 	bge	r2,r17,804538 <_malloc_trim_r+0x78>
  804520:	08072a00 	call	8072a0 <_sbrk_r>
  804524:	98c00217 	ldw	r3,8(r19)
  804528:	9009883a 	mov	r4,r18
  80452c:	044bc83a 	sub	r5,zero,r17
  804530:	80c7883a 	add	r3,r16,r3
  804534:	10c00926 	beq	r2,r3,80455c <_malloc_trim_r+0x9c>
  804538:	080a6a80 	call	80a6a8 <__malloc_unlock>
  80453c:	0005883a 	mov	r2,zero
  804540:	dfc00417 	ldw	ra,16(sp)
  804544:	dcc00317 	ldw	r19,12(sp)
  804548:	dc800217 	ldw	r18,8(sp)
  80454c:	dc400117 	ldw	r17,4(sp)
  804550:	dc000017 	ldw	r16,0(sp)
  804554:	dec00504 	addi	sp,sp,20
  804558:	f800283a 	ret
  80455c:	9009883a 	mov	r4,r18
  804560:	08072a00 	call	8072a0 <_sbrk_r>
  804564:	844dc83a 	sub	r6,r16,r17
  804568:	00ffffc4 	movi	r3,-1
  80456c:	9009883a 	mov	r4,r18
  804570:	000b883a 	mov	r5,zero
  804574:	01c02074 	movhi	r7,129
  804578:	39c14504 	addi	r7,r7,1300
  80457c:	31800054 	ori	r6,r6,1
  804580:	10c00926 	beq	r2,r3,8045a8 <_malloc_trim_r+0xe8>
  804584:	38800017 	ldw	r2,0(r7)
  804588:	98c00217 	ldw	r3,8(r19)
  80458c:	9009883a 	mov	r4,r18
  804590:	1445c83a 	sub	r2,r2,r17
  804594:	38800015 	stw	r2,0(r7)
  804598:	19800115 	stw	r6,4(r3)
  80459c:	080a6a80 	call	80a6a8 <__malloc_unlock>
  8045a0:	00800044 	movi	r2,1
  8045a4:	003fe606 	br	804540 <_malloc_trim_r+0x80>
  8045a8:	08072a00 	call	8072a0 <_sbrk_r>
  8045ac:	99800217 	ldw	r6,8(r19)
  8045b0:	100f883a 	mov	r7,r2
  8045b4:	9009883a 	mov	r4,r18
  8045b8:	1187c83a 	sub	r3,r2,r6
  8045bc:	008003c4 	movi	r2,15
  8045c0:	19400054 	ori	r5,r3,1
  8045c4:	10ffdc0e 	bge	r2,r3,804538 <_malloc_trim_r+0x78>
  8045c8:	00802074 	movhi	r2,129
  8045cc:	10ba7504 	addi	r2,r2,-5676
  8045d0:	10c00017 	ldw	r3,0(r2)
  8045d4:	00802074 	movhi	r2,129
  8045d8:	10814504 	addi	r2,r2,1300
  8045dc:	31400115 	stw	r5,4(r6)
  8045e0:	38c7c83a 	sub	r3,r7,r3
  8045e4:	10c00015 	stw	r3,0(r2)
  8045e8:	003fd306 	br	804538 <_malloc_trim_r+0x78>

008045ec <_free_r>:
  8045ec:	defffd04 	addi	sp,sp,-12
  8045f0:	dc400115 	stw	r17,4(sp)
  8045f4:	dc000015 	stw	r16,0(sp)
  8045f8:	dfc00215 	stw	ra,8(sp)
  8045fc:	2821883a 	mov	r16,r5
  804600:	2023883a 	mov	r17,r4
  804604:	28005a26 	beq	r5,zero,804770 <_free_r+0x184>
  804608:	080a6880 	call	80a688 <__malloc_lock>
  80460c:	823ffe04 	addi	r8,r16,-8
  804610:	41400117 	ldw	r5,4(r8)
  804614:	00bfff84 	movi	r2,-2
  804618:	02802074 	movhi	r10,129
  80461c:	52b4cb04 	addi	r10,r10,-11476
  804620:	288e703a 	and	r7,r5,r2
  804624:	41cd883a 	add	r6,r8,r7
  804628:	30c00117 	ldw	r3,4(r6)
  80462c:	51000217 	ldw	r4,8(r10)
  804630:	00bfff04 	movi	r2,-4
  804634:	1892703a 	and	r9,r3,r2
  804638:	5017883a 	mov	r11,r10
  80463c:	31006726 	beq	r6,r4,8047dc <_free_r+0x1f0>
  804640:	2880004c 	andi	r2,r5,1
  804644:	1005003a 	cmpeq	r2,r2,zero
  804648:	32400115 	stw	r9,4(r6)
  80464c:	10001a1e 	bne	r2,zero,8046b8 <_free_r+0xcc>
  804650:	000b883a 	mov	r5,zero
  804654:	3247883a 	add	r3,r6,r9
  804658:	18800117 	ldw	r2,4(r3)
  80465c:	1080004c 	andi	r2,r2,1
  804660:	1000231e 	bne	r2,zero,8046f0 <_free_r+0x104>
  804664:	280ac03a 	cmpne	r5,r5,zero
  804668:	3a4f883a 	add	r7,r7,r9
  80466c:	2800451e 	bne	r5,zero,804784 <_free_r+0x198>
  804670:	31000217 	ldw	r4,8(r6)
  804674:	00802074 	movhi	r2,129
  804678:	10b4cd04 	addi	r2,r2,-11468
  80467c:	20807b26 	beq	r4,r2,80486c <_free_r+0x280>
  804680:	30800317 	ldw	r2,12(r6)
  804684:	3a07883a 	add	r3,r7,r8
  804688:	19c00015 	stw	r7,0(r3)
  80468c:	11000215 	stw	r4,8(r2)
  804690:	20800315 	stw	r2,12(r4)
  804694:	38800054 	ori	r2,r7,1
  804698:	40800115 	stw	r2,4(r8)
  80469c:	28001a26 	beq	r5,zero,804708 <_free_r+0x11c>
  8046a0:	8809883a 	mov	r4,r17
  8046a4:	dfc00217 	ldw	ra,8(sp)
  8046a8:	dc400117 	ldw	r17,4(sp)
  8046ac:	dc000017 	ldw	r16,0(sp)
  8046b0:	dec00304 	addi	sp,sp,12
  8046b4:	080a6a81 	jmpi	80a6a8 <__malloc_unlock>
  8046b8:	80bffe17 	ldw	r2,-8(r16)
  8046bc:	50c00204 	addi	r3,r10,8
  8046c0:	4091c83a 	sub	r8,r8,r2
  8046c4:	41000217 	ldw	r4,8(r8)
  8046c8:	388f883a 	add	r7,r7,r2
  8046cc:	20c06126 	beq	r4,r3,804854 <_free_r+0x268>
  8046d0:	40800317 	ldw	r2,12(r8)
  8046d4:	3247883a 	add	r3,r6,r9
  8046d8:	000b883a 	mov	r5,zero
  8046dc:	11000215 	stw	r4,8(r2)
  8046e0:	20800315 	stw	r2,12(r4)
  8046e4:	18800117 	ldw	r2,4(r3)
  8046e8:	1080004c 	andi	r2,r2,1
  8046ec:	103fdd26 	beq	r2,zero,804664 <_free_r+0x78>
  8046f0:	38800054 	ori	r2,r7,1
  8046f4:	3a07883a 	add	r3,r7,r8
  8046f8:	280ac03a 	cmpne	r5,r5,zero
  8046fc:	40800115 	stw	r2,4(r8)
  804700:	19c00015 	stw	r7,0(r3)
  804704:	283fe61e 	bne	r5,zero,8046a0 <_free_r+0xb4>
  804708:	00807fc4 	movi	r2,511
  80470c:	11c01f2e 	bgeu	r2,r7,80478c <_free_r+0x1a0>
  804710:	3806d27a 	srli	r3,r7,9
  804714:	1800481e 	bne	r3,zero,804838 <_free_r+0x24c>
  804718:	3804d0fa 	srli	r2,r7,3
  80471c:	100690fa 	slli	r3,r2,3
  804720:	1acd883a 	add	r6,r3,r11
  804724:	31400217 	ldw	r5,8(r6)
  804728:	31405926 	beq	r6,r5,804890 <_free_r+0x2a4>
  80472c:	28800117 	ldw	r2,4(r5)
  804730:	00ffff04 	movi	r3,-4
  804734:	10c4703a 	and	r2,r2,r3
  804738:	3880022e 	bgeu	r7,r2,804744 <_free_r+0x158>
  80473c:	29400217 	ldw	r5,8(r5)
  804740:	317ffa1e 	bne	r6,r5,80472c <_free_r+0x140>
  804744:	29800317 	ldw	r6,12(r5)
  804748:	41800315 	stw	r6,12(r8)
  80474c:	41400215 	stw	r5,8(r8)
  804750:	8809883a 	mov	r4,r17
  804754:	2a000315 	stw	r8,12(r5)
  804758:	32000215 	stw	r8,8(r6)
  80475c:	dfc00217 	ldw	ra,8(sp)
  804760:	dc400117 	ldw	r17,4(sp)
  804764:	dc000017 	ldw	r16,0(sp)
  804768:	dec00304 	addi	sp,sp,12
  80476c:	080a6a81 	jmpi	80a6a8 <__malloc_unlock>
  804770:	dfc00217 	ldw	ra,8(sp)
  804774:	dc400117 	ldw	r17,4(sp)
  804778:	dc000017 	ldw	r16,0(sp)
  80477c:	dec00304 	addi	sp,sp,12
  804780:	f800283a 	ret
  804784:	31000217 	ldw	r4,8(r6)
  804788:	003fbd06 	br	804680 <_free_r+0x94>
  80478c:	3806d0fa 	srli	r3,r7,3
  804790:	00800044 	movi	r2,1
  804794:	51400117 	ldw	r5,4(r10)
  804798:	180890fa 	slli	r4,r3,3
  80479c:	1807d0ba 	srai	r3,r3,2
  8047a0:	22c9883a 	add	r4,r4,r11
  8047a4:	21800217 	ldw	r6,8(r4)
  8047a8:	10c4983a 	sll	r2,r2,r3
  8047ac:	41000315 	stw	r4,12(r8)
  8047b0:	41800215 	stw	r6,8(r8)
  8047b4:	288ab03a 	or	r5,r5,r2
  8047b8:	22000215 	stw	r8,8(r4)
  8047bc:	8809883a 	mov	r4,r17
  8047c0:	51400115 	stw	r5,4(r10)
  8047c4:	32000315 	stw	r8,12(r6)
  8047c8:	dfc00217 	ldw	ra,8(sp)
  8047cc:	dc400117 	ldw	r17,4(sp)
  8047d0:	dc000017 	ldw	r16,0(sp)
  8047d4:	dec00304 	addi	sp,sp,12
  8047d8:	080a6a81 	jmpi	80a6a8 <__malloc_unlock>
  8047dc:	2880004c 	andi	r2,r5,1
  8047e0:	3a4d883a 	add	r6,r7,r9
  8047e4:	1000071e 	bne	r2,zero,804804 <_free_r+0x218>
  8047e8:	80bffe17 	ldw	r2,-8(r16)
  8047ec:	4091c83a 	sub	r8,r8,r2
  8047f0:	41000317 	ldw	r4,12(r8)
  8047f4:	40c00217 	ldw	r3,8(r8)
  8047f8:	308d883a 	add	r6,r6,r2
  8047fc:	20c00215 	stw	r3,8(r4)
  804800:	19000315 	stw	r4,12(r3)
  804804:	00802074 	movhi	r2,129
  804808:	10ba7404 	addi	r2,r2,-5680
  80480c:	11000017 	ldw	r4,0(r2)
  804810:	30c00054 	ori	r3,r6,1
  804814:	52000215 	stw	r8,8(r10)
  804818:	40c00115 	stw	r3,4(r8)
  80481c:	313fa036 	bltu	r6,r4,8046a0 <_free_r+0xb4>
  804820:	00802074 	movhi	r2,129
  804824:	10813b04 	addi	r2,r2,1260
  804828:	11400017 	ldw	r5,0(r2)
  80482c:	8809883a 	mov	r4,r17
  804830:	08044c00 	call	8044c0 <_malloc_trim_r>
  804834:	003f9a06 	br	8046a0 <_free_r+0xb4>
  804838:	00800104 	movi	r2,4
  80483c:	10c0072e 	bgeu	r2,r3,80485c <_free_r+0x270>
  804840:	00800504 	movi	r2,20
  804844:	10c01936 	bltu	r2,r3,8048ac <_free_r+0x2c0>
  804848:	188016c4 	addi	r2,r3,91
  80484c:	100690fa 	slli	r3,r2,3
  804850:	003fb306 	br	804720 <_free_r+0x134>
  804854:	01400044 	movi	r5,1
  804858:	003f7e06 	br	804654 <_free_r+0x68>
  80485c:	3804d1ba 	srli	r2,r7,6
  804860:	10800e04 	addi	r2,r2,56
  804864:	100690fa 	slli	r3,r2,3
  804868:	003fad06 	br	804720 <_free_r+0x134>
  80486c:	22000315 	stw	r8,12(r4)
  804870:	22000215 	stw	r8,8(r4)
  804874:	3a05883a 	add	r2,r7,r8
  804878:	38c00054 	ori	r3,r7,1
  80487c:	11c00015 	stw	r7,0(r2)
  804880:	41000215 	stw	r4,8(r8)
  804884:	40c00115 	stw	r3,4(r8)
  804888:	41000315 	stw	r4,12(r8)
  80488c:	003f8406 	br	8046a0 <_free_r+0xb4>
  804890:	1005d0ba 	srai	r2,r2,2
  804894:	00c00044 	movi	r3,1
  804898:	51000117 	ldw	r4,4(r10)
  80489c:	1886983a 	sll	r3,r3,r2
  8048a0:	20c8b03a 	or	r4,r4,r3
  8048a4:	51000115 	stw	r4,4(r10)
  8048a8:	003fa706 	br	804748 <_free_r+0x15c>
  8048ac:	00801504 	movi	r2,84
  8048b0:	10c00436 	bltu	r2,r3,8048c4 <_free_r+0x2d8>
  8048b4:	3804d33a 	srli	r2,r7,12
  8048b8:	10801b84 	addi	r2,r2,110
  8048bc:	100690fa 	slli	r3,r2,3
  8048c0:	003f9706 	br	804720 <_free_r+0x134>
  8048c4:	00805504 	movi	r2,340
  8048c8:	10c00436 	bltu	r2,r3,8048dc <_free_r+0x2f0>
  8048cc:	3804d3fa 	srli	r2,r7,15
  8048d0:	10801dc4 	addi	r2,r2,119
  8048d4:	100690fa 	slli	r3,r2,3
  8048d8:	003f9106 	br	804720 <_free_r+0x134>
  8048dc:	00815504 	movi	r2,1364
  8048e0:	10c0032e 	bgeu	r2,r3,8048f0 <_free_r+0x304>
  8048e4:	00801f84 	movi	r2,126
  8048e8:	00c0fc04 	movi	r3,1008
  8048ec:	003f8c06 	br	804720 <_free_r+0x134>
  8048f0:	3804d4ba 	srli	r2,r7,18
  8048f4:	10801f04 	addi	r2,r2,124
  8048f8:	100690fa 	slli	r3,r2,3
  8048fc:	003f8806 	br	804720 <_free_r+0x134>

00804900 <__sfvwrite_r>:
  804900:	30800217 	ldw	r2,8(r6)
  804904:	defff504 	addi	sp,sp,-44
  804908:	df000915 	stw	fp,36(sp)
  80490c:	dd800715 	stw	r22,28(sp)
  804910:	dc800315 	stw	r18,12(sp)
  804914:	dfc00a15 	stw	ra,40(sp)
  804918:	ddc00815 	stw	r23,32(sp)
  80491c:	dd400615 	stw	r21,24(sp)
  804920:	dd000515 	stw	r20,20(sp)
  804924:	dcc00415 	stw	r19,16(sp)
  804928:	dc400215 	stw	r17,8(sp)
  80492c:	dc000115 	stw	r16,4(sp)
  804930:	302d883a 	mov	r22,r6
  804934:	2039883a 	mov	fp,r4
  804938:	2825883a 	mov	r18,r5
  80493c:	10001c26 	beq	r2,zero,8049b0 <__sfvwrite_r+0xb0>
  804940:	29c0030b 	ldhu	r7,12(r5)
  804944:	3880020c 	andi	r2,r7,8
  804948:	10002726 	beq	r2,zero,8049e8 <__sfvwrite_r+0xe8>
  80494c:	28800417 	ldw	r2,16(r5)
  804950:	10002526 	beq	r2,zero,8049e8 <__sfvwrite_r+0xe8>
  804954:	3880008c 	andi	r2,r7,2
  804958:	b5400017 	ldw	r21,0(r22)
  80495c:	10002826 	beq	r2,zero,804a00 <__sfvwrite_r+0x100>
  804960:	0021883a 	mov	r16,zero
  804964:	0023883a 	mov	r17,zero
  804968:	880d883a 	mov	r6,r17
  80496c:	e009883a 	mov	r4,fp
  804970:	00810004 	movi	r2,1024
  804974:	80006e26 	beq	r16,zero,804b30 <__sfvwrite_r+0x230>
  804978:	800f883a 	mov	r7,r16
  80497c:	91400717 	ldw	r5,28(r18)
  804980:	1400012e 	bgeu	r2,r16,804988 <__sfvwrite_r+0x88>
  804984:	100f883a 	mov	r7,r2
  804988:	90c00917 	ldw	r3,36(r18)
  80498c:	183ee83a 	callr	r3
  804990:	1007883a 	mov	r3,r2
  804994:	80a1c83a 	sub	r16,r16,r2
  804998:	88a3883a 	add	r17,r17,r2
  80499c:	00806d0e 	bge	zero,r2,804b54 <__sfvwrite_r+0x254>
  8049a0:	b0800217 	ldw	r2,8(r22)
  8049a4:	10c5c83a 	sub	r2,r2,r3
  8049a8:	b0800215 	stw	r2,8(r22)
  8049ac:	103fee1e 	bne	r2,zero,804968 <__sfvwrite_r+0x68>
  8049b0:	0009883a 	mov	r4,zero
  8049b4:	2005883a 	mov	r2,r4
  8049b8:	dfc00a17 	ldw	ra,40(sp)
  8049bc:	df000917 	ldw	fp,36(sp)
  8049c0:	ddc00817 	ldw	r23,32(sp)
  8049c4:	dd800717 	ldw	r22,28(sp)
  8049c8:	dd400617 	ldw	r21,24(sp)
  8049cc:	dd000517 	ldw	r20,20(sp)
  8049d0:	dcc00417 	ldw	r19,16(sp)
  8049d4:	dc800317 	ldw	r18,12(sp)
  8049d8:	dc400217 	ldw	r17,8(sp)
  8049dc:	dc000117 	ldw	r16,4(sp)
  8049e0:	dec00b04 	addi	sp,sp,44
  8049e4:	f800283a 	ret
  8049e8:	08026680 	call	802668 <__swsetup_r>
  8049ec:	1000e41e 	bne	r2,zero,804d80 <__sfvwrite_r+0x480>
  8049f0:	91c0030b 	ldhu	r7,12(r18)
  8049f4:	b5400017 	ldw	r21,0(r22)
  8049f8:	3880008c 	andi	r2,r7,2
  8049fc:	103fd81e 	bne	r2,zero,804960 <__sfvwrite_r+0x60>
  804a00:	3880004c 	andi	r2,r7,1
  804a04:	1005003a 	cmpeq	r2,r2,zero
  804a08:	10005726 	beq	r2,zero,804b68 <__sfvwrite_r+0x268>
  804a0c:	0029883a 	mov	r20,zero
  804a10:	002f883a 	mov	r23,zero
  804a14:	a0004226 	beq	r20,zero,804b20 <__sfvwrite_r+0x220>
  804a18:	3880800c 	andi	r2,r7,512
  804a1c:	94000217 	ldw	r16,8(r18)
  804a20:	10008b26 	beq	r2,zero,804c50 <__sfvwrite_r+0x350>
  804a24:	800d883a 	mov	r6,r16
  804a28:	a400a536 	bltu	r20,r16,804cc0 <__sfvwrite_r+0x3c0>
  804a2c:	3881200c 	andi	r2,r7,1152
  804a30:	10002726 	beq	r2,zero,804ad0 <__sfvwrite_r+0x1d0>
  804a34:	90800517 	ldw	r2,20(r18)
  804a38:	92000417 	ldw	r8,16(r18)
  804a3c:	91400017 	ldw	r5,0(r18)
  804a40:	1087883a 	add	r3,r2,r2
  804a44:	1887883a 	add	r3,r3,r2
  804a48:	1808d7fa 	srli	r4,r3,31
  804a4c:	2a21c83a 	sub	r16,r5,r8
  804a50:	80800044 	addi	r2,r16,1
  804a54:	20c9883a 	add	r4,r4,r3
  804a58:	2027d07a 	srai	r19,r4,1
  804a5c:	a085883a 	add	r2,r20,r2
  804a60:	980d883a 	mov	r6,r19
  804a64:	9880022e 	bgeu	r19,r2,804a70 <__sfvwrite_r+0x170>
  804a68:	1027883a 	mov	r19,r2
  804a6c:	100d883a 	mov	r6,r2
  804a70:	3881000c 	andi	r2,r7,1024
  804a74:	1000b826 	beq	r2,zero,804d58 <__sfvwrite_r+0x458>
  804a78:	300b883a 	mov	r5,r6
  804a7c:	e009883a 	mov	r4,fp
  804a80:	08051740 	call	805174 <_malloc_r>
  804a84:	10003126 	beq	r2,zero,804b4c <__sfvwrite_r+0x24c>
  804a88:	91400417 	ldw	r5,16(r18)
  804a8c:	1009883a 	mov	r4,r2
  804a90:	800d883a 	mov	r6,r16
  804a94:	1023883a 	mov	r17,r2
  804a98:	08059980 	call	805998 <memcpy>
  804a9c:	90c0030b 	ldhu	r3,12(r18)
  804aa0:	00beffc4 	movi	r2,-1025
  804aa4:	1886703a 	and	r3,r3,r2
  804aa8:	18c02014 	ori	r3,r3,128
  804aac:	90c0030d 	sth	r3,12(r18)
  804ab0:	9c07c83a 	sub	r3,r19,r16
  804ab4:	8c05883a 	add	r2,r17,r16
  804ab8:	a00d883a 	mov	r6,r20
  804abc:	a021883a 	mov	r16,r20
  804ac0:	90800015 	stw	r2,0(r18)
  804ac4:	90c00215 	stw	r3,8(r18)
  804ac8:	94400415 	stw	r17,16(r18)
  804acc:	94c00515 	stw	r19,20(r18)
  804ad0:	91000017 	ldw	r4,0(r18)
  804ad4:	b80b883a 	mov	r5,r23
  804ad8:	a023883a 	mov	r17,r20
  804adc:	0805a380 	call	805a38 <memmove>
  804ae0:	90c00217 	ldw	r3,8(r18)
  804ae4:	90800017 	ldw	r2,0(r18)
  804ae8:	a027883a 	mov	r19,r20
  804aec:	1c07c83a 	sub	r3,r3,r16
  804af0:	1405883a 	add	r2,r2,r16
  804af4:	90c00215 	stw	r3,8(r18)
  804af8:	a021883a 	mov	r16,r20
  804afc:	90800015 	stw	r2,0(r18)
  804b00:	b0800217 	ldw	r2,8(r22)
  804b04:	1405c83a 	sub	r2,r2,r16
  804b08:	b0800215 	stw	r2,8(r22)
  804b0c:	103fa826 	beq	r2,zero,8049b0 <__sfvwrite_r+0xb0>
  804b10:	a469c83a 	sub	r20,r20,r17
  804b14:	91c0030b 	ldhu	r7,12(r18)
  804b18:	bcef883a 	add	r23,r23,r19
  804b1c:	a03fbe1e 	bne	r20,zero,804a18 <__sfvwrite_r+0x118>
  804b20:	adc00017 	ldw	r23,0(r21)
  804b24:	ad000117 	ldw	r20,4(r21)
  804b28:	ad400204 	addi	r21,r21,8
  804b2c:	003fb906 	br	804a14 <__sfvwrite_r+0x114>
  804b30:	ac400017 	ldw	r17,0(r21)
  804b34:	ac000117 	ldw	r16,4(r21)
  804b38:	ad400204 	addi	r21,r21,8
  804b3c:	003f8a06 	br	804968 <__sfvwrite_r+0x68>
  804b40:	91400417 	ldw	r5,16(r18)
  804b44:	e009883a 	mov	r4,fp
  804b48:	08045ec0 	call	8045ec <_free_r>
  804b4c:	00800304 	movi	r2,12
  804b50:	e0800015 	stw	r2,0(fp)
  804b54:	9080030b 	ldhu	r2,12(r18)
  804b58:	013fffc4 	movi	r4,-1
  804b5c:	10801014 	ori	r2,r2,64
  804b60:	9080030d 	sth	r2,12(r18)
  804b64:	003f9306 	br	8049b4 <__sfvwrite_r+0xb4>
  804b68:	0027883a 	mov	r19,zero
  804b6c:	002f883a 	mov	r23,zero
  804b70:	d8000015 	stw	zero,0(sp)
  804b74:	0029883a 	mov	r20,zero
  804b78:	98001e26 	beq	r19,zero,804bf4 <__sfvwrite_r+0x2f4>
  804b7c:	d8c00017 	ldw	r3,0(sp)
  804b80:	1804c03a 	cmpne	r2,r3,zero
  804b84:	10005e26 	beq	r2,zero,804d00 <__sfvwrite_r+0x400>
  804b88:	9821883a 	mov	r16,r19
  804b8c:	a4c0012e 	bgeu	r20,r19,804b94 <__sfvwrite_r+0x294>
  804b90:	a021883a 	mov	r16,r20
  804b94:	91000017 	ldw	r4,0(r18)
  804b98:	90800417 	ldw	r2,16(r18)
  804b9c:	91800217 	ldw	r6,8(r18)
  804ba0:	91c00517 	ldw	r7,20(r18)
  804ba4:	1100022e 	bgeu	r2,r4,804bb0 <__sfvwrite_r+0x2b0>
  804ba8:	31e3883a 	add	r17,r6,r7
  804bac:	8c001616 	blt	r17,r16,804c08 <__sfvwrite_r+0x308>
  804bb0:	81c03816 	blt	r16,r7,804c94 <__sfvwrite_r+0x394>
  804bb4:	90c00917 	ldw	r3,36(r18)
  804bb8:	91400717 	ldw	r5,28(r18)
  804bbc:	e009883a 	mov	r4,fp
  804bc0:	b80d883a 	mov	r6,r23
  804bc4:	183ee83a 	callr	r3
  804bc8:	1023883a 	mov	r17,r2
  804bcc:	00bfe10e 	bge	zero,r2,804b54 <__sfvwrite_r+0x254>
  804bd0:	a469c83a 	sub	r20,r20,r17
  804bd4:	a0001826 	beq	r20,zero,804c38 <__sfvwrite_r+0x338>
  804bd8:	b0800217 	ldw	r2,8(r22)
  804bdc:	1445c83a 	sub	r2,r2,r17
  804be0:	b0800215 	stw	r2,8(r22)
  804be4:	103f7226 	beq	r2,zero,8049b0 <__sfvwrite_r+0xb0>
  804be8:	9c67c83a 	sub	r19,r19,r17
  804bec:	bc6f883a 	add	r23,r23,r17
  804bf0:	983fe21e 	bne	r19,zero,804b7c <__sfvwrite_r+0x27c>
  804bf4:	adc00017 	ldw	r23,0(r21)
  804bf8:	acc00117 	ldw	r19,4(r21)
  804bfc:	ad400204 	addi	r21,r21,8
  804c00:	d8000015 	stw	zero,0(sp)
  804c04:	003fdc06 	br	804b78 <__sfvwrite_r+0x278>
  804c08:	b80b883a 	mov	r5,r23
  804c0c:	880d883a 	mov	r6,r17
  804c10:	0805a380 	call	805a38 <memmove>
  804c14:	90c00017 	ldw	r3,0(r18)
  804c18:	e009883a 	mov	r4,fp
  804c1c:	900b883a 	mov	r5,r18
  804c20:	1c47883a 	add	r3,r3,r17
  804c24:	90c00015 	stw	r3,0(r18)
  804c28:	0803f9c0 	call	803f9c <_fflush_r>
  804c2c:	103fc91e 	bne	r2,zero,804b54 <__sfvwrite_r+0x254>
  804c30:	a469c83a 	sub	r20,r20,r17
  804c34:	a03fe81e 	bne	r20,zero,804bd8 <__sfvwrite_r+0x2d8>
  804c38:	e009883a 	mov	r4,fp
  804c3c:	900b883a 	mov	r5,r18
  804c40:	0803f9c0 	call	803f9c <_fflush_r>
  804c44:	103fc31e 	bne	r2,zero,804b54 <__sfvwrite_r+0x254>
  804c48:	d8000015 	stw	zero,0(sp)
  804c4c:	003fe206 	br	804bd8 <__sfvwrite_r+0x2d8>
  804c50:	91000017 	ldw	r4,0(r18)
  804c54:	90800417 	ldw	r2,16(r18)
  804c58:	1100022e 	bgeu	r2,r4,804c64 <__sfvwrite_r+0x364>
  804c5c:	8023883a 	mov	r17,r16
  804c60:	85003136 	bltu	r16,r20,804d28 <__sfvwrite_r+0x428>
  804c64:	91c00517 	ldw	r7,20(r18)
  804c68:	a1c01836 	bltu	r20,r7,804ccc <__sfvwrite_r+0x3cc>
  804c6c:	90c00917 	ldw	r3,36(r18)
  804c70:	91400717 	ldw	r5,28(r18)
  804c74:	e009883a 	mov	r4,fp
  804c78:	b80d883a 	mov	r6,r23
  804c7c:	183ee83a 	callr	r3
  804c80:	1021883a 	mov	r16,r2
  804c84:	00bfb30e 	bge	zero,r2,804b54 <__sfvwrite_r+0x254>
  804c88:	1023883a 	mov	r17,r2
  804c8c:	1027883a 	mov	r19,r2
  804c90:	003f9b06 	br	804b00 <__sfvwrite_r+0x200>
  804c94:	b80b883a 	mov	r5,r23
  804c98:	800d883a 	mov	r6,r16
  804c9c:	0805a380 	call	805a38 <memmove>
  804ca0:	90c00217 	ldw	r3,8(r18)
  804ca4:	90800017 	ldw	r2,0(r18)
  804ca8:	8023883a 	mov	r17,r16
  804cac:	1c07c83a 	sub	r3,r3,r16
  804cb0:	1405883a 	add	r2,r2,r16
  804cb4:	90c00215 	stw	r3,8(r18)
  804cb8:	90800015 	stw	r2,0(r18)
  804cbc:	003fc406 	br	804bd0 <__sfvwrite_r+0x2d0>
  804cc0:	a00d883a 	mov	r6,r20
  804cc4:	a021883a 	mov	r16,r20
  804cc8:	003f8106 	br	804ad0 <__sfvwrite_r+0x1d0>
  804ccc:	b80b883a 	mov	r5,r23
  804cd0:	a00d883a 	mov	r6,r20
  804cd4:	0805a380 	call	805a38 <memmove>
  804cd8:	90c00217 	ldw	r3,8(r18)
  804cdc:	90800017 	ldw	r2,0(r18)
  804ce0:	a021883a 	mov	r16,r20
  804ce4:	1d07c83a 	sub	r3,r3,r20
  804ce8:	1505883a 	add	r2,r2,r20
  804cec:	a023883a 	mov	r17,r20
  804cf0:	a027883a 	mov	r19,r20
  804cf4:	90c00215 	stw	r3,8(r18)
  804cf8:	90800015 	stw	r2,0(r18)
  804cfc:	003f8006 	br	804b00 <__sfvwrite_r+0x200>
  804d00:	b809883a 	mov	r4,r23
  804d04:	01400284 	movi	r5,10
  804d08:	980d883a 	mov	r6,r19
  804d0c:	08058b40 	call	8058b4 <memchr>
  804d10:	10001726 	beq	r2,zero,804d70 <__sfvwrite_r+0x470>
  804d14:	15c5c83a 	sub	r2,r2,r23
  804d18:	15000044 	addi	r20,r2,1
  804d1c:	00800044 	movi	r2,1
  804d20:	d8800015 	stw	r2,0(sp)
  804d24:	003f9806 	br	804b88 <__sfvwrite_r+0x288>
  804d28:	b80b883a 	mov	r5,r23
  804d2c:	800d883a 	mov	r6,r16
  804d30:	0805a380 	call	805a38 <memmove>
  804d34:	90c00017 	ldw	r3,0(r18)
  804d38:	e009883a 	mov	r4,fp
  804d3c:	900b883a 	mov	r5,r18
  804d40:	1c07883a 	add	r3,r3,r16
  804d44:	90c00015 	stw	r3,0(r18)
  804d48:	8027883a 	mov	r19,r16
  804d4c:	0803f9c0 	call	803f9c <_fflush_r>
  804d50:	103f6b26 	beq	r2,zero,804b00 <__sfvwrite_r+0x200>
  804d54:	003f7f06 	br	804b54 <__sfvwrite_r+0x254>
  804d58:	400b883a 	mov	r5,r8
  804d5c:	e009883a 	mov	r4,fp
  804d60:	0806c3c0 	call	806c3c <_realloc_r>
  804d64:	103f7626 	beq	r2,zero,804b40 <__sfvwrite_r+0x240>
  804d68:	1023883a 	mov	r17,r2
  804d6c:	003f5006 	br	804ab0 <__sfvwrite_r+0x1b0>
  804d70:	00c00044 	movi	r3,1
  804d74:	9d000044 	addi	r20,r19,1
  804d78:	d8c00015 	stw	r3,0(sp)
  804d7c:	003f8206 	br	804b88 <__sfvwrite_r+0x288>
  804d80:	9080030b 	ldhu	r2,12(r18)
  804d84:	00c00244 	movi	r3,9
  804d88:	013fffc4 	movi	r4,-1
  804d8c:	10801014 	ori	r2,r2,64
  804d90:	9080030d 	sth	r2,12(r18)
  804d94:	e0c00015 	stw	r3,0(fp)
  804d98:	003f0606 	br	8049b4 <__sfvwrite_r+0xb4>

00804d9c <_fwalk_reent>:
  804d9c:	defff704 	addi	sp,sp,-36
  804da0:	dcc00315 	stw	r19,12(sp)
  804da4:	24c0b804 	addi	r19,r4,736
  804da8:	dd800615 	stw	r22,24(sp)
  804dac:	dd400515 	stw	r21,20(sp)
  804db0:	dfc00815 	stw	ra,32(sp)
  804db4:	ddc00715 	stw	r23,28(sp)
  804db8:	dd000415 	stw	r20,16(sp)
  804dbc:	dc800215 	stw	r18,8(sp)
  804dc0:	dc400115 	stw	r17,4(sp)
  804dc4:	dc000015 	stw	r16,0(sp)
  804dc8:	202b883a 	mov	r21,r4
  804dcc:	282d883a 	mov	r22,r5
  804dd0:	08042240 	call	804224 <__sfp_lock_acquire>
  804dd4:	98002126 	beq	r19,zero,804e5c <_fwalk_reent+0xc0>
  804dd8:	002f883a 	mov	r23,zero
  804ddc:	9c800117 	ldw	r18,4(r19)
  804de0:	9c000217 	ldw	r16,8(r19)
  804de4:	90bfffc4 	addi	r2,r18,-1
  804de8:	10000d16 	blt	r2,zero,804e20 <_fwalk_reent+0x84>
  804dec:	0023883a 	mov	r17,zero
  804df0:	053fffc4 	movi	r20,-1
  804df4:	8080030f 	ldh	r2,12(r16)
  804df8:	8c400044 	addi	r17,r17,1
  804dfc:	10000626 	beq	r2,zero,804e18 <_fwalk_reent+0x7c>
  804e00:	8080038f 	ldh	r2,14(r16)
  804e04:	800b883a 	mov	r5,r16
  804e08:	a809883a 	mov	r4,r21
  804e0c:	15000226 	beq	r2,r20,804e18 <_fwalk_reent+0x7c>
  804e10:	b03ee83a 	callr	r22
  804e14:	b8aeb03a 	or	r23,r23,r2
  804e18:	84001704 	addi	r16,r16,92
  804e1c:	947ff51e 	bne	r18,r17,804df4 <_fwalk_reent+0x58>
  804e20:	9cc00017 	ldw	r19,0(r19)
  804e24:	983fed1e 	bne	r19,zero,804ddc <_fwalk_reent+0x40>
  804e28:	08042280 	call	804228 <__sfp_lock_release>
  804e2c:	b805883a 	mov	r2,r23
  804e30:	dfc00817 	ldw	ra,32(sp)
  804e34:	ddc00717 	ldw	r23,28(sp)
  804e38:	dd800617 	ldw	r22,24(sp)
  804e3c:	dd400517 	ldw	r21,20(sp)
  804e40:	dd000417 	ldw	r20,16(sp)
  804e44:	dcc00317 	ldw	r19,12(sp)
  804e48:	dc800217 	ldw	r18,8(sp)
  804e4c:	dc400117 	ldw	r17,4(sp)
  804e50:	dc000017 	ldw	r16,0(sp)
  804e54:	dec00904 	addi	sp,sp,36
  804e58:	f800283a 	ret
  804e5c:	002f883a 	mov	r23,zero
  804e60:	003ff106 	br	804e28 <_fwalk_reent+0x8c>

00804e64 <_fwalk>:
  804e64:	defff804 	addi	sp,sp,-32
  804e68:	dcc00315 	stw	r19,12(sp)
  804e6c:	24c0b804 	addi	r19,r4,736
  804e70:	dd400515 	stw	r21,20(sp)
  804e74:	dfc00715 	stw	ra,28(sp)
  804e78:	dd800615 	stw	r22,24(sp)
  804e7c:	dd000415 	stw	r20,16(sp)
  804e80:	dc800215 	stw	r18,8(sp)
  804e84:	dc400115 	stw	r17,4(sp)
  804e88:	dc000015 	stw	r16,0(sp)
  804e8c:	282b883a 	mov	r21,r5
  804e90:	08042240 	call	804224 <__sfp_lock_acquire>
  804e94:	98001f26 	beq	r19,zero,804f14 <_fwalk+0xb0>
  804e98:	002d883a 	mov	r22,zero
  804e9c:	9c800117 	ldw	r18,4(r19)
  804ea0:	9c000217 	ldw	r16,8(r19)
  804ea4:	90bfffc4 	addi	r2,r18,-1
  804ea8:	10000c16 	blt	r2,zero,804edc <_fwalk+0x78>
  804eac:	0023883a 	mov	r17,zero
  804eb0:	053fffc4 	movi	r20,-1
  804eb4:	8080030f 	ldh	r2,12(r16)
  804eb8:	8c400044 	addi	r17,r17,1
  804ebc:	10000526 	beq	r2,zero,804ed4 <_fwalk+0x70>
  804ec0:	8080038f 	ldh	r2,14(r16)
  804ec4:	8009883a 	mov	r4,r16
  804ec8:	15000226 	beq	r2,r20,804ed4 <_fwalk+0x70>
  804ecc:	a83ee83a 	callr	r21
  804ed0:	b0acb03a 	or	r22,r22,r2
  804ed4:	84001704 	addi	r16,r16,92
  804ed8:	947ff61e 	bne	r18,r17,804eb4 <_fwalk+0x50>
  804edc:	9cc00017 	ldw	r19,0(r19)
  804ee0:	983fee1e 	bne	r19,zero,804e9c <_fwalk+0x38>
  804ee4:	08042280 	call	804228 <__sfp_lock_release>
  804ee8:	b005883a 	mov	r2,r22
  804eec:	dfc00717 	ldw	ra,28(sp)
  804ef0:	dd800617 	ldw	r22,24(sp)
  804ef4:	dd400517 	ldw	r21,20(sp)
  804ef8:	dd000417 	ldw	r20,16(sp)
  804efc:	dcc00317 	ldw	r19,12(sp)
  804f00:	dc800217 	ldw	r18,8(sp)
  804f04:	dc400117 	ldw	r17,4(sp)
  804f08:	dc000017 	ldw	r16,0(sp)
  804f0c:	dec00804 	addi	sp,sp,32
  804f10:	f800283a 	ret
  804f14:	002d883a 	mov	r22,zero
  804f18:	003ff206 	br	804ee4 <_fwalk+0x80>

00804f1c <__locale_charset>:
  804f1c:	d0a00317 	ldw	r2,-32756(gp)
  804f20:	f800283a 	ret

00804f24 <_localeconv_r>:
  804f24:	00802074 	movhi	r2,129
  804f28:	10b31704 	addi	r2,r2,-13220
  804f2c:	f800283a 	ret

00804f30 <localeconv>:
  804f30:	00802074 	movhi	r2,129
  804f34:	10ba7004 	addi	r2,r2,-5696
  804f38:	11000017 	ldw	r4,0(r2)
  804f3c:	0804f241 	jmpi	804f24 <_localeconv_r>

00804f40 <_setlocale_r>:
  804f40:	defffc04 	addi	sp,sp,-16
  804f44:	00c02074 	movhi	r3,129
  804f48:	18f31204 	addi	r3,r3,-13240
  804f4c:	dc800215 	stw	r18,8(sp)
  804f50:	dc400115 	stw	r17,4(sp)
  804f54:	dc000015 	stw	r16,0(sp)
  804f58:	2023883a 	mov	r17,r4
  804f5c:	2825883a 	mov	r18,r5
  804f60:	dfc00315 	stw	ra,12(sp)
  804f64:	3021883a 	mov	r16,r6
  804f68:	3009883a 	mov	r4,r6
  804f6c:	180b883a 	mov	r5,r3
  804f70:	30000926 	beq	r6,zero,804f98 <_setlocale_r+0x58>
  804f74:	080745c0 	call	80745c <strcmp>
  804f78:	8009883a 	mov	r4,r16
  804f7c:	01402074 	movhi	r5,129
  804f80:	2972fd04 	addi	r5,r5,-13324
  804f84:	10000b1e 	bne	r2,zero,804fb4 <_setlocale_r+0x74>
  804f88:	8c000d15 	stw	r16,52(r17)
  804f8c:	8c800c15 	stw	r18,48(r17)
  804f90:	00c02074 	movhi	r3,129
  804f94:	18f31204 	addi	r3,r3,-13240
  804f98:	1805883a 	mov	r2,r3
  804f9c:	dfc00317 	ldw	ra,12(sp)
  804fa0:	dc800217 	ldw	r18,8(sp)
  804fa4:	dc400117 	ldw	r17,4(sp)
  804fa8:	dc000017 	ldw	r16,0(sp)
  804fac:	dec00404 	addi	sp,sp,16
  804fb0:	f800283a 	ret
  804fb4:	080745c0 	call	80745c <strcmp>
  804fb8:	0007883a 	mov	r3,zero
  804fbc:	103ff226 	beq	r2,zero,804f88 <_setlocale_r+0x48>
  804fc0:	003ff506 	br	804f98 <_setlocale_r+0x58>

00804fc4 <setlocale>:
  804fc4:	01802074 	movhi	r6,129
  804fc8:	31ba7004 	addi	r6,r6,-5696
  804fcc:	2007883a 	mov	r3,r4
  804fd0:	31000017 	ldw	r4,0(r6)
  804fd4:	280d883a 	mov	r6,r5
  804fd8:	180b883a 	mov	r5,r3
  804fdc:	0804f401 	jmpi	804f40 <_setlocale_r>

00804fe0 <__smakebuf_r>:
  804fe0:	2880030b 	ldhu	r2,12(r5)
  804fe4:	deffed04 	addi	sp,sp,-76
  804fe8:	dc401015 	stw	r17,64(sp)
  804fec:	1080008c 	andi	r2,r2,2
  804ff0:	dc000f15 	stw	r16,60(sp)
  804ff4:	dfc01215 	stw	ra,72(sp)
  804ff8:	dc801115 	stw	r18,68(sp)
  804ffc:	2821883a 	mov	r16,r5
  805000:	2023883a 	mov	r17,r4
  805004:	10000b26 	beq	r2,zero,805034 <__smakebuf_r+0x54>
  805008:	28c010c4 	addi	r3,r5,67
  80500c:	00800044 	movi	r2,1
  805010:	28800515 	stw	r2,20(r5)
  805014:	28c00415 	stw	r3,16(r5)
  805018:	28c00015 	stw	r3,0(r5)
  80501c:	dfc01217 	ldw	ra,72(sp)
  805020:	dc801117 	ldw	r18,68(sp)
  805024:	dc401017 	ldw	r17,64(sp)
  805028:	dc000f17 	ldw	r16,60(sp)
  80502c:	dec01304 	addi	sp,sp,76
  805030:	f800283a 	ret
  805034:	2940038f 	ldh	r5,14(r5)
  805038:	28002116 	blt	r5,zero,8050c0 <__smakebuf_r+0xe0>
  80503c:	d80d883a 	mov	r6,sp
  805040:	08077ec0 	call	8077ec <_fstat_r>
  805044:	10001e16 	blt	r2,zero,8050c0 <__smakebuf_r+0xe0>
  805048:	d8800117 	ldw	r2,4(sp)
  80504c:	00e00014 	movui	r3,32768
  805050:	113c000c 	andi	r4,r2,61440
  805054:	20c03126 	beq	r4,r3,80511c <__smakebuf_r+0x13c>
  805058:	8080030b 	ldhu	r2,12(r16)
  80505c:	00c80004 	movi	r3,8192
  805060:	10820014 	ori	r2,r2,2048
  805064:	8080030d 	sth	r2,12(r16)
  805068:	20c01e26 	beq	r4,r3,8050e4 <__smakebuf_r+0x104>
  80506c:	04810004 	movi	r18,1024
  805070:	8809883a 	mov	r4,r17
  805074:	900b883a 	mov	r5,r18
  805078:	08051740 	call	805174 <_malloc_r>
  80507c:	1009883a 	mov	r4,r2
  805080:	10003126 	beq	r2,zero,805148 <__smakebuf_r+0x168>
  805084:	80c0030b 	ldhu	r3,12(r16)
  805088:	00802034 	movhi	r2,128
  80508c:	1090c604 	addi	r2,r2,17176
  805090:	88800f15 	stw	r2,60(r17)
  805094:	18c02014 	ori	r3,r3,128
  805098:	84800515 	stw	r18,20(r16)
  80509c:	80c0030d 	sth	r3,12(r16)
  8050a0:	81000415 	stw	r4,16(r16)
  8050a4:	81000015 	stw	r4,0(r16)
  8050a8:	dfc01217 	ldw	ra,72(sp)
  8050ac:	dc801117 	ldw	r18,68(sp)
  8050b0:	dc401017 	ldw	r17,64(sp)
  8050b4:	dc000f17 	ldw	r16,60(sp)
  8050b8:	dec01304 	addi	sp,sp,76
  8050bc:	f800283a 	ret
  8050c0:	80c0030b 	ldhu	r3,12(r16)
  8050c4:	1880200c 	andi	r2,r3,128
  8050c8:	10000426 	beq	r2,zero,8050dc <__smakebuf_r+0xfc>
  8050cc:	04801004 	movi	r18,64
  8050d0:	18820014 	ori	r2,r3,2048
  8050d4:	8080030d 	sth	r2,12(r16)
  8050d8:	003fe506 	br	805070 <__smakebuf_r+0x90>
  8050dc:	04810004 	movi	r18,1024
  8050e0:	003ffb06 	br	8050d0 <__smakebuf_r+0xf0>
  8050e4:	8140038f 	ldh	r5,14(r16)
  8050e8:	8809883a 	mov	r4,r17
  8050ec:	08078600 	call	807860 <_isatty_r>
  8050f0:	103fde26 	beq	r2,zero,80506c <__smakebuf_r+0x8c>
  8050f4:	8080030b 	ldhu	r2,12(r16)
  8050f8:	80c010c4 	addi	r3,r16,67
  8050fc:	04810004 	movi	r18,1024
  805100:	10800054 	ori	r2,r2,1
  805104:	8080030d 	sth	r2,12(r16)
  805108:	00800044 	movi	r2,1
  80510c:	80c00415 	stw	r3,16(r16)
  805110:	80800515 	stw	r2,20(r16)
  805114:	80c00015 	stw	r3,0(r16)
  805118:	003fd506 	br	805070 <__smakebuf_r+0x90>
  80511c:	80c00a17 	ldw	r3,40(r16)
  805120:	00802034 	movhi	r2,128
  805124:	109cc604 	addi	r2,r2,29464
  805128:	18bfcb1e 	bne	r3,r2,805058 <__smakebuf_r+0x78>
  80512c:	8080030b 	ldhu	r2,12(r16)
  805130:	00c10004 	movi	r3,1024
  805134:	1825883a 	mov	r18,r3
  805138:	10c4b03a 	or	r2,r2,r3
  80513c:	8080030d 	sth	r2,12(r16)
  805140:	80c01315 	stw	r3,76(r16)
  805144:	003fca06 	br	805070 <__smakebuf_r+0x90>
  805148:	8100030b 	ldhu	r4,12(r16)
  80514c:	2080800c 	andi	r2,r4,512
  805150:	103fb21e 	bne	r2,zero,80501c <__smakebuf_r+0x3c>
  805154:	80c010c4 	addi	r3,r16,67
  805158:	21000094 	ori	r4,r4,2
  80515c:	00800044 	movi	r2,1
  805160:	80800515 	stw	r2,20(r16)
  805164:	8100030d 	sth	r4,12(r16)
  805168:	80c00415 	stw	r3,16(r16)
  80516c:	80c00015 	stw	r3,0(r16)
  805170:	003faa06 	br	80501c <__smakebuf_r+0x3c>

00805174 <_malloc_r>:
  805174:	defff604 	addi	sp,sp,-40
  805178:	28c002c4 	addi	r3,r5,11
  80517c:	00800584 	movi	r2,22
  805180:	dc800215 	stw	r18,8(sp)
  805184:	dfc00915 	stw	ra,36(sp)
  805188:	df000815 	stw	fp,32(sp)
  80518c:	ddc00715 	stw	r23,28(sp)
  805190:	dd800615 	stw	r22,24(sp)
  805194:	dd400515 	stw	r21,20(sp)
  805198:	dd000415 	stw	r20,16(sp)
  80519c:	dcc00315 	stw	r19,12(sp)
  8051a0:	dc400115 	stw	r17,4(sp)
  8051a4:	dc000015 	stw	r16,0(sp)
  8051a8:	2025883a 	mov	r18,r4
  8051ac:	10c01236 	bltu	r2,r3,8051f8 <_malloc_r+0x84>
  8051b0:	04400404 	movi	r17,16
  8051b4:	8940142e 	bgeu	r17,r5,805208 <_malloc_r+0x94>
  8051b8:	00800304 	movi	r2,12
  8051bc:	0007883a 	mov	r3,zero
  8051c0:	90800015 	stw	r2,0(r18)
  8051c4:	1805883a 	mov	r2,r3
  8051c8:	dfc00917 	ldw	ra,36(sp)
  8051cc:	df000817 	ldw	fp,32(sp)
  8051d0:	ddc00717 	ldw	r23,28(sp)
  8051d4:	dd800617 	ldw	r22,24(sp)
  8051d8:	dd400517 	ldw	r21,20(sp)
  8051dc:	dd000417 	ldw	r20,16(sp)
  8051e0:	dcc00317 	ldw	r19,12(sp)
  8051e4:	dc800217 	ldw	r18,8(sp)
  8051e8:	dc400117 	ldw	r17,4(sp)
  8051ec:	dc000017 	ldw	r16,0(sp)
  8051f0:	dec00a04 	addi	sp,sp,40
  8051f4:	f800283a 	ret
  8051f8:	00bffe04 	movi	r2,-8
  8051fc:	18a2703a 	and	r17,r3,r2
  805200:	883fed16 	blt	r17,zero,8051b8 <_malloc_r+0x44>
  805204:	897fec36 	bltu	r17,r5,8051b8 <_malloc_r+0x44>
  805208:	9009883a 	mov	r4,r18
  80520c:	080a6880 	call	80a688 <__malloc_lock>
  805210:	00807dc4 	movi	r2,503
  805214:	14402b2e 	bgeu	r2,r17,8052c4 <_malloc_r+0x150>
  805218:	8806d27a 	srli	r3,r17,9
  80521c:	18003f1e 	bne	r3,zero,80531c <_malloc_r+0x1a8>
  805220:	880cd0fa 	srli	r6,r17,3
  805224:	300490fa 	slli	r2,r6,3
  805228:	02c02074 	movhi	r11,129
  80522c:	5af4cb04 	addi	r11,r11,-11476
  805230:	12cb883a 	add	r5,r2,r11
  805234:	2c000317 	ldw	r16,12(r5)
  805238:	580f883a 	mov	r7,r11
  80523c:	2c00041e 	bne	r5,r16,805250 <_malloc_r+0xdc>
  805240:	00000a06 	br	80526c <_malloc_r+0xf8>
  805244:	1800860e 	bge	r3,zero,805460 <_malloc_r+0x2ec>
  805248:	84000317 	ldw	r16,12(r16)
  80524c:	2c000726 	beq	r5,r16,80526c <_malloc_r+0xf8>
  805250:	80800117 	ldw	r2,4(r16)
  805254:	00ffff04 	movi	r3,-4
  805258:	10c8703a 	and	r4,r2,r3
  80525c:	2447c83a 	sub	r3,r4,r17
  805260:	008003c4 	movi	r2,15
  805264:	10fff70e 	bge	r2,r3,805244 <_malloc_r+0xd0>
  805268:	31bfffc4 	addi	r6,r6,-1
  80526c:	32400044 	addi	r9,r6,1
  805270:	02802074 	movhi	r10,129
  805274:	52b4cd04 	addi	r10,r10,-11468
  805278:	54000217 	ldw	r16,8(r10)
  80527c:	8280a026 	beq	r16,r10,805500 <_malloc_r+0x38c>
  805280:	80800117 	ldw	r2,4(r16)
  805284:	00ffff04 	movi	r3,-4
  805288:	10ca703a 	and	r5,r2,r3
  80528c:	2c4dc83a 	sub	r6,r5,r17
  805290:	008003c4 	movi	r2,15
  805294:	11808316 	blt	r2,r6,8054a4 <_malloc_r+0x330>
  805298:	52800315 	stw	r10,12(r10)
  80529c:	52800215 	stw	r10,8(r10)
  8052a0:	30002916 	blt	r6,zero,805348 <_malloc_r+0x1d4>
  8052a4:	8147883a 	add	r3,r16,r5
  8052a8:	18800117 	ldw	r2,4(r3)
  8052ac:	9009883a 	mov	r4,r18
  8052b0:	10800054 	ori	r2,r2,1
  8052b4:	18800115 	stw	r2,4(r3)
  8052b8:	080a6a80 	call	80a6a8 <__malloc_unlock>
  8052bc:	80c00204 	addi	r3,r16,8
  8052c0:	003fc006 	br	8051c4 <_malloc_r+0x50>
  8052c4:	02c02074 	movhi	r11,129
  8052c8:	5af4cb04 	addi	r11,r11,-11476
  8052cc:	8ac5883a 	add	r2,r17,r11
  8052d0:	14000317 	ldw	r16,12(r2)
  8052d4:	580f883a 	mov	r7,r11
  8052d8:	8806d0fa 	srli	r3,r17,3
  8052dc:	14006c26 	beq	r2,r16,805490 <_malloc_r+0x31c>
  8052e0:	80c00117 	ldw	r3,4(r16)
  8052e4:	00bfff04 	movi	r2,-4
  8052e8:	81800317 	ldw	r6,12(r16)
  8052ec:	1886703a 	and	r3,r3,r2
  8052f0:	80c7883a 	add	r3,r16,r3
  8052f4:	18800117 	ldw	r2,4(r3)
  8052f8:	81400217 	ldw	r5,8(r16)
  8052fc:	9009883a 	mov	r4,r18
  805300:	10800054 	ori	r2,r2,1
  805304:	18800115 	stw	r2,4(r3)
  805308:	31400215 	stw	r5,8(r6)
  80530c:	29800315 	stw	r6,12(r5)
  805310:	080a6a80 	call	80a6a8 <__malloc_unlock>
  805314:	80c00204 	addi	r3,r16,8
  805318:	003faa06 	br	8051c4 <_malloc_r+0x50>
  80531c:	00800104 	movi	r2,4
  805320:	10c0052e 	bgeu	r2,r3,805338 <_malloc_r+0x1c4>
  805324:	00800504 	movi	r2,20
  805328:	10c07836 	bltu	r2,r3,80550c <_malloc_r+0x398>
  80532c:	198016c4 	addi	r6,r3,91
  805330:	300490fa 	slli	r2,r6,3
  805334:	003fbc06 	br	805228 <_malloc_r+0xb4>
  805338:	8804d1ba 	srli	r2,r17,6
  80533c:	11800e04 	addi	r6,r2,56
  805340:	300490fa 	slli	r2,r6,3
  805344:	003fb806 	br	805228 <_malloc_r+0xb4>
  805348:	00807fc4 	movi	r2,511
  80534c:	1140bb36 	bltu	r2,r5,80563c <_malloc_r+0x4c8>
  805350:	2806d0fa 	srli	r3,r5,3
  805354:	573ffe04 	addi	fp,r10,-8
  805358:	00800044 	movi	r2,1
  80535c:	180890fa 	slli	r4,r3,3
  805360:	1807d0ba 	srai	r3,r3,2
  805364:	e1c00117 	ldw	r7,4(fp)
  805368:	5909883a 	add	r4,r11,r4
  80536c:	21400217 	ldw	r5,8(r4)
  805370:	10c4983a 	sll	r2,r2,r3
  805374:	81000315 	stw	r4,12(r16)
  805378:	81400215 	stw	r5,8(r16)
  80537c:	388eb03a 	or	r7,r7,r2
  805380:	2c000315 	stw	r16,12(r5)
  805384:	24000215 	stw	r16,8(r4)
  805388:	e1c00115 	stw	r7,4(fp)
  80538c:	4807883a 	mov	r3,r9
  805390:	4800cd16 	blt	r9,zero,8056c8 <_malloc_r+0x554>
  805394:	1807d0ba 	srai	r3,r3,2
  805398:	00800044 	movi	r2,1
  80539c:	10c8983a 	sll	r4,r2,r3
  8053a0:	39004436 	bltu	r7,r4,8054b4 <_malloc_r+0x340>
  8053a4:	21c4703a 	and	r2,r4,r7
  8053a8:	10000a1e 	bne	r2,zero,8053d4 <_malloc_r+0x260>
  8053ac:	2109883a 	add	r4,r4,r4
  8053b0:	00bfff04 	movi	r2,-4
  8053b4:	4884703a 	and	r2,r9,r2
  8053b8:	3906703a 	and	r3,r7,r4
  8053bc:	12400104 	addi	r9,r2,4
  8053c0:	1800041e 	bne	r3,zero,8053d4 <_malloc_r+0x260>
  8053c4:	2109883a 	add	r4,r4,r4
  8053c8:	3904703a 	and	r2,r7,r4
  8053cc:	4a400104 	addi	r9,r9,4
  8053d0:	103ffc26 	beq	r2,zero,8053c4 <_malloc_r+0x250>
  8053d4:	480490fa 	slli	r2,r9,3
  8053d8:	4819883a 	mov	r12,r9
  8053dc:	023fff04 	movi	r8,-4
  8053e0:	589b883a 	add	r13,r11,r2
  8053e4:	6807883a 	mov	r3,r13
  8053e8:	014003c4 	movi	r5,15
  8053ec:	1c000317 	ldw	r16,12(r3)
  8053f0:	1c00041e 	bne	r3,r16,805404 <_malloc_r+0x290>
  8053f4:	0000a706 	br	805694 <_malloc_r+0x520>
  8053f8:	3000ab0e 	bge	r6,zero,8056a8 <_malloc_r+0x534>
  8053fc:	84000317 	ldw	r16,12(r16)
  805400:	1c00a426 	beq	r3,r16,805694 <_malloc_r+0x520>
  805404:	80800117 	ldw	r2,4(r16)
  805408:	1204703a 	and	r2,r2,r8
  80540c:	144dc83a 	sub	r6,r2,r17
  805410:	29bff90e 	bge	r5,r6,8053f8 <_malloc_r+0x284>
  805414:	81000317 	ldw	r4,12(r16)
  805418:	80c00217 	ldw	r3,8(r16)
  80541c:	89400054 	ori	r5,r17,1
  805420:	8445883a 	add	r2,r16,r17
  805424:	20c00215 	stw	r3,8(r4)
  805428:	19000315 	stw	r4,12(r3)
  80542c:	81400115 	stw	r5,4(r16)
  805430:	1187883a 	add	r3,r2,r6
  805434:	31000054 	ori	r4,r6,1
  805438:	50800315 	stw	r2,12(r10)
  80543c:	50800215 	stw	r2,8(r10)
  805440:	19800015 	stw	r6,0(r3)
  805444:	11000115 	stw	r4,4(r2)
  805448:	12800215 	stw	r10,8(r2)
  80544c:	12800315 	stw	r10,12(r2)
  805450:	9009883a 	mov	r4,r18
  805454:	080a6a80 	call	80a6a8 <__malloc_unlock>
  805458:	80c00204 	addi	r3,r16,8
  80545c:	003f5906 	br	8051c4 <_malloc_r+0x50>
  805460:	8109883a 	add	r4,r16,r4
  805464:	20800117 	ldw	r2,4(r4)
  805468:	80c00217 	ldw	r3,8(r16)
  80546c:	81400317 	ldw	r5,12(r16)
  805470:	10800054 	ori	r2,r2,1
  805474:	20800115 	stw	r2,4(r4)
  805478:	28c00215 	stw	r3,8(r5)
  80547c:	19400315 	stw	r5,12(r3)
  805480:	9009883a 	mov	r4,r18
  805484:	080a6a80 	call	80a6a8 <__malloc_unlock>
  805488:	80c00204 	addi	r3,r16,8
  80548c:	003f4d06 	br	8051c4 <_malloc_r+0x50>
  805490:	80800204 	addi	r2,r16,8
  805494:	14000317 	ldw	r16,12(r2)
  805498:	143f911e 	bne	r2,r16,8052e0 <_malloc_r+0x16c>
  80549c:	1a400084 	addi	r9,r3,2
  8054a0:	003f7306 	br	805270 <_malloc_r+0xfc>
  8054a4:	88c00054 	ori	r3,r17,1
  8054a8:	8445883a 	add	r2,r16,r17
  8054ac:	80c00115 	stw	r3,4(r16)
  8054b0:	003fdf06 	br	805430 <_malloc_r+0x2bc>
  8054b4:	e4000217 	ldw	r16,8(fp)
  8054b8:	00bfff04 	movi	r2,-4
  8054bc:	80c00117 	ldw	r3,4(r16)
  8054c0:	802d883a 	mov	r22,r16
  8054c4:	18aa703a 	and	r21,r3,r2
  8054c8:	ac401636 	bltu	r21,r17,805524 <_malloc_r+0x3b0>
  8054cc:	ac49c83a 	sub	r4,r21,r17
  8054d0:	008003c4 	movi	r2,15
  8054d4:	1100130e 	bge	r2,r4,805524 <_malloc_r+0x3b0>
  8054d8:	88800054 	ori	r2,r17,1
  8054dc:	8447883a 	add	r3,r16,r17
  8054e0:	80800115 	stw	r2,4(r16)
  8054e4:	20800054 	ori	r2,r4,1
  8054e8:	18800115 	stw	r2,4(r3)
  8054ec:	e0c00215 	stw	r3,8(fp)
  8054f0:	9009883a 	mov	r4,r18
  8054f4:	080a6a80 	call	80a6a8 <__malloc_unlock>
  8054f8:	80c00204 	addi	r3,r16,8
  8054fc:	003f3106 	br	8051c4 <_malloc_r+0x50>
  805500:	39c00117 	ldw	r7,4(r7)
  805504:	573ffe04 	addi	fp,r10,-8
  805508:	003fa006 	br	80538c <_malloc_r+0x218>
  80550c:	00801504 	movi	r2,84
  805510:	10c06736 	bltu	r2,r3,8056b0 <_malloc_r+0x53c>
  805514:	8804d33a 	srli	r2,r17,12
  805518:	11801b84 	addi	r6,r2,110
  80551c:	300490fa 	slli	r2,r6,3
  805520:	003f4106 	br	805228 <_malloc_r+0xb4>
  805524:	d0a6cb17 	ldw	r2,-25812(gp)
  805528:	d0e00517 	ldw	r3,-32748(gp)
  80552c:	053fffc4 	movi	r20,-1
  805530:	10800404 	addi	r2,r2,16
  805534:	88a7883a 	add	r19,r17,r2
  805538:	1d000326 	beq	r3,r20,805548 <_malloc_r+0x3d4>
  80553c:	98c3ffc4 	addi	r3,r19,4095
  805540:	00bc0004 	movi	r2,-4096
  805544:	18a6703a 	and	r19,r3,r2
  805548:	9009883a 	mov	r4,r18
  80554c:	980b883a 	mov	r5,r19
  805550:	08072a00 	call	8072a0 <_sbrk_r>
  805554:	1009883a 	mov	r4,r2
  805558:	15000426 	beq	r2,r20,80556c <_malloc_r+0x3f8>
  80555c:	854b883a 	add	r5,r16,r21
  805560:	1029883a 	mov	r20,r2
  805564:	11405a2e 	bgeu	r2,r5,8056d0 <_malloc_r+0x55c>
  805568:	87000c26 	beq	r16,fp,80559c <_malloc_r+0x428>
  80556c:	e4000217 	ldw	r16,8(fp)
  805570:	80c00117 	ldw	r3,4(r16)
  805574:	00bfff04 	movi	r2,-4
  805578:	1884703a 	and	r2,r3,r2
  80557c:	14400336 	bltu	r2,r17,80558c <_malloc_r+0x418>
  805580:	1449c83a 	sub	r4,r2,r17
  805584:	008003c4 	movi	r2,15
  805588:	113fd316 	blt	r2,r4,8054d8 <_malloc_r+0x364>
  80558c:	9009883a 	mov	r4,r18
  805590:	080a6a80 	call	80a6a8 <__malloc_unlock>
  805594:	0007883a 	mov	r3,zero
  805598:	003f0a06 	br	8051c4 <_malloc_r+0x50>
  80559c:	05c02074 	movhi	r23,129
  8055a0:	bdc14504 	addi	r23,r23,1300
  8055a4:	b8800017 	ldw	r2,0(r23)
  8055a8:	988d883a 	add	r6,r19,r2
  8055ac:	b9800015 	stw	r6,0(r23)
  8055b0:	d0e00517 	ldw	r3,-32748(gp)
  8055b4:	00bfffc4 	movi	r2,-1
  8055b8:	18808e26 	beq	r3,r2,8057f4 <_malloc_r+0x680>
  8055bc:	2145c83a 	sub	r2,r4,r5
  8055c0:	3085883a 	add	r2,r6,r2
  8055c4:	b8800015 	stw	r2,0(r23)
  8055c8:	20c001cc 	andi	r3,r4,7
  8055cc:	18005f1e 	bne	r3,zero,80574c <_malloc_r+0x5d8>
  8055d0:	000b883a 	mov	r5,zero
  8055d4:	a4c5883a 	add	r2,r20,r19
  8055d8:	1083ffcc 	andi	r2,r2,4095
  8055dc:	00c40004 	movi	r3,4096
  8055e0:	1887c83a 	sub	r3,r3,r2
  8055e4:	28e7883a 	add	r19,r5,r3
  8055e8:	9009883a 	mov	r4,r18
  8055ec:	980b883a 	mov	r5,r19
  8055f0:	08072a00 	call	8072a0 <_sbrk_r>
  8055f4:	1007883a 	mov	r3,r2
  8055f8:	00bfffc4 	movi	r2,-1
  8055fc:	18807a26 	beq	r3,r2,8057e8 <_malloc_r+0x674>
  805600:	1d05c83a 	sub	r2,r3,r20
  805604:	9885883a 	add	r2,r19,r2
  805608:	10c00054 	ori	r3,r2,1
  80560c:	b8800017 	ldw	r2,0(r23)
  805610:	a021883a 	mov	r16,r20
  805614:	a0c00115 	stw	r3,4(r20)
  805618:	9885883a 	add	r2,r19,r2
  80561c:	b8800015 	stw	r2,0(r23)
  805620:	e5000215 	stw	r20,8(fp)
  805624:	b7003626 	beq	r22,fp,805700 <_malloc_r+0x58c>
  805628:	018003c4 	movi	r6,15
  80562c:	35404b36 	bltu	r6,r21,80575c <_malloc_r+0x5e8>
  805630:	00800044 	movi	r2,1
  805634:	a0800115 	stw	r2,4(r20)
  805638:	003fcd06 	br	805570 <_malloc_r+0x3fc>
  80563c:	2808d27a 	srli	r4,r5,9
  805640:	2000371e 	bne	r4,zero,805720 <_malloc_r+0x5ac>
  805644:	2808d0fa 	srli	r4,r5,3
  805648:	200690fa 	slli	r3,r4,3
  80564c:	1ad1883a 	add	r8,r3,r11
  805650:	41800217 	ldw	r6,8(r8)
  805654:	41805b26 	beq	r8,r6,8057c4 <_malloc_r+0x650>
  805658:	30800117 	ldw	r2,4(r6)
  80565c:	00ffff04 	movi	r3,-4
  805660:	10c4703a 	and	r2,r2,r3
  805664:	2880022e 	bgeu	r5,r2,805670 <_malloc_r+0x4fc>
  805668:	31800217 	ldw	r6,8(r6)
  80566c:	41bffa1e 	bne	r8,r6,805658 <_malloc_r+0x4e4>
  805670:	32000317 	ldw	r8,12(r6)
  805674:	39c00117 	ldw	r7,4(r7)
  805678:	82000315 	stw	r8,12(r16)
  80567c:	81800215 	stw	r6,8(r16)
  805680:	07002074 	movhi	fp,129
  805684:	e734cb04 	addi	fp,fp,-11476
  805688:	34000315 	stw	r16,12(r6)
  80568c:	44000215 	stw	r16,8(r8)
  805690:	003f3e06 	br	80538c <_malloc_r+0x218>
  805694:	63000044 	addi	r12,r12,1
  805698:	608000cc 	andi	r2,r12,3
  80569c:	10005d26 	beq	r2,zero,805814 <_malloc_r+0x6a0>
  8056a0:	18c00204 	addi	r3,r3,8
  8056a4:	003f5106 	br	8053ec <_malloc_r+0x278>
  8056a8:	8089883a 	add	r4,r16,r2
  8056ac:	003f6d06 	br	805464 <_malloc_r+0x2f0>
  8056b0:	00805504 	movi	r2,340
  8056b4:	10c02036 	bltu	r2,r3,805738 <_malloc_r+0x5c4>
  8056b8:	8804d3fa 	srli	r2,r17,15
  8056bc:	11801dc4 	addi	r6,r2,119
  8056c0:	300490fa 	slli	r2,r6,3
  8056c4:	003ed806 	br	805228 <_malloc_r+0xb4>
  8056c8:	48c000c4 	addi	r3,r9,3
  8056cc:	003f3106 	br	805394 <_malloc_r+0x220>
  8056d0:	05c02074 	movhi	r23,129
  8056d4:	bdc14504 	addi	r23,r23,1300
  8056d8:	b8800017 	ldw	r2,0(r23)
  8056dc:	988d883a 	add	r6,r19,r2
  8056e0:	b9800015 	stw	r6,0(r23)
  8056e4:	293fb21e 	bne	r5,r4,8055b0 <_malloc_r+0x43c>
  8056e8:	2083ffcc 	andi	r2,r4,4095
  8056ec:	103fb01e 	bne	r2,zero,8055b0 <_malloc_r+0x43c>
  8056f0:	e4000217 	ldw	r16,8(fp)
  8056f4:	9d45883a 	add	r2,r19,r21
  8056f8:	10800054 	ori	r2,r2,1
  8056fc:	80800115 	stw	r2,4(r16)
  805700:	b8c00017 	ldw	r3,0(r23)
  805704:	d0a6cc17 	ldw	r2,-25808(gp)
  805708:	10c0012e 	bgeu	r2,r3,805710 <_malloc_r+0x59c>
  80570c:	d0e6cc15 	stw	r3,-25808(gp)
  805710:	d0a6cd17 	ldw	r2,-25804(gp)
  805714:	10ff962e 	bgeu	r2,r3,805570 <_malloc_r+0x3fc>
  805718:	d0e6cd15 	stw	r3,-25804(gp)
  80571c:	003f9406 	br	805570 <_malloc_r+0x3fc>
  805720:	00800104 	movi	r2,4
  805724:	11001e36 	bltu	r2,r4,8057a0 <_malloc_r+0x62c>
  805728:	2804d1ba 	srli	r2,r5,6
  80572c:	11000e04 	addi	r4,r2,56
  805730:	200690fa 	slli	r3,r4,3
  805734:	003fc506 	br	80564c <_malloc_r+0x4d8>
  805738:	00815504 	movi	r2,1364
  80573c:	10c01d2e 	bgeu	r2,r3,8057b4 <_malloc_r+0x640>
  805740:	01801f84 	movi	r6,126
  805744:	0080fc04 	movi	r2,1008
  805748:	003eb706 	br	805228 <_malloc_r+0xb4>
  80574c:	00800204 	movi	r2,8
  805750:	10cbc83a 	sub	r5,r2,r3
  805754:	2169883a 	add	r20,r4,r5
  805758:	003f9e06 	br	8055d4 <_malloc_r+0x460>
  80575c:	00bffe04 	movi	r2,-8
  805760:	a93ffd04 	addi	r4,r21,-12
  805764:	2088703a 	and	r4,r4,r2
  805768:	b10b883a 	add	r5,r22,r4
  80576c:	00c00144 	movi	r3,5
  805770:	28c00215 	stw	r3,8(r5)
  805774:	28c00115 	stw	r3,4(r5)
  805778:	b0800117 	ldw	r2,4(r22)
  80577c:	1080004c 	andi	r2,r2,1
  805780:	2084b03a 	or	r2,r4,r2
  805784:	b0800115 	stw	r2,4(r22)
  805788:	313fdd2e 	bgeu	r6,r4,805700 <_malloc_r+0x58c>
  80578c:	b1400204 	addi	r5,r22,8
  805790:	9009883a 	mov	r4,r18
  805794:	08045ec0 	call	8045ec <_free_r>
  805798:	e4000217 	ldw	r16,8(fp)
  80579c:	003fd806 	br	805700 <_malloc_r+0x58c>
  8057a0:	00800504 	movi	r2,20
  8057a4:	11001536 	bltu	r2,r4,8057fc <_malloc_r+0x688>
  8057a8:	210016c4 	addi	r4,r4,91
  8057ac:	200690fa 	slli	r3,r4,3
  8057b0:	003fa606 	br	80564c <_malloc_r+0x4d8>
  8057b4:	8804d4ba 	srli	r2,r17,18
  8057b8:	11801f04 	addi	r6,r2,124
  8057bc:	300490fa 	slli	r2,r6,3
  8057c0:	003e9906 	br	805228 <_malloc_r+0xb4>
  8057c4:	2009d0ba 	srai	r4,r4,2
  8057c8:	01402074 	movhi	r5,129
  8057cc:	2974cb04 	addi	r5,r5,-11476
  8057d0:	00c00044 	movi	r3,1
  8057d4:	28800117 	ldw	r2,4(r5)
  8057d8:	1906983a 	sll	r3,r3,r4
  8057dc:	10c4b03a 	or	r2,r2,r3
  8057e0:	28800115 	stw	r2,4(r5)
  8057e4:	003fa306 	br	805674 <_malloc_r+0x500>
  8057e8:	0027883a 	mov	r19,zero
  8057ec:	00c00044 	movi	r3,1
  8057f0:	003f8606 	br	80560c <_malloc_r+0x498>
  8057f4:	d1200515 	stw	r4,-32748(gp)
  8057f8:	003f7306 	br	8055c8 <_malloc_r+0x454>
  8057fc:	00801504 	movi	r2,84
  805800:	11001936 	bltu	r2,r4,805868 <_malloc_r+0x6f4>
  805804:	2804d33a 	srli	r2,r5,12
  805808:	11001b84 	addi	r4,r2,110
  80580c:	200690fa 	slli	r3,r4,3
  805810:	003f8e06 	br	80564c <_malloc_r+0x4d8>
  805814:	480b883a 	mov	r5,r9
  805818:	6807883a 	mov	r3,r13
  80581c:	288000cc 	andi	r2,r5,3
  805820:	18fffe04 	addi	r3,r3,-8
  805824:	297fffc4 	addi	r5,r5,-1
  805828:	10001526 	beq	r2,zero,805880 <_malloc_r+0x70c>
  80582c:	18800217 	ldw	r2,8(r3)
  805830:	10fffa26 	beq	r2,r3,80581c <_malloc_r+0x6a8>
  805834:	2109883a 	add	r4,r4,r4
  805838:	393f1e36 	bltu	r7,r4,8054b4 <_malloc_r+0x340>
  80583c:	203f1d26 	beq	r4,zero,8054b4 <_malloc_r+0x340>
  805840:	21c4703a 	and	r2,r4,r7
  805844:	10000226 	beq	r2,zero,805850 <_malloc_r+0x6dc>
  805848:	6013883a 	mov	r9,r12
  80584c:	003ee106 	br	8053d4 <_malloc_r+0x260>
  805850:	2109883a 	add	r4,r4,r4
  805854:	3904703a 	and	r2,r7,r4
  805858:	63000104 	addi	r12,r12,4
  80585c:	103ffc26 	beq	r2,zero,805850 <_malloc_r+0x6dc>
  805860:	6013883a 	mov	r9,r12
  805864:	003edb06 	br	8053d4 <_malloc_r+0x260>
  805868:	00805504 	movi	r2,340
  80586c:	11000836 	bltu	r2,r4,805890 <_malloc_r+0x71c>
  805870:	2804d3fa 	srli	r2,r5,15
  805874:	11001dc4 	addi	r4,r2,119
  805878:	200690fa 	slli	r3,r4,3
  80587c:	003f7306 	br	80564c <_malloc_r+0x4d8>
  805880:	0104303a 	nor	r2,zero,r4
  805884:	388e703a 	and	r7,r7,r2
  805888:	e1c00115 	stw	r7,4(fp)
  80588c:	003fe906 	br	805834 <_malloc_r+0x6c0>
  805890:	00815504 	movi	r2,1364
  805894:	1100032e 	bgeu	r2,r4,8058a4 <_malloc_r+0x730>
  805898:	01001f84 	movi	r4,126
  80589c:	00c0fc04 	movi	r3,1008
  8058a0:	003f6a06 	br	80564c <_malloc_r+0x4d8>
  8058a4:	2804d4ba 	srli	r2,r5,18
  8058a8:	11001f04 	addi	r4,r2,124
  8058ac:	200690fa 	slli	r3,r4,3
  8058b0:	003f6606 	br	80564c <_malloc_r+0x4d8>

008058b4 <memchr>:
  8058b4:	008000c4 	movi	r2,3
  8058b8:	29403fcc 	andi	r5,r5,255
  8058bc:	2007883a 	mov	r3,r4
  8058c0:	1180022e 	bgeu	r2,r6,8058cc <memchr+0x18>
  8058c4:	2084703a 	and	r2,r4,r2
  8058c8:	10000b26 	beq	r2,zero,8058f8 <memchr+0x44>
  8058cc:	313fffc4 	addi	r4,r6,-1
  8058d0:	3000051e 	bne	r6,zero,8058e8 <memchr+0x34>
  8058d4:	00002c06 	br	805988 <memchr+0xd4>
  8058d8:	213fffc4 	addi	r4,r4,-1
  8058dc:	00bfffc4 	movi	r2,-1
  8058e0:	18c00044 	addi	r3,r3,1
  8058e4:	20802826 	beq	r4,r2,805988 <memchr+0xd4>
  8058e8:	18800003 	ldbu	r2,0(r3)
  8058ec:	28bffa1e 	bne	r5,r2,8058d8 <memchr+0x24>
  8058f0:	1805883a 	mov	r2,r3
  8058f4:	f800283a 	ret
  8058f8:	0011883a 	mov	r8,zero
  8058fc:	0007883a 	mov	r3,zero
  805900:	01c00104 	movi	r7,4
  805904:	4004923a 	slli	r2,r8,8
  805908:	18c00044 	addi	r3,r3,1
  80590c:	1151883a 	add	r8,r2,r5
  805910:	19fffc1e 	bne	r3,r7,805904 <memchr+0x50>
  805914:	02bfbff4 	movhi	r10,65279
  805918:	52bfbfc4 	addi	r10,r10,-257
  80591c:	02602074 	movhi	r9,32897
  805920:	4a602004 	addi	r9,r9,-32640
  805924:	02c000c4 	movi	r11,3
  805928:	20800017 	ldw	r2,0(r4)
  80592c:	31bfff04 	addi	r6,r6,-4
  805930:	200f883a 	mov	r7,r4
  805934:	1204f03a 	xor	r2,r2,r8
  805938:	1287883a 	add	r3,r2,r10
  80593c:	1a46703a 	and	r3,r3,r9
  805940:	0084303a 	nor	r2,zero,r2
  805944:	10c4703a 	and	r2,r2,r3
  805948:	10000b26 	beq	r2,zero,805978 <memchr+0xc4>
  80594c:	20800003 	ldbu	r2,0(r4)
  805950:	28800f26 	beq	r5,r2,805990 <memchr+0xdc>
  805954:	20800043 	ldbu	r2,1(r4)
  805958:	21c00044 	addi	r7,r4,1
  80595c:	28800c26 	beq	r5,r2,805990 <memchr+0xdc>
  805960:	20800083 	ldbu	r2,2(r4)
  805964:	21c00084 	addi	r7,r4,2
  805968:	28800926 	beq	r5,r2,805990 <memchr+0xdc>
  80596c:	208000c3 	ldbu	r2,3(r4)
  805970:	21c000c4 	addi	r7,r4,3
  805974:	28800626 	beq	r5,r2,805990 <memchr+0xdc>
  805978:	21000104 	addi	r4,r4,4
  80597c:	59bfea36 	bltu	r11,r6,805928 <memchr+0x74>
  805980:	2007883a 	mov	r3,r4
  805984:	003fd106 	br	8058cc <memchr+0x18>
  805988:	0005883a 	mov	r2,zero
  80598c:	f800283a 	ret
  805990:	3805883a 	mov	r2,r7
  805994:	f800283a 	ret

00805998 <memcpy>:
  805998:	01c003c4 	movi	r7,15
  80599c:	2007883a 	mov	r3,r4
  8059a0:	3980032e 	bgeu	r7,r6,8059b0 <memcpy+0x18>
  8059a4:	2904b03a 	or	r2,r5,r4
  8059a8:	108000cc 	andi	r2,r2,3
  8059ac:	10000926 	beq	r2,zero,8059d4 <memcpy+0x3c>
  8059b0:	30000626 	beq	r6,zero,8059cc <memcpy+0x34>
  8059b4:	30cd883a 	add	r6,r6,r3
  8059b8:	28800003 	ldbu	r2,0(r5)
  8059bc:	29400044 	addi	r5,r5,1
  8059c0:	18800005 	stb	r2,0(r3)
  8059c4:	18c00044 	addi	r3,r3,1
  8059c8:	30fffb1e 	bne	r6,r3,8059b8 <memcpy+0x20>
  8059cc:	2005883a 	mov	r2,r4
  8059d0:	f800283a 	ret
  8059d4:	3811883a 	mov	r8,r7
  8059d8:	200f883a 	mov	r7,r4
  8059dc:	28c00017 	ldw	r3,0(r5)
  8059e0:	31bffc04 	addi	r6,r6,-16
  8059e4:	38c00015 	stw	r3,0(r7)
  8059e8:	28800117 	ldw	r2,4(r5)
  8059ec:	38800115 	stw	r2,4(r7)
  8059f0:	28c00217 	ldw	r3,8(r5)
  8059f4:	38c00215 	stw	r3,8(r7)
  8059f8:	28800317 	ldw	r2,12(r5)
  8059fc:	29400404 	addi	r5,r5,16
  805a00:	38800315 	stw	r2,12(r7)
  805a04:	39c00404 	addi	r7,r7,16
  805a08:	41bff436 	bltu	r8,r6,8059dc <memcpy+0x44>
  805a0c:	008000c4 	movi	r2,3
  805a10:	1180072e 	bgeu	r2,r6,805a30 <memcpy+0x98>
  805a14:	1007883a 	mov	r3,r2
  805a18:	28800017 	ldw	r2,0(r5)
  805a1c:	31bfff04 	addi	r6,r6,-4
  805a20:	29400104 	addi	r5,r5,4
  805a24:	38800015 	stw	r2,0(r7)
  805a28:	39c00104 	addi	r7,r7,4
  805a2c:	19bffa36 	bltu	r3,r6,805a18 <memcpy+0x80>
  805a30:	3807883a 	mov	r3,r7
  805a34:	003fde06 	br	8059b0 <memcpy+0x18>

00805a38 <memmove>:
  805a38:	2807883a 	mov	r3,r5
  805a3c:	2011883a 	mov	r8,r4
  805a40:	29000c2e 	bgeu	r5,r4,805a74 <memmove+0x3c>
  805a44:	298f883a 	add	r7,r5,r6
  805a48:	21c00a2e 	bgeu	r4,r7,805a74 <memmove+0x3c>
  805a4c:	30000726 	beq	r6,zero,805a6c <memmove+0x34>
  805a50:	2187883a 	add	r3,r4,r6
  805a54:	198dc83a 	sub	r6,r3,r6
  805a58:	39ffffc4 	addi	r7,r7,-1
  805a5c:	38800003 	ldbu	r2,0(r7)
  805a60:	18ffffc4 	addi	r3,r3,-1
  805a64:	18800005 	stb	r2,0(r3)
  805a68:	19bffb1e 	bne	r3,r6,805a58 <memmove+0x20>
  805a6c:	2005883a 	mov	r2,r4
  805a70:	f800283a 	ret
  805a74:	01c003c4 	movi	r7,15
  805a78:	39800a36 	bltu	r7,r6,805aa4 <memmove+0x6c>
  805a7c:	303ffb26 	beq	r6,zero,805a6c <memmove+0x34>
  805a80:	400f883a 	mov	r7,r8
  805a84:	320d883a 	add	r6,r6,r8
  805a88:	28800003 	ldbu	r2,0(r5)
  805a8c:	29400044 	addi	r5,r5,1
  805a90:	38800005 	stb	r2,0(r7)
  805a94:	39c00044 	addi	r7,r7,1
  805a98:	39bffb1e 	bne	r7,r6,805a88 <memmove+0x50>
  805a9c:	2005883a 	mov	r2,r4
  805aa0:	f800283a 	ret
  805aa4:	1904b03a 	or	r2,r3,r4
  805aa8:	108000cc 	andi	r2,r2,3
  805aac:	103ff31e 	bne	r2,zero,805a7c <memmove+0x44>
  805ab0:	3811883a 	mov	r8,r7
  805ab4:	180b883a 	mov	r5,r3
  805ab8:	200f883a 	mov	r7,r4
  805abc:	28c00017 	ldw	r3,0(r5)
  805ac0:	31bffc04 	addi	r6,r6,-16
  805ac4:	38c00015 	stw	r3,0(r7)
  805ac8:	28800117 	ldw	r2,4(r5)
  805acc:	38800115 	stw	r2,4(r7)
  805ad0:	28c00217 	ldw	r3,8(r5)
  805ad4:	38c00215 	stw	r3,8(r7)
  805ad8:	28800317 	ldw	r2,12(r5)
  805adc:	29400404 	addi	r5,r5,16
  805ae0:	38800315 	stw	r2,12(r7)
  805ae4:	39c00404 	addi	r7,r7,16
  805ae8:	41bff436 	bltu	r8,r6,805abc <memmove+0x84>
  805aec:	008000c4 	movi	r2,3
  805af0:	1180072e 	bgeu	r2,r6,805b10 <memmove+0xd8>
  805af4:	1007883a 	mov	r3,r2
  805af8:	28800017 	ldw	r2,0(r5)
  805afc:	31bfff04 	addi	r6,r6,-4
  805b00:	29400104 	addi	r5,r5,4
  805b04:	38800015 	stw	r2,0(r7)
  805b08:	39c00104 	addi	r7,r7,4
  805b0c:	19bffa36 	bltu	r3,r6,805af8 <memmove+0xc0>
  805b10:	3811883a 	mov	r8,r7
  805b14:	003fd906 	br	805a7c <memmove+0x44>

00805b18 <memset>:
  805b18:	008000c4 	movi	r2,3
  805b1c:	29403fcc 	andi	r5,r5,255
  805b20:	2007883a 	mov	r3,r4
  805b24:	1180022e 	bgeu	r2,r6,805b30 <memset+0x18>
  805b28:	2084703a 	and	r2,r4,r2
  805b2c:	10000826 	beq	r2,zero,805b50 <memset+0x38>
  805b30:	30000526 	beq	r6,zero,805b48 <memset+0x30>
  805b34:	2805883a 	mov	r2,r5
  805b38:	30cd883a 	add	r6,r6,r3
  805b3c:	18800005 	stb	r2,0(r3)
  805b40:	18c00044 	addi	r3,r3,1
  805b44:	19bffd1e 	bne	r3,r6,805b3c <memset+0x24>
  805b48:	2005883a 	mov	r2,r4
  805b4c:	f800283a 	ret
  805b50:	2804923a 	slli	r2,r5,8
  805b54:	020003c4 	movi	r8,15
  805b58:	200f883a 	mov	r7,r4
  805b5c:	2884b03a 	or	r2,r5,r2
  805b60:	1006943a 	slli	r3,r2,16
  805b64:	10c6b03a 	or	r3,r2,r3
  805b68:	41800a2e 	bgeu	r8,r6,805b94 <memset+0x7c>
  805b6c:	4005883a 	mov	r2,r8
  805b70:	31bffc04 	addi	r6,r6,-16
  805b74:	38c00015 	stw	r3,0(r7)
  805b78:	38c00115 	stw	r3,4(r7)
  805b7c:	38c00215 	stw	r3,8(r7)
  805b80:	38c00315 	stw	r3,12(r7)
  805b84:	39c00404 	addi	r7,r7,16
  805b88:	11bff936 	bltu	r2,r6,805b70 <memset+0x58>
  805b8c:	008000c4 	movi	r2,3
  805b90:	1180052e 	bgeu	r2,r6,805ba8 <memset+0x90>
  805b94:	31bfff04 	addi	r6,r6,-4
  805b98:	008000c4 	movi	r2,3
  805b9c:	38c00015 	stw	r3,0(r7)
  805ba0:	39c00104 	addi	r7,r7,4
  805ba4:	11bffb36 	bltu	r2,r6,805b94 <memset+0x7c>
  805ba8:	3807883a 	mov	r3,r7
  805bac:	003fe006 	br	805b30 <memset+0x18>

00805bb0 <_Bfree>:
  805bb0:	28000826 	beq	r5,zero,805bd4 <_Bfree+0x24>
  805bb4:	28800117 	ldw	r2,4(r5)
  805bb8:	21001317 	ldw	r4,76(r4)
  805bbc:	1085883a 	add	r2,r2,r2
  805bc0:	1085883a 	add	r2,r2,r2
  805bc4:	1105883a 	add	r2,r2,r4
  805bc8:	10c00017 	ldw	r3,0(r2)
  805bcc:	28c00015 	stw	r3,0(r5)
  805bd0:	11400015 	stw	r5,0(r2)
  805bd4:	f800283a 	ret

00805bd8 <__hi0bits>:
  805bd8:	20bfffec 	andhi	r2,r4,65535
  805bdc:	10001426 	beq	r2,zero,805c30 <__hi0bits+0x58>
  805be0:	0007883a 	mov	r3,zero
  805be4:	20bfc02c 	andhi	r2,r4,65280
  805be8:	1000021e 	bne	r2,zero,805bf4 <__hi0bits+0x1c>
  805bec:	2008923a 	slli	r4,r4,8
  805bf0:	18c00204 	addi	r3,r3,8
  805bf4:	20bc002c 	andhi	r2,r4,61440
  805bf8:	1000021e 	bne	r2,zero,805c04 <__hi0bits+0x2c>
  805bfc:	2008913a 	slli	r4,r4,4
  805c00:	18c00104 	addi	r3,r3,4
  805c04:	20b0002c 	andhi	r2,r4,49152
  805c08:	1000031e 	bne	r2,zero,805c18 <__hi0bits+0x40>
  805c0c:	2105883a 	add	r2,r4,r4
  805c10:	18c00084 	addi	r3,r3,2
  805c14:	1089883a 	add	r4,r2,r2
  805c18:	20000316 	blt	r4,zero,805c28 <__hi0bits+0x50>
  805c1c:	2090002c 	andhi	r2,r4,16384
  805c20:	10000626 	beq	r2,zero,805c3c <__hi0bits+0x64>
  805c24:	18c00044 	addi	r3,r3,1
  805c28:	1805883a 	mov	r2,r3
  805c2c:	f800283a 	ret
  805c30:	2008943a 	slli	r4,r4,16
  805c34:	00c00404 	movi	r3,16
  805c38:	003fea06 	br	805be4 <__hi0bits+0xc>
  805c3c:	00c00804 	movi	r3,32
  805c40:	1805883a 	mov	r2,r3
  805c44:	f800283a 	ret

00805c48 <__lo0bits>:
  805c48:	20c00017 	ldw	r3,0(r4)
  805c4c:	188001cc 	andi	r2,r3,7
  805c50:	10000a26 	beq	r2,zero,805c7c <__lo0bits+0x34>
  805c54:	1880004c 	andi	r2,r3,1
  805c58:	1005003a 	cmpeq	r2,r2,zero
  805c5c:	10002126 	beq	r2,zero,805ce4 <__lo0bits+0x9c>
  805c60:	1880008c 	andi	r2,r3,2
  805c64:	1000251e 	bne	r2,zero,805cfc <__lo0bits+0xb4>
  805c68:	1804d0ba 	srli	r2,r3,2
  805c6c:	01400084 	movi	r5,2
  805c70:	20800015 	stw	r2,0(r4)
  805c74:	2805883a 	mov	r2,r5
  805c78:	f800283a 	ret
  805c7c:	18bfffcc 	andi	r2,r3,65535
  805c80:	10001526 	beq	r2,zero,805cd8 <__lo0bits+0x90>
  805c84:	000b883a 	mov	r5,zero
  805c88:	18803fcc 	andi	r2,r3,255
  805c8c:	1000021e 	bne	r2,zero,805c98 <__lo0bits+0x50>
  805c90:	1806d23a 	srli	r3,r3,8
  805c94:	29400204 	addi	r5,r5,8
  805c98:	188003cc 	andi	r2,r3,15
  805c9c:	1000021e 	bne	r2,zero,805ca8 <__lo0bits+0x60>
  805ca0:	1806d13a 	srli	r3,r3,4
  805ca4:	29400104 	addi	r5,r5,4
  805ca8:	188000cc 	andi	r2,r3,3
  805cac:	1000021e 	bne	r2,zero,805cb8 <__lo0bits+0x70>
  805cb0:	1806d0ba 	srli	r3,r3,2
  805cb4:	29400084 	addi	r5,r5,2
  805cb8:	1880004c 	andi	r2,r3,1
  805cbc:	1000031e 	bne	r2,zero,805ccc <__lo0bits+0x84>
  805cc0:	1806d07a 	srli	r3,r3,1
  805cc4:	18000a26 	beq	r3,zero,805cf0 <__lo0bits+0xa8>
  805cc8:	29400044 	addi	r5,r5,1
  805ccc:	2805883a 	mov	r2,r5
  805cd0:	20c00015 	stw	r3,0(r4)
  805cd4:	f800283a 	ret
  805cd8:	1806d43a 	srli	r3,r3,16
  805cdc:	01400404 	movi	r5,16
  805ce0:	003fe906 	br	805c88 <__lo0bits+0x40>
  805ce4:	000b883a 	mov	r5,zero
  805ce8:	2805883a 	mov	r2,r5
  805cec:	f800283a 	ret
  805cf0:	01400804 	movi	r5,32
  805cf4:	2805883a 	mov	r2,r5
  805cf8:	f800283a 	ret
  805cfc:	1804d07a 	srli	r2,r3,1
  805d00:	01400044 	movi	r5,1
  805d04:	20800015 	stw	r2,0(r4)
  805d08:	003fda06 	br	805c74 <__lo0bits+0x2c>

00805d0c <__mcmp>:
  805d0c:	20800417 	ldw	r2,16(r4)
  805d10:	28c00417 	ldw	r3,16(r5)
  805d14:	10cfc83a 	sub	r7,r2,r3
  805d18:	38000c1e 	bne	r7,zero,805d4c <__mcmp+0x40>
  805d1c:	18c5883a 	add	r2,r3,r3
  805d20:	1085883a 	add	r2,r2,r2
  805d24:	10c00504 	addi	r3,r2,20
  805d28:	21000504 	addi	r4,r4,20
  805d2c:	28cb883a 	add	r5,r5,r3
  805d30:	2085883a 	add	r2,r4,r2
  805d34:	10bfff04 	addi	r2,r2,-4
  805d38:	297fff04 	addi	r5,r5,-4
  805d3c:	11800017 	ldw	r6,0(r2)
  805d40:	28c00017 	ldw	r3,0(r5)
  805d44:	30c0031e 	bne	r6,r3,805d54 <__mcmp+0x48>
  805d48:	20bffa36 	bltu	r4,r2,805d34 <__mcmp+0x28>
  805d4c:	3805883a 	mov	r2,r7
  805d50:	f800283a 	ret
  805d54:	30c00336 	bltu	r6,r3,805d64 <__mcmp+0x58>
  805d58:	01c00044 	movi	r7,1
  805d5c:	3805883a 	mov	r2,r7
  805d60:	f800283a 	ret
  805d64:	01ffffc4 	movi	r7,-1
  805d68:	003ff806 	br	805d4c <__mcmp+0x40>

00805d6c <__ulp>:
  805d6c:	295ffc2c 	andhi	r5,r5,32752
  805d70:	013f3034 	movhi	r4,64704
  805d74:	290b883a 	add	r5,r5,r4
  805d78:	0145c83a 	sub	r2,zero,r5
  805d7c:	1007d53a 	srai	r3,r2,20
  805d80:	000d883a 	mov	r6,zero
  805d84:	0140040e 	bge	zero,r5,805d98 <__ulp+0x2c>
  805d88:	280f883a 	mov	r7,r5
  805d8c:	3807883a 	mov	r3,r7
  805d90:	3005883a 	mov	r2,r6
  805d94:	f800283a 	ret
  805d98:	008004c4 	movi	r2,19
  805d9c:	193ffb04 	addi	r4,r3,-20
  805da0:	10c00c0e 	bge	r2,r3,805dd4 <__ulp+0x68>
  805da4:	008007c4 	movi	r2,31
  805da8:	1107c83a 	sub	r3,r2,r4
  805dac:	00800784 	movi	r2,30
  805db0:	01400044 	movi	r5,1
  805db4:	11000216 	blt	r2,r4,805dc0 <__ulp+0x54>
  805db8:	00800044 	movi	r2,1
  805dbc:	10ca983a 	sll	r5,r2,r3
  805dc0:	000f883a 	mov	r7,zero
  805dc4:	280d883a 	mov	r6,r5
  805dc8:	3807883a 	mov	r3,r7
  805dcc:	3005883a 	mov	r2,r6
  805dd0:	f800283a 	ret
  805dd4:	00800234 	movhi	r2,8
  805dd8:	10cfd83a 	sra	r7,r2,r3
  805ddc:	000d883a 	mov	r6,zero
  805de0:	3005883a 	mov	r2,r6
  805de4:	3807883a 	mov	r3,r7
  805de8:	f800283a 	ret

00805dec <__b2d>:
  805dec:	20800417 	ldw	r2,16(r4)
  805df0:	defff904 	addi	sp,sp,-28
  805df4:	dd000415 	stw	r20,16(sp)
  805df8:	1085883a 	add	r2,r2,r2
  805dfc:	25000504 	addi	r20,r4,20
  805e00:	1085883a 	add	r2,r2,r2
  805e04:	dc000015 	stw	r16,0(sp)
  805e08:	a0a1883a 	add	r16,r20,r2
  805e0c:	dd400515 	stw	r21,20(sp)
  805e10:	857fff17 	ldw	r21,-4(r16)
  805e14:	dc400115 	stw	r17,4(sp)
  805e18:	dfc00615 	stw	ra,24(sp)
  805e1c:	a809883a 	mov	r4,r21
  805e20:	2823883a 	mov	r17,r5
  805e24:	dcc00315 	stw	r19,12(sp)
  805e28:	dc800215 	stw	r18,8(sp)
  805e2c:	0805bd80 	call	805bd8 <__hi0bits>
  805e30:	100b883a 	mov	r5,r2
  805e34:	00800804 	movi	r2,32
  805e38:	1145c83a 	sub	r2,r2,r5
  805e3c:	88800015 	stw	r2,0(r17)
  805e40:	00800284 	movi	r2,10
  805e44:	80ffff04 	addi	r3,r16,-4
  805e48:	11401416 	blt	r2,r5,805e9c <__b2d+0xb0>
  805e4c:	008002c4 	movi	r2,11
  805e50:	1149c83a 	sub	r4,r2,r5
  805e54:	a0c02736 	bltu	r20,r3,805ef4 <__b2d+0x108>
  805e58:	000d883a 	mov	r6,zero
  805e5c:	28800544 	addi	r2,r5,21
  805e60:	a906d83a 	srl	r3,r21,r4
  805e64:	a884983a 	sll	r2,r21,r2
  805e68:	1ccffc34 	orhi	r19,r3,16368
  805e6c:	11a4b03a 	or	r18,r2,r6
  805e70:	9005883a 	mov	r2,r18
  805e74:	9807883a 	mov	r3,r19
  805e78:	dfc00617 	ldw	ra,24(sp)
  805e7c:	dd400517 	ldw	r21,20(sp)
  805e80:	dd000417 	ldw	r20,16(sp)
  805e84:	dcc00317 	ldw	r19,12(sp)
  805e88:	dc800217 	ldw	r18,8(sp)
  805e8c:	dc400117 	ldw	r17,4(sp)
  805e90:	dc000017 	ldw	r16,0(sp)
  805e94:	dec00704 	addi	sp,sp,28
  805e98:	f800283a 	ret
  805e9c:	a0c00e36 	bltu	r20,r3,805ed8 <__b2d+0xec>
  805ea0:	293ffd44 	addi	r4,r5,-11
  805ea4:	000d883a 	mov	r6,zero
  805ea8:	20000f26 	beq	r4,zero,805ee8 <__b2d+0xfc>
  805eac:	00800804 	movi	r2,32
  805eb0:	110bc83a 	sub	r5,r2,r4
  805eb4:	a0c01236 	bltu	r20,r3,805f00 <__b2d+0x114>
  805eb8:	000f883a 	mov	r7,zero
  805ebc:	a904983a 	sll	r2,r21,r4
  805ec0:	3146d83a 	srl	r3,r6,r5
  805ec4:	3108983a 	sll	r4,r6,r4
  805ec8:	108ffc34 	orhi	r2,r2,16368
  805ecc:	18a6b03a 	or	r19,r3,r2
  805ed0:	3924b03a 	or	r18,r7,r4
  805ed4:	003fe606 	br	805e70 <__b2d+0x84>
  805ed8:	293ffd44 	addi	r4,r5,-11
  805edc:	81bffe17 	ldw	r6,-8(r16)
  805ee0:	80fffe04 	addi	r3,r16,-8
  805ee4:	203ff11e 	bne	r4,zero,805eac <__b2d+0xc0>
  805ee8:	accffc34 	orhi	r19,r21,16368
  805eec:	3025883a 	mov	r18,r6
  805ef0:	003fdf06 	br	805e70 <__b2d+0x84>
  805ef4:	18bfff17 	ldw	r2,-4(r3)
  805ef8:	110cd83a 	srl	r6,r2,r4
  805efc:	003fd706 	br	805e5c <__b2d+0x70>
  805f00:	18bfff17 	ldw	r2,-4(r3)
  805f04:	114ed83a 	srl	r7,r2,r5
  805f08:	003fec06 	br	805ebc <__b2d+0xd0>

00805f0c <__ratio>:
  805f0c:	defff904 	addi	sp,sp,-28
  805f10:	dc400215 	stw	r17,8(sp)
  805f14:	2823883a 	mov	r17,r5
  805f18:	d80b883a 	mov	r5,sp
  805f1c:	dfc00615 	stw	ra,24(sp)
  805f20:	dd000515 	stw	r20,20(sp)
  805f24:	dcc00415 	stw	r19,16(sp)
  805f28:	dc800315 	stw	r18,12(sp)
  805f2c:	2025883a 	mov	r18,r4
  805f30:	0805dec0 	call	805dec <__b2d>
  805f34:	8809883a 	mov	r4,r17
  805f38:	d9400104 	addi	r5,sp,4
  805f3c:	1027883a 	mov	r19,r2
  805f40:	1829883a 	mov	r20,r3
  805f44:	0805dec0 	call	805dec <__b2d>
  805f48:	89000417 	ldw	r4,16(r17)
  805f4c:	91c00417 	ldw	r7,16(r18)
  805f50:	d9800117 	ldw	r6,4(sp)
  805f54:	180b883a 	mov	r5,r3
  805f58:	390fc83a 	sub	r7,r7,r4
  805f5c:	1009883a 	mov	r4,r2
  805f60:	d8800017 	ldw	r2,0(sp)
  805f64:	380e917a 	slli	r7,r7,5
  805f68:	2011883a 	mov	r8,r4
  805f6c:	1185c83a 	sub	r2,r2,r6
  805f70:	11c5883a 	add	r2,r2,r7
  805f74:	1006953a 	slli	r3,r2,20
  805f78:	2813883a 	mov	r9,r5
  805f7c:	00800d0e 	bge	zero,r2,805fb4 <__ratio+0xa8>
  805f80:	1d29883a 	add	r20,r3,r20
  805f84:	a00b883a 	mov	r5,r20
  805f88:	480f883a 	mov	r7,r9
  805f8c:	9809883a 	mov	r4,r19
  805f90:	400d883a 	mov	r6,r8
  805f94:	0808f540 	call	808f54 <__divdf3>
  805f98:	dfc00617 	ldw	ra,24(sp)
  805f9c:	dd000517 	ldw	r20,20(sp)
  805fa0:	dcc00417 	ldw	r19,16(sp)
  805fa4:	dc800317 	ldw	r18,12(sp)
  805fa8:	dc400217 	ldw	r17,8(sp)
  805fac:	dec00704 	addi	sp,sp,28
  805fb0:	f800283a 	ret
  805fb4:	28d3c83a 	sub	r9,r5,r3
  805fb8:	003ff206 	br	805f84 <__ratio+0x78>

00805fbc <_mprec_log10>:
  805fbc:	defffe04 	addi	sp,sp,-8
  805fc0:	008005c4 	movi	r2,23
  805fc4:	dc000015 	stw	r16,0(sp)
  805fc8:	dfc00115 	stw	ra,4(sp)
  805fcc:	2021883a 	mov	r16,r4
  805fd0:	11000c16 	blt	r2,r4,806004 <_mprec_log10+0x48>
  805fd4:	200490fa 	slli	r2,r4,3
  805fd8:	00c02074 	movhi	r3,129
  805fdc:	18f32304 	addi	r3,r3,-13172
  805fe0:	10c5883a 	add	r2,r2,r3
  805fe4:	12400117 	ldw	r9,4(r2)
  805fe8:	12000017 	ldw	r8,0(r2)
  805fec:	4807883a 	mov	r3,r9
  805ff0:	4005883a 	mov	r2,r8
  805ff4:	dfc00117 	ldw	ra,4(sp)
  805ff8:	dc000017 	ldw	r16,0(sp)
  805ffc:	dec00204 	addi	sp,sp,8
  806000:	f800283a 	ret
  806004:	0011883a 	mov	r8,zero
  806008:	024ffc34 	movhi	r9,16368
  80600c:	0005883a 	mov	r2,zero
  806010:	00d00934 	movhi	r3,16420
  806014:	480b883a 	mov	r5,r9
  806018:	4009883a 	mov	r4,r8
  80601c:	180f883a 	mov	r7,r3
  806020:	100d883a 	mov	r6,r2
  806024:	0808b900 	call	808b90 <__muldf3>
  806028:	843fffc4 	addi	r16,r16,-1
  80602c:	1011883a 	mov	r8,r2
  806030:	1813883a 	mov	r9,r3
  806034:	803ff51e 	bne	r16,zero,80600c <_mprec_log10+0x50>
  806038:	4005883a 	mov	r2,r8
  80603c:	4807883a 	mov	r3,r9
  806040:	dfc00117 	ldw	ra,4(sp)
  806044:	dc000017 	ldw	r16,0(sp)
  806048:	dec00204 	addi	sp,sp,8
  80604c:	f800283a 	ret

00806050 <__copybits>:
  806050:	297fffc4 	addi	r5,r5,-1
  806054:	30800417 	ldw	r2,16(r6)
  806058:	280bd17a 	srai	r5,r5,5
  80605c:	31800504 	addi	r6,r6,20
  806060:	1085883a 	add	r2,r2,r2
  806064:	294b883a 	add	r5,r5,r5
  806068:	294b883a 	add	r5,r5,r5
  80606c:	1085883a 	add	r2,r2,r2
  806070:	290b883a 	add	r5,r5,r4
  806074:	3087883a 	add	r3,r6,r2
  806078:	29400104 	addi	r5,r5,4
  80607c:	30c0052e 	bgeu	r6,r3,806094 <__copybits+0x44>
  806080:	30800017 	ldw	r2,0(r6)
  806084:	31800104 	addi	r6,r6,4
  806088:	20800015 	stw	r2,0(r4)
  80608c:	21000104 	addi	r4,r4,4
  806090:	30fffb36 	bltu	r6,r3,806080 <__copybits+0x30>
  806094:	2140032e 	bgeu	r4,r5,8060a4 <__copybits+0x54>
  806098:	20000015 	stw	zero,0(r4)
  80609c:	21000104 	addi	r4,r4,4
  8060a0:	217ffd36 	bltu	r4,r5,806098 <__copybits+0x48>
  8060a4:	f800283a 	ret

008060a8 <__any_on>:
  8060a8:	20800417 	ldw	r2,16(r4)
  8060ac:	2807d17a 	srai	r3,r5,5
  8060b0:	21000504 	addi	r4,r4,20
  8060b4:	10c00d0e 	bge	r2,r3,8060ec <__any_on+0x44>
  8060b8:	1085883a 	add	r2,r2,r2
  8060bc:	1085883a 	add	r2,r2,r2
  8060c0:	208d883a 	add	r6,r4,r2
  8060c4:	2180182e 	bgeu	r4,r6,806128 <__any_on+0x80>
  8060c8:	30bfff17 	ldw	r2,-4(r6)
  8060cc:	30ffff04 	addi	r3,r6,-4
  8060d0:	1000041e 	bne	r2,zero,8060e4 <__any_on+0x3c>
  8060d4:	20c0142e 	bgeu	r4,r3,806128 <__any_on+0x80>
  8060d8:	18ffff04 	addi	r3,r3,-4
  8060dc:	18800017 	ldw	r2,0(r3)
  8060e0:	103ffc26 	beq	r2,zero,8060d4 <__any_on+0x2c>
  8060e4:	00800044 	movi	r2,1
  8060e8:	f800283a 	ret
  8060ec:	18800a0e 	bge	r3,r2,806118 <__any_on+0x70>
  8060f0:	294007cc 	andi	r5,r5,31
  8060f4:	28000826 	beq	r5,zero,806118 <__any_on+0x70>
  8060f8:	18c5883a 	add	r2,r3,r3
  8060fc:	1085883a 	add	r2,r2,r2
  806100:	208d883a 	add	r6,r4,r2
  806104:	30c00017 	ldw	r3,0(r6)
  806108:	1944d83a 	srl	r2,r3,r5
  80610c:	1144983a 	sll	r2,r2,r5
  806110:	18bff41e 	bne	r3,r2,8060e4 <__any_on+0x3c>
  806114:	003feb06 	br	8060c4 <__any_on+0x1c>
  806118:	18c5883a 	add	r2,r3,r3
  80611c:	1085883a 	add	r2,r2,r2
  806120:	208d883a 	add	r6,r4,r2
  806124:	003fe706 	br	8060c4 <__any_on+0x1c>
  806128:	0005883a 	mov	r2,zero
  80612c:	f800283a 	ret

00806130 <_Balloc>:
  806130:	20c01317 	ldw	r3,76(r4)
  806134:	defffb04 	addi	sp,sp,-20
  806138:	dcc00315 	stw	r19,12(sp)
  80613c:	dc800215 	stw	r18,8(sp)
  806140:	dfc00415 	stw	ra,16(sp)
  806144:	2825883a 	mov	r18,r5
  806148:	dc400115 	stw	r17,4(sp)
  80614c:	dc000015 	stw	r16,0(sp)
  806150:	2027883a 	mov	r19,r4
  806154:	01800404 	movi	r6,16
  806158:	01400104 	movi	r5,4
  80615c:	18001726 	beq	r3,zero,8061bc <_Balloc+0x8c>
  806160:	01400044 	movi	r5,1
  806164:	9485883a 	add	r2,r18,r18
  806168:	2ca2983a 	sll	r17,r5,r18
  80616c:	1085883a 	add	r2,r2,r2
  806170:	10c7883a 	add	r3,r2,r3
  806174:	1c000017 	ldw	r16,0(r3)
  806178:	8c4d883a 	add	r6,r17,r17
  80617c:	318d883a 	add	r6,r6,r6
  806180:	9809883a 	mov	r4,r19
  806184:	31800504 	addi	r6,r6,20
  806188:	80001226 	beq	r16,zero,8061d4 <_Balloc+0xa4>
  80618c:	80800017 	ldw	r2,0(r16)
  806190:	18800015 	stw	r2,0(r3)
  806194:	80000415 	stw	zero,16(r16)
  806198:	80000315 	stw	zero,12(r16)
  80619c:	8005883a 	mov	r2,r16
  8061a0:	dfc00417 	ldw	ra,16(sp)
  8061a4:	dcc00317 	ldw	r19,12(sp)
  8061a8:	dc800217 	ldw	r18,8(sp)
  8061ac:	dc400117 	ldw	r17,4(sp)
  8061b0:	dc000017 	ldw	r16,0(sp)
  8061b4:	dec00504 	addi	sp,sp,20
  8061b8:	f800283a 	ret
  8061bc:	08075900 	call	807590 <_calloc_r>
  8061c0:	1007883a 	mov	r3,r2
  8061c4:	0021883a 	mov	r16,zero
  8061c8:	98801315 	stw	r2,76(r19)
  8061cc:	103fe41e 	bne	r2,zero,806160 <_Balloc+0x30>
  8061d0:	003ff206 	br	80619c <_Balloc+0x6c>
  8061d4:	08075900 	call	807590 <_calloc_r>
  8061d8:	103ff026 	beq	r2,zero,80619c <_Balloc+0x6c>
  8061dc:	1021883a 	mov	r16,r2
  8061e0:	14800115 	stw	r18,4(r2)
  8061e4:	14400215 	stw	r17,8(r2)
  8061e8:	003fea06 	br	806194 <_Balloc+0x64>

008061ec <__d2b>:
  8061ec:	defff504 	addi	sp,sp,-44
  8061f0:	dcc00515 	stw	r19,20(sp)
  8061f4:	04c00044 	movi	r19,1
  8061f8:	dc000215 	stw	r16,8(sp)
  8061fc:	2821883a 	mov	r16,r5
  806200:	980b883a 	mov	r5,r19
  806204:	ddc00915 	stw	r23,36(sp)
  806208:	dd800815 	stw	r22,32(sp)
  80620c:	dd400715 	stw	r21,28(sp)
  806210:	dd000615 	stw	r20,24(sp)
  806214:	dc800415 	stw	r18,16(sp)
  806218:	dc400315 	stw	r17,12(sp)
  80621c:	dfc00a15 	stw	ra,40(sp)
  806220:	3023883a 	mov	r17,r6
  806224:	382d883a 	mov	r22,r7
  806228:	ddc00b17 	ldw	r23,44(sp)
  80622c:	08061300 	call	806130 <_Balloc>
  806230:	1025883a 	mov	r18,r2
  806234:	00a00034 	movhi	r2,32768
  806238:	10bfffc4 	addi	r2,r2,-1
  80623c:	8888703a 	and	r4,r17,r2
  806240:	202ad53a 	srli	r21,r4,20
  806244:	00800434 	movhi	r2,16
  806248:	10bfffc4 	addi	r2,r2,-1
  80624c:	8886703a 	and	r3,r17,r2
  806250:	a829003a 	cmpeq	r20,r21,zero
  806254:	800b883a 	mov	r5,r16
  806258:	d8c00115 	stw	r3,4(sp)
  80625c:	94000504 	addi	r16,r18,20
  806260:	a000021e 	bne	r20,zero,80626c <__d2b+0x80>
  806264:	18c00434 	orhi	r3,r3,16
  806268:	d8c00115 	stw	r3,4(sp)
  80626c:	28002726 	beq	r5,zero,80630c <__d2b+0x120>
  806270:	d809883a 	mov	r4,sp
  806274:	d9400015 	stw	r5,0(sp)
  806278:	0805c480 	call	805c48 <__lo0bits>
  80627c:	100d883a 	mov	r6,r2
  806280:	10003526 	beq	r2,zero,806358 <__d2b+0x16c>
  806284:	d8c00117 	ldw	r3,4(sp)
  806288:	00800804 	movi	r2,32
  80628c:	1185c83a 	sub	r2,r2,r6
  806290:	d9000017 	ldw	r4,0(sp)
  806294:	1886983a 	sll	r3,r3,r2
  806298:	1906b03a 	or	r3,r3,r4
  80629c:	90c00515 	stw	r3,20(r18)
  8062a0:	d8c00117 	ldw	r3,4(sp)
  8062a4:	1986d83a 	srl	r3,r3,r6
  8062a8:	d8c00115 	stw	r3,4(sp)
  8062ac:	180b003a 	cmpeq	r5,r3,zero
  8062b0:	00800084 	movi	r2,2
  8062b4:	114bc83a 	sub	r5,r2,r5
  8062b8:	80c00115 	stw	r3,4(r16)
  8062bc:	91400415 	stw	r5,16(r18)
  8062c0:	a0001a1e 	bne	r20,zero,80632c <__d2b+0x140>
  8062c4:	3545883a 	add	r2,r6,r21
  8062c8:	10bef344 	addi	r2,r2,-1075
  8062cc:	00c00d44 	movi	r3,53
  8062d0:	b0800015 	stw	r2,0(r22)
  8062d4:	1987c83a 	sub	r3,r3,r6
  8062d8:	b8c00015 	stw	r3,0(r23)
  8062dc:	9005883a 	mov	r2,r18
  8062e0:	dfc00a17 	ldw	ra,40(sp)
  8062e4:	ddc00917 	ldw	r23,36(sp)
  8062e8:	dd800817 	ldw	r22,32(sp)
  8062ec:	dd400717 	ldw	r21,28(sp)
  8062f0:	dd000617 	ldw	r20,24(sp)
  8062f4:	dcc00517 	ldw	r19,20(sp)
  8062f8:	dc800417 	ldw	r18,16(sp)
  8062fc:	dc400317 	ldw	r17,12(sp)
  806300:	dc000217 	ldw	r16,8(sp)
  806304:	dec00b04 	addi	sp,sp,44
  806308:	f800283a 	ret
  80630c:	d9000104 	addi	r4,sp,4
  806310:	0805c480 	call	805c48 <__lo0bits>
  806314:	11800804 	addi	r6,r2,32
  806318:	d8800117 	ldw	r2,4(sp)
  80631c:	94c00415 	stw	r19,16(r18)
  806320:	980b883a 	mov	r5,r19
  806324:	90800515 	stw	r2,20(r18)
  806328:	a03fe626 	beq	r20,zero,8062c4 <__d2b+0xd8>
  80632c:	2945883a 	add	r2,r5,r5
  806330:	1085883a 	add	r2,r2,r2
  806334:	1405883a 	add	r2,r2,r16
  806338:	113fff17 	ldw	r4,-4(r2)
  80633c:	30fef384 	addi	r3,r6,-1074
  806340:	2820917a 	slli	r16,r5,5
  806344:	b0c00015 	stw	r3,0(r22)
  806348:	0805bd80 	call	805bd8 <__hi0bits>
  80634c:	80a1c83a 	sub	r16,r16,r2
  806350:	bc000015 	stw	r16,0(r23)
  806354:	003fe106 	br	8062dc <__d2b+0xf0>
  806358:	d8800017 	ldw	r2,0(sp)
  80635c:	90800515 	stw	r2,20(r18)
  806360:	d8c00117 	ldw	r3,4(sp)
  806364:	003fd106 	br	8062ac <__d2b+0xc0>

00806368 <__mdiff>:
  806368:	defffb04 	addi	sp,sp,-20
  80636c:	dc000015 	stw	r16,0(sp)
  806370:	2821883a 	mov	r16,r5
  806374:	dc800215 	stw	r18,8(sp)
  806378:	300b883a 	mov	r5,r6
  80637c:	2025883a 	mov	r18,r4
  806380:	8009883a 	mov	r4,r16
  806384:	dc400115 	stw	r17,4(sp)
  806388:	dfc00415 	stw	ra,16(sp)
  80638c:	dcc00315 	stw	r19,12(sp)
  806390:	3023883a 	mov	r17,r6
  806394:	0805d0c0 	call	805d0c <__mcmp>
  806398:	10004226 	beq	r2,zero,8064a4 <__mdiff+0x13c>
  80639c:	10005016 	blt	r2,zero,8064e0 <__mdiff+0x178>
  8063a0:	0027883a 	mov	r19,zero
  8063a4:	81400117 	ldw	r5,4(r16)
  8063a8:	9009883a 	mov	r4,r18
  8063ac:	08061300 	call	806130 <_Balloc>
  8063b0:	1019883a 	mov	r12,r2
  8063b4:	82800417 	ldw	r10,16(r16)
  8063b8:	88800417 	ldw	r2,16(r17)
  8063bc:	81800504 	addi	r6,r16,20
  8063c0:	5287883a 	add	r3,r10,r10
  8063c4:	1085883a 	add	r2,r2,r2
  8063c8:	18c7883a 	add	r3,r3,r3
  8063cc:	1085883a 	add	r2,r2,r2
  8063d0:	8a000504 	addi	r8,r17,20
  8063d4:	64c00315 	stw	r19,12(r12)
  8063d8:	30db883a 	add	r13,r6,r3
  8063dc:	4097883a 	add	r11,r8,r2
  8063e0:	61c00504 	addi	r7,r12,20
  8063e4:	0013883a 	mov	r9,zero
  8063e8:	31000017 	ldw	r4,0(r6)
  8063ec:	41400017 	ldw	r5,0(r8)
  8063f0:	42000104 	addi	r8,r8,4
  8063f4:	20bfffcc 	andi	r2,r4,65535
  8063f8:	28ffffcc 	andi	r3,r5,65535
  8063fc:	10c5c83a 	sub	r2,r2,r3
  806400:	1245883a 	add	r2,r2,r9
  806404:	2008d43a 	srli	r4,r4,16
  806408:	280ad43a 	srli	r5,r5,16
  80640c:	1007d43a 	srai	r3,r2,16
  806410:	3880000d 	sth	r2,0(r7)
  806414:	2149c83a 	sub	r4,r4,r5
  806418:	20c9883a 	add	r4,r4,r3
  80641c:	3900008d 	sth	r4,2(r7)
  806420:	31800104 	addi	r6,r6,4
  806424:	39c00104 	addi	r7,r7,4
  806428:	2013d43a 	srai	r9,r4,16
  80642c:	42ffee36 	bltu	r8,r11,8063e8 <__mdiff+0x80>
  806430:	33400c2e 	bgeu	r6,r13,806464 <__mdiff+0xfc>
  806434:	30800017 	ldw	r2,0(r6)
  806438:	31800104 	addi	r6,r6,4
  80643c:	10ffffcc 	andi	r3,r2,65535
  806440:	1a47883a 	add	r3,r3,r9
  806444:	1004d43a 	srli	r2,r2,16
  806448:	1809d43a 	srai	r4,r3,16
  80644c:	38c0000d 	sth	r3,0(r7)
  806450:	1105883a 	add	r2,r2,r4
  806454:	3880008d 	sth	r2,2(r7)
  806458:	1013d43a 	srai	r9,r2,16
  80645c:	39c00104 	addi	r7,r7,4
  806460:	337ff436 	bltu	r6,r13,806434 <__mdiff+0xcc>
  806464:	38bfff17 	ldw	r2,-4(r7)
  806468:	38ffff04 	addi	r3,r7,-4
  80646c:	1000041e 	bne	r2,zero,806480 <__mdiff+0x118>
  806470:	18ffff04 	addi	r3,r3,-4
  806474:	18800017 	ldw	r2,0(r3)
  806478:	52bfffc4 	addi	r10,r10,-1
  80647c:	103ffc26 	beq	r2,zero,806470 <__mdiff+0x108>
  806480:	6005883a 	mov	r2,r12
  806484:	62800415 	stw	r10,16(r12)
  806488:	dfc00417 	ldw	ra,16(sp)
  80648c:	dcc00317 	ldw	r19,12(sp)
  806490:	dc800217 	ldw	r18,8(sp)
  806494:	dc400117 	ldw	r17,4(sp)
  806498:	dc000017 	ldw	r16,0(sp)
  80649c:	dec00504 	addi	sp,sp,20
  8064a0:	f800283a 	ret
  8064a4:	9009883a 	mov	r4,r18
  8064a8:	000b883a 	mov	r5,zero
  8064ac:	08061300 	call	806130 <_Balloc>
  8064b0:	1019883a 	mov	r12,r2
  8064b4:	00800044 	movi	r2,1
  8064b8:	60800415 	stw	r2,16(r12)
  8064bc:	6005883a 	mov	r2,r12
  8064c0:	60000515 	stw	zero,20(r12)
  8064c4:	dfc00417 	ldw	ra,16(sp)
  8064c8:	dcc00317 	ldw	r19,12(sp)
  8064cc:	dc800217 	ldw	r18,8(sp)
  8064d0:	dc400117 	ldw	r17,4(sp)
  8064d4:	dc000017 	ldw	r16,0(sp)
  8064d8:	dec00504 	addi	sp,sp,20
  8064dc:	f800283a 	ret
  8064e0:	880d883a 	mov	r6,r17
  8064e4:	04c00044 	movi	r19,1
  8064e8:	8023883a 	mov	r17,r16
  8064ec:	3021883a 	mov	r16,r6
  8064f0:	003fac06 	br	8063a4 <__mdiff+0x3c>

008064f4 <__lshift>:
  8064f4:	defff904 	addi	sp,sp,-28
  8064f8:	28800417 	ldw	r2,16(r5)
  8064fc:	dc000015 	stw	r16,0(sp)
  806500:	3021d17a 	srai	r16,r6,5
  806504:	28c00217 	ldw	r3,8(r5)
  806508:	10800044 	addi	r2,r2,1
  80650c:	dc400115 	stw	r17,4(sp)
  806510:	80a3883a 	add	r17,r16,r2
  806514:	dd400515 	stw	r21,20(sp)
  806518:	dd000415 	stw	r20,16(sp)
  80651c:	dc800215 	stw	r18,8(sp)
  806520:	dfc00615 	stw	ra,24(sp)
  806524:	2825883a 	mov	r18,r5
  806528:	dcc00315 	stw	r19,12(sp)
  80652c:	3029883a 	mov	r20,r6
  806530:	202b883a 	mov	r21,r4
  806534:	29400117 	ldw	r5,4(r5)
  806538:	1c40030e 	bge	r3,r17,806548 <__lshift+0x54>
  80653c:	18c7883a 	add	r3,r3,r3
  806540:	29400044 	addi	r5,r5,1
  806544:	1c7ffd16 	blt	r3,r17,80653c <__lshift+0x48>
  806548:	a809883a 	mov	r4,r21
  80654c:	08061300 	call	806130 <_Balloc>
  806550:	1027883a 	mov	r19,r2
  806554:	11400504 	addi	r5,r2,20
  806558:	0400090e 	bge	zero,r16,806580 <__lshift+0x8c>
  80655c:	2805883a 	mov	r2,r5
  806560:	0007883a 	mov	r3,zero
  806564:	18c00044 	addi	r3,r3,1
  806568:	10000015 	stw	zero,0(r2)
  80656c:	10800104 	addi	r2,r2,4
  806570:	80fffc1e 	bne	r16,r3,806564 <__lshift+0x70>
  806574:	8405883a 	add	r2,r16,r16
  806578:	1085883a 	add	r2,r2,r2
  80657c:	288b883a 	add	r5,r5,r2
  806580:	90800417 	ldw	r2,16(r18)
  806584:	91000504 	addi	r4,r18,20
  806588:	a18007cc 	andi	r6,r20,31
  80658c:	1085883a 	add	r2,r2,r2
  806590:	1085883a 	add	r2,r2,r2
  806594:	208f883a 	add	r7,r4,r2
  806598:	30001e26 	beq	r6,zero,806614 <__lshift+0x120>
  80659c:	00800804 	movi	r2,32
  8065a0:	1191c83a 	sub	r8,r2,r6
  8065a4:	0007883a 	mov	r3,zero
  8065a8:	20800017 	ldw	r2,0(r4)
  8065ac:	1184983a 	sll	r2,r2,r6
  8065b0:	1884b03a 	or	r2,r3,r2
  8065b4:	28800015 	stw	r2,0(r5)
  8065b8:	20c00017 	ldw	r3,0(r4)
  8065bc:	21000104 	addi	r4,r4,4
  8065c0:	29400104 	addi	r5,r5,4
  8065c4:	1a06d83a 	srl	r3,r3,r8
  8065c8:	21fff736 	bltu	r4,r7,8065a8 <__lshift+0xb4>
  8065cc:	28c00015 	stw	r3,0(r5)
  8065d0:	18000126 	beq	r3,zero,8065d8 <__lshift+0xe4>
  8065d4:	8c400044 	addi	r17,r17,1
  8065d8:	88bfffc4 	addi	r2,r17,-1
  8065dc:	98800415 	stw	r2,16(r19)
  8065e0:	a809883a 	mov	r4,r21
  8065e4:	900b883a 	mov	r5,r18
  8065e8:	0805bb00 	call	805bb0 <_Bfree>
  8065ec:	9805883a 	mov	r2,r19
  8065f0:	dfc00617 	ldw	ra,24(sp)
  8065f4:	dd400517 	ldw	r21,20(sp)
  8065f8:	dd000417 	ldw	r20,16(sp)
  8065fc:	dcc00317 	ldw	r19,12(sp)
  806600:	dc800217 	ldw	r18,8(sp)
  806604:	dc400117 	ldw	r17,4(sp)
  806608:	dc000017 	ldw	r16,0(sp)
  80660c:	dec00704 	addi	sp,sp,28
  806610:	f800283a 	ret
  806614:	20800017 	ldw	r2,0(r4)
  806618:	21000104 	addi	r4,r4,4
  80661c:	28800015 	stw	r2,0(r5)
  806620:	29400104 	addi	r5,r5,4
  806624:	21ffec2e 	bgeu	r4,r7,8065d8 <__lshift+0xe4>
  806628:	20800017 	ldw	r2,0(r4)
  80662c:	21000104 	addi	r4,r4,4
  806630:	28800015 	stw	r2,0(r5)
  806634:	29400104 	addi	r5,r5,4
  806638:	21fff636 	bltu	r4,r7,806614 <__lshift+0x120>
  80663c:	003fe606 	br	8065d8 <__lshift+0xe4>

00806640 <__multiply>:
  806640:	defff004 	addi	sp,sp,-64
  806644:	dc800815 	stw	r18,32(sp)
  806648:	dc400715 	stw	r17,28(sp)
  80664c:	2c800417 	ldw	r18,16(r5)
  806650:	34400417 	ldw	r17,16(r6)
  806654:	dcc00915 	stw	r19,36(sp)
  806658:	dc000615 	stw	r16,24(sp)
  80665c:	dfc00f15 	stw	ra,60(sp)
  806660:	df000e15 	stw	fp,56(sp)
  806664:	ddc00d15 	stw	r23,52(sp)
  806668:	dd800c15 	stw	r22,48(sp)
  80666c:	dd400b15 	stw	r21,44(sp)
  806670:	dd000a15 	stw	r20,40(sp)
  806674:	2821883a 	mov	r16,r5
  806678:	3027883a 	mov	r19,r6
  80667c:	9440040e 	bge	r18,r17,806690 <__multiply+0x50>
  806680:	8825883a 	mov	r18,r17
  806684:	2c400417 	ldw	r17,16(r5)
  806688:	2827883a 	mov	r19,r5
  80668c:	3021883a 	mov	r16,r6
  806690:	80800217 	ldw	r2,8(r16)
  806694:	9447883a 	add	r3,r18,r17
  806698:	d8c00415 	stw	r3,16(sp)
  80669c:	81400117 	ldw	r5,4(r16)
  8066a0:	10c0010e 	bge	r2,r3,8066a8 <__multiply+0x68>
  8066a4:	29400044 	addi	r5,r5,1
  8066a8:	08061300 	call	806130 <_Balloc>
  8066ac:	d8800515 	stw	r2,20(sp)
  8066b0:	d9000417 	ldw	r4,16(sp)
  8066b4:	d8c00517 	ldw	r3,20(sp)
  8066b8:	2105883a 	add	r2,r4,r4
  8066bc:	1085883a 	add	r2,r2,r2
  8066c0:	19000504 	addi	r4,r3,20
  8066c4:	2085883a 	add	r2,r4,r2
  8066c8:	d8800315 	stw	r2,12(sp)
  8066cc:	2080052e 	bgeu	r4,r2,8066e4 <__multiply+0xa4>
  8066d0:	2005883a 	mov	r2,r4
  8066d4:	d8c00317 	ldw	r3,12(sp)
  8066d8:	10000015 	stw	zero,0(r2)
  8066dc:	10800104 	addi	r2,r2,4
  8066e0:	10fffc36 	bltu	r2,r3,8066d4 <__multiply+0x94>
  8066e4:	8c45883a 	add	r2,r17,r17
  8066e8:	9487883a 	add	r3,r18,r18
  8066ec:	9dc00504 	addi	r23,r19,20
  8066f0:	1085883a 	add	r2,r2,r2
  8066f4:	84000504 	addi	r16,r16,20
  8066f8:	18c7883a 	add	r3,r3,r3
  8066fc:	b885883a 	add	r2,r23,r2
  806700:	dc000015 	stw	r16,0(sp)
  806704:	d8800215 	stw	r2,8(sp)
  806708:	80f9883a 	add	fp,r16,r3
  80670c:	b880432e 	bgeu	r23,r2,80681c <__multiply+0x1dc>
  806710:	d9000115 	stw	r4,4(sp)
  806714:	b9000017 	ldw	r4,0(r23)
  806718:	253fffcc 	andi	r20,r4,65535
  80671c:	a0001a26 	beq	r20,zero,806788 <__multiply+0x148>
  806720:	dcc00017 	ldw	r19,0(sp)
  806724:	dc800117 	ldw	r18,4(sp)
  806728:	002b883a 	mov	r21,zero
  80672c:	9c400017 	ldw	r17,0(r19)
  806730:	94000017 	ldw	r16,0(r18)
  806734:	a009883a 	mov	r4,r20
  806738:	897fffcc 	andi	r5,r17,65535
  80673c:	08099040 	call	809904 <__mulsi3>
  806740:	880ad43a 	srli	r5,r17,16
  806744:	80ffffcc 	andi	r3,r16,65535
  806748:	a8c7883a 	add	r3,r21,r3
  80674c:	a009883a 	mov	r4,r20
  806750:	10e3883a 	add	r17,r2,r3
  806754:	8020d43a 	srli	r16,r16,16
  806758:	08099040 	call	809904 <__mulsi3>
  80675c:	8806d43a 	srli	r3,r17,16
  806760:	1405883a 	add	r2,r2,r16
  806764:	9cc00104 	addi	r19,r19,4
  806768:	1887883a 	add	r3,r3,r2
  80676c:	90c0008d 	sth	r3,2(r18)
  806770:	9440000d 	sth	r17,0(r18)
  806774:	182ad43a 	srli	r21,r3,16
  806778:	94800104 	addi	r18,r18,4
  80677c:	9f3feb36 	bltu	r19,fp,80672c <__multiply+0xec>
  806780:	95400015 	stw	r21,0(r18)
  806784:	b9000017 	ldw	r4,0(r23)
  806788:	202ad43a 	srli	r21,r4,16
  80678c:	a8001c26 	beq	r21,zero,806800 <__multiply+0x1c0>
  806790:	d9000117 	ldw	r4,4(sp)
  806794:	dd000017 	ldw	r20,0(sp)
  806798:	002d883a 	mov	r22,zero
  80679c:	24c00017 	ldw	r19,0(r4)
  8067a0:	2025883a 	mov	r18,r4
  8067a4:	9823883a 	mov	r17,r19
  8067a8:	a4000017 	ldw	r16,0(r20)
  8067ac:	a809883a 	mov	r4,r21
  8067b0:	a5000104 	addi	r20,r20,4
  8067b4:	817fffcc 	andi	r5,r16,65535
  8067b8:	08099040 	call	809904 <__mulsi3>
  8067bc:	8806d43a 	srli	r3,r17,16
  8067c0:	800ad43a 	srli	r5,r16,16
  8067c4:	94c0000d 	sth	r19,0(r18)
  8067c8:	b0c7883a 	add	r3,r22,r3
  8067cc:	10e1883a 	add	r16,r2,r3
  8067d0:	9400008d 	sth	r16,2(r18)
  8067d4:	a809883a 	mov	r4,r21
  8067d8:	94800104 	addi	r18,r18,4
  8067dc:	08099040 	call	809904 <__mulsi3>
  8067e0:	94400017 	ldw	r17,0(r18)
  8067e4:	8020d43a 	srli	r16,r16,16
  8067e8:	88ffffcc 	andi	r3,r17,65535
  8067ec:	10c5883a 	add	r2,r2,r3
  8067f0:	80a7883a 	add	r19,r16,r2
  8067f4:	982cd43a 	srli	r22,r19,16
  8067f8:	a73feb36 	bltu	r20,fp,8067a8 <__multiply+0x168>
  8067fc:	94c00015 	stw	r19,0(r18)
  806800:	d8800217 	ldw	r2,8(sp)
  806804:	bdc00104 	addi	r23,r23,4
  806808:	b880042e 	bgeu	r23,r2,80681c <__multiply+0x1dc>
  80680c:	d8c00117 	ldw	r3,4(sp)
  806810:	18c00104 	addi	r3,r3,4
  806814:	d8c00115 	stw	r3,4(sp)
  806818:	003fbe06 	br	806714 <__multiply+0xd4>
  80681c:	d9000417 	ldw	r4,16(sp)
  806820:	01000c0e 	bge	zero,r4,806854 <__multiply+0x214>
  806824:	d8c00317 	ldw	r3,12(sp)
  806828:	18bfff17 	ldw	r2,-4(r3)
  80682c:	18ffff04 	addi	r3,r3,-4
  806830:	10000326 	beq	r2,zero,806840 <__multiply+0x200>
  806834:	00000706 	br	806854 <__multiply+0x214>
  806838:	18800017 	ldw	r2,0(r3)
  80683c:	1000051e 	bne	r2,zero,806854 <__multiply+0x214>
  806840:	d9000417 	ldw	r4,16(sp)
  806844:	18ffff04 	addi	r3,r3,-4
  806848:	213fffc4 	addi	r4,r4,-1
  80684c:	d9000415 	stw	r4,16(sp)
  806850:	203ff91e 	bne	r4,zero,806838 <__multiply+0x1f8>
  806854:	d8800417 	ldw	r2,16(sp)
  806858:	d8c00517 	ldw	r3,20(sp)
  80685c:	18800415 	stw	r2,16(r3)
  806860:	1805883a 	mov	r2,r3
  806864:	dfc00f17 	ldw	ra,60(sp)
  806868:	df000e17 	ldw	fp,56(sp)
  80686c:	ddc00d17 	ldw	r23,52(sp)
  806870:	dd800c17 	ldw	r22,48(sp)
  806874:	dd400b17 	ldw	r21,44(sp)
  806878:	dd000a17 	ldw	r20,40(sp)
  80687c:	dcc00917 	ldw	r19,36(sp)
  806880:	dc800817 	ldw	r18,32(sp)
  806884:	dc400717 	ldw	r17,28(sp)
  806888:	dc000617 	ldw	r16,24(sp)
  80688c:	dec01004 	addi	sp,sp,64
  806890:	f800283a 	ret

00806894 <__i2b>:
  806894:	defffd04 	addi	sp,sp,-12
  806898:	dc000015 	stw	r16,0(sp)
  80689c:	04000044 	movi	r16,1
  8068a0:	dc800115 	stw	r18,4(sp)
  8068a4:	2825883a 	mov	r18,r5
  8068a8:	800b883a 	mov	r5,r16
  8068ac:	dfc00215 	stw	ra,8(sp)
  8068b0:	08061300 	call	806130 <_Balloc>
  8068b4:	14000415 	stw	r16,16(r2)
  8068b8:	14800515 	stw	r18,20(r2)
  8068bc:	dfc00217 	ldw	ra,8(sp)
  8068c0:	dc800117 	ldw	r18,4(sp)
  8068c4:	dc000017 	ldw	r16,0(sp)
  8068c8:	dec00304 	addi	sp,sp,12
  8068cc:	f800283a 	ret

008068d0 <__multadd>:
  8068d0:	defff604 	addi	sp,sp,-40
  8068d4:	dd800615 	stw	r22,24(sp)
  8068d8:	2d800417 	ldw	r22,16(r5)
  8068dc:	df000815 	stw	fp,32(sp)
  8068e0:	ddc00715 	stw	r23,28(sp)
  8068e4:	dd400515 	stw	r21,20(sp)
  8068e8:	dd000415 	stw	r20,16(sp)
  8068ec:	dcc00315 	stw	r19,12(sp)
  8068f0:	dc800215 	stw	r18,8(sp)
  8068f4:	dfc00915 	stw	ra,36(sp)
  8068f8:	dc400115 	stw	r17,4(sp)
  8068fc:	dc000015 	stw	r16,0(sp)
  806900:	282f883a 	mov	r23,r5
  806904:	2039883a 	mov	fp,r4
  806908:	302b883a 	mov	r21,r6
  80690c:	3829883a 	mov	r20,r7
  806910:	2c800504 	addi	r18,r5,20
  806914:	0027883a 	mov	r19,zero
  806918:	94400017 	ldw	r17,0(r18)
  80691c:	a80b883a 	mov	r5,r21
  806920:	9cc00044 	addi	r19,r19,1
  806924:	893fffcc 	andi	r4,r17,65535
  806928:	08099040 	call	809904 <__mulsi3>
  80692c:	8808d43a 	srli	r4,r17,16
  806930:	1521883a 	add	r16,r2,r20
  806934:	a80b883a 	mov	r5,r21
  806938:	08099040 	call	809904 <__mulsi3>
  80693c:	8008d43a 	srli	r4,r16,16
  806940:	843fffcc 	andi	r16,r16,65535
  806944:	1105883a 	add	r2,r2,r4
  806948:	1006943a 	slli	r3,r2,16
  80694c:	1028d43a 	srli	r20,r2,16
  806950:	1c07883a 	add	r3,r3,r16
  806954:	90c00015 	stw	r3,0(r18)
  806958:	94800104 	addi	r18,r18,4
  80695c:	9dbfee16 	blt	r19,r22,806918 <__multadd+0x48>
  806960:	a0000826 	beq	r20,zero,806984 <__multadd+0xb4>
  806964:	b8800217 	ldw	r2,8(r23)
  806968:	b080130e 	bge	r22,r2,8069b8 <__multadd+0xe8>
  80696c:	b585883a 	add	r2,r22,r22
  806970:	1085883a 	add	r2,r2,r2
  806974:	15c5883a 	add	r2,r2,r23
  806978:	b0c00044 	addi	r3,r22,1
  80697c:	15000515 	stw	r20,20(r2)
  806980:	b8c00415 	stw	r3,16(r23)
  806984:	b805883a 	mov	r2,r23
  806988:	dfc00917 	ldw	ra,36(sp)
  80698c:	df000817 	ldw	fp,32(sp)
  806990:	ddc00717 	ldw	r23,28(sp)
  806994:	dd800617 	ldw	r22,24(sp)
  806998:	dd400517 	ldw	r21,20(sp)
  80699c:	dd000417 	ldw	r20,16(sp)
  8069a0:	dcc00317 	ldw	r19,12(sp)
  8069a4:	dc800217 	ldw	r18,8(sp)
  8069a8:	dc400117 	ldw	r17,4(sp)
  8069ac:	dc000017 	ldw	r16,0(sp)
  8069b0:	dec00a04 	addi	sp,sp,40
  8069b4:	f800283a 	ret
  8069b8:	b9400117 	ldw	r5,4(r23)
  8069bc:	e009883a 	mov	r4,fp
  8069c0:	29400044 	addi	r5,r5,1
  8069c4:	08061300 	call	806130 <_Balloc>
  8069c8:	b9800417 	ldw	r6,16(r23)
  8069cc:	b9400304 	addi	r5,r23,12
  8069d0:	11000304 	addi	r4,r2,12
  8069d4:	318d883a 	add	r6,r6,r6
  8069d8:	318d883a 	add	r6,r6,r6
  8069dc:	31800204 	addi	r6,r6,8
  8069e0:	1023883a 	mov	r17,r2
  8069e4:	08059980 	call	805998 <memcpy>
  8069e8:	b80b883a 	mov	r5,r23
  8069ec:	e009883a 	mov	r4,fp
  8069f0:	0805bb00 	call	805bb0 <_Bfree>
  8069f4:	882f883a 	mov	r23,r17
  8069f8:	003fdc06 	br	80696c <__multadd+0x9c>

008069fc <__pow5mult>:
  8069fc:	defffa04 	addi	sp,sp,-24
  806a00:	308000cc 	andi	r2,r6,3
  806a04:	dd000415 	stw	r20,16(sp)
  806a08:	dcc00315 	stw	r19,12(sp)
  806a0c:	dc000015 	stw	r16,0(sp)
  806a10:	dfc00515 	stw	ra,20(sp)
  806a14:	dc800215 	stw	r18,8(sp)
  806a18:	dc400115 	stw	r17,4(sp)
  806a1c:	3021883a 	mov	r16,r6
  806a20:	2027883a 	mov	r19,r4
  806a24:	2829883a 	mov	r20,r5
  806a28:	10002b1e 	bne	r2,zero,806ad8 <__pow5mult+0xdc>
  806a2c:	8025d0ba 	srai	r18,r16,2
  806a30:	90001b26 	beq	r18,zero,806aa0 <__pow5mult+0xa4>
  806a34:	9c001217 	ldw	r16,72(r19)
  806a38:	8000081e 	bne	r16,zero,806a5c <__pow5mult+0x60>
  806a3c:	00003006 	br	806b00 <__pow5mult+0x104>
  806a40:	800b883a 	mov	r5,r16
  806a44:	800d883a 	mov	r6,r16
  806a48:	9809883a 	mov	r4,r19
  806a4c:	90001426 	beq	r18,zero,806aa0 <__pow5mult+0xa4>
  806a50:	80800017 	ldw	r2,0(r16)
  806a54:	10001b26 	beq	r2,zero,806ac4 <__pow5mult+0xc8>
  806a58:	1021883a 	mov	r16,r2
  806a5c:	9080004c 	andi	r2,r18,1
  806a60:	1005003a 	cmpeq	r2,r2,zero
  806a64:	9025d07a 	srai	r18,r18,1
  806a68:	800d883a 	mov	r6,r16
  806a6c:	9809883a 	mov	r4,r19
  806a70:	a00b883a 	mov	r5,r20
  806a74:	103ff21e 	bne	r2,zero,806a40 <__pow5mult+0x44>
  806a78:	08066400 	call	806640 <__multiply>
  806a7c:	a00b883a 	mov	r5,r20
  806a80:	9809883a 	mov	r4,r19
  806a84:	1023883a 	mov	r17,r2
  806a88:	0805bb00 	call	805bb0 <_Bfree>
  806a8c:	8829883a 	mov	r20,r17
  806a90:	800b883a 	mov	r5,r16
  806a94:	800d883a 	mov	r6,r16
  806a98:	9809883a 	mov	r4,r19
  806a9c:	903fec1e 	bne	r18,zero,806a50 <__pow5mult+0x54>
  806aa0:	a005883a 	mov	r2,r20
  806aa4:	dfc00517 	ldw	ra,20(sp)
  806aa8:	dd000417 	ldw	r20,16(sp)
  806aac:	dcc00317 	ldw	r19,12(sp)
  806ab0:	dc800217 	ldw	r18,8(sp)
  806ab4:	dc400117 	ldw	r17,4(sp)
  806ab8:	dc000017 	ldw	r16,0(sp)
  806abc:	dec00604 	addi	sp,sp,24
  806ac0:	f800283a 	ret
  806ac4:	08066400 	call	806640 <__multiply>
  806ac8:	80800015 	stw	r2,0(r16)
  806acc:	1021883a 	mov	r16,r2
  806ad0:	10000015 	stw	zero,0(r2)
  806ad4:	003fe106 	br	806a5c <__pow5mult+0x60>
  806ad8:	1085883a 	add	r2,r2,r2
  806adc:	00c02074 	movhi	r3,129
  806ae0:	18f36904 	addi	r3,r3,-12892
  806ae4:	1085883a 	add	r2,r2,r2
  806ae8:	10c5883a 	add	r2,r2,r3
  806aec:	11bfff17 	ldw	r6,-4(r2)
  806af0:	000f883a 	mov	r7,zero
  806af4:	08068d00 	call	8068d0 <__multadd>
  806af8:	1029883a 	mov	r20,r2
  806afc:	003fcb06 	br	806a2c <__pow5mult+0x30>
  806b00:	9809883a 	mov	r4,r19
  806b04:	01409c44 	movi	r5,625
  806b08:	08068940 	call	806894 <__i2b>
  806b0c:	98801215 	stw	r2,72(r19)
  806b10:	1021883a 	mov	r16,r2
  806b14:	10000015 	stw	zero,0(r2)
  806b18:	003fd006 	br	806a5c <__pow5mult+0x60>

00806b1c <__s2b>:
  806b1c:	defff904 	addi	sp,sp,-28
  806b20:	dcc00315 	stw	r19,12(sp)
  806b24:	dc800215 	stw	r18,8(sp)
  806b28:	2827883a 	mov	r19,r5
  806b2c:	2025883a 	mov	r18,r4
  806b30:	01400244 	movi	r5,9
  806b34:	39000204 	addi	r4,r7,8
  806b38:	dd000415 	stw	r20,16(sp)
  806b3c:	dc400115 	stw	r17,4(sp)
  806b40:	dfc00615 	stw	ra,24(sp)
  806b44:	dd400515 	stw	r21,20(sp)
  806b48:	dc000015 	stw	r16,0(sp)
  806b4c:	3829883a 	mov	r20,r7
  806b50:	3023883a 	mov	r17,r6
  806b54:	08098340 	call	809834 <__divsi3>
  806b58:	00c00044 	movi	r3,1
  806b5c:	1880350e 	bge	r3,r2,806c34 <__s2b+0x118>
  806b60:	000b883a 	mov	r5,zero
  806b64:	18c7883a 	add	r3,r3,r3
  806b68:	29400044 	addi	r5,r5,1
  806b6c:	18bffd16 	blt	r3,r2,806b64 <__s2b+0x48>
  806b70:	9009883a 	mov	r4,r18
  806b74:	08061300 	call	806130 <_Balloc>
  806b78:	1011883a 	mov	r8,r2
  806b7c:	d8800717 	ldw	r2,28(sp)
  806b80:	00c00044 	movi	r3,1
  806b84:	01800244 	movi	r6,9
  806b88:	40800515 	stw	r2,20(r8)
  806b8c:	40c00415 	stw	r3,16(r8)
  806b90:	3440260e 	bge	r6,r17,806c2c <__s2b+0x110>
  806b94:	3021883a 	mov	r16,r6
  806b98:	99ab883a 	add	r21,r19,r6
  806b9c:	9c05883a 	add	r2,r19,r16
  806ba0:	11c00007 	ldb	r7,0(r2)
  806ba4:	400b883a 	mov	r5,r8
  806ba8:	9009883a 	mov	r4,r18
  806bac:	39fff404 	addi	r7,r7,-48
  806bb0:	01800284 	movi	r6,10
  806bb4:	08068d00 	call	8068d0 <__multadd>
  806bb8:	84000044 	addi	r16,r16,1
  806bbc:	1011883a 	mov	r8,r2
  806bc0:	8c3ff61e 	bne	r17,r16,806b9c <__s2b+0x80>
  806bc4:	ac45883a 	add	r2,r21,r17
  806bc8:	117ffe04 	addi	r5,r2,-8
  806bcc:	880d883a 	mov	r6,r17
  806bd0:	35000c0e 	bge	r6,r20,806c04 <__s2b+0xe8>
  806bd4:	a185c83a 	sub	r2,r20,r6
  806bd8:	2821883a 	mov	r16,r5
  806bdc:	28a3883a 	add	r17,r5,r2
  806be0:	81c00007 	ldb	r7,0(r16)
  806be4:	400b883a 	mov	r5,r8
  806be8:	9009883a 	mov	r4,r18
  806bec:	39fff404 	addi	r7,r7,-48
  806bf0:	01800284 	movi	r6,10
  806bf4:	08068d00 	call	8068d0 <__multadd>
  806bf8:	84000044 	addi	r16,r16,1
  806bfc:	1011883a 	mov	r8,r2
  806c00:	847ff71e 	bne	r16,r17,806be0 <__s2b+0xc4>
  806c04:	4005883a 	mov	r2,r8
  806c08:	dfc00617 	ldw	ra,24(sp)
  806c0c:	dd400517 	ldw	r21,20(sp)
  806c10:	dd000417 	ldw	r20,16(sp)
  806c14:	dcc00317 	ldw	r19,12(sp)
  806c18:	dc800217 	ldw	r18,8(sp)
  806c1c:	dc400117 	ldw	r17,4(sp)
  806c20:	dc000017 	ldw	r16,0(sp)
  806c24:	dec00704 	addi	sp,sp,28
  806c28:	f800283a 	ret
  806c2c:	99400284 	addi	r5,r19,10
  806c30:	003fe706 	br	806bd0 <__s2b+0xb4>
  806c34:	000b883a 	mov	r5,zero
  806c38:	003fcd06 	br	806b70 <__s2b+0x54>

00806c3c <_realloc_r>:
  806c3c:	defff404 	addi	sp,sp,-48
  806c40:	dd800815 	stw	r22,32(sp)
  806c44:	dc800415 	stw	r18,16(sp)
  806c48:	dc400315 	stw	r17,12(sp)
  806c4c:	dfc00b15 	stw	ra,44(sp)
  806c50:	df000a15 	stw	fp,40(sp)
  806c54:	ddc00915 	stw	r23,36(sp)
  806c58:	dd400715 	stw	r21,28(sp)
  806c5c:	dd000615 	stw	r20,24(sp)
  806c60:	dcc00515 	stw	r19,20(sp)
  806c64:	dc000215 	stw	r16,8(sp)
  806c68:	2825883a 	mov	r18,r5
  806c6c:	3023883a 	mov	r17,r6
  806c70:	202d883a 	mov	r22,r4
  806c74:	2800c926 	beq	r5,zero,806f9c <_realloc_r+0x360>
  806c78:	080a6880 	call	80a688 <__malloc_lock>
  806c7c:	943ffe04 	addi	r16,r18,-8
  806c80:	88c002c4 	addi	r3,r17,11
  806c84:	00800584 	movi	r2,22
  806c88:	82000117 	ldw	r8,4(r16)
  806c8c:	10c01b2e 	bgeu	r2,r3,806cfc <_realloc_r+0xc0>
  806c90:	00bffe04 	movi	r2,-8
  806c94:	188e703a 	and	r7,r3,r2
  806c98:	3839883a 	mov	fp,r7
  806c9c:	38001a16 	blt	r7,zero,806d08 <_realloc_r+0xcc>
  806ca0:	e4401936 	bltu	fp,r17,806d08 <_realloc_r+0xcc>
  806ca4:	013fff04 	movi	r4,-4
  806ca8:	4126703a 	and	r19,r8,r4
  806cac:	99c02616 	blt	r19,r7,806d48 <_realloc_r+0x10c>
  806cb0:	802b883a 	mov	r21,r16
  806cb4:	9829883a 	mov	r20,r19
  806cb8:	84000204 	addi	r16,r16,8
  806cbc:	a80f883a 	mov	r7,r21
  806cc0:	a70dc83a 	sub	r6,r20,fp
  806cc4:	008003c4 	movi	r2,15
  806cc8:	1180c136 	bltu	r2,r6,806fd0 <_realloc_r+0x394>
  806ccc:	38800117 	ldw	r2,4(r7)
  806cd0:	a549883a 	add	r4,r20,r21
  806cd4:	1080004c 	andi	r2,r2,1
  806cd8:	a084b03a 	or	r2,r20,r2
  806cdc:	38800115 	stw	r2,4(r7)
  806ce0:	20c00117 	ldw	r3,4(r4)
  806ce4:	18c00054 	ori	r3,r3,1
  806ce8:	20c00115 	stw	r3,4(r4)
  806cec:	b009883a 	mov	r4,r22
  806cf0:	080a6a80 	call	80a6a8 <__malloc_unlock>
  806cf4:	8023883a 	mov	r17,r16
  806cf8:	00000606 	br	806d14 <_realloc_r+0xd8>
  806cfc:	01c00404 	movi	r7,16
  806d00:	3839883a 	mov	fp,r7
  806d04:	e47fe72e 	bgeu	fp,r17,806ca4 <_realloc_r+0x68>
  806d08:	00800304 	movi	r2,12
  806d0c:	0023883a 	mov	r17,zero
  806d10:	b0800015 	stw	r2,0(r22)
  806d14:	8805883a 	mov	r2,r17
  806d18:	dfc00b17 	ldw	ra,44(sp)
  806d1c:	df000a17 	ldw	fp,40(sp)
  806d20:	ddc00917 	ldw	r23,36(sp)
  806d24:	dd800817 	ldw	r22,32(sp)
  806d28:	dd400717 	ldw	r21,28(sp)
  806d2c:	dd000617 	ldw	r20,24(sp)
  806d30:	dcc00517 	ldw	r19,20(sp)
  806d34:	dc800417 	ldw	r18,16(sp)
  806d38:	dc400317 	ldw	r17,12(sp)
  806d3c:	dc000217 	ldw	r16,8(sp)
  806d40:	dec00c04 	addi	sp,sp,48
  806d44:	f800283a 	ret
  806d48:	00802074 	movhi	r2,129
  806d4c:	10b4cb04 	addi	r2,r2,-11476
  806d50:	12400217 	ldw	r9,8(r2)
  806d54:	84cd883a 	add	r6,r16,r19
  806d58:	802b883a 	mov	r21,r16
  806d5c:	3240b926 	beq	r6,r9,807044 <_realloc_r+0x408>
  806d60:	31400117 	ldw	r5,4(r6)
  806d64:	00bfff84 	movi	r2,-2
  806d68:	2884703a 	and	r2,r5,r2
  806d6c:	1185883a 	add	r2,r2,r6
  806d70:	10c00117 	ldw	r3,4(r2)
  806d74:	18c0004c 	andi	r3,r3,1
  806d78:	1807003a 	cmpeq	r3,r3,zero
  806d7c:	1800a326 	beq	r3,zero,80700c <_realloc_r+0x3d0>
  806d80:	2908703a 	and	r4,r5,r4
  806d84:	9929883a 	add	r20,r19,r4
  806d88:	a1c0a30e 	bge	r20,r7,807018 <_realloc_r+0x3dc>
  806d8c:	4080004c 	andi	r2,r8,1
  806d90:	1000551e 	bne	r2,zero,806ee8 <_realloc_r+0x2ac>
  806d94:	80800017 	ldw	r2,0(r16)
  806d98:	80afc83a 	sub	r23,r16,r2
  806d9c:	b8c00117 	ldw	r3,4(r23)
  806da0:	00bfff04 	movi	r2,-4
  806da4:	1884703a 	and	r2,r3,r2
  806da8:	30002e26 	beq	r6,zero,806e64 <_realloc_r+0x228>
  806dac:	3240b926 	beq	r6,r9,807094 <_realloc_r+0x458>
  806db0:	98a9883a 	add	r20,r19,r2
  806db4:	2509883a 	add	r4,r4,r20
  806db8:	d9000015 	stw	r4,0(sp)
  806dbc:	21c02a16 	blt	r4,r7,806e68 <_realloc_r+0x22c>
  806dc0:	30800317 	ldw	r2,12(r6)
  806dc4:	30c00217 	ldw	r3,8(r6)
  806dc8:	01400904 	movi	r5,36
  806dcc:	99bfff04 	addi	r6,r19,-4
  806dd0:	18800315 	stw	r2,12(r3)
  806dd4:	10c00215 	stw	r3,8(r2)
  806dd8:	b9000317 	ldw	r4,12(r23)
  806ddc:	b8800217 	ldw	r2,8(r23)
  806de0:	b82b883a 	mov	r21,r23
  806de4:	bc000204 	addi	r16,r23,8
  806de8:	20800215 	stw	r2,8(r4)
  806dec:	11000315 	stw	r4,12(r2)
  806df0:	2980e436 	bltu	r5,r6,807184 <_realloc_r+0x548>
  806df4:	008004c4 	movi	r2,19
  806df8:	9009883a 	mov	r4,r18
  806dfc:	8011883a 	mov	r8,r16
  806e00:	11800f2e 	bgeu	r2,r6,806e40 <_realloc_r+0x204>
  806e04:	90800017 	ldw	r2,0(r18)
  806e08:	ba000404 	addi	r8,r23,16
  806e0c:	91000204 	addi	r4,r18,8
  806e10:	b8800215 	stw	r2,8(r23)
  806e14:	90c00117 	ldw	r3,4(r18)
  806e18:	008006c4 	movi	r2,27
  806e1c:	b8c00315 	stw	r3,12(r23)
  806e20:	1180072e 	bgeu	r2,r6,806e40 <_realloc_r+0x204>
  806e24:	90c00217 	ldw	r3,8(r18)
  806e28:	ba000604 	addi	r8,r23,24
  806e2c:	91000404 	addi	r4,r18,16
  806e30:	b8c00415 	stw	r3,16(r23)
  806e34:	90800317 	ldw	r2,12(r18)
  806e38:	b8800515 	stw	r2,20(r23)
  806e3c:	3140e726 	beq	r6,r5,8071dc <_realloc_r+0x5a0>
  806e40:	20800017 	ldw	r2,0(r4)
  806e44:	dd000017 	ldw	r20,0(sp)
  806e48:	b80f883a 	mov	r7,r23
  806e4c:	40800015 	stw	r2,0(r8)
  806e50:	20c00117 	ldw	r3,4(r4)
  806e54:	40c00115 	stw	r3,4(r8)
  806e58:	20800217 	ldw	r2,8(r4)
  806e5c:	40800215 	stw	r2,8(r8)
  806e60:	003f9706 	br	806cc0 <_realloc_r+0x84>
  806e64:	98a9883a 	add	r20,r19,r2
  806e68:	a1c01f16 	blt	r20,r7,806ee8 <_realloc_r+0x2ac>
  806e6c:	b8c00317 	ldw	r3,12(r23)
  806e70:	b8800217 	ldw	r2,8(r23)
  806e74:	99bfff04 	addi	r6,r19,-4
  806e78:	01400904 	movi	r5,36
  806e7c:	b82b883a 	mov	r21,r23
  806e80:	18800215 	stw	r2,8(r3)
  806e84:	10c00315 	stw	r3,12(r2)
  806e88:	bc000204 	addi	r16,r23,8
  806e8c:	2980c336 	bltu	r5,r6,80719c <_realloc_r+0x560>
  806e90:	008004c4 	movi	r2,19
  806e94:	9009883a 	mov	r4,r18
  806e98:	8011883a 	mov	r8,r16
  806e9c:	11800f2e 	bgeu	r2,r6,806edc <_realloc_r+0x2a0>
  806ea0:	90800017 	ldw	r2,0(r18)
  806ea4:	ba000404 	addi	r8,r23,16
  806ea8:	91000204 	addi	r4,r18,8
  806eac:	b8800215 	stw	r2,8(r23)
  806eb0:	90c00117 	ldw	r3,4(r18)
  806eb4:	008006c4 	movi	r2,27
  806eb8:	b8c00315 	stw	r3,12(r23)
  806ebc:	1180072e 	bgeu	r2,r6,806edc <_realloc_r+0x2a0>
  806ec0:	90c00217 	ldw	r3,8(r18)
  806ec4:	ba000604 	addi	r8,r23,24
  806ec8:	91000404 	addi	r4,r18,16
  806ecc:	b8c00415 	stw	r3,16(r23)
  806ed0:	90800317 	ldw	r2,12(r18)
  806ed4:	b8800515 	stw	r2,20(r23)
  806ed8:	3140c726 	beq	r6,r5,8071f8 <_realloc_r+0x5bc>
  806edc:	20800017 	ldw	r2,0(r4)
  806ee0:	b80f883a 	mov	r7,r23
  806ee4:	003fd906 	br	806e4c <_realloc_r+0x210>
  806ee8:	880b883a 	mov	r5,r17
  806eec:	b009883a 	mov	r4,r22
  806ef0:	08051740 	call	805174 <_malloc_r>
  806ef4:	1023883a 	mov	r17,r2
  806ef8:	10002526 	beq	r2,zero,806f90 <_realloc_r+0x354>
  806efc:	80800117 	ldw	r2,4(r16)
  806f00:	00ffff84 	movi	r3,-2
  806f04:	893ffe04 	addi	r4,r17,-8
  806f08:	10c4703a 	and	r2,r2,r3
  806f0c:	8085883a 	add	r2,r16,r2
  806f10:	20809526 	beq	r4,r2,807168 <_realloc_r+0x52c>
  806f14:	99bfff04 	addi	r6,r19,-4
  806f18:	01c00904 	movi	r7,36
  806f1c:	39804536 	bltu	r7,r6,807034 <_realloc_r+0x3f8>
  806f20:	008004c4 	movi	r2,19
  806f24:	9009883a 	mov	r4,r18
  806f28:	880b883a 	mov	r5,r17
  806f2c:	11800f2e 	bgeu	r2,r6,806f6c <_realloc_r+0x330>
  806f30:	90800017 	ldw	r2,0(r18)
  806f34:	89400204 	addi	r5,r17,8
  806f38:	91000204 	addi	r4,r18,8
  806f3c:	88800015 	stw	r2,0(r17)
  806f40:	90c00117 	ldw	r3,4(r18)
  806f44:	008006c4 	movi	r2,27
  806f48:	88c00115 	stw	r3,4(r17)
  806f4c:	1180072e 	bgeu	r2,r6,806f6c <_realloc_r+0x330>
  806f50:	90c00217 	ldw	r3,8(r18)
  806f54:	89400404 	addi	r5,r17,16
  806f58:	91000404 	addi	r4,r18,16
  806f5c:	88c00215 	stw	r3,8(r17)
  806f60:	90800317 	ldw	r2,12(r18)
  806f64:	88800315 	stw	r2,12(r17)
  806f68:	31c09126 	beq	r6,r7,8071b0 <_realloc_r+0x574>
  806f6c:	20800017 	ldw	r2,0(r4)
  806f70:	28800015 	stw	r2,0(r5)
  806f74:	20c00117 	ldw	r3,4(r4)
  806f78:	28c00115 	stw	r3,4(r5)
  806f7c:	20800217 	ldw	r2,8(r4)
  806f80:	28800215 	stw	r2,8(r5)
  806f84:	900b883a 	mov	r5,r18
  806f88:	b009883a 	mov	r4,r22
  806f8c:	08045ec0 	call	8045ec <_free_r>
  806f90:	b009883a 	mov	r4,r22
  806f94:	080a6a80 	call	80a6a8 <__malloc_unlock>
  806f98:	003f5e06 	br	806d14 <_realloc_r+0xd8>
  806f9c:	300b883a 	mov	r5,r6
  806fa0:	dfc00b17 	ldw	ra,44(sp)
  806fa4:	df000a17 	ldw	fp,40(sp)
  806fa8:	ddc00917 	ldw	r23,36(sp)
  806fac:	dd800817 	ldw	r22,32(sp)
  806fb0:	dd400717 	ldw	r21,28(sp)
  806fb4:	dd000617 	ldw	r20,24(sp)
  806fb8:	dcc00517 	ldw	r19,20(sp)
  806fbc:	dc800417 	ldw	r18,16(sp)
  806fc0:	dc400317 	ldw	r17,12(sp)
  806fc4:	dc000217 	ldw	r16,8(sp)
  806fc8:	dec00c04 	addi	sp,sp,48
  806fcc:	08051741 	jmpi	805174 <_malloc_r>
  806fd0:	38800117 	ldw	r2,4(r7)
  806fd4:	e54b883a 	add	r5,fp,r21
  806fd8:	31000054 	ori	r4,r6,1
  806fdc:	1080004c 	andi	r2,r2,1
  806fe0:	1704b03a 	or	r2,r2,fp
  806fe4:	38800115 	stw	r2,4(r7)
  806fe8:	29000115 	stw	r4,4(r5)
  806fec:	2987883a 	add	r3,r5,r6
  806ff0:	18800117 	ldw	r2,4(r3)
  806ff4:	29400204 	addi	r5,r5,8
  806ff8:	b009883a 	mov	r4,r22
  806ffc:	10800054 	ori	r2,r2,1
  807000:	18800115 	stw	r2,4(r3)
  807004:	08045ec0 	call	8045ec <_free_r>
  807008:	003f3806 	br	806cec <_realloc_r+0xb0>
  80700c:	000d883a 	mov	r6,zero
  807010:	0009883a 	mov	r4,zero
  807014:	003f5d06 	br	806d8c <_realloc_r+0x150>
  807018:	30c00217 	ldw	r3,8(r6)
  80701c:	30800317 	ldw	r2,12(r6)
  807020:	800f883a 	mov	r7,r16
  807024:	84000204 	addi	r16,r16,8
  807028:	10c00215 	stw	r3,8(r2)
  80702c:	18800315 	stw	r2,12(r3)
  807030:	003f2306 	br	806cc0 <_realloc_r+0x84>
  807034:	8809883a 	mov	r4,r17
  807038:	900b883a 	mov	r5,r18
  80703c:	0805a380 	call	805a38 <memmove>
  807040:	003fd006 	br	806f84 <_realloc_r+0x348>
  807044:	30800117 	ldw	r2,4(r6)
  807048:	e0c00404 	addi	r3,fp,16
  80704c:	1108703a 	and	r4,r2,r4
  807050:	9905883a 	add	r2,r19,r4
  807054:	10ff4d16 	blt	r2,r3,806d8c <_realloc_r+0x150>
  807058:	1705c83a 	sub	r2,r2,fp
  80705c:	870b883a 	add	r5,r16,fp
  807060:	10800054 	ori	r2,r2,1
  807064:	28800115 	stw	r2,4(r5)
  807068:	80c00117 	ldw	r3,4(r16)
  80706c:	00802074 	movhi	r2,129
  807070:	10b4cb04 	addi	r2,r2,-11476
  807074:	b009883a 	mov	r4,r22
  807078:	18c0004c 	andi	r3,r3,1
  80707c:	e0c6b03a 	or	r3,fp,r3
  807080:	11400215 	stw	r5,8(r2)
  807084:	80c00115 	stw	r3,4(r16)
  807088:	080a6a80 	call	80a6a8 <__malloc_unlock>
  80708c:	84400204 	addi	r17,r16,8
  807090:	003f2006 	br	806d14 <_realloc_r+0xd8>
  807094:	98a9883a 	add	r20,r19,r2
  807098:	2509883a 	add	r4,r4,r20
  80709c:	e0800404 	addi	r2,fp,16
  8070a0:	d9000115 	stw	r4,4(sp)
  8070a4:	20bf7016 	blt	r4,r2,806e68 <_realloc_r+0x22c>
  8070a8:	b8c00317 	ldw	r3,12(r23)
  8070ac:	b8800217 	ldw	r2,8(r23)
  8070b0:	99bfff04 	addi	r6,r19,-4
  8070b4:	01400904 	movi	r5,36
  8070b8:	18800215 	stw	r2,8(r3)
  8070bc:	10c00315 	stw	r3,12(r2)
  8070c0:	bc400204 	addi	r17,r23,8
  8070c4:	29804136 	bltu	r5,r6,8071cc <_realloc_r+0x590>
  8070c8:	008004c4 	movi	r2,19
  8070cc:	9009883a 	mov	r4,r18
  8070d0:	880f883a 	mov	r7,r17
  8070d4:	11800f2e 	bgeu	r2,r6,807114 <_realloc_r+0x4d8>
  8070d8:	90800017 	ldw	r2,0(r18)
  8070dc:	b9c00404 	addi	r7,r23,16
  8070e0:	91000204 	addi	r4,r18,8
  8070e4:	b8800215 	stw	r2,8(r23)
  8070e8:	90c00117 	ldw	r3,4(r18)
  8070ec:	008006c4 	movi	r2,27
  8070f0:	b8c00315 	stw	r3,12(r23)
  8070f4:	1180072e 	bgeu	r2,r6,807114 <_realloc_r+0x4d8>
  8070f8:	90c00217 	ldw	r3,8(r18)
  8070fc:	b9c00604 	addi	r7,r23,24
  807100:	91000404 	addi	r4,r18,16
  807104:	b8c00415 	stw	r3,16(r23)
  807108:	90800317 	ldw	r2,12(r18)
  80710c:	b8800515 	stw	r2,20(r23)
  807110:	31404026 	beq	r6,r5,807214 <_realloc_r+0x5d8>
  807114:	20800017 	ldw	r2,0(r4)
  807118:	38800015 	stw	r2,0(r7)
  80711c:	20c00117 	ldw	r3,4(r4)
  807120:	38c00115 	stw	r3,4(r7)
  807124:	20800217 	ldw	r2,8(r4)
  807128:	38800215 	stw	r2,8(r7)
  80712c:	d8c00117 	ldw	r3,4(sp)
  807130:	bf0b883a 	add	r5,r23,fp
  807134:	b009883a 	mov	r4,r22
  807138:	1f05c83a 	sub	r2,r3,fp
  80713c:	10800054 	ori	r2,r2,1
  807140:	28800115 	stw	r2,4(r5)
  807144:	b8c00117 	ldw	r3,4(r23)
  807148:	00802074 	movhi	r2,129
  80714c:	10b4cb04 	addi	r2,r2,-11476
  807150:	11400215 	stw	r5,8(r2)
  807154:	18c0004c 	andi	r3,r3,1
  807158:	e0c6b03a 	or	r3,fp,r3
  80715c:	b8c00115 	stw	r3,4(r23)
  807160:	080a6a80 	call	80a6a8 <__malloc_unlock>
  807164:	003eeb06 	br	806d14 <_realloc_r+0xd8>
  807168:	20800117 	ldw	r2,4(r4)
  80716c:	00ffff04 	movi	r3,-4
  807170:	800f883a 	mov	r7,r16
  807174:	10c4703a 	and	r2,r2,r3
  807178:	98a9883a 	add	r20,r19,r2
  80717c:	84000204 	addi	r16,r16,8
  807180:	003ecf06 	br	806cc0 <_realloc_r+0x84>
  807184:	900b883a 	mov	r5,r18
  807188:	8009883a 	mov	r4,r16
  80718c:	0805a380 	call	805a38 <memmove>
  807190:	dd000017 	ldw	r20,0(sp)
  807194:	b80f883a 	mov	r7,r23
  807198:	003ec906 	br	806cc0 <_realloc_r+0x84>
  80719c:	900b883a 	mov	r5,r18
  8071a0:	8009883a 	mov	r4,r16
  8071a4:	0805a380 	call	805a38 <memmove>
  8071a8:	b80f883a 	mov	r7,r23
  8071ac:	003ec406 	br	806cc0 <_realloc_r+0x84>
  8071b0:	90c00417 	ldw	r3,16(r18)
  8071b4:	89400604 	addi	r5,r17,24
  8071b8:	91000604 	addi	r4,r18,24
  8071bc:	88c00415 	stw	r3,16(r17)
  8071c0:	90800517 	ldw	r2,20(r18)
  8071c4:	88800515 	stw	r2,20(r17)
  8071c8:	003f6806 	br	806f6c <_realloc_r+0x330>
  8071cc:	900b883a 	mov	r5,r18
  8071d0:	8809883a 	mov	r4,r17
  8071d4:	0805a380 	call	805a38 <memmove>
  8071d8:	003fd406 	br	80712c <_realloc_r+0x4f0>
  8071dc:	90c00417 	ldw	r3,16(r18)
  8071e0:	91000604 	addi	r4,r18,24
  8071e4:	ba000804 	addi	r8,r23,32
  8071e8:	b8c00615 	stw	r3,24(r23)
  8071ec:	90800517 	ldw	r2,20(r18)
  8071f0:	b8800715 	stw	r2,28(r23)
  8071f4:	003f1206 	br	806e40 <_realloc_r+0x204>
  8071f8:	90c00417 	ldw	r3,16(r18)
  8071fc:	91000604 	addi	r4,r18,24
  807200:	ba000804 	addi	r8,r23,32
  807204:	b8c00615 	stw	r3,24(r23)
  807208:	90800517 	ldw	r2,20(r18)
  80720c:	b8800715 	stw	r2,28(r23)
  807210:	003f3206 	br	806edc <_realloc_r+0x2a0>
  807214:	90c00417 	ldw	r3,16(r18)
  807218:	91000604 	addi	r4,r18,24
  80721c:	b9c00804 	addi	r7,r23,32
  807220:	b8c00615 	stw	r3,24(r23)
  807224:	90800517 	ldw	r2,20(r18)
  807228:	b8800715 	stw	r2,28(r23)
  80722c:	003fb906 	br	807114 <_realloc_r+0x4d8>

00807230 <__isinfd>:
  807230:	200d883a 	mov	r6,r4
  807234:	0109c83a 	sub	r4,zero,r4
  807238:	2188b03a 	or	r4,r4,r6
  80723c:	2008d7fa 	srli	r4,r4,31
  807240:	00a00034 	movhi	r2,32768
  807244:	10bfffc4 	addi	r2,r2,-1
  807248:	1144703a 	and	r2,r2,r5
  80724c:	2088b03a 	or	r4,r4,r2
  807250:	009ffc34 	movhi	r2,32752
  807254:	1105c83a 	sub	r2,r2,r4
  807258:	0087c83a 	sub	r3,zero,r2
  80725c:	10c4b03a 	or	r2,r2,r3
  807260:	1004d7fa 	srli	r2,r2,31
  807264:	00c00044 	movi	r3,1
  807268:	1885c83a 	sub	r2,r3,r2
  80726c:	f800283a 	ret

00807270 <__isnand>:
  807270:	200d883a 	mov	r6,r4
  807274:	0109c83a 	sub	r4,zero,r4
  807278:	2188b03a 	or	r4,r4,r6
  80727c:	2008d7fa 	srli	r4,r4,31
  807280:	00a00034 	movhi	r2,32768
  807284:	10bfffc4 	addi	r2,r2,-1
  807288:	1144703a 	and	r2,r2,r5
  80728c:	2088b03a 	or	r4,r4,r2
  807290:	009ffc34 	movhi	r2,32752
  807294:	1105c83a 	sub	r2,r2,r4
  807298:	1004d7fa 	srli	r2,r2,31
  80729c:	f800283a 	ret

008072a0 <_sbrk_r>:
  8072a0:	defffd04 	addi	sp,sp,-12
  8072a4:	dc000015 	stw	r16,0(sp)
  8072a8:	04002074 	movhi	r16,129
  8072ac:	84013e04 	addi	r16,r16,1272
  8072b0:	dc400115 	stw	r17,4(sp)
  8072b4:	80000015 	stw	zero,0(r16)
  8072b8:	2023883a 	mov	r17,r4
  8072bc:	2809883a 	mov	r4,r5
  8072c0:	dfc00215 	stw	ra,8(sp)
  8072c4:	080a8c40 	call	80a8c4 <sbrk>
  8072c8:	1007883a 	mov	r3,r2
  8072cc:	00bfffc4 	movi	r2,-1
  8072d0:	18800626 	beq	r3,r2,8072ec <_sbrk_r+0x4c>
  8072d4:	1805883a 	mov	r2,r3
  8072d8:	dfc00217 	ldw	ra,8(sp)
  8072dc:	dc400117 	ldw	r17,4(sp)
  8072e0:	dc000017 	ldw	r16,0(sp)
  8072e4:	dec00304 	addi	sp,sp,12
  8072e8:	f800283a 	ret
  8072ec:	80800017 	ldw	r2,0(r16)
  8072f0:	103ff826 	beq	r2,zero,8072d4 <_sbrk_r+0x34>
  8072f4:	88800015 	stw	r2,0(r17)
  8072f8:	1805883a 	mov	r2,r3
  8072fc:	dfc00217 	ldw	ra,8(sp)
  807300:	dc400117 	ldw	r17,4(sp)
  807304:	dc000017 	ldw	r16,0(sp)
  807308:	dec00304 	addi	sp,sp,12
  80730c:	f800283a 	ret

00807310 <__sclose>:
  807310:	2940038f 	ldh	r5,14(r5)
  807314:	08076581 	jmpi	807658 <_close_r>

00807318 <__sseek>:
  807318:	defffe04 	addi	sp,sp,-8
  80731c:	dc000015 	stw	r16,0(sp)
  807320:	2821883a 	mov	r16,r5
  807324:	2940038f 	ldh	r5,14(r5)
  807328:	dfc00115 	stw	ra,4(sp)
  80732c:	08078d00 	call	8078d0 <_lseek_r>
  807330:	1007883a 	mov	r3,r2
  807334:	00bfffc4 	movi	r2,-1
  807338:	18800926 	beq	r3,r2,807360 <__sseek+0x48>
  80733c:	8080030b 	ldhu	r2,12(r16)
  807340:	80c01415 	stw	r3,80(r16)
  807344:	10840014 	ori	r2,r2,4096
  807348:	8080030d 	sth	r2,12(r16)
  80734c:	1805883a 	mov	r2,r3
  807350:	dfc00117 	ldw	ra,4(sp)
  807354:	dc000017 	ldw	r16,0(sp)
  807358:	dec00204 	addi	sp,sp,8
  80735c:	f800283a 	ret
  807360:	8080030b 	ldhu	r2,12(r16)
  807364:	10bbffcc 	andi	r2,r2,61439
  807368:	8080030d 	sth	r2,12(r16)
  80736c:	1805883a 	mov	r2,r3
  807370:	dfc00117 	ldw	ra,4(sp)
  807374:	dc000017 	ldw	r16,0(sp)
  807378:	dec00204 	addi	sp,sp,8
  80737c:	f800283a 	ret

00807380 <__swrite>:
  807380:	2880030b 	ldhu	r2,12(r5)
  807384:	defffb04 	addi	sp,sp,-20
  807388:	dcc00315 	stw	r19,12(sp)
  80738c:	1080400c 	andi	r2,r2,256
  807390:	dc800215 	stw	r18,8(sp)
  807394:	dc400115 	stw	r17,4(sp)
  807398:	dc000015 	stw	r16,0(sp)
  80739c:	3027883a 	mov	r19,r6
  8073a0:	3825883a 	mov	r18,r7
  8073a4:	dfc00415 	stw	ra,16(sp)
  8073a8:	2821883a 	mov	r16,r5
  8073ac:	000d883a 	mov	r6,zero
  8073b0:	01c00084 	movi	r7,2
  8073b4:	2023883a 	mov	r17,r4
  8073b8:	10000226 	beq	r2,zero,8073c4 <__swrite+0x44>
  8073bc:	2940038f 	ldh	r5,14(r5)
  8073c0:	08078d00 	call	8078d0 <_lseek_r>
  8073c4:	8080030b 	ldhu	r2,12(r16)
  8073c8:	8140038f 	ldh	r5,14(r16)
  8073cc:	8809883a 	mov	r4,r17
  8073d0:	10bbffcc 	andi	r2,r2,61439
  8073d4:	980d883a 	mov	r6,r19
  8073d8:	900f883a 	mov	r7,r18
  8073dc:	8080030d 	sth	r2,12(r16)
  8073e0:	dfc00417 	ldw	ra,16(sp)
  8073e4:	dcc00317 	ldw	r19,12(sp)
  8073e8:	dc800217 	ldw	r18,8(sp)
  8073ec:	dc400117 	ldw	r17,4(sp)
  8073f0:	dc000017 	ldw	r16,0(sp)
  8073f4:	dec00504 	addi	sp,sp,20
  8073f8:	08075181 	jmpi	807518 <_write_r>

008073fc <__sread>:
  8073fc:	defffe04 	addi	sp,sp,-8
  807400:	dc000015 	stw	r16,0(sp)
  807404:	2821883a 	mov	r16,r5
  807408:	2940038f 	ldh	r5,14(r5)
  80740c:	dfc00115 	stw	ra,4(sp)
  807410:	08079480 	call	807948 <_read_r>
  807414:	1007883a 	mov	r3,r2
  807418:	10000816 	blt	r2,zero,80743c <__sread+0x40>
  80741c:	80801417 	ldw	r2,80(r16)
  807420:	10c5883a 	add	r2,r2,r3
  807424:	80801415 	stw	r2,80(r16)
  807428:	1805883a 	mov	r2,r3
  80742c:	dfc00117 	ldw	ra,4(sp)
  807430:	dc000017 	ldw	r16,0(sp)
  807434:	dec00204 	addi	sp,sp,8
  807438:	f800283a 	ret
  80743c:	8080030b 	ldhu	r2,12(r16)
  807440:	10bbffcc 	andi	r2,r2,61439
  807444:	8080030d 	sth	r2,12(r16)
  807448:	1805883a 	mov	r2,r3
  80744c:	dfc00117 	ldw	ra,4(sp)
  807450:	dc000017 	ldw	r16,0(sp)
  807454:	dec00204 	addi	sp,sp,8
  807458:	f800283a 	ret

0080745c <strcmp>:
  80745c:	2144b03a 	or	r2,r4,r5
  807460:	108000cc 	andi	r2,r2,3
  807464:	10001d1e 	bne	r2,zero,8074dc <strcmp+0x80>
  807468:	200f883a 	mov	r7,r4
  80746c:	28800017 	ldw	r2,0(r5)
  807470:	21000017 	ldw	r4,0(r4)
  807474:	280d883a 	mov	r6,r5
  807478:	2080161e 	bne	r4,r2,8074d4 <strcmp+0x78>
  80747c:	023fbff4 	movhi	r8,65279
  807480:	423fbfc4 	addi	r8,r8,-257
  807484:	2207883a 	add	r3,r4,r8
  807488:	01602074 	movhi	r5,32897
  80748c:	29602004 	addi	r5,r5,-32640
  807490:	1946703a 	and	r3,r3,r5
  807494:	0104303a 	nor	r2,zero,r4
  807498:	10c4703a 	and	r2,r2,r3
  80749c:	10001c1e 	bne	r2,zero,807510 <strcmp+0xb4>
  8074a0:	4013883a 	mov	r9,r8
  8074a4:	2811883a 	mov	r8,r5
  8074a8:	00000106 	br	8074b0 <strcmp+0x54>
  8074ac:	1800181e 	bne	r3,zero,807510 <strcmp+0xb4>
  8074b0:	39c00104 	addi	r7,r7,4
  8074b4:	39000017 	ldw	r4,0(r7)
  8074b8:	31800104 	addi	r6,r6,4
  8074bc:	31400017 	ldw	r5,0(r6)
  8074c0:	2245883a 	add	r2,r4,r9
  8074c4:	1204703a 	and	r2,r2,r8
  8074c8:	0106303a 	nor	r3,zero,r4
  8074cc:	1886703a 	and	r3,r3,r2
  8074d0:	217ff626 	beq	r4,r5,8074ac <strcmp+0x50>
  8074d4:	3809883a 	mov	r4,r7
  8074d8:	300b883a 	mov	r5,r6
  8074dc:	20c00007 	ldb	r3,0(r4)
  8074e0:	1800051e 	bne	r3,zero,8074f8 <strcmp+0x9c>
  8074e4:	00000606 	br	807500 <strcmp+0xa4>
  8074e8:	21000044 	addi	r4,r4,1
  8074ec:	20c00007 	ldb	r3,0(r4)
  8074f0:	29400044 	addi	r5,r5,1
  8074f4:	18000226 	beq	r3,zero,807500 <strcmp+0xa4>
  8074f8:	28800007 	ldb	r2,0(r5)
  8074fc:	18bffa26 	beq	r3,r2,8074e8 <strcmp+0x8c>
  807500:	20c00003 	ldbu	r3,0(r4)
  807504:	28800003 	ldbu	r2,0(r5)
  807508:	1885c83a 	sub	r2,r3,r2
  80750c:	f800283a 	ret
  807510:	0005883a 	mov	r2,zero
  807514:	f800283a 	ret

00807518 <_write_r>:
  807518:	defffd04 	addi	sp,sp,-12
  80751c:	dc000015 	stw	r16,0(sp)
  807520:	04002074 	movhi	r16,129
  807524:	84013e04 	addi	r16,r16,1272
  807528:	dc400115 	stw	r17,4(sp)
  80752c:	80000015 	stw	zero,0(r16)
  807530:	2023883a 	mov	r17,r4
  807534:	2809883a 	mov	r4,r5
  807538:	300b883a 	mov	r5,r6
  80753c:	380d883a 	mov	r6,r7
  807540:	dfc00215 	stw	ra,8(sp)
  807544:	080a9800 	call	80a980 <write>
  807548:	1007883a 	mov	r3,r2
  80754c:	00bfffc4 	movi	r2,-1
  807550:	18800626 	beq	r3,r2,80756c <_write_r+0x54>
  807554:	1805883a 	mov	r2,r3
  807558:	dfc00217 	ldw	ra,8(sp)
  80755c:	dc400117 	ldw	r17,4(sp)
  807560:	dc000017 	ldw	r16,0(sp)
  807564:	dec00304 	addi	sp,sp,12
  807568:	f800283a 	ret
  80756c:	80800017 	ldw	r2,0(r16)
  807570:	103ff826 	beq	r2,zero,807554 <_write_r+0x3c>
  807574:	88800015 	stw	r2,0(r17)
  807578:	1805883a 	mov	r2,r3
  80757c:	dfc00217 	ldw	ra,8(sp)
  807580:	dc400117 	ldw	r17,4(sp)
  807584:	dc000017 	ldw	r16,0(sp)
  807588:	dec00304 	addi	sp,sp,12
  80758c:	f800283a 	ret

00807590 <_calloc_r>:
  807590:	defffe04 	addi	sp,sp,-8
  807594:	dc400015 	stw	r17,0(sp)
  807598:	2023883a 	mov	r17,r4
  80759c:	2809883a 	mov	r4,r5
  8075a0:	300b883a 	mov	r5,r6
  8075a4:	dfc00115 	stw	ra,4(sp)
  8075a8:	08099040 	call	809904 <__mulsi3>
  8075ac:	100b883a 	mov	r5,r2
  8075b0:	8809883a 	mov	r4,r17
  8075b4:	08051740 	call	805174 <_malloc_r>
  8075b8:	1023883a 	mov	r17,r2
  8075bc:	01c00904 	movi	r7,36
  8075c0:	10000d26 	beq	r2,zero,8075f8 <_calloc_r+0x68>
  8075c4:	10ffff17 	ldw	r3,-4(r2)
  8075c8:	1009883a 	mov	r4,r2
  8075cc:	00bfff04 	movi	r2,-4
  8075d0:	1886703a 	and	r3,r3,r2
  8075d4:	1887883a 	add	r3,r3,r2
  8075d8:	180d883a 	mov	r6,r3
  8075dc:	000b883a 	mov	r5,zero
  8075e0:	38c01736 	bltu	r7,r3,807640 <_calloc_r+0xb0>
  8075e4:	008004c4 	movi	r2,19
  8075e8:	10c00836 	bltu	r2,r3,80760c <_calloc_r+0x7c>
  8075ec:	20000215 	stw	zero,8(r4)
  8075f0:	20000015 	stw	zero,0(r4)
  8075f4:	20000115 	stw	zero,4(r4)
  8075f8:	8805883a 	mov	r2,r17
  8075fc:	dfc00117 	ldw	ra,4(sp)
  807600:	dc400017 	ldw	r17,0(sp)
  807604:	dec00204 	addi	sp,sp,8
  807608:	f800283a 	ret
  80760c:	008006c4 	movi	r2,27
  807610:	88000015 	stw	zero,0(r17)
  807614:	88000115 	stw	zero,4(r17)
  807618:	89000204 	addi	r4,r17,8
  80761c:	10fff32e 	bgeu	r2,r3,8075ec <_calloc_r+0x5c>
  807620:	88000215 	stw	zero,8(r17)
  807624:	88000315 	stw	zero,12(r17)
  807628:	89000404 	addi	r4,r17,16
  80762c:	19ffef1e 	bne	r3,r7,8075ec <_calloc_r+0x5c>
  807630:	89000604 	addi	r4,r17,24
  807634:	88000415 	stw	zero,16(r17)
  807638:	88000515 	stw	zero,20(r17)
  80763c:	003feb06 	br	8075ec <_calloc_r+0x5c>
  807640:	0805b180 	call	805b18 <memset>
  807644:	8805883a 	mov	r2,r17
  807648:	dfc00117 	ldw	ra,4(sp)
  80764c:	dc400017 	ldw	r17,0(sp)
  807650:	dec00204 	addi	sp,sp,8
  807654:	f800283a 	ret

00807658 <_close_r>:
  807658:	defffd04 	addi	sp,sp,-12
  80765c:	dc000015 	stw	r16,0(sp)
  807660:	04002074 	movhi	r16,129
  807664:	84013e04 	addi	r16,r16,1272
  807668:	dc400115 	stw	r17,4(sp)
  80766c:	80000015 	stw	zero,0(r16)
  807670:	2023883a 	mov	r17,r4
  807674:	2809883a 	mov	r4,r5
  807678:	dfc00215 	stw	ra,8(sp)
  80767c:	0809ff40 	call	809ff4 <close>
  807680:	1007883a 	mov	r3,r2
  807684:	00bfffc4 	movi	r2,-1
  807688:	18800626 	beq	r3,r2,8076a4 <_close_r+0x4c>
  80768c:	1805883a 	mov	r2,r3
  807690:	dfc00217 	ldw	ra,8(sp)
  807694:	dc400117 	ldw	r17,4(sp)
  807698:	dc000017 	ldw	r16,0(sp)
  80769c:	dec00304 	addi	sp,sp,12
  8076a0:	f800283a 	ret
  8076a4:	80800017 	ldw	r2,0(r16)
  8076a8:	103ff826 	beq	r2,zero,80768c <_close_r+0x34>
  8076ac:	88800015 	stw	r2,0(r17)
  8076b0:	1805883a 	mov	r2,r3
  8076b4:	dfc00217 	ldw	ra,8(sp)
  8076b8:	dc400117 	ldw	r17,4(sp)
  8076bc:	dc000017 	ldw	r16,0(sp)
  8076c0:	dec00304 	addi	sp,sp,12
  8076c4:	f800283a 	ret

008076c8 <_fclose_r>:
  8076c8:	defffc04 	addi	sp,sp,-16
  8076cc:	dc400115 	stw	r17,4(sp)
  8076d0:	dc000015 	stw	r16,0(sp)
  8076d4:	dfc00315 	stw	ra,12(sp)
  8076d8:	dc800215 	stw	r18,8(sp)
  8076dc:	2821883a 	mov	r16,r5
  8076e0:	2023883a 	mov	r17,r4
  8076e4:	28002926 	beq	r5,zero,80778c <_fclose_r+0xc4>
  8076e8:	08042240 	call	804224 <__sfp_lock_acquire>
  8076ec:	88000226 	beq	r17,zero,8076f8 <_fclose_r+0x30>
  8076f0:	88800e17 	ldw	r2,56(r17)
  8076f4:	10002d26 	beq	r2,zero,8077ac <_fclose_r+0xe4>
  8076f8:	8080030f 	ldh	r2,12(r16)
  8076fc:	10002226 	beq	r2,zero,807788 <_fclose_r+0xc0>
  807700:	8809883a 	mov	r4,r17
  807704:	800b883a 	mov	r5,r16
  807708:	0803f9c0 	call	803f9c <_fflush_r>
  80770c:	1025883a 	mov	r18,r2
  807710:	80800b17 	ldw	r2,44(r16)
  807714:	10000426 	beq	r2,zero,807728 <_fclose_r+0x60>
  807718:	81400717 	ldw	r5,28(r16)
  80771c:	8809883a 	mov	r4,r17
  807720:	103ee83a 	callr	r2
  807724:	10002a16 	blt	r2,zero,8077d0 <_fclose_r+0x108>
  807728:	8080030b 	ldhu	r2,12(r16)
  80772c:	1080200c 	andi	r2,r2,128
  807730:	1000231e 	bne	r2,zero,8077c0 <_fclose_r+0xf8>
  807734:	81400c17 	ldw	r5,48(r16)
  807738:	28000526 	beq	r5,zero,807750 <_fclose_r+0x88>
  80773c:	80801004 	addi	r2,r16,64
  807740:	28800226 	beq	r5,r2,80774c <_fclose_r+0x84>
  807744:	8809883a 	mov	r4,r17
  807748:	08045ec0 	call	8045ec <_free_r>
  80774c:	80000c15 	stw	zero,48(r16)
  807750:	81401117 	ldw	r5,68(r16)
  807754:	28000326 	beq	r5,zero,807764 <_fclose_r+0x9c>
  807758:	8809883a 	mov	r4,r17
  80775c:	08045ec0 	call	8045ec <_free_r>
  807760:	80001115 	stw	zero,68(r16)
  807764:	8000030d 	sth	zero,12(r16)
  807768:	08042280 	call	804228 <__sfp_lock_release>
  80776c:	9005883a 	mov	r2,r18
  807770:	dfc00317 	ldw	ra,12(sp)
  807774:	dc800217 	ldw	r18,8(sp)
  807778:	dc400117 	ldw	r17,4(sp)
  80777c:	dc000017 	ldw	r16,0(sp)
  807780:	dec00404 	addi	sp,sp,16
  807784:	f800283a 	ret
  807788:	08042280 	call	804228 <__sfp_lock_release>
  80778c:	0025883a 	mov	r18,zero
  807790:	9005883a 	mov	r2,r18
  807794:	dfc00317 	ldw	ra,12(sp)
  807798:	dc800217 	ldw	r18,8(sp)
  80779c:	dc400117 	ldw	r17,4(sp)
  8077a0:	dc000017 	ldw	r16,0(sp)
  8077a4:	dec00404 	addi	sp,sp,16
  8077a8:	f800283a 	ret
  8077ac:	8809883a 	mov	r4,r17
  8077b0:	08042340 	call	804234 <__sinit>
  8077b4:	8080030f 	ldh	r2,12(r16)
  8077b8:	103fd11e 	bne	r2,zero,807700 <_fclose_r+0x38>
  8077bc:	003ff206 	br	807788 <_fclose_r+0xc0>
  8077c0:	81400417 	ldw	r5,16(r16)
  8077c4:	8809883a 	mov	r4,r17
  8077c8:	08045ec0 	call	8045ec <_free_r>
  8077cc:	003fd906 	br	807734 <_fclose_r+0x6c>
  8077d0:	04bfffc4 	movi	r18,-1
  8077d4:	003fd406 	br	807728 <_fclose_r+0x60>

008077d8 <fclose>:
  8077d8:	00802074 	movhi	r2,129
  8077dc:	10ba7004 	addi	r2,r2,-5696
  8077e0:	200b883a 	mov	r5,r4
  8077e4:	11000017 	ldw	r4,0(r2)
  8077e8:	08076c81 	jmpi	8076c8 <_fclose_r>

008077ec <_fstat_r>:
  8077ec:	defffd04 	addi	sp,sp,-12
  8077f0:	dc000015 	stw	r16,0(sp)
  8077f4:	04002074 	movhi	r16,129
  8077f8:	84013e04 	addi	r16,r16,1272
  8077fc:	dc400115 	stw	r17,4(sp)
  807800:	80000015 	stw	zero,0(r16)
  807804:	2023883a 	mov	r17,r4
  807808:	2809883a 	mov	r4,r5
  80780c:	300b883a 	mov	r5,r6
  807810:	dfc00215 	stw	ra,8(sp)
  807814:	080a1800 	call	80a180 <fstat>
  807818:	1007883a 	mov	r3,r2
  80781c:	00bfffc4 	movi	r2,-1
  807820:	18800626 	beq	r3,r2,80783c <_fstat_r+0x50>
  807824:	1805883a 	mov	r2,r3
  807828:	dfc00217 	ldw	ra,8(sp)
  80782c:	dc400117 	ldw	r17,4(sp)
  807830:	dc000017 	ldw	r16,0(sp)
  807834:	dec00304 	addi	sp,sp,12
  807838:	f800283a 	ret
  80783c:	80800017 	ldw	r2,0(r16)
  807840:	103ff826 	beq	r2,zero,807824 <_fstat_r+0x38>
  807844:	88800015 	stw	r2,0(r17)
  807848:	1805883a 	mov	r2,r3
  80784c:	dfc00217 	ldw	ra,8(sp)
  807850:	dc400117 	ldw	r17,4(sp)
  807854:	dc000017 	ldw	r16,0(sp)
  807858:	dec00304 	addi	sp,sp,12
  80785c:	f800283a 	ret

00807860 <_isatty_r>:
  807860:	defffd04 	addi	sp,sp,-12
  807864:	dc000015 	stw	r16,0(sp)
  807868:	04002074 	movhi	r16,129
  80786c:	84013e04 	addi	r16,r16,1272
  807870:	dc400115 	stw	r17,4(sp)
  807874:	80000015 	stw	zero,0(r16)
  807878:	2023883a 	mov	r17,r4
  80787c:	2809883a 	mov	r4,r5
  807880:	dfc00215 	stw	ra,8(sp)
  807884:	080a2b80 	call	80a2b8 <isatty>
  807888:	1007883a 	mov	r3,r2
  80788c:	00bfffc4 	movi	r2,-1
  807890:	18800626 	beq	r3,r2,8078ac <_isatty_r+0x4c>
  807894:	1805883a 	mov	r2,r3
  807898:	dfc00217 	ldw	ra,8(sp)
  80789c:	dc400117 	ldw	r17,4(sp)
  8078a0:	dc000017 	ldw	r16,0(sp)
  8078a4:	dec00304 	addi	sp,sp,12
  8078a8:	f800283a 	ret
  8078ac:	80800017 	ldw	r2,0(r16)
  8078b0:	103ff826 	beq	r2,zero,807894 <_isatty_r+0x34>
  8078b4:	88800015 	stw	r2,0(r17)
  8078b8:	1805883a 	mov	r2,r3
  8078bc:	dfc00217 	ldw	ra,8(sp)
  8078c0:	dc400117 	ldw	r17,4(sp)
  8078c4:	dc000017 	ldw	r16,0(sp)
  8078c8:	dec00304 	addi	sp,sp,12
  8078cc:	f800283a 	ret

008078d0 <_lseek_r>:
  8078d0:	defffd04 	addi	sp,sp,-12
  8078d4:	dc000015 	stw	r16,0(sp)
  8078d8:	04002074 	movhi	r16,129
  8078dc:	84013e04 	addi	r16,r16,1272
  8078e0:	dc400115 	stw	r17,4(sp)
  8078e4:	80000015 	stw	zero,0(r16)
  8078e8:	2023883a 	mov	r17,r4
  8078ec:	2809883a 	mov	r4,r5
  8078f0:	300b883a 	mov	r5,r6
  8078f4:	380d883a 	mov	r6,r7
  8078f8:	dfc00215 	stw	ra,8(sp)
  8078fc:	080a4c80 	call	80a4c8 <lseek>
  807900:	1007883a 	mov	r3,r2
  807904:	00bfffc4 	movi	r2,-1
  807908:	18800626 	beq	r3,r2,807924 <_lseek_r+0x54>
  80790c:	1805883a 	mov	r2,r3
  807910:	dfc00217 	ldw	ra,8(sp)
  807914:	dc400117 	ldw	r17,4(sp)
  807918:	dc000017 	ldw	r16,0(sp)
  80791c:	dec00304 	addi	sp,sp,12
  807920:	f800283a 	ret
  807924:	80800017 	ldw	r2,0(r16)
  807928:	103ff826 	beq	r2,zero,80790c <_lseek_r+0x3c>
  80792c:	88800015 	stw	r2,0(r17)
  807930:	1805883a 	mov	r2,r3
  807934:	dfc00217 	ldw	ra,8(sp)
  807938:	dc400117 	ldw	r17,4(sp)
  80793c:	dc000017 	ldw	r16,0(sp)
  807940:	dec00304 	addi	sp,sp,12
  807944:	f800283a 	ret

00807948 <_read_r>:
  807948:	defffd04 	addi	sp,sp,-12
  80794c:	dc000015 	stw	r16,0(sp)
  807950:	04002074 	movhi	r16,129
  807954:	84013e04 	addi	r16,r16,1272
  807958:	dc400115 	stw	r17,4(sp)
  80795c:	80000015 	stw	zero,0(r16)
  807960:	2023883a 	mov	r17,r4
  807964:	2809883a 	mov	r4,r5
  807968:	300b883a 	mov	r5,r6
  80796c:	380d883a 	mov	r6,r7
  807970:	dfc00215 	stw	ra,8(sp)
  807974:	080a6c80 	call	80a6c8 <read>
  807978:	1007883a 	mov	r3,r2
  80797c:	00bfffc4 	movi	r2,-1
  807980:	18800626 	beq	r3,r2,80799c <_read_r+0x54>
  807984:	1805883a 	mov	r2,r3
  807988:	dfc00217 	ldw	ra,8(sp)
  80798c:	dc400117 	ldw	r17,4(sp)
  807990:	dc000017 	ldw	r16,0(sp)
  807994:	dec00304 	addi	sp,sp,12
  807998:	f800283a 	ret
  80799c:	80800017 	ldw	r2,0(r16)
  8079a0:	103ff826 	beq	r2,zero,807984 <_read_r+0x3c>
  8079a4:	88800015 	stw	r2,0(r17)
  8079a8:	1805883a 	mov	r2,r3
  8079ac:	dfc00217 	ldw	ra,8(sp)
  8079b0:	dc400117 	ldw	r17,4(sp)
  8079b4:	dc000017 	ldw	r16,0(sp)
  8079b8:	dec00304 	addi	sp,sp,12
  8079bc:	f800283a 	ret

008079c0 <__udivdi3>:
  8079c0:	defff104 	addi	sp,sp,-60
  8079c4:	0015883a 	mov	r10,zero
  8079c8:	2005883a 	mov	r2,r4
  8079cc:	3011883a 	mov	r8,r6
  8079d0:	df000d15 	stw	fp,52(sp)
  8079d4:	dd400a15 	stw	r21,40(sp)
  8079d8:	dcc00815 	stw	r19,32(sp)
  8079dc:	dfc00e15 	stw	ra,56(sp)
  8079e0:	ddc00c15 	stw	r23,48(sp)
  8079e4:	dd800b15 	stw	r22,44(sp)
  8079e8:	dd000915 	stw	r20,36(sp)
  8079ec:	dc800715 	stw	r18,28(sp)
  8079f0:	dc400615 	stw	r17,24(sp)
  8079f4:	dc000515 	stw	r16,20(sp)
  8079f8:	da800315 	stw	r10,12(sp)
  8079fc:	4027883a 	mov	r19,r8
  807a00:	1039883a 	mov	fp,r2
  807a04:	282b883a 	mov	r21,r5
  807a08:	da800415 	stw	r10,16(sp)
  807a0c:	3800401e 	bne	r7,zero,807b10 <__udivdi3+0x150>
  807a10:	2a006536 	bltu	r5,r8,807ba8 <__udivdi3+0x1e8>
  807a14:	4000b526 	beq	r8,zero,807cec <__udivdi3+0x32c>
  807a18:	00bfffd4 	movui	r2,65535
  807a1c:	14c0ad36 	bltu	r2,r19,807cd4 <__udivdi3+0x314>
  807a20:	00803fc4 	movi	r2,255
  807a24:	14c15e36 	bltu	r2,r19,807fa0 <__udivdi3+0x5e0>
  807a28:	000b883a 	mov	r5,zero
  807a2c:	0005883a 	mov	r2,zero
  807a30:	9884d83a 	srl	r2,r19,r2
  807a34:	01002074 	movhi	r4,129
  807a38:	21337104 	addi	r4,r4,-12860
  807a3c:	01800804 	movi	r6,32
  807a40:	1105883a 	add	r2,r2,r4
  807a44:	10c00003 	ldbu	r3,0(r2)
  807a48:	28c7883a 	add	r3,r5,r3
  807a4c:	30e9c83a 	sub	r20,r6,r3
  807a50:	a0010a1e 	bne	r20,zero,807e7c <__udivdi3+0x4bc>
  807a54:	982ed43a 	srli	r23,r19,16
  807a58:	acebc83a 	sub	r21,r21,r19
  807a5c:	9dbfffcc 	andi	r22,r19,65535
  807a60:	05000044 	movi	r20,1
  807a64:	a809883a 	mov	r4,r21
  807a68:	b80b883a 	mov	r5,r23
  807a6c:	08098f40 	call	8098f4 <__udivsi3>
  807a70:	100b883a 	mov	r5,r2
  807a74:	b009883a 	mov	r4,r22
  807a78:	1021883a 	mov	r16,r2
  807a7c:	08099040 	call	809904 <__mulsi3>
  807a80:	a809883a 	mov	r4,r21
  807a84:	b80b883a 	mov	r5,r23
  807a88:	1023883a 	mov	r17,r2
  807a8c:	08098fc0 	call	8098fc <__umodsi3>
  807a90:	1004943a 	slli	r2,r2,16
  807a94:	e006d43a 	srli	r3,fp,16
  807a98:	10c4b03a 	or	r2,r2,r3
  807a9c:	1440042e 	bgeu	r2,r17,807ab0 <__udivdi3+0xf0>
  807aa0:	14c5883a 	add	r2,r2,r19
  807aa4:	843fffc4 	addi	r16,r16,-1
  807aa8:	14c00136 	bltu	r2,r19,807ab0 <__udivdi3+0xf0>
  807aac:	14415c36 	bltu	r2,r17,808020 <__udivdi3+0x660>
  807ab0:	1463c83a 	sub	r17,r2,r17
  807ab4:	8809883a 	mov	r4,r17
  807ab8:	b80b883a 	mov	r5,r23
  807abc:	08098f40 	call	8098f4 <__udivsi3>
  807ac0:	100b883a 	mov	r5,r2
  807ac4:	b009883a 	mov	r4,r22
  807ac8:	102b883a 	mov	r21,r2
  807acc:	08099040 	call	809904 <__mulsi3>
  807ad0:	8809883a 	mov	r4,r17
  807ad4:	b80b883a 	mov	r5,r23
  807ad8:	1025883a 	mov	r18,r2
  807adc:	08098fc0 	call	8098fc <__umodsi3>
  807ae0:	1004943a 	slli	r2,r2,16
  807ae4:	e0ffffcc 	andi	r3,fp,65535
  807ae8:	10c4b03a 	or	r2,r2,r3
  807aec:	1480042e 	bgeu	r2,r18,807b00 <__udivdi3+0x140>
  807af0:	9885883a 	add	r2,r19,r2
  807af4:	ad7fffc4 	addi	r21,r21,-1
  807af8:	14c00136 	bltu	r2,r19,807b00 <__udivdi3+0x140>
  807afc:	14813c36 	bltu	r2,r18,807ff0 <__udivdi3+0x630>
  807b00:	8004943a 	slli	r2,r16,16
  807b04:	a009883a 	mov	r4,r20
  807b08:	a884b03a 	or	r2,r21,r2
  807b0c:	00001506 	br	807b64 <__udivdi3+0x1a4>
  807b10:	380d883a 	mov	r6,r7
  807b14:	29c06c36 	bltu	r5,r7,807cc8 <__udivdi3+0x308>
  807b18:	00bfffd4 	movui	r2,65535
  807b1c:	11c06436 	bltu	r2,r7,807cb0 <__udivdi3+0x2f0>
  807b20:	00803fc4 	movi	r2,255
  807b24:	11c11836 	bltu	r2,r7,807f88 <__udivdi3+0x5c8>
  807b28:	000b883a 	mov	r5,zero
  807b2c:	0005883a 	mov	r2,zero
  807b30:	3084d83a 	srl	r2,r6,r2
  807b34:	01002074 	movhi	r4,129
  807b38:	21337104 	addi	r4,r4,-12860
  807b3c:	01c00804 	movi	r7,32
  807b40:	1105883a 	add	r2,r2,r4
  807b44:	10c00003 	ldbu	r3,0(r2)
  807b48:	28c7883a 	add	r3,r5,r3
  807b4c:	38edc83a 	sub	r22,r7,r3
  807b50:	b000731e 	bne	r22,zero,807d20 <__udivdi3+0x360>
  807b54:	35400136 	bltu	r6,r21,807b5c <__udivdi3+0x19c>
  807b58:	e4c05b36 	bltu	fp,r19,807cc8 <__udivdi3+0x308>
  807b5c:	00800044 	movi	r2,1
  807b60:	0009883a 	mov	r4,zero
  807b64:	d8800315 	stw	r2,12(sp)
  807b68:	d9400317 	ldw	r5,12(sp)
  807b6c:	2007883a 	mov	r3,r4
  807b70:	d9000415 	stw	r4,16(sp)
  807b74:	2805883a 	mov	r2,r5
  807b78:	dfc00e17 	ldw	ra,56(sp)
  807b7c:	df000d17 	ldw	fp,52(sp)
  807b80:	ddc00c17 	ldw	r23,48(sp)
  807b84:	dd800b17 	ldw	r22,44(sp)
  807b88:	dd400a17 	ldw	r21,40(sp)
  807b8c:	dd000917 	ldw	r20,36(sp)
  807b90:	dcc00817 	ldw	r19,32(sp)
  807b94:	dc800717 	ldw	r18,28(sp)
  807b98:	dc400617 	ldw	r17,24(sp)
  807b9c:	dc000517 	ldw	r16,20(sp)
  807ba0:	dec00f04 	addi	sp,sp,60
  807ba4:	f800283a 	ret
  807ba8:	00bfffd4 	movui	r2,65535
  807bac:	12005636 	bltu	r2,r8,807d08 <__udivdi3+0x348>
  807bb0:	00803fc4 	movi	r2,255
  807bb4:	12010036 	bltu	r2,r8,807fb8 <__udivdi3+0x5f8>
  807bb8:	000b883a 	mov	r5,zero
  807bbc:	0005883a 	mov	r2,zero
  807bc0:	9884d83a 	srl	r2,r19,r2
  807bc4:	01002074 	movhi	r4,129
  807bc8:	21337104 	addi	r4,r4,-12860
  807bcc:	01800804 	movi	r6,32
  807bd0:	1105883a 	add	r2,r2,r4
  807bd4:	10c00003 	ldbu	r3,0(r2)
  807bd8:	28c7883a 	add	r3,r5,r3
  807bdc:	30cbc83a 	sub	r5,r6,r3
  807be0:	28000626 	beq	r5,zero,807bfc <__udivdi3+0x23c>
  807be4:	3145c83a 	sub	r2,r6,r5
  807be8:	e084d83a 	srl	r2,fp,r2
  807bec:	a946983a 	sll	r3,r21,r5
  807bf0:	e178983a 	sll	fp,fp,r5
  807bf4:	9966983a 	sll	r19,r19,r5
  807bf8:	18aab03a 	or	r21,r3,r2
  807bfc:	982ed43a 	srli	r23,r19,16
  807c00:	a809883a 	mov	r4,r21
  807c04:	9cbfffcc 	andi	r18,r19,65535
  807c08:	b80b883a 	mov	r5,r23
  807c0c:	08098f40 	call	8098f4 <__udivsi3>
  807c10:	100b883a 	mov	r5,r2
  807c14:	9009883a 	mov	r4,r18
  807c18:	1021883a 	mov	r16,r2
  807c1c:	08099040 	call	809904 <__mulsi3>
  807c20:	a809883a 	mov	r4,r21
  807c24:	b80b883a 	mov	r5,r23
  807c28:	1023883a 	mov	r17,r2
  807c2c:	08098fc0 	call	8098fc <__umodsi3>
  807c30:	1004943a 	slli	r2,r2,16
  807c34:	e006d43a 	srli	r3,fp,16
  807c38:	10c4b03a 	or	r2,r2,r3
  807c3c:	1440042e 	bgeu	r2,r17,807c50 <__udivdi3+0x290>
  807c40:	14c5883a 	add	r2,r2,r19
  807c44:	843fffc4 	addi	r16,r16,-1
  807c48:	14c00136 	bltu	r2,r19,807c50 <__udivdi3+0x290>
  807c4c:	1440ea36 	bltu	r2,r17,807ff8 <__udivdi3+0x638>
  807c50:	1463c83a 	sub	r17,r2,r17
  807c54:	8809883a 	mov	r4,r17
  807c58:	b80b883a 	mov	r5,r23
  807c5c:	08098f40 	call	8098f4 <__udivsi3>
  807c60:	100b883a 	mov	r5,r2
  807c64:	9009883a 	mov	r4,r18
  807c68:	102b883a 	mov	r21,r2
  807c6c:	08099040 	call	809904 <__mulsi3>
  807c70:	8809883a 	mov	r4,r17
  807c74:	b80b883a 	mov	r5,r23
  807c78:	1025883a 	mov	r18,r2
  807c7c:	08098fc0 	call	8098fc <__umodsi3>
  807c80:	1004943a 	slli	r2,r2,16
  807c84:	e0ffffcc 	andi	r3,fp,65535
  807c88:	10c4b03a 	or	r2,r2,r3
  807c8c:	1480042e 	bgeu	r2,r18,807ca0 <__udivdi3+0x2e0>
  807c90:	9885883a 	add	r2,r19,r2
  807c94:	ad7fffc4 	addi	r21,r21,-1
  807c98:	14c00136 	bltu	r2,r19,807ca0 <__udivdi3+0x2e0>
  807c9c:	1480d936 	bltu	r2,r18,808004 <__udivdi3+0x644>
  807ca0:	8004943a 	slli	r2,r16,16
  807ca4:	0009883a 	mov	r4,zero
  807ca8:	a884b03a 	or	r2,r21,r2
  807cac:	003fad06 	br	807b64 <__udivdi3+0x1a4>
  807cb0:	00804034 	movhi	r2,256
  807cb4:	10bfffc4 	addi	r2,r2,-1
  807cb8:	11c0b636 	bltu	r2,r7,807f94 <__udivdi3+0x5d4>
  807cbc:	01400404 	movi	r5,16
  807cc0:	2805883a 	mov	r2,r5
  807cc4:	003f9a06 	br	807b30 <__udivdi3+0x170>
  807cc8:	0005883a 	mov	r2,zero
  807ccc:	0009883a 	mov	r4,zero
  807cd0:	003fa406 	br	807b64 <__udivdi3+0x1a4>
  807cd4:	00804034 	movhi	r2,256
  807cd8:	10bfffc4 	addi	r2,r2,-1
  807cdc:	14c0b336 	bltu	r2,r19,807fac <__udivdi3+0x5ec>
  807ce0:	01400404 	movi	r5,16
  807ce4:	2805883a 	mov	r2,r5
  807ce8:	003f5106 	br	807a30 <__udivdi3+0x70>
  807cec:	01000044 	movi	r4,1
  807cf0:	000b883a 	mov	r5,zero
  807cf4:	08098f40 	call	8098f4 <__udivsi3>
  807cf8:	1027883a 	mov	r19,r2
  807cfc:	00bfffd4 	movui	r2,65535
  807d00:	14fff436 	bltu	r2,r19,807cd4 <__udivdi3+0x314>
  807d04:	003f4606 	br	807a20 <__udivdi3+0x60>
  807d08:	00804034 	movhi	r2,256
  807d0c:	10bfffc4 	addi	r2,r2,-1
  807d10:	1200ac36 	bltu	r2,r8,807fc4 <__udivdi3+0x604>
  807d14:	01400404 	movi	r5,16
  807d18:	2805883a 	mov	r2,r5
  807d1c:	003fa806 	br	807bc0 <__udivdi3+0x200>
  807d20:	3d85c83a 	sub	r2,r7,r22
  807d24:	3588983a 	sll	r4,r6,r22
  807d28:	9886d83a 	srl	r3,r19,r2
  807d2c:	a8a2d83a 	srl	r17,r21,r2
  807d30:	e084d83a 	srl	r2,fp,r2
  807d34:	20eeb03a 	or	r23,r4,r3
  807d38:	b824d43a 	srli	r18,r23,16
  807d3c:	ad86983a 	sll	r3,r21,r22
  807d40:	8809883a 	mov	r4,r17
  807d44:	900b883a 	mov	r5,r18
  807d48:	1886b03a 	or	r3,r3,r2
  807d4c:	d8c00115 	stw	r3,4(sp)
  807d50:	bc3fffcc 	andi	r16,r23,65535
  807d54:	08098f40 	call	8098f4 <__udivsi3>
  807d58:	100b883a 	mov	r5,r2
  807d5c:	8009883a 	mov	r4,r16
  807d60:	1029883a 	mov	r20,r2
  807d64:	08099040 	call	809904 <__mulsi3>
  807d68:	900b883a 	mov	r5,r18
  807d6c:	8809883a 	mov	r4,r17
  807d70:	102b883a 	mov	r21,r2
  807d74:	08098fc0 	call	8098fc <__umodsi3>
  807d78:	d9400117 	ldw	r5,4(sp)
  807d7c:	1004943a 	slli	r2,r2,16
  807d80:	9da6983a 	sll	r19,r19,r22
  807d84:	2806d43a 	srli	r3,r5,16
  807d88:	10c4b03a 	or	r2,r2,r3
  807d8c:	1540032e 	bgeu	r2,r21,807d9c <__udivdi3+0x3dc>
  807d90:	15c5883a 	add	r2,r2,r23
  807d94:	a53fffc4 	addi	r20,r20,-1
  807d98:	15c0912e 	bgeu	r2,r23,807fe0 <__udivdi3+0x620>
  807d9c:	1563c83a 	sub	r17,r2,r21
  807da0:	8809883a 	mov	r4,r17
  807da4:	900b883a 	mov	r5,r18
  807da8:	08098f40 	call	8098f4 <__udivsi3>
  807dac:	100b883a 	mov	r5,r2
  807db0:	8009883a 	mov	r4,r16
  807db4:	102b883a 	mov	r21,r2
  807db8:	08099040 	call	809904 <__mulsi3>
  807dbc:	8809883a 	mov	r4,r17
  807dc0:	900b883a 	mov	r5,r18
  807dc4:	1021883a 	mov	r16,r2
  807dc8:	08098fc0 	call	8098fc <__umodsi3>
  807dcc:	da800117 	ldw	r10,4(sp)
  807dd0:	1004943a 	slli	r2,r2,16
  807dd4:	50ffffcc 	andi	r3,r10,65535
  807dd8:	10c6b03a 	or	r3,r2,r3
  807ddc:	1c00032e 	bgeu	r3,r16,807dec <__udivdi3+0x42c>
  807de0:	1dc7883a 	add	r3,r3,r23
  807de4:	ad7fffc4 	addi	r21,r21,-1
  807de8:	1dc0792e 	bgeu	r3,r23,807fd0 <__udivdi3+0x610>
  807dec:	a004943a 	slli	r2,r20,16
  807df0:	982ed43a 	srli	r23,r19,16
  807df4:	9cffffcc 	andi	r19,r19,65535
  807df8:	a8a4b03a 	or	r18,r21,r2
  807dfc:	947fffcc 	andi	r17,r18,65535
  807e00:	902ad43a 	srli	r21,r18,16
  807e04:	8809883a 	mov	r4,r17
  807e08:	980b883a 	mov	r5,r19
  807e0c:	1c21c83a 	sub	r16,r3,r16
  807e10:	08099040 	call	809904 <__mulsi3>
  807e14:	8809883a 	mov	r4,r17
  807e18:	b80b883a 	mov	r5,r23
  807e1c:	1029883a 	mov	r20,r2
  807e20:	08099040 	call	809904 <__mulsi3>
  807e24:	980b883a 	mov	r5,r19
  807e28:	a809883a 	mov	r4,r21
  807e2c:	1023883a 	mov	r17,r2
  807e30:	08099040 	call	809904 <__mulsi3>
  807e34:	a809883a 	mov	r4,r21
  807e38:	b80b883a 	mov	r5,r23
  807e3c:	1027883a 	mov	r19,r2
  807e40:	08099040 	call	809904 <__mulsi3>
  807e44:	1009883a 	mov	r4,r2
  807e48:	a004d43a 	srli	r2,r20,16
  807e4c:	8ce3883a 	add	r17,r17,r19
  807e50:	1447883a 	add	r3,r2,r17
  807e54:	1cc0022e 	bgeu	r3,r19,807e60 <__udivdi3+0x4a0>
  807e58:	00800074 	movhi	r2,1
  807e5c:	2089883a 	add	r4,r4,r2
  807e60:	1804d43a 	srli	r2,r3,16
  807e64:	2085883a 	add	r2,r4,r2
  807e68:	80804436 	bltu	r16,r2,807f7c <__udivdi3+0x5bc>
  807e6c:	80803e26 	beq	r16,r2,807f68 <__udivdi3+0x5a8>
  807e70:	9005883a 	mov	r2,r18
  807e74:	0009883a 	mov	r4,zero
  807e78:	003f3a06 	br	807b64 <__udivdi3+0x1a4>
  807e7c:	9d26983a 	sll	r19,r19,r20
  807e80:	3505c83a 	sub	r2,r6,r20
  807e84:	a8a2d83a 	srl	r17,r21,r2
  807e88:	982ed43a 	srli	r23,r19,16
  807e8c:	e084d83a 	srl	r2,fp,r2
  807e90:	ad06983a 	sll	r3,r21,r20
  807e94:	8809883a 	mov	r4,r17
  807e98:	b80b883a 	mov	r5,r23
  807e9c:	1886b03a 	or	r3,r3,r2
  807ea0:	d8c00015 	stw	r3,0(sp)
  807ea4:	9dbfffcc 	andi	r22,r19,65535
  807ea8:	08098f40 	call	8098f4 <__udivsi3>
  807eac:	100b883a 	mov	r5,r2
  807eb0:	b009883a 	mov	r4,r22
  807eb4:	d8800215 	stw	r2,8(sp)
  807eb8:	08099040 	call	809904 <__mulsi3>
  807ebc:	8809883a 	mov	r4,r17
  807ec0:	b80b883a 	mov	r5,r23
  807ec4:	102b883a 	mov	r21,r2
  807ec8:	08098fc0 	call	8098fc <__umodsi3>
  807ecc:	d9000017 	ldw	r4,0(sp)
  807ed0:	1004943a 	slli	r2,r2,16
  807ed4:	2006d43a 	srli	r3,r4,16
  807ed8:	10c4b03a 	or	r2,r2,r3
  807edc:	1540052e 	bgeu	r2,r21,807ef4 <__udivdi3+0x534>
  807ee0:	d9400217 	ldw	r5,8(sp)
  807ee4:	14c5883a 	add	r2,r2,r19
  807ee8:	297fffc4 	addi	r5,r5,-1
  807eec:	d9400215 	stw	r5,8(sp)
  807ef0:	14c0462e 	bgeu	r2,r19,80800c <__udivdi3+0x64c>
  807ef4:	1563c83a 	sub	r17,r2,r21
  807ef8:	8809883a 	mov	r4,r17
  807efc:	b80b883a 	mov	r5,r23
  807f00:	08098f40 	call	8098f4 <__udivsi3>
  807f04:	100b883a 	mov	r5,r2
  807f08:	b009883a 	mov	r4,r22
  807f0c:	1025883a 	mov	r18,r2
  807f10:	08099040 	call	809904 <__mulsi3>
  807f14:	8809883a 	mov	r4,r17
  807f18:	b80b883a 	mov	r5,r23
  807f1c:	1021883a 	mov	r16,r2
  807f20:	08098fc0 	call	8098fc <__umodsi3>
  807f24:	da800017 	ldw	r10,0(sp)
  807f28:	1004943a 	slli	r2,r2,16
  807f2c:	50ffffcc 	andi	r3,r10,65535
  807f30:	10c6b03a 	or	r3,r2,r3
  807f34:	1c00062e 	bgeu	r3,r16,807f50 <__udivdi3+0x590>
  807f38:	1cc7883a 	add	r3,r3,r19
  807f3c:	94bfffc4 	addi	r18,r18,-1
  807f40:	1cc00336 	bltu	r3,r19,807f50 <__udivdi3+0x590>
  807f44:	1c00022e 	bgeu	r3,r16,807f50 <__udivdi3+0x590>
  807f48:	94bfffc4 	addi	r18,r18,-1
  807f4c:	1cc7883a 	add	r3,r3,r19
  807f50:	d9000217 	ldw	r4,8(sp)
  807f54:	e538983a 	sll	fp,fp,r20
  807f58:	1c2bc83a 	sub	r21,r3,r16
  807f5c:	2004943a 	slli	r2,r4,16
  807f60:	90a8b03a 	or	r20,r18,r2
  807f64:	003ebf06 	br	807a64 <__udivdi3+0xa4>
  807f68:	1804943a 	slli	r2,r3,16
  807f6c:	e588983a 	sll	r4,fp,r22
  807f70:	a0ffffcc 	andi	r3,r20,65535
  807f74:	10c5883a 	add	r2,r2,r3
  807f78:	20bfbd2e 	bgeu	r4,r2,807e70 <__udivdi3+0x4b0>
  807f7c:	90bfffc4 	addi	r2,r18,-1
  807f80:	0009883a 	mov	r4,zero
  807f84:	003ef706 	br	807b64 <__udivdi3+0x1a4>
  807f88:	01400204 	movi	r5,8
  807f8c:	2805883a 	mov	r2,r5
  807f90:	003ee706 	br	807b30 <__udivdi3+0x170>
  807f94:	01400604 	movi	r5,24
  807f98:	2805883a 	mov	r2,r5
  807f9c:	003ee406 	br	807b30 <__udivdi3+0x170>
  807fa0:	01400204 	movi	r5,8
  807fa4:	2805883a 	mov	r2,r5
  807fa8:	003ea106 	br	807a30 <__udivdi3+0x70>
  807fac:	01400604 	movi	r5,24
  807fb0:	2805883a 	mov	r2,r5
  807fb4:	003e9e06 	br	807a30 <__udivdi3+0x70>
  807fb8:	01400204 	movi	r5,8
  807fbc:	2805883a 	mov	r2,r5
  807fc0:	003eff06 	br	807bc0 <__udivdi3+0x200>
  807fc4:	01400604 	movi	r5,24
  807fc8:	2805883a 	mov	r2,r5
  807fcc:	003efc06 	br	807bc0 <__udivdi3+0x200>
  807fd0:	1c3f862e 	bgeu	r3,r16,807dec <__udivdi3+0x42c>
  807fd4:	1dc7883a 	add	r3,r3,r23
  807fd8:	ad7fffc4 	addi	r21,r21,-1
  807fdc:	003f8306 	br	807dec <__udivdi3+0x42c>
  807fe0:	157f6e2e 	bgeu	r2,r21,807d9c <__udivdi3+0x3dc>
  807fe4:	a53fffc4 	addi	r20,r20,-1
  807fe8:	15c5883a 	add	r2,r2,r23
  807fec:	003f6b06 	br	807d9c <__udivdi3+0x3dc>
  807ff0:	ad7fffc4 	addi	r21,r21,-1
  807ff4:	003ec206 	br	807b00 <__udivdi3+0x140>
  807ff8:	843fffc4 	addi	r16,r16,-1
  807ffc:	14c5883a 	add	r2,r2,r19
  808000:	003f1306 	br	807c50 <__udivdi3+0x290>
  808004:	ad7fffc4 	addi	r21,r21,-1
  808008:	003f2506 	br	807ca0 <__udivdi3+0x2e0>
  80800c:	157fb92e 	bgeu	r2,r21,807ef4 <__udivdi3+0x534>
  808010:	297fffc4 	addi	r5,r5,-1
  808014:	14c5883a 	add	r2,r2,r19
  808018:	d9400215 	stw	r5,8(sp)
  80801c:	003fb506 	br	807ef4 <__udivdi3+0x534>
  808020:	843fffc4 	addi	r16,r16,-1
  808024:	14c5883a 	add	r2,r2,r19
  808028:	003ea106 	br	807ab0 <__udivdi3+0xf0>

0080802c <__umoddi3>:
  80802c:	defff004 	addi	sp,sp,-64
  808030:	3011883a 	mov	r8,r6
  808034:	000d883a 	mov	r6,zero
  808038:	dd400b15 	stw	r21,44(sp)
  80803c:	dcc00915 	stw	r19,36(sp)
  808040:	dc000615 	stw	r16,24(sp)
  808044:	dfc00f15 	stw	ra,60(sp)
  808048:	df000e15 	stw	fp,56(sp)
  80804c:	ddc00d15 	stw	r23,52(sp)
  808050:	dd800c15 	stw	r22,48(sp)
  808054:	dd000a15 	stw	r20,40(sp)
  808058:	dc800815 	stw	r18,32(sp)
  80805c:	dc400715 	stw	r17,28(sp)
  808060:	2817883a 	mov	r11,r5
  808064:	d9800415 	stw	r6,16(sp)
  808068:	4027883a 	mov	r19,r8
  80806c:	d9800515 	stw	r6,20(sp)
  808070:	2021883a 	mov	r16,r4
  808074:	282b883a 	mov	r21,r5
  808078:	38002c1e 	bne	r7,zero,80812c <__umoddi3+0x100>
  80807c:	2a005636 	bltu	r5,r8,8081d8 <__umoddi3+0x1ac>
  808080:	40009a26 	beq	r8,zero,8082ec <__umoddi3+0x2c0>
  808084:	00bfffd4 	movui	r2,65535
  808088:	14c09236 	bltu	r2,r19,8082d4 <__umoddi3+0x2a8>
  80808c:	00803fc4 	movi	r2,255
  808090:	14c15c36 	bltu	r2,r19,808604 <__umoddi3+0x5d8>
  808094:	000b883a 	mov	r5,zero
  808098:	0005883a 	mov	r2,zero
  80809c:	9884d83a 	srl	r2,r19,r2
  8080a0:	01002074 	movhi	r4,129
  8080a4:	21337104 	addi	r4,r4,-12860
  8080a8:	01800804 	movi	r6,32
  8080ac:	1105883a 	add	r2,r2,r4
  8080b0:	10c00003 	ldbu	r3,0(r2)
  8080b4:	28c7883a 	add	r3,r5,r3
  8080b8:	30e5c83a 	sub	r18,r6,r3
  8080bc:	9000a41e 	bne	r18,zero,808350 <__umoddi3+0x324>
  8080c0:	982ed43a 	srli	r23,r19,16
  8080c4:	acebc83a 	sub	r21,r21,r19
  8080c8:	9d3fffcc 	andi	r20,r19,65535
  8080cc:	002d883a 	mov	r22,zero
  8080d0:	a809883a 	mov	r4,r21
  8080d4:	b80b883a 	mov	r5,r23
  8080d8:	08098f40 	call	8098f4 <__udivsi3>
  8080dc:	100b883a 	mov	r5,r2
  8080e0:	a009883a 	mov	r4,r20
  8080e4:	08099040 	call	809904 <__mulsi3>
  8080e8:	a809883a 	mov	r4,r21
  8080ec:	b80b883a 	mov	r5,r23
  8080f0:	1023883a 	mov	r17,r2
  8080f4:	08098fc0 	call	8098fc <__umodsi3>
  8080f8:	1004943a 	slli	r2,r2,16
  8080fc:	8006d43a 	srli	r3,r16,16
  808100:	10c4b03a 	or	r2,r2,r3
  808104:	1440032e 	bgeu	r2,r17,808114 <__umoddi3+0xe8>
  808108:	14c5883a 	add	r2,r2,r19
  80810c:	14c00136 	bltu	r2,r19,808114 <__umoddi3+0xe8>
  808110:	14415836 	bltu	r2,r17,808674 <__umoddi3+0x648>
  808114:	1463c83a 	sub	r17,r2,r17
  808118:	8809883a 	mov	r4,r17
  80811c:	b80b883a 	mov	r5,r23
  808120:	08098f40 	call	8098f4 <__udivsi3>
  808124:	a009883a 	mov	r4,r20
  808128:	00005306 	br	808278 <__umoddi3+0x24c>
  80812c:	380d883a 	mov	r6,r7
  808130:	29c0132e 	bgeu	r5,r7,808180 <__umoddi3+0x154>
  808134:	d9000415 	stw	r4,16(sp)
  808138:	d9400515 	stw	r5,20(sp)
  80813c:	d9400417 	ldw	r5,16(sp)
  808140:	5813883a 	mov	r9,r11
  808144:	2811883a 	mov	r8,r5
  808148:	4005883a 	mov	r2,r8
  80814c:	4807883a 	mov	r3,r9
  808150:	dfc00f17 	ldw	ra,60(sp)
  808154:	df000e17 	ldw	fp,56(sp)
  808158:	ddc00d17 	ldw	r23,52(sp)
  80815c:	dd800c17 	ldw	r22,48(sp)
  808160:	dd400b17 	ldw	r21,44(sp)
  808164:	dd000a17 	ldw	r20,40(sp)
  808168:	dcc00917 	ldw	r19,36(sp)
  80816c:	dc800817 	ldw	r18,32(sp)
  808170:	dc400717 	ldw	r17,28(sp)
  808174:	dc000617 	ldw	r16,24(sp)
  808178:	dec01004 	addi	sp,sp,64
  80817c:	f800283a 	ret
  808180:	00bfffd4 	movui	r2,65535
  808184:	11c06636 	bltu	r2,r7,808320 <__umoddi3+0x2f4>
  808188:	00803fc4 	movi	r2,255
  80818c:	11c12036 	bltu	r2,r7,808610 <__umoddi3+0x5e4>
  808190:	000b883a 	mov	r5,zero
  808194:	0005883a 	mov	r2,zero
  808198:	3084d83a 	srl	r2,r6,r2
  80819c:	01002074 	movhi	r4,129
  8081a0:	21337104 	addi	r4,r4,-12860
  8081a4:	01c00804 	movi	r7,32
  8081a8:	1105883a 	add	r2,r2,r4
  8081ac:	10c00003 	ldbu	r3,0(r2)
  8081b0:	28c7883a 	add	r3,r5,r3
  8081b4:	38e5c83a 	sub	r18,r7,r3
  8081b8:	9000941e 	bne	r18,zero,80840c <__umoddi3+0x3e0>
  8081bc:	35405e36 	bltu	r6,r21,808338 <__umoddi3+0x30c>
  8081c0:	84c05d2e 	bgeu	r16,r19,808338 <__umoddi3+0x30c>
  8081c4:	8011883a 	mov	r8,r16
  8081c8:	a813883a 	mov	r9,r21
  8081cc:	dc000415 	stw	r16,16(sp)
  8081d0:	dd400515 	stw	r21,20(sp)
  8081d4:	003fdc06 	br	808148 <__umoddi3+0x11c>
  8081d8:	00bfffd4 	movui	r2,65535
  8081dc:	12004a36 	bltu	r2,r8,808308 <__umoddi3+0x2dc>
  8081e0:	00803fc4 	movi	r2,255
  8081e4:	12010d36 	bltu	r2,r8,80861c <__umoddi3+0x5f0>
  8081e8:	000b883a 	mov	r5,zero
  8081ec:	0005883a 	mov	r2,zero
  8081f0:	9884d83a 	srl	r2,r19,r2
  8081f4:	01002074 	movhi	r4,129
  8081f8:	21337104 	addi	r4,r4,-12860
  8081fc:	01800804 	movi	r6,32
  808200:	1105883a 	add	r2,r2,r4
  808204:	10c00003 	ldbu	r3,0(r2)
  808208:	28c7883a 	add	r3,r5,r3
  80820c:	30c7c83a 	sub	r3,r6,r3
  808210:	1800dc1e 	bne	r3,zero,808584 <__umoddi3+0x558>
  808214:	002d883a 	mov	r22,zero
  808218:	982ed43a 	srli	r23,r19,16
  80821c:	a809883a 	mov	r4,r21
  808220:	9cbfffcc 	andi	r18,r19,65535
  808224:	b80b883a 	mov	r5,r23
  808228:	08098f40 	call	8098f4 <__udivsi3>
  80822c:	100b883a 	mov	r5,r2
  808230:	9009883a 	mov	r4,r18
  808234:	08099040 	call	809904 <__mulsi3>
  808238:	a809883a 	mov	r4,r21
  80823c:	b80b883a 	mov	r5,r23
  808240:	1023883a 	mov	r17,r2
  808244:	08098fc0 	call	8098fc <__umodsi3>
  808248:	1004943a 	slli	r2,r2,16
  80824c:	8006d43a 	srli	r3,r16,16
  808250:	10c4b03a 	or	r2,r2,r3
  808254:	1440032e 	bgeu	r2,r17,808264 <__umoddi3+0x238>
  808258:	14c5883a 	add	r2,r2,r19
  80825c:	14c00136 	bltu	r2,r19,808264 <__umoddi3+0x238>
  808260:	14410236 	bltu	r2,r17,80866c <__umoddi3+0x640>
  808264:	1463c83a 	sub	r17,r2,r17
  808268:	8809883a 	mov	r4,r17
  80826c:	b80b883a 	mov	r5,r23
  808270:	08098f40 	call	8098f4 <__udivsi3>
  808274:	9009883a 	mov	r4,r18
  808278:	100b883a 	mov	r5,r2
  80827c:	08099040 	call	809904 <__mulsi3>
  808280:	8809883a 	mov	r4,r17
  808284:	b80b883a 	mov	r5,r23
  808288:	102b883a 	mov	r21,r2
  80828c:	08098fc0 	call	8098fc <__umodsi3>
  808290:	1004943a 	slli	r2,r2,16
  808294:	80ffffcc 	andi	r3,r16,65535
  808298:	10c4b03a 	or	r2,r2,r3
  80829c:	1540042e 	bgeu	r2,r21,8082b0 <__umoddi3+0x284>
  8082a0:	14c5883a 	add	r2,r2,r19
  8082a4:	14c00236 	bltu	r2,r19,8082b0 <__umoddi3+0x284>
  8082a8:	1540012e 	bgeu	r2,r21,8082b0 <__umoddi3+0x284>
  8082ac:	14c5883a 	add	r2,r2,r19
  8082b0:	1545c83a 	sub	r2,r2,r21
  8082b4:	1584d83a 	srl	r2,r2,r22
  8082b8:	0013883a 	mov	r9,zero
  8082bc:	d8800415 	stw	r2,16(sp)
  8082c0:	d8c00417 	ldw	r3,16(sp)
  8082c4:	0005883a 	mov	r2,zero
  8082c8:	d8800515 	stw	r2,20(sp)
  8082cc:	1811883a 	mov	r8,r3
  8082d0:	003f9d06 	br	808148 <__umoddi3+0x11c>
  8082d4:	00804034 	movhi	r2,256
  8082d8:	10bfffc4 	addi	r2,r2,-1
  8082dc:	14c0c636 	bltu	r2,r19,8085f8 <__umoddi3+0x5cc>
  8082e0:	01400404 	movi	r5,16
  8082e4:	2805883a 	mov	r2,r5
  8082e8:	003f6c06 	br	80809c <__umoddi3+0x70>
  8082ec:	01000044 	movi	r4,1
  8082f0:	000b883a 	mov	r5,zero
  8082f4:	08098f40 	call	8098f4 <__udivsi3>
  8082f8:	1027883a 	mov	r19,r2
  8082fc:	00bfffd4 	movui	r2,65535
  808300:	14fff436 	bltu	r2,r19,8082d4 <__umoddi3+0x2a8>
  808304:	003f6106 	br	80808c <__umoddi3+0x60>
  808308:	00804034 	movhi	r2,256
  80830c:	10bfffc4 	addi	r2,r2,-1
  808310:	1200c536 	bltu	r2,r8,808628 <__umoddi3+0x5fc>
  808314:	01400404 	movi	r5,16
  808318:	2805883a 	mov	r2,r5
  80831c:	003fb406 	br	8081f0 <__umoddi3+0x1c4>
  808320:	00804034 	movhi	r2,256
  808324:	10bfffc4 	addi	r2,r2,-1
  808328:	11c0c236 	bltu	r2,r7,808634 <__umoddi3+0x608>
  80832c:	01400404 	movi	r5,16
  808330:	2805883a 	mov	r2,r5
  808334:	003f9806 	br	808198 <__umoddi3+0x16c>
  808338:	84c9c83a 	sub	r4,r16,r19
  80833c:	8105803a 	cmpltu	r2,r16,r4
  808340:	a987c83a 	sub	r3,r21,r6
  808344:	18abc83a 	sub	r21,r3,r2
  808348:	2021883a 	mov	r16,r4
  80834c:	003f9d06 	br	8081c4 <__umoddi3+0x198>
  808350:	9ca6983a 	sll	r19,r19,r18
  808354:	3485c83a 	sub	r2,r6,r18
  808358:	a8a2d83a 	srl	r17,r21,r2
  80835c:	982ed43a 	srli	r23,r19,16
  808360:	ac86983a 	sll	r3,r21,r18
  808364:	8084d83a 	srl	r2,r16,r2
  808368:	8809883a 	mov	r4,r17
  80836c:	b80b883a 	mov	r5,r23
  808370:	18b8b03a 	or	fp,r3,r2
  808374:	9d3fffcc 	andi	r20,r19,65535
  808378:	08098f40 	call	8098f4 <__udivsi3>
  80837c:	100b883a 	mov	r5,r2
  808380:	a009883a 	mov	r4,r20
  808384:	08099040 	call	809904 <__mulsi3>
  808388:	8809883a 	mov	r4,r17
  80838c:	b80b883a 	mov	r5,r23
  808390:	102b883a 	mov	r21,r2
  808394:	08098fc0 	call	8098fc <__umodsi3>
  808398:	1004943a 	slli	r2,r2,16
  80839c:	e006d43a 	srli	r3,fp,16
  8083a0:	902d883a 	mov	r22,r18
  8083a4:	10c4b03a 	or	r2,r2,r3
  8083a8:	1540022e 	bgeu	r2,r21,8083b4 <__umoddi3+0x388>
  8083ac:	14c5883a 	add	r2,r2,r19
  8083b0:	14c0ab2e 	bgeu	r2,r19,808660 <__umoddi3+0x634>
  8083b4:	1563c83a 	sub	r17,r2,r21
  8083b8:	8809883a 	mov	r4,r17
  8083bc:	b80b883a 	mov	r5,r23
  8083c0:	08098f40 	call	8098f4 <__udivsi3>
  8083c4:	100b883a 	mov	r5,r2
  8083c8:	a009883a 	mov	r4,r20
  8083cc:	08099040 	call	809904 <__mulsi3>
  8083d0:	8809883a 	mov	r4,r17
  8083d4:	b80b883a 	mov	r5,r23
  8083d8:	102b883a 	mov	r21,r2
  8083dc:	08098fc0 	call	8098fc <__umodsi3>
  8083e0:	1004943a 	slli	r2,r2,16
  8083e4:	e0ffffcc 	andi	r3,fp,65535
  8083e8:	10c4b03a 	or	r2,r2,r3
  8083ec:	1540042e 	bgeu	r2,r21,808400 <__umoddi3+0x3d4>
  8083f0:	14c5883a 	add	r2,r2,r19
  8083f4:	14c00236 	bltu	r2,r19,808400 <__umoddi3+0x3d4>
  8083f8:	1540012e 	bgeu	r2,r21,808400 <__umoddi3+0x3d4>
  8083fc:	14c5883a 	add	r2,r2,r19
  808400:	84a0983a 	sll	r16,r16,r18
  808404:	156bc83a 	sub	r21,r2,r21
  808408:	003f3106 	br	8080d0 <__umoddi3+0xa4>
  80840c:	3c8fc83a 	sub	r7,r7,r18
  808410:	3486983a 	sll	r3,r6,r18
  808414:	99c4d83a 	srl	r2,r19,r7
  808418:	a9e2d83a 	srl	r17,r21,r7
  80841c:	ac8c983a 	sll	r6,r21,r18
  808420:	18acb03a 	or	r22,r3,r2
  808424:	b02ed43a 	srli	r23,r22,16
  808428:	81c4d83a 	srl	r2,r16,r7
  80842c:	8809883a 	mov	r4,r17
  808430:	b80b883a 	mov	r5,r23
  808434:	308cb03a 	or	r6,r6,r2
  808438:	d9c00315 	stw	r7,12(sp)
  80843c:	d9800215 	stw	r6,8(sp)
  808440:	b53fffcc 	andi	r20,r22,65535
  808444:	08098f40 	call	8098f4 <__udivsi3>
  808448:	100b883a 	mov	r5,r2
  80844c:	a009883a 	mov	r4,r20
  808450:	1039883a 	mov	fp,r2
  808454:	08099040 	call	809904 <__mulsi3>
  808458:	8809883a 	mov	r4,r17
  80845c:	b80b883a 	mov	r5,r23
  808460:	102b883a 	mov	r21,r2
  808464:	08098fc0 	call	8098fc <__umodsi3>
  808468:	d9000217 	ldw	r4,8(sp)
  80846c:	1004943a 	slli	r2,r2,16
  808470:	9ca6983a 	sll	r19,r19,r18
  808474:	2006d43a 	srli	r3,r4,16
  808478:	84a0983a 	sll	r16,r16,r18
  80847c:	dcc00015 	stw	r19,0(sp)
  808480:	10c4b03a 	or	r2,r2,r3
  808484:	dc000115 	stw	r16,4(sp)
  808488:	1540032e 	bgeu	r2,r21,808498 <__umoddi3+0x46c>
  80848c:	1585883a 	add	r2,r2,r22
  808490:	e73fffc4 	addi	fp,fp,-1
  808494:	15806e2e 	bgeu	r2,r22,808650 <__umoddi3+0x624>
  808498:	1563c83a 	sub	r17,r2,r21
  80849c:	8809883a 	mov	r4,r17
  8084a0:	b80b883a 	mov	r5,r23
  8084a4:	08098f40 	call	8098f4 <__udivsi3>
  8084a8:	100b883a 	mov	r5,r2
  8084ac:	a009883a 	mov	r4,r20
  8084b0:	1021883a 	mov	r16,r2
  8084b4:	08099040 	call	809904 <__mulsi3>
  8084b8:	b80b883a 	mov	r5,r23
  8084bc:	8809883a 	mov	r4,r17
  8084c0:	1029883a 	mov	r20,r2
  8084c4:	08098fc0 	call	8098fc <__umodsi3>
  8084c8:	d9400217 	ldw	r5,8(sp)
  8084cc:	1004943a 	slli	r2,r2,16
  8084d0:	28ffffcc 	andi	r3,r5,65535
  8084d4:	10c4b03a 	or	r2,r2,r3
  8084d8:	1500032e 	bgeu	r2,r20,8084e8 <__umoddi3+0x4bc>
  8084dc:	1585883a 	add	r2,r2,r22
  8084e0:	843fffc4 	addi	r16,r16,-1
  8084e4:	1580562e 	bgeu	r2,r22,808640 <__umoddi3+0x614>
  8084e8:	d9800017 	ldw	r6,0(sp)
  8084ec:	e022943a 	slli	r17,fp,16
  8084f0:	302ed43a 	srli	r23,r6,16
  8084f4:	8462b03a 	or	r17,r16,r17
  8084f8:	34ffffcc 	andi	r19,r6,65535
  8084fc:	882ad43a 	srli	r21,r17,16
  808500:	8c7fffcc 	andi	r17,r17,65535
  808504:	8809883a 	mov	r4,r17
  808508:	980b883a 	mov	r5,r19
  80850c:	1521c83a 	sub	r16,r2,r20
  808510:	08099040 	call	809904 <__mulsi3>
  808514:	8809883a 	mov	r4,r17
  808518:	b80b883a 	mov	r5,r23
  80851c:	1029883a 	mov	r20,r2
  808520:	08099040 	call	809904 <__mulsi3>
  808524:	980b883a 	mov	r5,r19
  808528:	a809883a 	mov	r4,r21
  80852c:	1023883a 	mov	r17,r2
  808530:	08099040 	call	809904 <__mulsi3>
  808534:	a809883a 	mov	r4,r21
  808538:	b80b883a 	mov	r5,r23
  80853c:	1027883a 	mov	r19,r2
  808540:	08099040 	call	809904 <__mulsi3>
  808544:	100b883a 	mov	r5,r2
  808548:	a004d43a 	srli	r2,r20,16
  80854c:	8ce3883a 	add	r17,r17,r19
  808550:	1449883a 	add	r4,r2,r17
  808554:	24c0022e 	bgeu	r4,r19,808560 <__umoddi3+0x534>
  808558:	00800074 	movhi	r2,1
  80855c:	288b883a 	add	r5,r5,r2
  808560:	2004d43a 	srli	r2,r4,16
  808564:	2008943a 	slli	r4,r4,16
  808568:	a0ffffcc 	andi	r3,r20,65535
  80856c:	288d883a 	add	r6,r5,r2
  808570:	20c9883a 	add	r4,r4,r3
  808574:	81800b36 	bltu	r16,r6,8085a4 <__umoddi3+0x578>
  808578:	81804026 	beq	r16,r6,80867c <__umoddi3+0x650>
  80857c:	818dc83a 	sub	r6,r16,r6
  808580:	00000f06 	br	8085c0 <__umoddi3+0x594>
  808584:	30c5c83a 	sub	r2,r6,r3
  808588:	182d883a 	mov	r22,r3
  80858c:	8084d83a 	srl	r2,r16,r2
  808590:	a8c6983a 	sll	r3,r21,r3
  808594:	9da6983a 	sll	r19,r19,r22
  808598:	85a0983a 	sll	r16,r16,r22
  80859c:	18aab03a 	or	r21,r3,r2
  8085a0:	003f1d06 	br	808218 <__umoddi3+0x1ec>
  8085a4:	d8c00017 	ldw	r3,0(sp)
  8085a8:	20c5c83a 	sub	r2,r4,r3
  8085ac:	2089803a 	cmpltu	r4,r4,r2
  8085b0:	3587c83a 	sub	r3,r6,r22
  8085b4:	1907c83a 	sub	r3,r3,r4
  8085b8:	80cdc83a 	sub	r6,r16,r3
  8085bc:	1009883a 	mov	r4,r2
  8085c0:	d9400117 	ldw	r5,4(sp)
  8085c4:	2905c83a 	sub	r2,r5,r4
  8085c8:	2887803a 	cmpltu	r3,r5,r2
  8085cc:	30c7c83a 	sub	r3,r6,r3
  8085d0:	d9800317 	ldw	r6,12(sp)
  8085d4:	1484d83a 	srl	r2,r2,r18
  8085d8:	1988983a 	sll	r4,r3,r6
  8085dc:	1c86d83a 	srl	r3,r3,r18
  8085e0:	2088b03a 	or	r4,r4,r2
  8085e4:	2011883a 	mov	r8,r4
  8085e8:	1813883a 	mov	r9,r3
  8085ec:	d9000415 	stw	r4,16(sp)
  8085f0:	d8c00515 	stw	r3,20(sp)
  8085f4:	003ed406 	br	808148 <__umoddi3+0x11c>
  8085f8:	01400604 	movi	r5,24
  8085fc:	2805883a 	mov	r2,r5
  808600:	003ea606 	br	80809c <__umoddi3+0x70>
  808604:	01400204 	movi	r5,8
  808608:	2805883a 	mov	r2,r5
  80860c:	003ea306 	br	80809c <__umoddi3+0x70>
  808610:	01400204 	movi	r5,8
  808614:	2805883a 	mov	r2,r5
  808618:	003edf06 	br	808198 <__umoddi3+0x16c>
  80861c:	01400204 	movi	r5,8
  808620:	2805883a 	mov	r2,r5
  808624:	003ef206 	br	8081f0 <__umoddi3+0x1c4>
  808628:	01400604 	movi	r5,24
  80862c:	2805883a 	mov	r2,r5
  808630:	003eef06 	br	8081f0 <__umoddi3+0x1c4>
  808634:	01400604 	movi	r5,24
  808638:	2805883a 	mov	r2,r5
  80863c:	003ed606 	br	808198 <__umoddi3+0x16c>
  808640:	153fa92e 	bgeu	r2,r20,8084e8 <__umoddi3+0x4bc>
  808644:	843fffc4 	addi	r16,r16,-1
  808648:	1585883a 	add	r2,r2,r22
  80864c:	003fa606 	br	8084e8 <__umoddi3+0x4bc>
  808650:	157f912e 	bgeu	r2,r21,808498 <__umoddi3+0x46c>
  808654:	e73fffc4 	addi	fp,fp,-1
  808658:	1585883a 	add	r2,r2,r22
  80865c:	003f8e06 	br	808498 <__umoddi3+0x46c>
  808660:	157f542e 	bgeu	r2,r21,8083b4 <__umoddi3+0x388>
  808664:	14c5883a 	add	r2,r2,r19
  808668:	003f5206 	br	8083b4 <__umoddi3+0x388>
  80866c:	14c5883a 	add	r2,r2,r19
  808670:	003efc06 	br	808264 <__umoddi3+0x238>
  808674:	14c5883a 	add	r2,r2,r19
  808678:	003ea606 	br	808114 <__umoddi3+0xe8>
  80867c:	d8800117 	ldw	r2,4(sp)
  808680:	113fc836 	bltu	r2,r4,8085a4 <__umoddi3+0x578>
  808684:	000d883a 	mov	r6,zero
  808688:	003fcd06 	br	8085c0 <__umoddi3+0x594>

0080868c <_fpadd_parts>:
  80868c:	defff804 	addi	sp,sp,-32
  808690:	dcc00315 	stw	r19,12(sp)
  808694:	2027883a 	mov	r19,r4
  808698:	21000017 	ldw	r4,0(r4)
  80869c:	00c00044 	movi	r3,1
  8086a0:	dd400515 	stw	r21,20(sp)
  8086a4:	dd000415 	stw	r20,16(sp)
  8086a8:	ddc00715 	stw	r23,28(sp)
  8086ac:	dd800615 	stw	r22,24(sp)
  8086b0:	dc800215 	stw	r18,8(sp)
  8086b4:	dc400115 	stw	r17,4(sp)
  8086b8:	dc000015 	stw	r16,0(sp)
  8086bc:	282b883a 	mov	r21,r5
  8086c0:	3029883a 	mov	r20,r6
  8086c4:	1900632e 	bgeu	r3,r4,808854 <_fpadd_parts+0x1c8>
  8086c8:	28800017 	ldw	r2,0(r5)
  8086cc:	1880812e 	bgeu	r3,r2,8088d4 <_fpadd_parts+0x248>
  8086d0:	00c00104 	movi	r3,4
  8086d4:	20c0dc26 	beq	r4,r3,808a48 <_fpadd_parts+0x3bc>
  8086d8:	10c07e26 	beq	r2,r3,8088d4 <_fpadd_parts+0x248>
  8086dc:	00c00084 	movi	r3,2
  8086e0:	10c06726 	beq	r2,r3,808880 <_fpadd_parts+0x1f4>
  8086e4:	20c07b26 	beq	r4,r3,8088d4 <_fpadd_parts+0x248>
  8086e8:	9dc00217 	ldw	r23,8(r19)
  8086ec:	28c00217 	ldw	r3,8(r5)
  8086f0:	9c400317 	ldw	r17,12(r19)
  8086f4:	2bc00317 	ldw	r15,12(r5)
  8086f8:	b8cdc83a 	sub	r6,r23,r3
  8086fc:	9c800417 	ldw	r18,16(r19)
  808700:	2c000417 	ldw	r16,16(r5)
  808704:	3009883a 	mov	r4,r6
  808708:	30009716 	blt	r6,zero,808968 <_fpadd_parts+0x2dc>
  80870c:	00800fc4 	movi	r2,63
  808710:	11806b16 	blt	r2,r6,8088c0 <_fpadd_parts+0x234>
  808714:	0100a40e 	bge	zero,r4,8089a8 <_fpadd_parts+0x31c>
  808718:	35bff804 	addi	r22,r6,-32
  80871c:	b000bc16 	blt	r22,zero,808a10 <_fpadd_parts+0x384>
  808720:	8596d83a 	srl	r11,r16,r22
  808724:	0019883a 	mov	r12,zero
  808728:	0013883a 	mov	r9,zero
  80872c:	01000044 	movi	r4,1
  808730:	0015883a 	mov	r10,zero
  808734:	b000be16 	blt	r22,zero,808a30 <_fpadd_parts+0x3a4>
  808738:	2590983a 	sll	r8,r4,r22
  80873c:	000f883a 	mov	r7,zero
  808740:	00bfffc4 	movi	r2,-1
  808744:	3889883a 	add	r4,r7,r2
  808748:	408b883a 	add	r5,r8,r2
  80874c:	21cd803a 	cmpltu	r6,r4,r7
  808750:	314b883a 	add	r5,r6,r5
  808754:	7904703a 	and	r2,r15,r4
  808758:	8146703a 	and	r3,r16,r5
  80875c:	10c4b03a 	or	r2,r2,r3
  808760:	10000226 	beq	r2,zero,80876c <_fpadd_parts+0xe0>
  808764:	02400044 	movi	r9,1
  808768:	0015883a 	mov	r10,zero
  80876c:	5a5eb03a 	or	r15,r11,r9
  808770:	62a0b03a 	or	r16,r12,r10
  808774:	99400117 	ldw	r5,4(r19)
  808778:	a8800117 	ldw	r2,4(r21)
  80877c:	28806e26 	beq	r5,r2,808938 <_fpadd_parts+0x2ac>
  808780:	28006626 	beq	r5,zero,80891c <_fpadd_parts+0x290>
  808784:	7c45c83a 	sub	r2,r15,r17
  808788:	7889803a 	cmpltu	r4,r15,r2
  80878c:	8487c83a 	sub	r3,r16,r18
  808790:	1909c83a 	sub	r4,r3,r4
  808794:	100d883a 	mov	r6,r2
  808798:	200f883a 	mov	r7,r4
  80879c:	38007716 	blt	r7,zero,80897c <_fpadd_parts+0x2f0>
  8087a0:	a5c00215 	stw	r23,8(r20)
  8087a4:	a1c00415 	stw	r7,16(r20)
  8087a8:	a0000115 	stw	zero,4(r20)
  8087ac:	a1800315 	stw	r6,12(r20)
  8087b0:	a2000317 	ldw	r8,12(r20)
  8087b4:	a2400417 	ldw	r9,16(r20)
  8087b8:	00bfffc4 	movi	r2,-1
  8087bc:	408b883a 	add	r5,r8,r2
  8087c0:	2a09803a 	cmpltu	r4,r5,r8
  8087c4:	488d883a 	add	r6,r9,r2
  8087c8:	01c40034 	movhi	r7,4096
  8087cc:	39ffffc4 	addi	r7,r7,-1
  8087d0:	218d883a 	add	r6,r4,r6
  8087d4:	39801736 	bltu	r7,r6,808834 <_fpadd_parts+0x1a8>
  8087d8:	31c06526 	beq	r6,r7,808970 <_fpadd_parts+0x2e4>
  8087dc:	a3000217 	ldw	r12,8(r20)
  8087e0:	4209883a 	add	r4,r8,r8
  8087e4:	00bfffc4 	movi	r2,-1
  8087e8:	220f803a 	cmpltu	r7,r4,r8
  8087ec:	4a4b883a 	add	r5,r9,r9
  8087f0:	394f883a 	add	r7,r7,r5
  8087f4:	2095883a 	add	r10,r4,r2
  8087f8:	3897883a 	add	r11,r7,r2
  8087fc:	510d803a 	cmpltu	r6,r10,r4
  808800:	6099883a 	add	r12,r12,r2
  808804:	32d7883a 	add	r11,r6,r11
  808808:	00840034 	movhi	r2,4096
  80880c:	10bfffc4 	addi	r2,r2,-1
  808810:	2011883a 	mov	r8,r4
  808814:	3813883a 	mov	r9,r7
  808818:	a1000315 	stw	r4,12(r20)
  80881c:	a1c00415 	stw	r7,16(r20)
  808820:	a3000215 	stw	r12,8(r20)
  808824:	12c00336 	bltu	r2,r11,808834 <_fpadd_parts+0x1a8>
  808828:	58bfed1e 	bne	r11,r2,8087e0 <_fpadd_parts+0x154>
  80882c:	00bfff84 	movi	r2,-2
  808830:	12bfeb2e 	bgeu	r2,r10,8087e0 <_fpadd_parts+0x154>
  808834:	a2800417 	ldw	r10,16(r20)
  808838:	008000c4 	movi	r2,3
  80883c:	00c80034 	movhi	r3,8192
  808840:	18ffffc4 	addi	r3,r3,-1
  808844:	a2400317 	ldw	r9,12(r20)
  808848:	a0800015 	stw	r2,0(r20)
  80884c:	1a802336 	bltu	r3,r10,8088dc <_fpadd_parts+0x250>
  808850:	a027883a 	mov	r19,r20
  808854:	9805883a 	mov	r2,r19
  808858:	ddc00717 	ldw	r23,28(sp)
  80885c:	dd800617 	ldw	r22,24(sp)
  808860:	dd400517 	ldw	r21,20(sp)
  808864:	dd000417 	ldw	r20,16(sp)
  808868:	dcc00317 	ldw	r19,12(sp)
  80886c:	dc800217 	ldw	r18,8(sp)
  808870:	dc400117 	ldw	r17,4(sp)
  808874:	dc000017 	ldw	r16,0(sp)
  808878:	dec00804 	addi	sp,sp,32
  80887c:	f800283a 	ret
  808880:	20fff41e 	bne	r4,r3,808854 <_fpadd_parts+0x1c8>
  808884:	31000015 	stw	r4,0(r6)
  808888:	98800117 	ldw	r2,4(r19)
  80888c:	30800115 	stw	r2,4(r6)
  808890:	98c00217 	ldw	r3,8(r19)
  808894:	30c00215 	stw	r3,8(r6)
  808898:	98800317 	ldw	r2,12(r19)
  80889c:	30800315 	stw	r2,12(r6)
  8088a0:	98c00417 	ldw	r3,16(r19)
  8088a4:	30c00415 	stw	r3,16(r6)
  8088a8:	98800117 	ldw	r2,4(r19)
  8088ac:	28c00117 	ldw	r3,4(r5)
  8088b0:	3027883a 	mov	r19,r6
  8088b4:	10c4703a 	and	r2,r2,r3
  8088b8:	30800115 	stw	r2,4(r6)
  8088bc:	003fe506 	br	808854 <_fpadd_parts+0x1c8>
  8088c0:	1dc02616 	blt	r3,r23,80895c <_fpadd_parts+0x2d0>
  8088c4:	0023883a 	mov	r17,zero
  8088c8:	182f883a 	mov	r23,r3
  8088cc:	0025883a 	mov	r18,zero
  8088d0:	003fa806 	br	808774 <_fpadd_parts+0xe8>
  8088d4:	a827883a 	mov	r19,r21
  8088d8:	003fde06 	br	808854 <_fpadd_parts+0x1c8>
  8088dc:	01800044 	movi	r6,1
  8088e0:	500497fa 	slli	r2,r10,31
  8088e4:	4808d07a 	srli	r4,r9,1
  8088e8:	518ad83a 	srl	r5,r10,r6
  8088ec:	a2000217 	ldw	r8,8(r20)
  8088f0:	1108b03a 	or	r4,r2,r4
  8088f4:	0007883a 	mov	r3,zero
  8088f8:	4984703a 	and	r2,r9,r6
  8088fc:	208cb03a 	or	r6,r4,r2
  808900:	28ceb03a 	or	r7,r5,r3
  808904:	42000044 	addi	r8,r8,1
  808908:	a027883a 	mov	r19,r20
  80890c:	a1c00415 	stw	r7,16(r20)
  808910:	a2000215 	stw	r8,8(r20)
  808914:	a1800315 	stw	r6,12(r20)
  808918:	003fce06 	br	808854 <_fpadd_parts+0x1c8>
  80891c:	8bc5c83a 	sub	r2,r17,r15
  808920:	8889803a 	cmpltu	r4,r17,r2
  808924:	9407c83a 	sub	r3,r18,r16
  808928:	1909c83a 	sub	r4,r3,r4
  80892c:	100d883a 	mov	r6,r2
  808930:	200f883a 	mov	r7,r4
  808934:	003f9906 	br	80879c <_fpadd_parts+0x110>
  808938:	7c45883a 	add	r2,r15,r17
  80893c:	13c9803a 	cmpltu	r4,r2,r15
  808940:	8487883a 	add	r3,r16,r18
  808944:	20c9883a 	add	r4,r4,r3
  808948:	a1400115 	stw	r5,4(r20)
  80894c:	a5c00215 	stw	r23,8(r20)
  808950:	a0800315 	stw	r2,12(r20)
  808954:	a1000415 	stw	r4,16(r20)
  808958:	003fb606 	br	808834 <_fpadd_parts+0x1a8>
  80895c:	001f883a 	mov	r15,zero
  808960:	0021883a 	mov	r16,zero
  808964:	003f8306 	br	808774 <_fpadd_parts+0xe8>
  808968:	018dc83a 	sub	r6,zero,r6
  80896c:	003f6706 	br	80870c <_fpadd_parts+0x80>
  808970:	00bfff84 	movi	r2,-2
  808974:	117faf36 	bltu	r2,r5,808834 <_fpadd_parts+0x1a8>
  808978:	003f9806 	br	8087dc <_fpadd_parts+0x150>
  80897c:	0005883a 	mov	r2,zero
  808980:	1189c83a 	sub	r4,r2,r6
  808984:	1105803a 	cmpltu	r2,r2,r4
  808988:	01cbc83a 	sub	r5,zero,r7
  80898c:	2885c83a 	sub	r2,r5,r2
  808990:	01800044 	movi	r6,1
  808994:	a1800115 	stw	r6,4(r20)
  808998:	a5c00215 	stw	r23,8(r20)
  80899c:	a1000315 	stw	r4,12(r20)
  8089a0:	a0800415 	stw	r2,16(r20)
  8089a4:	003f8206 	br	8087b0 <_fpadd_parts+0x124>
  8089a8:	203f7226 	beq	r4,zero,808774 <_fpadd_parts+0xe8>
  8089ac:	35bff804 	addi	r22,r6,-32
  8089b0:	b9af883a 	add	r23,r23,r6
  8089b4:	b0003116 	blt	r22,zero,808a7c <_fpadd_parts+0x3f0>
  8089b8:	959ad83a 	srl	r13,r18,r22
  8089bc:	001d883a 	mov	r14,zero
  8089c0:	000f883a 	mov	r7,zero
  8089c4:	01000044 	movi	r4,1
  8089c8:	0011883a 	mov	r8,zero
  8089cc:	b0002516 	blt	r22,zero,808a64 <_fpadd_parts+0x3d8>
  8089d0:	2594983a 	sll	r10,r4,r22
  8089d4:	0013883a 	mov	r9,zero
  8089d8:	00bfffc4 	movi	r2,-1
  8089dc:	4889883a 	add	r4,r9,r2
  8089e0:	508b883a 	add	r5,r10,r2
  8089e4:	224d803a 	cmpltu	r6,r4,r9
  8089e8:	314b883a 	add	r5,r6,r5
  8089ec:	8904703a 	and	r2,r17,r4
  8089f0:	9146703a 	and	r3,r18,r5
  8089f4:	10c4b03a 	or	r2,r2,r3
  8089f8:	10000226 	beq	r2,zero,808a04 <_fpadd_parts+0x378>
  8089fc:	01c00044 	movi	r7,1
  808a00:	0011883a 	mov	r8,zero
  808a04:	69e2b03a 	or	r17,r13,r7
  808a08:	7224b03a 	or	r18,r14,r8
  808a0c:	003f5906 	br	808774 <_fpadd_parts+0xe8>
  808a10:	8407883a 	add	r3,r16,r16
  808a14:	008007c4 	movi	r2,31
  808a18:	1185c83a 	sub	r2,r2,r6
  808a1c:	1886983a 	sll	r3,r3,r2
  808a20:	7996d83a 	srl	r11,r15,r6
  808a24:	8198d83a 	srl	r12,r16,r6
  808a28:	1ad6b03a 	or	r11,r3,r11
  808a2c:	003f3e06 	br	808728 <_fpadd_parts+0x9c>
  808a30:	2006d07a 	srli	r3,r4,1
  808a34:	008007c4 	movi	r2,31
  808a38:	1185c83a 	sub	r2,r2,r6
  808a3c:	1890d83a 	srl	r8,r3,r2
  808a40:	218e983a 	sll	r7,r4,r6
  808a44:	003f3e06 	br	808740 <_fpadd_parts+0xb4>
  808a48:	113f821e 	bne	r2,r4,808854 <_fpadd_parts+0x1c8>
  808a4c:	28c00117 	ldw	r3,4(r5)
  808a50:	98800117 	ldw	r2,4(r19)
  808a54:	10ff7f26 	beq	r2,r3,808854 <_fpadd_parts+0x1c8>
  808a58:	04c02074 	movhi	r19,129
  808a5c:	9cf36c04 	addi	r19,r19,-12880
  808a60:	003f7c06 	br	808854 <_fpadd_parts+0x1c8>
  808a64:	2006d07a 	srli	r3,r4,1
  808a68:	008007c4 	movi	r2,31
  808a6c:	1185c83a 	sub	r2,r2,r6
  808a70:	1894d83a 	srl	r10,r3,r2
  808a74:	2192983a 	sll	r9,r4,r6
  808a78:	003fd706 	br	8089d8 <_fpadd_parts+0x34c>
  808a7c:	9487883a 	add	r3,r18,r18
  808a80:	008007c4 	movi	r2,31
  808a84:	1185c83a 	sub	r2,r2,r6
  808a88:	1886983a 	sll	r3,r3,r2
  808a8c:	899ad83a 	srl	r13,r17,r6
  808a90:	919cd83a 	srl	r14,r18,r6
  808a94:	1b5ab03a 	or	r13,r3,r13
  808a98:	003fc906 	br	8089c0 <_fpadd_parts+0x334>

00808a9c <__subdf3>:
  808a9c:	deffea04 	addi	sp,sp,-88
  808aa0:	dcc01415 	stw	r19,80(sp)
  808aa4:	dcc00404 	addi	r19,sp,16
  808aa8:	2011883a 	mov	r8,r4
  808aac:	2813883a 	mov	r9,r5
  808ab0:	dc401315 	stw	r17,76(sp)
  808ab4:	d809883a 	mov	r4,sp
  808ab8:	980b883a 	mov	r5,r19
  808abc:	dc400904 	addi	r17,sp,36
  808ac0:	dfc01515 	stw	ra,84(sp)
  808ac4:	da400115 	stw	r9,4(sp)
  808ac8:	d9c00315 	stw	r7,12(sp)
  808acc:	da000015 	stw	r8,0(sp)
  808ad0:	d9800215 	stw	r6,8(sp)
  808ad4:	0809df40 	call	809df4 <__unpack_d>
  808ad8:	d9000204 	addi	r4,sp,8
  808adc:	880b883a 	mov	r5,r17
  808ae0:	0809df40 	call	809df4 <__unpack_d>
  808ae4:	d8800a17 	ldw	r2,40(sp)
  808ae8:	880b883a 	mov	r5,r17
  808aec:	9809883a 	mov	r4,r19
  808af0:	d9800e04 	addi	r6,sp,56
  808af4:	1080005c 	xori	r2,r2,1
  808af8:	d8800a15 	stw	r2,40(sp)
  808afc:	080868c0 	call	80868c <_fpadd_parts>
  808b00:	1009883a 	mov	r4,r2
  808b04:	0809ae00 	call	809ae0 <__pack_d>
  808b08:	dfc01517 	ldw	ra,84(sp)
  808b0c:	dcc01417 	ldw	r19,80(sp)
  808b10:	dc401317 	ldw	r17,76(sp)
  808b14:	dec01604 	addi	sp,sp,88
  808b18:	f800283a 	ret

00808b1c <__adddf3>:
  808b1c:	deffea04 	addi	sp,sp,-88
  808b20:	dcc01415 	stw	r19,80(sp)
  808b24:	dcc00404 	addi	r19,sp,16
  808b28:	2011883a 	mov	r8,r4
  808b2c:	2813883a 	mov	r9,r5
  808b30:	dc401315 	stw	r17,76(sp)
  808b34:	d809883a 	mov	r4,sp
  808b38:	980b883a 	mov	r5,r19
  808b3c:	dc400904 	addi	r17,sp,36
  808b40:	dfc01515 	stw	ra,84(sp)
  808b44:	da400115 	stw	r9,4(sp)
  808b48:	d9c00315 	stw	r7,12(sp)
  808b4c:	da000015 	stw	r8,0(sp)
  808b50:	d9800215 	stw	r6,8(sp)
  808b54:	0809df40 	call	809df4 <__unpack_d>
  808b58:	d9000204 	addi	r4,sp,8
  808b5c:	880b883a 	mov	r5,r17
  808b60:	0809df40 	call	809df4 <__unpack_d>
  808b64:	d9800e04 	addi	r6,sp,56
  808b68:	9809883a 	mov	r4,r19
  808b6c:	880b883a 	mov	r5,r17
  808b70:	080868c0 	call	80868c <_fpadd_parts>
  808b74:	1009883a 	mov	r4,r2
  808b78:	0809ae00 	call	809ae0 <__pack_d>
  808b7c:	dfc01517 	ldw	ra,84(sp)
  808b80:	dcc01417 	ldw	r19,80(sp)
  808b84:	dc401317 	ldw	r17,76(sp)
  808b88:	dec01604 	addi	sp,sp,88
  808b8c:	f800283a 	ret

00808b90 <__muldf3>:
  808b90:	deffe004 	addi	sp,sp,-128
  808b94:	dc401815 	stw	r17,96(sp)
  808b98:	dc400404 	addi	r17,sp,16
  808b9c:	2011883a 	mov	r8,r4
  808ba0:	2813883a 	mov	r9,r5
  808ba4:	dc001715 	stw	r16,92(sp)
  808ba8:	d809883a 	mov	r4,sp
  808bac:	880b883a 	mov	r5,r17
  808bb0:	dc000904 	addi	r16,sp,36
  808bb4:	dfc01f15 	stw	ra,124(sp)
  808bb8:	da400115 	stw	r9,4(sp)
  808bbc:	d9c00315 	stw	r7,12(sp)
  808bc0:	da000015 	stw	r8,0(sp)
  808bc4:	d9800215 	stw	r6,8(sp)
  808bc8:	ddc01e15 	stw	r23,120(sp)
  808bcc:	dd801d15 	stw	r22,116(sp)
  808bd0:	dd401c15 	stw	r21,112(sp)
  808bd4:	dd001b15 	stw	r20,108(sp)
  808bd8:	dcc01a15 	stw	r19,104(sp)
  808bdc:	dc801915 	stw	r18,100(sp)
  808be0:	0809df40 	call	809df4 <__unpack_d>
  808be4:	d9000204 	addi	r4,sp,8
  808be8:	800b883a 	mov	r5,r16
  808bec:	0809df40 	call	809df4 <__unpack_d>
  808bf0:	d9000417 	ldw	r4,16(sp)
  808bf4:	00800044 	movi	r2,1
  808bf8:	1100102e 	bgeu	r2,r4,808c3c <__muldf3+0xac>
  808bfc:	d8c00917 	ldw	r3,36(sp)
  808c00:	10c0062e 	bgeu	r2,r3,808c1c <__muldf3+0x8c>
  808c04:	00800104 	movi	r2,4
  808c08:	20800a26 	beq	r4,r2,808c34 <__muldf3+0xa4>
  808c0c:	1880cc26 	beq	r3,r2,808f40 <__muldf3+0x3b0>
  808c10:	00800084 	movi	r2,2
  808c14:	20800926 	beq	r4,r2,808c3c <__muldf3+0xac>
  808c18:	1880191e 	bne	r3,r2,808c80 <__muldf3+0xf0>
  808c1c:	d8c00a17 	ldw	r3,40(sp)
  808c20:	d8800517 	ldw	r2,20(sp)
  808c24:	8009883a 	mov	r4,r16
  808c28:	10c4c03a 	cmpne	r2,r2,r3
  808c2c:	d8800a15 	stw	r2,40(sp)
  808c30:	00000706 	br	808c50 <__muldf3+0xc0>
  808c34:	00800084 	movi	r2,2
  808c38:	1880c326 	beq	r3,r2,808f48 <__muldf3+0x3b8>
  808c3c:	d8800517 	ldw	r2,20(sp)
  808c40:	d8c00a17 	ldw	r3,40(sp)
  808c44:	8809883a 	mov	r4,r17
  808c48:	10c4c03a 	cmpne	r2,r2,r3
  808c4c:	d8800515 	stw	r2,20(sp)
  808c50:	0809ae00 	call	809ae0 <__pack_d>
  808c54:	dfc01f17 	ldw	ra,124(sp)
  808c58:	ddc01e17 	ldw	r23,120(sp)
  808c5c:	dd801d17 	ldw	r22,116(sp)
  808c60:	dd401c17 	ldw	r21,112(sp)
  808c64:	dd001b17 	ldw	r20,108(sp)
  808c68:	dcc01a17 	ldw	r19,104(sp)
  808c6c:	dc801917 	ldw	r18,100(sp)
  808c70:	dc401817 	ldw	r17,96(sp)
  808c74:	dc001717 	ldw	r16,92(sp)
  808c78:	dec02004 	addi	sp,sp,128
  808c7c:	f800283a 	ret
  808c80:	dd800717 	ldw	r22,28(sp)
  808c84:	dc800c17 	ldw	r18,48(sp)
  808c88:	002b883a 	mov	r21,zero
  808c8c:	0023883a 	mov	r17,zero
  808c90:	a80b883a 	mov	r5,r21
  808c94:	b00d883a 	mov	r6,r22
  808c98:	880f883a 	mov	r7,r17
  808c9c:	ddc00817 	ldw	r23,32(sp)
  808ca0:	dcc00d17 	ldw	r19,52(sp)
  808ca4:	9009883a 	mov	r4,r18
  808ca8:	080993c0 	call	80993c <__muldi3>
  808cac:	001b883a 	mov	r13,zero
  808cb0:	680f883a 	mov	r7,r13
  808cb4:	b009883a 	mov	r4,r22
  808cb8:	000b883a 	mov	r5,zero
  808cbc:	980d883a 	mov	r6,r19
  808cc0:	b82d883a 	mov	r22,r23
  808cc4:	002f883a 	mov	r23,zero
  808cc8:	db401615 	stw	r13,88(sp)
  808ccc:	d8801315 	stw	r2,76(sp)
  808cd0:	d8c01415 	stw	r3,80(sp)
  808cd4:	dcc01515 	stw	r19,84(sp)
  808cd8:	080993c0 	call	80993c <__muldi3>
  808cdc:	b00d883a 	mov	r6,r22
  808ce0:	000b883a 	mov	r5,zero
  808ce4:	9009883a 	mov	r4,r18
  808ce8:	b80f883a 	mov	r7,r23
  808cec:	1021883a 	mov	r16,r2
  808cf0:	1823883a 	mov	r17,r3
  808cf4:	080993c0 	call	80993c <__muldi3>
  808cf8:	8085883a 	add	r2,r16,r2
  808cfc:	140d803a 	cmpltu	r6,r2,r16
  808d00:	88c7883a 	add	r3,r17,r3
  808d04:	30cd883a 	add	r6,r6,r3
  808d08:	1029883a 	mov	r20,r2
  808d0c:	302b883a 	mov	r21,r6
  808d10:	da801317 	ldw	r10,76(sp)
  808d14:	dac01417 	ldw	r11,80(sp)
  808d18:	db001517 	ldw	r12,84(sp)
  808d1c:	db401617 	ldw	r13,88(sp)
  808d20:	3440612e 	bgeu	r6,r17,808ea8 <__muldf3+0x318>
  808d24:	0009883a 	mov	r4,zero
  808d28:	5105883a 	add	r2,r10,r4
  808d2c:	128d803a 	cmpltu	r6,r2,r10
  808d30:	5d07883a 	add	r3,r11,r20
  808d34:	30cd883a 	add	r6,r6,r3
  808d38:	0021883a 	mov	r16,zero
  808d3c:	04400044 	movi	r17,1
  808d40:	1025883a 	mov	r18,r2
  808d44:	3027883a 	mov	r19,r6
  808d48:	32c06236 	bltu	r6,r11,808ed4 <__muldf3+0x344>
  808d4c:	59807a26 	beq	r11,r6,808f38 <__muldf3+0x3a8>
  808d50:	680b883a 	mov	r5,r13
  808d54:	b80f883a 	mov	r7,r23
  808d58:	6009883a 	mov	r4,r12
  808d5c:	b00d883a 	mov	r6,r22
  808d60:	080993c0 	call	80993c <__muldi3>
  808d64:	1009883a 	mov	r4,r2
  808d68:	000f883a 	mov	r7,zero
  808d6c:	1545883a 	add	r2,r2,r21
  808d70:	1111803a 	cmpltu	r8,r2,r4
  808d74:	19c7883a 	add	r3,r3,r7
  808d78:	40c7883a 	add	r3,r8,r3
  808d7c:	88cb883a 	add	r5,r17,r3
  808d80:	d8c00617 	ldw	r3,24(sp)
  808d84:	8089883a 	add	r4,r16,r2
  808d88:	d8800b17 	ldw	r2,44(sp)
  808d8c:	18c00104 	addi	r3,r3,4
  808d90:	240d803a 	cmpltu	r6,r4,r16
  808d94:	10c7883a 	add	r3,r2,r3
  808d98:	2013883a 	mov	r9,r4
  808d9c:	d8800a17 	ldw	r2,40(sp)
  808da0:	d9000517 	ldw	r4,20(sp)
  808da4:	314d883a 	add	r6,r6,r5
  808da8:	3015883a 	mov	r10,r6
  808dac:	2088c03a 	cmpne	r4,r4,r2
  808db0:	00880034 	movhi	r2,8192
  808db4:	10bfffc4 	addi	r2,r2,-1
  808db8:	d9000f15 	stw	r4,60(sp)
  808dbc:	d8c01015 	stw	r3,64(sp)
  808dc0:	1180162e 	bgeu	r2,r6,808e1c <__muldf3+0x28c>
  808dc4:	1811883a 	mov	r8,r3
  808dc8:	101f883a 	mov	r15,r2
  808dcc:	980497fa 	slli	r2,r19,31
  808dd0:	9016d07a 	srli	r11,r18,1
  808dd4:	500697fa 	slli	r3,r10,31
  808dd8:	480cd07a 	srli	r6,r9,1
  808ddc:	500ed07a 	srli	r7,r10,1
  808de0:	12d6b03a 	or	r11,r2,r11
  808de4:	00800044 	movi	r2,1
  808de8:	198cb03a 	or	r6,r3,r6
  808dec:	4888703a 	and	r4,r9,r2
  808df0:	9818d07a 	srli	r12,r19,1
  808df4:	001b883a 	mov	r13,zero
  808df8:	03a00034 	movhi	r14,32768
  808dfc:	3013883a 	mov	r9,r6
  808e00:	3815883a 	mov	r10,r7
  808e04:	4091883a 	add	r8,r8,r2
  808e08:	20000226 	beq	r4,zero,808e14 <__muldf3+0x284>
  808e0c:	5b64b03a 	or	r18,r11,r13
  808e10:	63a6b03a 	or	r19,r12,r14
  808e14:	7abfed36 	bltu	r15,r10,808dcc <__muldf3+0x23c>
  808e18:	da001015 	stw	r8,64(sp)
  808e1c:	00840034 	movhi	r2,4096
  808e20:	10bfffc4 	addi	r2,r2,-1
  808e24:	12801436 	bltu	r2,r10,808e78 <__muldf3+0x2e8>
  808e28:	da001017 	ldw	r8,64(sp)
  808e2c:	101f883a 	mov	r15,r2
  808e30:	4a45883a 	add	r2,r9,r9
  808e34:	124d803a 	cmpltu	r6,r2,r9
  808e38:	5287883a 	add	r3,r10,r10
  808e3c:	9497883a 	add	r11,r18,r18
  808e40:	5c8f803a 	cmpltu	r7,r11,r18
  808e44:	9cd9883a 	add	r12,r19,r19
  808e48:	01000044 	movi	r4,1
  808e4c:	30cd883a 	add	r6,r6,r3
  808e50:	3b0f883a 	add	r7,r7,r12
  808e54:	423fffc4 	addi	r8,r8,-1
  808e58:	1013883a 	mov	r9,r2
  808e5c:	3015883a 	mov	r10,r6
  808e60:	111ab03a 	or	r13,r2,r4
  808e64:	98003016 	blt	r19,zero,808f28 <__muldf3+0x398>
  808e68:	5825883a 	mov	r18,r11
  808e6c:	3827883a 	mov	r19,r7
  808e70:	7abfef2e 	bgeu	r15,r10,808e30 <__muldf3+0x2a0>
  808e74:	da001015 	stw	r8,64(sp)
  808e78:	00803fc4 	movi	r2,255
  808e7c:	488e703a 	and	r7,r9,r2
  808e80:	00802004 	movi	r2,128
  808e84:	0007883a 	mov	r3,zero
  808e88:	0011883a 	mov	r8,zero
  808e8c:	38801826 	beq	r7,r2,808ef0 <__muldf3+0x360>
  808e90:	008000c4 	movi	r2,3
  808e94:	d9000e04 	addi	r4,sp,56
  808e98:	da801215 	stw	r10,72(sp)
  808e9c:	d8800e15 	stw	r2,56(sp)
  808ea0:	da401115 	stw	r9,68(sp)
  808ea4:	003f6a06 	br	808c50 <__muldf3+0xc0>
  808ea8:	89802126 	beq	r17,r6,808f30 <__muldf3+0x3a0>
  808eac:	0009883a 	mov	r4,zero
  808eb0:	5105883a 	add	r2,r10,r4
  808eb4:	128d803a 	cmpltu	r6,r2,r10
  808eb8:	5d07883a 	add	r3,r11,r20
  808ebc:	30cd883a 	add	r6,r6,r3
  808ec0:	0021883a 	mov	r16,zero
  808ec4:	0023883a 	mov	r17,zero
  808ec8:	1025883a 	mov	r18,r2
  808ecc:	3027883a 	mov	r19,r6
  808ed0:	32ff9e2e 	bgeu	r6,r11,808d4c <__muldf3+0x1bc>
  808ed4:	00800044 	movi	r2,1
  808ed8:	8089883a 	add	r4,r16,r2
  808edc:	240d803a 	cmpltu	r6,r4,r16
  808ee0:	344d883a 	add	r6,r6,r17
  808ee4:	2021883a 	mov	r16,r4
  808ee8:	3023883a 	mov	r17,r6
  808eec:	003f9806 	br	808d50 <__muldf3+0x1c0>
  808ef0:	403fe71e 	bne	r8,zero,808e90 <__muldf3+0x300>
  808ef4:	01004004 	movi	r4,256
  808ef8:	4904703a 	and	r2,r9,r4
  808efc:	10c4b03a 	or	r2,r2,r3
  808f00:	103fe31e 	bne	r2,zero,808e90 <__muldf3+0x300>
  808f04:	94c4b03a 	or	r2,r18,r19
  808f08:	103fe126 	beq	r2,zero,808e90 <__muldf3+0x300>
  808f0c:	49c5883a 	add	r2,r9,r7
  808f10:	1251803a 	cmpltu	r8,r2,r9
  808f14:	4291883a 	add	r8,r8,r10
  808f18:	013fc004 	movi	r4,-256
  808f1c:	1112703a 	and	r9,r2,r4
  808f20:	4015883a 	mov	r10,r8
  808f24:	003fda06 	br	808e90 <__muldf3+0x300>
  808f28:	6813883a 	mov	r9,r13
  808f2c:	003fce06 	br	808e68 <__muldf3+0x2d8>
  808f30:	143f7c36 	bltu	r2,r16,808d24 <__muldf3+0x194>
  808f34:	003fdd06 	br	808eac <__muldf3+0x31c>
  808f38:	12bf852e 	bgeu	r2,r10,808d50 <__muldf3+0x1c0>
  808f3c:	003fe506 	br	808ed4 <__muldf3+0x344>
  808f40:	00800084 	movi	r2,2
  808f44:	20bf351e 	bne	r4,r2,808c1c <__muldf3+0x8c>
  808f48:	01002074 	movhi	r4,129
  808f4c:	21336c04 	addi	r4,r4,-12880
  808f50:	003f3f06 	br	808c50 <__muldf3+0xc0>

00808f54 <__divdf3>:
  808f54:	deffed04 	addi	sp,sp,-76
  808f58:	dcc01115 	stw	r19,68(sp)
  808f5c:	dcc00404 	addi	r19,sp,16
  808f60:	2011883a 	mov	r8,r4
  808f64:	2813883a 	mov	r9,r5
  808f68:	dc000e15 	stw	r16,56(sp)
  808f6c:	d809883a 	mov	r4,sp
  808f70:	980b883a 	mov	r5,r19
  808f74:	dc000904 	addi	r16,sp,36
  808f78:	dfc01215 	stw	ra,72(sp)
  808f7c:	da400115 	stw	r9,4(sp)
  808f80:	d9c00315 	stw	r7,12(sp)
  808f84:	da000015 	stw	r8,0(sp)
  808f88:	d9800215 	stw	r6,8(sp)
  808f8c:	dc801015 	stw	r18,64(sp)
  808f90:	dc400f15 	stw	r17,60(sp)
  808f94:	0809df40 	call	809df4 <__unpack_d>
  808f98:	d9000204 	addi	r4,sp,8
  808f9c:	800b883a 	mov	r5,r16
  808fa0:	0809df40 	call	809df4 <__unpack_d>
  808fa4:	d9000417 	ldw	r4,16(sp)
  808fa8:	00800044 	movi	r2,1
  808fac:	11000b2e 	bgeu	r2,r4,808fdc <__divdf3+0x88>
  808fb0:	d9400917 	ldw	r5,36(sp)
  808fb4:	1140762e 	bgeu	r2,r5,809190 <__divdf3+0x23c>
  808fb8:	d8800517 	ldw	r2,20(sp)
  808fbc:	d8c00a17 	ldw	r3,40(sp)
  808fc0:	01800104 	movi	r6,4
  808fc4:	10c4f03a 	xor	r2,r2,r3
  808fc8:	d8800515 	stw	r2,20(sp)
  808fcc:	21800226 	beq	r4,r6,808fd8 <__divdf3+0x84>
  808fd0:	00800084 	movi	r2,2
  808fd4:	2080141e 	bne	r4,r2,809028 <__divdf3+0xd4>
  808fd8:	29000926 	beq	r5,r4,809000 <__divdf3+0xac>
  808fdc:	9809883a 	mov	r4,r19
  808fe0:	0809ae00 	call	809ae0 <__pack_d>
  808fe4:	dfc01217 	ldw	ra,72(sp)
  808fe8:	dcc01117 	ldw	r19,68(sp)
  808fec:	dc801017 	ldw	r18,64(sp)
  808ff0:	dc400f17 	ldw	r17,60(sp)
  808ff4:	dc000e17 	ldw	r16,56(sp)
  808ff8:	dec01304 	addi	sp,sp,76
  808ffc:	f800283a 	ret
  809000:	01002074 	movhi	r4,129
  809004:	21336c04 	addi	r4,r4,-12880
  809008:	0809ae00 	call	809ae0 <__pack_d>
  80900c:	dfc01217 	ldw	ra,72(sp)
  809010:	dcc01117 	ldw	r19,68(sp)
  809014:	dc801017 	ldw	r18,64(sp)
  809018:	dc400f17 	ldw	r17,60(sp)
  80901c:	dc000e17 	ldw	r16,56(sp)
  809020:	dec01304 	addi	sp,sp,76
  809024:	f800283a 	ret
  809028:	29805b26 	beq	r5,r6,809198 <__divdf3+0x244>
  80902c:	28802d26 	beq	r5,r2,8090e4 <__divdf3+0x190>
  809030:	d8c00617 	ldw	r3,24(sp)
  809034:	d8800b17 	ldw	r2,44(sp)
  809038:	d9c00817 	ldw	r7,32(sp)
  80903c:	dc400d17 	ldw	r17,52(sp)
  809040:	188bc83a 	sub	r5,r3,r2
  809044:	d9800717 	ldw	r6,28(sp)
  809048:	dc000c17 	ldw	r16,48(sp)
  80904c:	d9400615 	stw	r5,24(sp)
  809050:	3c403836 	bltu	r7,r17,809134 <__divdf3+0x1e0>
  809054:	89c03626 	beq	r17,r7,809130 <__divdf3+0x1dc>
  809058:	0015883a 	mov	r10,zero
  80905c:	001d883a 	mov	r14,zero
  809060:	02c40034 	movhi	r11,4096
  809064:	001f883a 	mov	r15,zero
  809068:	003f883a 	mov	ra,zero
  80906c:	04800f44 	movi	r18,61
  809070:	00000f06 	br	8090b0 <__divdf3+0x15c>
  809074:	601d883a 	mov	r14,r12
  809078:	681f883a 	mov	r15,r13
  80907c:	400d883a 	mov	r6,r8
  809080:	100f883a 	mov	r7,r2
  809084:	3191883a 	add	r8,r6,r6
  809088:	5808d07a 	srli	r4,r11,1
  80908c:	4185803a 	cmpltu	r2,r8,r6
  809090:	39d3883a 	add	r9,r7,r7
  809094:	28c6b03a 	or	r3,r5,r3
  809098:	1245883a 	add	r2,r2,r9
  80909c:	1815883a 	mov	r10,r3
  8090a0:	2017883a 	mov	r11,r4
  8090a4:	400d883a 	mov	r6,r8
  8090a8:	100f883a 	mov	r7,r2
  8090ac:	fc801726 	beq	ra,r18,80910c <__divdf3+0x1b8>
  8090b0:	580a97fa 	slli	r5,r11,31
  8090b4:	5006d07a 	srli	r3,r10,1
  8090b8:	ffc00044 	addi	ra,ra,1
  8090bc:	3c7ff136 	bltu	r7,r17,809084 <__divdf3+0x130>
  8090c0:	3411c83a 	sub	r8,r6,r16
  8090c4:	3205803a 	cmpltu	r2,r6,r8
  8090c8:	3c53c83a 	sub	r9,r7,r17
  8090cc:	7298b03a 	or	r12,r14,r10
  8090d0:	7adab03a 	or	r13,r15,r11
  8090d4:	4885c83a 	sub	r2,r9,r2
  8090d8:	89ffe61e 	bne	r17,r7,809074 <__divdf3+0x120>
  8090dc:	343fe936 	bltu	r6,r16,809084 <__divdf3+0x130>
  8090e0:	003fe406 	br	809074 <__divdf3+0x120>
  8090e4:	9809883a 	mov	r4,r19
  8090e8:	d9800415 	stw	r6,16(sp)
  8090ec:	0809ae00 	call	809ae0 <__pack_d>
  8090f0:	dfc01217 	ldw	ra,72(sp)
  8090f4:	dcc01117 	ldw	r19,68(sp)
  8090f8:	dc801017 	ldw	r18,64(sp)
  8090fc:	dc400f17 	ldw	r17,60(sp)
  809100:	dc000e17 	ldw	r16,56(sp)
  809104:	dec01304 	addi	sp,sp,76
  809108:	f800283a 	ret
  80910c:	00803fc4 	movi	r2,255
  809110:	7090703a 	and	r8,r14,r2
  809114:	00802004 	movi	r2,128
  809118:	0007883a 	mov	r3,zero
  80911c:	0013883a 	mov	r9,zero
  809120:	40800d26 	beq	r8,r2,809158 <__divdf3+0x204>
  809124:	dbc00815 	stw	r15,32(sp)
  809128:	db800715 	stw	r14,28(sp)
  80912c:	003fab06 	br	808fdc <__divdf3+0x88>
  809130:	343fc92e 	bgeu	r6,r16,809058 <__divdf3+0x104>
  809134:	3185883a 	add	r2,r6,r6
  809138:	1189803a 	cmpltu	r4,r2,r6
  80913c:	39c7883a 	add	r3,r7,r7
  809140:	20c9883a 	add	r4,r4,r3
  809144:	297fffc4 	addi	r5,r5,-1
  809148:	100d883a 	mov	r6,r2
  80914c:	200f883a 	mov	r7,r4
  809150:	d9400615 	stw	r5,24(sp)
  809154:	003fc006 	br	809058 <__divdf3+0x104>
  809158:	483ff21e 	bne	r9,zero,809124 <__divdf3+0x1d0>
  80915c:	01004004 	movi	r4,256
  809160:	7104703a 	and	r2,r14,r4
  809164:	10c4b03a 	or	r2,r2,r3
  809168:	103fee1e 	bne	r2,zero,809124 <__divdf3+0x1d0>
  80916c:	31c4b03a 	or	r2,r6,r7
  809170:	103fec26 	beq	r2,zero,809124 <__divdf3+0x1d0>
  809174:	7205883a 	add	r2,r14,r8
  809178:	1391803a 	cmpltu	r8,r2,r14
  80917c:	43d1883a 	add	r8,r8,r15
  809180:	013fc004 	movi	r4,-256
  809184:	111c703a 	and	r14,r2,r4
  809188:	401f883a 	mov	r15,r8
  80918c:	003fe506 	br	809124 <__divdf3+0x1d0>
  809190:	8009883a 	mov	r4,r16
  809194:	003f9206 	br	808fe0 <__divdf3+0x8c>
  809198:	9809883a 	mov	r4,r19
  80919c:	d8000715 	stw	zero,28(sp)
  8091a0:	d8000815 	stw	zero,32(sp)
  8091a4:	d8000615 	stw	zero,24(sp)
  8091a8:	003f8d06 	br	808fe0 <__divdf3+0x8c>

008091ac <__eqdf2>:
  8091ac:	deffef04 	addi	sp,sp,-68
  8091b0:	dc400f15 	stw	r17,60(sp)
  8091b4:	dc400404 	addi	r17,sp,16
  8091b8:	2005883a 	mov	r2,r4
  8091bc:	2807883a 	mov	r3,r5
  8091c0:	dc000e15 	stw	r16,56(sp)
  8091c4:	d809883a 	mov	r4,sp
  8091c8:	880b883a 	mov	r5,r17
  8091cc:	dc000904 	addi	r16,sp,36
  8091d0:	d8c00115 	stw	r3,4(sp)
  8091d4:	d8800015 	stw	r2,0(sp)
  8091d8:	d9800215 	stw	r6,8(sp)
  8091dc:	dfc01015 	stw	ra,64(sp)
  8091e0:	d9c00315 	stw	r7,12(sp)
  8091e4:	0809df40 	call	809df4 <__unpack_d>
  8091e8:	d9000204 	addi	r4,sp,8
  8091ec:	800b883a 	mov	r5,r16
  8091f0:	0809df40 	call	809df4 <__unpack_d>
  8091f4:	d8800417 	ldw	r2,16(sp)
  8091f8:	00c00044 	movi	r3,1
  8091fc:	180d883a 	mov	r6,r3
  809200:	1880062e 	bgeu	r3,r2,80921c <__eqdf2+0x70>
  809204:	d8800917 	ldw	r2,36(sp)
  809208:	8809883a 	mov	r4,r17
  80920c:	800b883a 	mov	r5,r16
  809210:	1880022e 	bgeu	r3,r2,80921c <__eqdf2+0x70>
  809214:	0809f2c0 	call	809f2c <__fpcmp_parts_d>
  809218:	100d883a 	mov	r6,r2
  80921c:	3005883a 	mov	r2,r6
  809220:	dfc01017 	ldw	ra,64(sp)
  809224:	dc400f17 	ldw	r17,60(sp)
  809228:	dc000e17 	ldw	r16,56(sp)
  80922c:	dec01104 	addi	sp,sp,68
  809230:	f800283a 	ret

00809234 <__nedf2>:
  809234:	deffef04 	addi	sp,sp,-68
  809238:	dc400f15 	stw	r17,60(sp)
  80923c:	dc400404 	addi	r17,sp,16
  809240:	2005883a 	mov	r2,r4
  809244:	2807883a 	mov	r3,r5
  809248:	dc000e15 	stw	r16,56(sp)
  80924c:	d809883a 	mov	r4,sp
  809250:	880b883a 	mov	r5,r17
  809254:	dc000904 	addi	r16,sp,36
  809258:	d8c00115 	stw	r3,4(sp)
  80925c:	d8800015 	stw	r2,0(sp)
  809260:	d9800215 	stw	r6,8(sp)
  809264:	dfc01015 	stw	ra,64(sp)
  809268:	d9c00315 	stw	r7,12(sp)
  80926c:	0809df40 	call	809df4 <__unpack_d>
  809270:	d9000204 	addi	r4,sp,8
  809274:	800b883a 	mov	r5,r16
  809278:	0809df40 	call	809df4 <__unpack_d>
  80927c:	d8800417 	ldw	r2,16(sp)
  809280:	00c00044 	movi	r3,1
  809284:	180d883a 	mov	r6,r3
  809288:	1880062e 	bgeu	r3,r2,8092a4 <__nedf2+0x70>
  80928c:	d8800917 	ldw	r2,36(sp)
  809290:	8809883a 	mov	r4,r17
  809294:	800b883a 	mov	r5,r16
  809298:	1880022e 	bgeu	r3,r2,8092a4 <__nedf2+0x70>
  80929c:	0809f2c0 	call	809f2c <__fpcmp_parts_d>
  8092a0:	100d883a 	mov	r6,r2
  8092a4:	3005883a 	mov	r2,r6
  8092a8:	dfc01017 	ldw	ra,64(sp)
  8092ac:	dc400f17 	ldw	r17,60(sp)
  8092b0:	dc000e17 	ldw	r16,56(sp)
  8092b4:	dec01104 	addi	sp,sp,68
  8092b8:	f800283a 	ret

008092bc <__gtdf2>:
  8092bc:	deffef04 	addi	sp,sp,-68
  8092c0:	dc400f15 	stw	r17,60(sp)
  8092c4:	dc400404 	addi	r17,sp,16
  8092c8:	2005883a 	mov	r2,r4
  8092cc:	2807883a 	mov	r3,r5
  8092d0:	dc000e15 	stw	r16,56(sp)
  8092d4:	d809883a 	mov	r4,sp
  8092d8:	880b883a 	mov	r5,r17
  8092dc:	dc000904 	addi	r16,sp,36
  8092e0:	d8c00115 	stw	r3,4(sp)
  8092e4:	d8800015 	stw	r2,0(sp)
  8092e8:	d9800215 	stw	r6,8(sp)
  8092ec:	dfc01015 	stw	ra,64(sp)
  8092f0:	d9c00315 	stw	r7,12(sp)
  8092f4:	0809df40 	call	809df4 <__unpack_d>
  8092f8:	d9000204 	addi	r4,sp,8
  8092fc:	800b883a 	mov	r5,r16
  809300:	0809df40 	call	809df4 <__unpack_d>
  809304:	d8800417 	ldw	r2,16(sp)
  809308:	00c00044 	movi	r3,1
  80930c:	01bfffc4 	movi	r6,-1
  809310:	1880062e 	bgeu	r3,r2,80932c <__gtdf2+0x70>
  809314:	d8800917 	ldw	r2,36(sp)
  809318:	8809883a 	mov	r4,r17
  80931c:	800b883a 	mov	r5,r16
  809320:	1880022e 	bgeu	r3,r2,80932c <__gtdf2+0x70>
  809324:	0809f2c0 	call	809f2c <__fpcmp_parts_d>
  809328:	100d883a 	mov	r6,r2
  80932c:	3005883a 	mov	r2,r6
  809330:	dfc01017 	ldw	ra,64(sp)
  809334:	dc400f17 	ldw	r17,60(sp)
  809338:	dc000e17 	ldw	r16,56(sp)
  80933c:	dec01104 	addi	sp,sp,68
  809340:	f800283a 	ret

00809344 <__gedf2>:
  809344:	deffef04 	addi	sp,sp,-68
  809348:	dc400f15 	stw	r17,60(sp)
  80934c:	dc400404 	addi	r17,sp,16
  809350:	2005883a 	mov	r2,r4
  809354:	2807883a 	mov	r3,r5
  809358:	dc000e15 	stw	r16,56(sp)
  80935c:	d809883a 	mov	r4,sp
  809360:	880b883a 	mov	r5,r17
  809364:	dc000904 	addi	r16,sp,36
  809368:	d8c00115 	stw	r3,4(sp)
  80936c:	d8800015 	stw	r2,0(sp)
  809370:	d9800215 	stw	r6,8(sp)
  809374:	dfc01015 	stw	ra,64(sp)
  809378:	d9c00315 	stw	r7,12(sp)
  80937c:	0809df40 	call	809df4 <__unpack_d>
  809380:	d9000204 	addi	r4,sp,8
  809384:	800b883a 	mov	r5,r16
  809388:	0809df40 	call	809df4 <__unpack_d>
  80938c:	d8800417 	ldw	r2,16(sp)
  809390:	00c00044 	movi	r3,1
  809394:	01bfffc4 	movi	r6,-1
  809398:	1880062e 	bgeu	r3,r2,8093b4 <__gedf2+0x70>
  80939c:	d8800917 	ldw	r2,36(sp)
  8093a0:	8809883a 	mov	r4,r17
  8093a4:	800b883a 	mov	r5,r16
  8093a8:	1880022e 	bgeu	r3,r2,8093b4 <__gedf2+0x70>
  8093ac:	0809f2c0 	call	809f2c <__fpcmp_parts_d>
  8093b0:	100d883a 	mov	r6,r2
  8093b4:	3005883a 	mov	r2,r6
  8093b8:	dfc01017 	ldw	ra,64(sp)
  8093bc:	dc400f17 	ldw	r17,60(sp)
  8093c0:	dc000e17 	ldw	r16,56(sp)
  8093c4:	dec01104 	addi	sp,sp,68
  8093c8:	f800283a 	ret

008093cc <__ltdf2>:
  8093cc:	deffef04 	addi	sp,sp,-68
  8093d0:	dc400f15 	stw	r17,60(sp)
  8093d4:	dc400404 	addi	r17,sp,16
  8093d8:	2005883a 	mov	r2,r4
  8093dc:	2807883a 	mov	r3,r5
  8093e0:	dc000e15 	stw	r16,56(sp)
  8093e4:	d809883a 	mov	r4,sp
  8093e8:	880b883a 	mov	r5,r17
  8093ec:	dc000904 	addi	r16,sp,36
  8093f0:	d8c00115 	stw	r3,4(sp)
  8093f4:	d8800015 	stw	r2,0(sp)
  8093f8:	d9800215 	stw	r6,8(sp)
  8093fc:	dfc01015 	stw	ra,64(sp)
  809400:	d9c00315 	stw	r7,12(sp)
  809404:	0809df40 	call	809df4 <__unpack_d>
  809408:	d9000204 	addi	r4,sp,8
  80940c:	800b883a 	mov	r5,r16
  809410:	0809df40 	call	809df4 <__unpack_d>
  809414:	d8800417 	ldw	r2,16(sp)
  809418:	00c00044 	movi	r3,1
  80941c:	180d883a 	mov	r6,r3
  809420:	1880062e 	bgeu	r3,r2,80943c <__ltdf2+0x70>
  809424:	d8800917 	ldw	r2,36(sp)
  809428:	8809883a 	mov	r4,r17
  80942c:	800b883a 	mov	r5,r16
  809430:	1880022e 	bgeu	r3,r2,80943c <__ltdf2+0x70>
  809434:	0809f2c0 	call	809f2c <__fpcmp_parts_d>
  809438:	100d883a 	mov	r6,r2
  80943c:	3005883a 	mov	r2,r6
  809440:	dfc01017 	ldw	ra,64(sp)
  809444:	dc400f17 	ldw	r17,60(sp)
  809448:	dc000e17 	ldw	r16,56(sp)
  80944c:	dec01104 	addi	sp,sp,68
  809450:	f800283a 	ret

00809454 <__floatsidf>:
  809454:	2006d7fa 	srli	r3,r4,31
  809458:	defff604 	addi	sp,sp,-40
  80945c:	008000c4 	movi	r2,3
  809460:	dfc00915 	stw	ra,36(sp)
  809464:	dcc00815 	stw	r19,32(sp)
  809468:	dc800715 	stw	r18,28(sp)
  80946c:	dc400615 	stw	r17,24(sp)
  809470:	dc000515 	stw	r16,20(sp)
  809474:	d8800015 	stw	r2,0(sp)
  809478:	d8c00115 	stw	r3,4(sp)
  80947c:	20000f1e 	bne	r4,zero,8094bc <__floatsidf+0x68>
  809480:	00800084 	movi	r2,2
  809484:	d8800015 	stw	r2,0(sp)
  809488:	d809883a 	mov	r4,sp
  80948c:	0809ae00 	call	809ae0 <__pack_d>
  809490:	1009883a 	mov	r4,r2
  809494:	180b883a 	mov	r5,r3
  809498:	2005883a 	mov	r2,r4
  80949c:	2807883a 	mov	r3,r5
  8094a0:	dfc00917 	ldw	ra,36(sp)
  8094a4:	dcc00817 	ldw	r19,32(sp)
  8094a8:	dc800717 	ldw	r18,28(sp)
  8094ac:	dc400617 	ldw	r17,24(sp)
  8094b0:	dc000517 	ldw	r16,20(sp)
  8094b4:	dec00a04 	addi	sp,sp,40
  8094b8:	f800283a 	ret
  8094bc:	00800f04 	movi	r2,60
  8094c0:	1807003a 	cmpeq	r3,r3,zero
  8094c4:	d8800215 	stw	r2,8(sp)
  8094c8:	18001126 	beq	r3,zero,809510 <__floatsidf+0xbc>
  8094cc:	0027883a 	mov	r19,zero
  8094d0:	2025883a 	mov	r18,r4
  8094d4:	d9000315 	stw	r4,12(sp)
  8094d8:	dcc00415 	stw	r19,16(sp)
  8094dc:	0809a600 	call	809a60 <__clzsi2>
  8094e0:	11000744 	addi	r4,r2,29
  8094e4:	013fe80e 	bge	zero,r4,809488 <__floatsidf+0x34>
  8094e8:	10bfff44 	addi	r2,r2,-3
  8094ec:	10000c16 	blt	r2,zero,809520 <__floatsidf+0xcc>
  8094f0:	90a2983a 	sll	r17,r18,r2
  8094f4:	0021883a 	mov	r16,zero
  8094f8:	d8800217 	ldw	r2,8(sp)
  8094fc:	dc400415 	stw	r17,16(sp)
  809500:	dc000315 	stw	r16,12(sp)
  809504:	1105c83a 	sub	r2,r2,r4
  809508:	d8800215 	stw	r2,8(sp)
  80950c:	003fde06 	br	809488 <__floatsidf+0x34>
  809510:	00a00034 	movhi	r2,32768
  809514:	20800a26 	beq	r4,r2,809540 <__floatsidf+0xec>
  809518:	0109c83a 	sub	r4,zero,r4
  80951c:	003feb06 	br	8094cc <__floatsidf+0x78>
  809520:	9006d07a 	srli	r3,r18,1
  809524:	008007c4 	movi	r2,31
  809528:	1105c83a 	sub	r2,r2,r4
  80952c:	1886d83a 	srl	r3,r3,r2
  809530:	9922983a 	sll	r17,r19,r4
  809534:	9120983a 	sll	r16,r18,r4
  809538:	1c62b03a 	or	r17,r3,r17
  80953c:	003fee06 	br	8094f8 <__floatsidf+0xa4>
  809540:	0009883a 	mov	r4,zero
  809544:	01707834 	movhi	r5,49632
  809548:	003fd306 	br	809498 <__floatsidf+0x44>

0080954c <__fixdfsi>:
  80954c:	defff804 	addi	sp,sp,-32
  809550:	2005883a 	mov	r2,r4
  809554:	2807883a 	mov	r3,r5
  809558:	d809883a 	mov	r4,sp
  80955c:	d9400204 	addi	r5,sp,8
  809560:	d8c00115 	stw	r3,4(sp)
  809564:	d8800015 	stw	r2,0(sp)
  809568:	dfc00715 	stw	ra,28(sp)
  80956c:	0809df40 	call	809df4 <__unpack_d>
  809570:	d8c00217 	ldw	r3,8(sp)
  809574:	00800084 	movi	r2,2
  809578:	1880051e 	bne	r3,r2,809590 <__fixdfsi+0x44>
  80957c:	0007883a 	mov	r3,zero
  809580:	1805883a 	mov	r2,r3
  809584:	dfc00717 	ldw	ra,28(sp)
  809588:	dec00804 	addi	sp,sp,32
  80958c:	f800283a 	ret
  809590:	00800044 	movi	r2,1
  809594:	10fff92e 	bgeu	r2,r3,80957c <__fixdfsi+0x30>
  809598:	00800104 	movi	r2,4
  80959c:	18800426 	beq	r3,r2,8095b0 <__fixdfsi+0x64>
  8095a0:	d8c00417 	ldw	r3,16(sp)
  8095a4:	183ff516 	blt	r3,zero,80957c <__fixdfsi+0x30>
  8095a8:	00800784 	movi	r2,30
  8095ac:	10c0080e 	bge	r2,r3,8095d0 <__fixdfsi+0x84>
  8095b0:	d8800317 	ldw	r2,12(sp)
  8095b4:	1000121e 	bne	r2,zero,809600 <__fixdfsi+0xb4>
  8095b8:	00e00034 	movhi	r3,32768
  8095bc:	18ffffc4 	addi	r3,r3,-1
  8095c0:	1805883a 	mov	r2,r3
  8095c4:	dfc00717 	ldw	ra,28(sp)
  8095c8:	dec00804 	addi	sp,sp,32
  8095cc:	f800283a 	ret
  8095d0:	00800f04 	movi	r2,60
  8095d4:	10d1c83a 	sub	r8,r2,r3
  8095d8:	40bff804 	addi	r2,r8,-32
  8095dc:	d9800517 	ldw	r6,20(sp)
  8095e0:	d9c00617 	ldw	r7,24(sp)
  8095e4:	10000816 	blt	r2,zero,809608 <__fixdfsi+0xbc>
  8095e8:	3888d83a 	srl	r4,r7,r2
  8095ec:	d8800317 	ldw	r2,12(sp)
  8095f0:	2007883a 	mov	r3,r4
  8095f4:	103fe226 	beq	r2,zero,809580 <__fixdfsi+0x34>
  8095f8:	0107c83a 	sub	r3,zero,r4
  8095fc:	003fe006 	br	809580 <__fixdfsi+0x34>
  809600:	00e00034 	movhi	r3,32768
  809604:	003fde06 	br	809580 <__fixdfsi+0x34>
  809608:	39c7883a 	add	r3,r7,r7
  80960c:	008007c4 	movi	r2,31
  809610:	1205c83a 	sub	r2,r2,r8
  809614:	1886983a 	sll	r3,r3,r2
  809618:	3208d83a 	srl	r4,r6,r8
  80961c:	1908b03a 	or	r4,r3,r4
  809620:	003ff206 	br	8095ec <__fixdfsi+0xa0>

00809624 <__floatunsidf>:
  809624:	defff204 	addi	sp,sp,-56
  809628:	dfc00d15 	stw	ra,52(sp)
  80962c:	ddc00c15 	stw	r23,48(sp)
  809630:	dd800b15 	stw	r22,44(sp)
  809634:	dd400a15 	stw	r21,40(sp)
  809638:	dd000915 	stw	r20,36(sp)
  80963c:	dcc00815 	stw	r19,32(sp)
  809640:	dc800715 	stw	r18,28(sp)
  809644:	dc400615 	stw	r17,24(sp)
  809648:	dc000515 	stw	r16,20(sp)
  80964c:	d8000115 	stw	zero,4(sp)
  809650:	20000f1e 	bne	r4,zero,809690 <__floatunsidf+0x6c>
  809654:	00800084 	movi	r2,2
  809658:	d8800015 	stw	r2,0(sp)
  80965c:	d809883a 	mov	r4,sp
  809660:	0809ae00 	call	809ae0 <__pack_d>
  809664:	dfc00d17 	ldw	ra,52(sp)
  809668:	ddc00c17 	ldw	r23,48(sp)
  80966c:	dd800b17 	ldw	r22,44(sp)
  809670:	dd400a17 	ldw	r21,40(sp)
  809674:	dd000917 	ldw	r20,36(sp)
  809678:	dcc00817 	ldw	r19,32(sp)
  80967c:	dc800717 	ldw	r18,28(sp)
  809680:	dc400617 	ldw	r17,24(sp)
  809684:	dc000517 	ldw	r16,20(sp)
  809688:	dec00e04 	addi	sp,sp,56
  80968c:	f800283a 	ret
  809690:	008000c4 	movi	r2,3
  809694:	00c00f04 	movi	r3,60
  809698:	002f883a 	mov	r23,zero
  80969c:	202d883a 	mov	r22,r4
  8096a0:	d8800015 	stw	r2,0(sp)
  8096a4:	d8c00215 	stw	r3,8(sp)
  8096a8:	d9000315 	stw	r4,12(sp)
  8096ac:	ddc00415 	stw	r23,16(sp)
  8096b0:	0809a600 	call	809a60 <__clzsi2>
  8096b4:	12400744 	addi	r9,r2,29
  8096b8:	48000b16 	blt	r9,zero,8096e8 <__floatunsidf+0xc4>
  8096bc:	483fe726 	beq	r9,zero,80965c <__floatunsidf+0x38>
  8096c0:	10bfff44 	addi	r2,r2,-3
  8096c4:	10002e16 	blt	r2,zero,809780 <__floatunsidf+0x15c>
  8096c8:	b0a2983a 	sll	r17,r22,r2
  8096cc:	0021883a 	mov	r16,zero
  8096d0:	d8800217 	ldw	r2,8(sp)
  8096d4:	dc400415 	stw	r17,16(sp)
  8096d8:	dc000315 	stw	r16,12(sp)
  8096dc:	1245c83a 	sub	r2,r2,r9
  8096e0:	d8800215 	stw	r2,8(sp)
  8096e4:	003fdd06 	br	80965c <__floatunsidf+0x38>
  8096e8:	0255c83a 	sub	r10,zero,r9
  8096ec:	51bff804 	addi	r6,r10,-32
  8096f0:	30001b16 	blt	r6,zero,809760 <__floatunsidf+0x13c>
  8096f4:	b9a8d83a 	srl	r20,r23,r6
  8096f8:	002b883a 	mov	r21,zero
  8096fc:	000f883a 	mov	r7,zero
  809700:	01000044 	movi	r4,1
  809704:	0011883a 	mov	r8,zero
  809708:	30002516 	blt	r6,zero,8097a0 <__floatunsidf+0x17c>
  80970c:	21a6983a 	sll	r19,r4,r6
  809710:	0025883a 	mov	r18,zero
  809714:	00bfffc4 	movi	r2,-1
  809718:	9089883a 	add	r4,r18,r2
  80971c:	988b883a 	add	r5,r19,r2
  809720:	248d803a 	cmpltu	r6,r4,r18
  809724:	314b883a 	add	r5,r6,r5
  809728:	b104703a 	and	r2,r22,r4
  80972c:	b946703a 	and	r3,r23,r5
  809730:	10c4b03a 	or	r2,r2,r3
  809734:	10000226 	beq	r2,zero,809740 <__floatunsidf+0x11c>
  809738:	01c00044 	movi	r7,1
  80973c:	0011883a 	mov	r8,zero
  809740:	d9000217 	ldw	r4,8(sp)
  809744:	a1c4b03a 	or	r2,r20,r7
  809748:	aa06b03a 	or	r3,r21,r8
  80974c:	2249c83a 	sub	r4,r4,r9
  809750:	d8c00415 	stw	r3,16(sp)
  809754:	d9000215 	stw	r4,8(sp)
  809758:	d8800315 	stw	r2,12(sp)
  80975c:	003fbf06 	br	80965c <__floatunsidf+0x38>
  809760:	bdc7883a 	add	r3,r23,r23
  809764:	008007c4 	movi	r2,31
  809768:	1285c83a 	sub	r2,r2,r10
  80976c:	1886983a 	sll	r3,r3,r2
  809770:	b2a8d83a 	srl	r20,r22,r10
  809774:	baaad83a 	srl	r21,r23,r10
  809778:	1d28b03a 	or	r20,r3,r20
  80977c:	003fdf06 	br	8096fc <__floatunsidf+0xd8>
  809780:	b006d07a 	srli	r3,r22,1
  809784:	008007c4 	movi	r2,31
  809788:	1245c83a 	sub	r2,r2,r9
  80978c:	1886d83a 	srl	r3,r3,r2
  809790:	ba62983a 	sll	r17,r23,r9
  809794:	b260983a 	sll	r16,r22,r9
  809798:	1c62b03a 	or	r17,r3,r17
  80979c:	003fcc06 	br	8096d0 <__floatunsidf+0xac>
  8097a0:	2006d07a 	srli	r3,r4,1
  8097a4:	008007c4 	movi	r2,31
  8097a8:	1285c83a 	sub	r2,r2,r10
  8097ac:	18a6d83a 	srl	r19,r3,r2
  8097b0:	22a4983a 	sll	r18,r4,r10
  8097b4:	003fd706 	br	809714 <__floatunsidf+0xf0>

008097b8 <udivmodsi4>:
  8097b8:	29001b2e 	bgeu	r5,r4,809828 <udivmodsi4+0x70>
  8097bc:	28001a16 	blt	r5,zero,809828 <udivmodsi4+0x70>
  8097c0:	00800044 	movi	r2,1
  8097c4:	0007883a 	mov	r3,zero
  8097c8:	01c007c4 	movi	r7,31
  8097cc:	00000306 	br	8097dc <udivmodsi4+0x24>
  8097d0:	19c01326 	beq	r3,r7,809820 <udivmodsi4+0x68>
  8097d4:	18c00044 	addi	r3,r3,1
  8097d8:	28000416 	blt	r5,zero,8097ec <udivmodsi4+0x34>
  8097dc:	294b883a 	add	r5,r5,r5
  8097e0:	1085883a 	add	r2,r2,r2
  8097e4:	293ffa36 	bltu	r5,r4,8097d0 <udivmodsi4+0x18>
  8097e8:	10000d26 	beq	r2,zero,809820 <udivmodsi4+0x68>
  8097ec:	0007883a 	mov	r3,zero
  8097f0:	21400236 	bltu	r4,r5,8097fc <udivmodsi4+0x44>
  8097f4:	2149c83a 	sub	r4,r4,r5
  8097f8:	1886b03a 	or	r3,r3,r2
  8097fc:	1004d07a 	srli	r2,r2,1
  809800:	280ad07a 	srli	r5,r5,1
  809804:	103ffa1e 	bne	r2,zero,8097f0 <udivmodsi4+0x38>
  809808:	30000226 	beq	r6,zero,809814 <udivmodsi4+0x5c>
  80980c:	2005883a 	mov	r2,r4
  809810:	f800283a 	ret
  809814:	1809883a 	mov	r4,r3
  809818:	2005883a 	mov	r2,r4
  80981c:	f800283a 	ret
  809820:	0007883a 	mov	r3,zero
  809824:	003ff806 	br	809808 <udivmodsi4+0x50>
  809828:	00800044 	movi	r2,1
  80982c:	0007883a 	mov	r3,zero
  809830:	003fef06 	br	8097f0 <udivmodsi4+0x38>

00809834 <__divsi3>:
  809834:	defffe04 	addi	sp,sp,-8
  809838:	dc000015 	stw	r16,0(sp)
  80983c:	dfc00115 	stw	ra,4(sp)
  809840:	0021883a 	mov	r16,zero
  809844:	20000c16 	blt	r4,zero,809878 <__divsi3+0x44>
  809848:	000d883a 	mov	r6,zero
  80984c:	28000e16 	blt	r5,zero,809888 <__divsi3+0x54>
  809850:	08097b80 	call	8097b8 <udivmodsi4>
  809854:	1007883a 	mov	r3,r2
  809858:	8005003a 	cmpeq	r2,r16,zero
  80985c:	1000011e 	bne	r2,zero,809864 <__divsi3+0x30>
  809860:	00c7c83a 	sub	r3,zero,r3
  809864:	1805883a 	mov	r2,r3
  809868:	dfc00117 	ldw	ra,4(sp)
  80986c:	dc000017 	ldw	r16,0(sp)
  809870:	dec00204 	addi	sp,sp,8
  809874:	f800283a 	ret
  809878:	0109c83a 	sub	r4,zero,r4
  80987c:	04000044 	movi	r16,1
  809880:	000d883a 	mov	r6,zero
  809884:	283ff20e 	bge	r5,zero,809850 <__divsi3+0x1c>
  809888:	014bc83a 	sub	r5,zero,r5
  80988c:	8021003a 	cmpeq	r16,r16,zero
  809890:	003fef06 	br	809850 <__divsi3+0x1c>

00809894 <__modsi3>:
  809894:	deffff04 	addi	sp,sp,-4
  809898:	dfc00015 	stw	ra,0(sp)
  80989c:	01800044 	movi	r6,1
  8098a0:	2807883a 	mov	r3,r5
  8098a4:	20000416 	blt	r4,zero,8098b8 <__modsi3+0x24>
  8098a8:	28000c16 	blt	r5,zero,8098dc <__modsi3+0x48>
  8098ac:	dfc00017 	ldw	ra,0(sp)
  8098b0:	dec00104 	addi	sp,sp,4
  8098b4:	08097b81 	jmpi	8097b8 <udivmodsi4>
  8098b8:	0109c83a 	sub	r4,zero,r4
  8098bc:	28000b16 	blt	r5,zero,8098ec <__modsi3+0x58>
  8098c0:	180b883a 	mov	r5,r3
  8098c4:	01800044 	movi	r6,1
  8098c8:	08097b80 	call	8097b8 <udivmodsi4>
  8098cc:	0085c83a 	sub	r2,zero,r2
  8098d0:	dfc00017 	ldw	ra,0(sp)
  8098d4:	dec00104 	addi	sp,sp,4
  8098d8:	f800283a 	ret
  8098dc:	014bc83a 	sub	r5,zero,r5
  8098e0:	dfc00017 	ldw	ra,0(sp)
  8098e4:	dec00104 	addi	sp,sp,4
  8098e8:	08097b81 	jmpi	8097b8 <udivmodsi4>
  8098ec:	0147c83a 	sub	r3,zero,r5
  8098f0:	003ff306 	br	8098c0 <__modsi3+0x2c>

008098f4 <__udivsi3>:
  8098f4:	000d883a 	mov	r6,zero
  8098f8:	08097b81 	jmpi	8097b8 <udivmodsi4>

008098fc <__umodsi3>:
  8098fc:	01800044 	movi	r6,1
  809900:	08097b81 	jmpi	8097b8 <udivmodsi4>

00809904 <__mulsi3>:
  809904:	20000a26 	beq	r4,zero,809930 <__mulsi3+0x2c>
  809908:	0007883a 	mov	r3,zero
  80990c:	2080004c 	andi	r2,r4,1
  809910:	1005003a 	cmpeq	r2,r2,zero
  809914:	2008d07a 	srli	r4,r4,1
  809918:	1000011e 	bne	r2,zero,809920 <__mulsi3+0x1c>
  80991c:	1947883a 	add	r3,r3,r5
  809920:	294b883a 	add	r5,r5,r5
  809924:	203ff91e 	bne	r4,zero,80990c <__mulsi3+0x8>
  809928:	1805883a 	mov	r2,r3
  80992c:	f800283a 	ret
  809930:	0007883a 	mov	r3,zero
  809934:	1805883a 	mov	r2,r3
  809938:	f800283a 	ret

0080993c <__muldi3>:
  80993c:	defff204 	addi	sp,sp,-56
  809940:	df000c15 	stw	fp,48(sp)
  809944:	3038d43a 	srli	fp,r6,16
  809948:	dd000815 	stw	r20,32(sp)
  80994c:	dc400515 	stw	r17,20(sp)
  809950:	2028d43a 	srli	r20,r4,16
  809954:	247fffcc 	andi	r17,r4,65535
  809958:	dc000415 	stw	r16,16(sp)
  80995c:	343fffcc 	andi	r16,r6,65535
  809960:	dcc00715 	stw	r19,28(sp)
  809964:	d9000015 	stw	r4,0(sp)
  809968:	2827883a 	mov	r19,r5
  80996c:	8809883a 	mov	r4,r17
  809970:	d9400115 	stw	r5,4(sp)
  809974:	800b883a 	mov	r5,r16
  809978:	d9800215 	stw	r6,8(sp)
  80997c:	dfc00d15 	stw	ra,52(sp)
  809980:	d9c00315 	stw	r7,12(sp)
  809984:	dd800a15 	stw	r22,40(sp)
  809988:	dd400915 	stw	r21,36(sp)
  80998c:	302d883a 	mov	r22,r6
  809990:	ddc00b15 	stw	r23,44(sp)
  809994:	dc800615 	stw	r18,24(sp)
  809998:	08099040 	call	809904 <__mulsi3>
  80999c:	8809883a 	mov	r4,r17
  8099a0:	e00b883a 	mov	r5,fp
  8099a4:	102b883a 	mov	r21,r2
  8099a8:	08099040 	call	809904 <__mulsi3>
  8099ac:	800b883a 	mov	r5,r16
  8099b0:	a009883a 	mov	r4,r20
  8099b4:	1023883a 	mov	r17,r2
  8099b8:	08099040 	call	809904 <__mulsi3>
  8099bc:	a009883a 	mov	r4,r20
  8099c0:	e00b883a 	mov	r5,fp
  8099c4:	1021883a 	mov	r16,r2
  8099c8:	08099040 	call	809904 <__mulsi3>
  8099cc:	a8ffffcc 	andi	r3,r21,65535
  8099d0:	a82ad43a 	srli	r21,r21,16
  8099d4:	8c23883a 	add	r17,r17,r16
  8099d8:	1011883a 	mov	r8,r2
  8099dc:	ac6b883a 	add	r21,r21,r17
  8099e0:	a804943a 	slli	r2,r21,16
  8099e4:	b009883a 	mov	r4,r22
  8099e8:	980b883a 	mov	r5,r19
  8099ec:	10c7883a 	add	r3,r2,r3
  8099f0:	a812d43a 	srli	r9,r21,16
  8099f4:	180d883a 	mov	r6,r3
  8099f8:	ac00022e 	bgeu	r21,r16,809a04 <__muldi3+0xc8>
  8099fc:	00800074 	movhi	r2,1
  809a00:	4091883a 	add	r8,r8,r2
  809a04:	4267883a 	add	r19,r8,r9
  809a08:	302d883a 	mov	r22,r6
  809a0c:	08099040 	call	809904 <__mulsi3>
  809a10:	d9400317 	ldw	r5,12(sp)
  809a14:	d9000017 	ldw	r4,0(sp)
  809a18:	1023883a 	mov	r17,r2
  809a1c:	08099040 	call	809904 <__mulsi3>
  809a20:	14cb883a 	add	r5,r2,r19
  809a24:	894b883a 	add	r5,r17,r5
  809a28:	b005883a 	mov	r2,r22
  809a2c:	2807883a 	mov	r3,r5
  809a30:	dfc00d17 	ldw	ra,52(sp)
  809a34:	df000c17 	ldw	fp,48(sp)
  809a38:	ddc00b17 	ldw	r23,44(sp)
  809a3c:	dd800a17 	ldw	r22,40(sp)
  809a40:	dd400917 	ldw	r21,36(sp)
  809a44:	dd000817 	ldw	r20,32(sp)
  809a48:	dcc00717 	ldw	r19,28(sp)
  809a4c:	dc800617 	ldw	r18,24(sp)
  809a50:	dc400517 	ldw	r17,20(sp)
  809a54:	dc000417 	ldw	r16,16(sp)
  809a58:	dec00e04 	addi	sp,sp,56
  809a5c:	f800283a 	ret

00809a60 <__clzsi2>:
  809a60:	00bfffd4 	movui	r2,65535
  809a64:	11000e36 	bltu	r2,r4,809aa0 <__clzsi2+0x40>
  809a68:	00803fc4 	movi	r2,255
  809a6c:	01400204 	movi	r5,8
  809a70:	0007883a 	mov	r3,zero
  809a74:	11001036 	bltu	r2,r4,809ab8 <__clzsi2+0x58>
  809a78:	000b883a 	mov	r5,zero
  809a7c:	20c6d83a 	srl	r3,r4,r3
  809a80:	00802074 	movhi	r2,129
  809a84:	10b37104 	addi	r2,r2,-12860
  809a88:	1887883a 	add	r3,r3,r2
  809a8c:	18800003 	ldbu	r2,0(r3)
  809a90:	00c00804 	movi	r3,32
  809a94:	2885883a 	add	r2,r5,r2
  809a98:	1885c83a 	sub	r2,r3,r2
  809a9c:	f800283a 	ret
  809aa0:	01400404 	movi	r5,16
  809aa4:	00804034 	movhi	r2,256
  809aa8:	10bfffc4 	addi	r2,r2,-1
  809aac:	2807883a 	mov	r3,r5
  809ab0:	113ff22e 	bgeu	r2,r4,809a7c <__clzsi2+0x1c>
  809ab4:	01400604 	movi	r5,24
  809ab8:	2807883a 	mov	r3,r5
  809abc:	20c6d83a 	srl	r3,r4,r3
  809ac0:	00802074 	movhi	r2,129
  809ac4:	10b37104 	addi	r2,r2,-12860
  809ac8:	1887883a 	add	r3,r3,r2
  809acc:	18800003 	ldbu	r2,0(r3)
  809ad0:	00c00804 	movi	r3,32
  809ad4:	2885883a 	add	r2,r5,r2
  809ad8:	1885c83a 	sub	r2,r3,r2
  809adc:	f800283a 	ret

00809ae0 <__pack_d>:
  809ae0:	20c00017 	ldw	r3,0(r4)
  809ae4:	defffd04 	addi	sp,sp,-12
  809ae8:	dc000015 	stw	r16,0(sp)
  809aec:	dc800215 	stw	r18,8(sp)
  809af0:	dc400115 	stw	r17,4(sp)
  809af4:	00800044 	movi	r2,1
  809af8:	22000317 	ldw	r8,12(r4)
  809afc:	001f883a 	mov	r15,zero
  809b00:	22400417 	ldw	r9,16(r4)
  809b04:	24000117 	ldw	r16,4(r4)
  809b08:	10c0552e 	bgeu	r2,r3,809c60 <__pack_d+0x180>
  809b0c:	00800104 	movi	r2,4
  809b10:	18804f26 	beq	r3,r2,809c50 <__pack_d+0x170>
  809b14:	00800084 	movi	r2,2
  809b18:	18800226 	beq	r3,r2,809b24 <__pack_d+0x44>
  809b1c:	4244b03a 	or	r2,r8,r9
  809b20:	10001a1e 	bne	r2,zero,809b8c <__pack_d+0xac>
  809b24:	000d883a 	mov	r6,zero
  809b28:	000f883a 	mov	r7,zero
  809b2c:	0011883a 	mov	r8,zero
  809b30:	00800434 	movhi	r2,16
  809b34:	10bfffc4 	addi	r2,r2,-1
  809b38:	301d883a 	mov	r14,r6
  809b3c:	3884703a 	and	r2,r7,r2
  809b40:	400a953a 	slli	r5,r8,20
  809b44:	79bffc2c 	andhi	r6,r15,65520
  809b48:	308cb03a 	or	r6,r6,r2
  809b4c:	00e00434 	movhi	r3,32784
  809b50:	18ffffc4 	addi	r3,r3,-1
  809b54:	800497fa 	slli	r2,r16,31
  809b58:	30c6703a 	and	r3,r6,r3
  809b5c:	1946b03a 	or	r3,r3,r5
  809b60:	01600034 	movhi	r5,32768
  809b64:	297fffc4 	addi	r5,r5,-1
  809b68:	194a703a 	and	r5,r3,r5
  809b6c:	288ab03a 	or	r5,r5,r2
  809b70:	2807883a 	mov	r3,r5
  809b74:	7005883a 	mov	r2,r14
  809b78:	dc800217 	ldw	r18,8(sp)
  809b7c:	dc400117 	ldw	r17,4(sp)
  809b80:	dc000017 	ldw	r16,0(sp)
  809b84:	dec00304 	addi	sp,sp,12
  809b88:	f800283a 	ret
  809b8c:	21000217 	ldw	r4,8(r4)
  809b90:	00bf0084 	movi	r2,-1022
  809b94:	20803f16 	blt	r4,r2,809c94 <__pack_d+0x1b4>
  809b98:	0080ffc4 	movi	r2,1023
  809b9c:	11002c16 	blt	r2,r4,809c50 <__pack_d+0x170>
  809ba0:	00803fc4 	movi	r2,255
  809ba4:	408c703a 	and	r6,r8,r2
  809ba8:	00802004 	movi	r2,128
  809bac:	0007883a 	mov	r3,zero
  809bb0:	000f883a 	mov	r7,zero
  809bb4:	2280ffc4 	addi	r10,r4,1023
  809bb8:	30801e26 	beq	r6,r2,809c34 <__pack_d+0x154>
  809bbc:	00801fc4 	movi	r2,127
  809bc0:	4089883a 	add	r4,r8,r2
  809bc4:	220d803a 	cmpltu	r6,r4,r8
  809bc8:	324d883a 	add	r6,r6,r9
  809bcc:	2011883a 	mov	r8,r4
  809bd0:	3013883a 	mov	r9,r6
  809bd4:	00880034 	movhi	r2,8192
  809bd8:	10bfffc4 	addi	r2,r2,-1
  809bdc:	12400d36 	bltu	r2,r9,809c14 <__pack_d+0x134>
  809be0:	4804963a 	slli	r2,r9,24
  809be4:	400cd23a 	srli	r6,r8,8
  809be8:	480ed23a 	srli	r7,r9,8
  809bec:	013fffc4 	movi	r4,-1
  809bf0:	118cb03a 	or	r6,r2,r6
  809bf4:	01400434 	movhi	r5,16
  809bf8:	297fffc4 	addi	r5,r5,-1
  809bfc:	3104703a 	and	r2,r6,r4
  809c00:	3946703a 	and	r3,r7,r5
  809c04:	5201ffcc 	andi	r8,r10,2047
  809c08:	100d883a 	mov	r6,r2
  809c0c:	180f883a 	mov	r7,r3
  809c10:	003fc706 	br	809b30 <__pack_d+0x50>
  809c14:	480897fa 	slli	r4,r9,31
  809c18:	4004d07a 	srli	r2,r8,1
  809c1c:	4806d07a 	srli	r3,r9,1
  809c20:	52800044 	addi	r10,r10,1
  809c24:	2084b03a 	or	r2,r4,r2
  809c28:	1011883a 	mov	r8,r2
  809c2c:	1813883a 	mov	r9,r3
  809c30:	003feb06 	br	809be0 <__pack_d+0x100>
  809c34:	383fe11e 	bne	r7,zero,809bbc <__pack_d+0xdc>
  809c38:	01004004 	movi	r4,256
  809c3c:	4104703a 	and	r2,r8,r4
  809c40:	10c4b03a 	or	r2,r2,r3
  809c44:	103fe326 	beq	r2,zero,809bd4 <__pack_d+0xf4>
  809c48:	3005883a 	mov	r2,r6
  809c4c:	003fdc06 	br	809bc0 <__pack_d+0xe0>
  809c50:	000d883a 	mov	r6,zero
  809c54:	000f883a 	mov	r7,zero
  809c58:	0201ffc4 	movi	r8,2047
  809c5c:	003fb406 	br	809b30 <__pack_d+0x50>
  809c60:	0005883a 	mov	r2,zero
  809c64:	00c00234 	movhi	r3,8
  809c68:	408cb03a 	or	r6,r8,r2
  809c6c:	48ceb03a 	or	r7,r9,r3
  809c70:	013fffc4 	movi	r4,-1
  809c74:	01400434 	movhi	r5,16
  809c78:	297fffc4 	addi	r5,r5,-1
  809c7c:	3104703a 	and	r2,r6,r4
  809c80:	3946703a 	and	r3,r7,r5
  809c84:	100d883a 	mov	r6,r2
  809c88:	180f883a 	mov	r7,r3
  809c8c:	0201ffc4 	movi	r8,2047
  809c90:	003fa706 	br	809b30 <__pack_d+0x50>
  809c94:	1109c83a 	sub	r4,r2,r4
  809c98:	00800e04 	movi	r2,56
  809c9c:	11004316 	blt	r2,r4,809dac <__pack_d+0x2cc>
  809ca0:	21fff804 	addi	r7,r4,-32
  809ca4:	38004516 	blt	r7,zero,809dbc <__pack_d+0x2dc>
  809ca8:	49d8d83a 	srl	r12,r9,r7
  809cac:	001b883a 	mov	r13,zero
  809cb0:	0023883a 	mov	r17,zero
  809cb4:	01400044 	movi	r5,1
  809cb8:	0025883a 	mov	r18,zero
  809cbc:	38004716 	blt	r7,zero,809ddc <__pack_d+0x2fc>
  809cc0:	29d6983a 	sll	r11,r5,r7
  809cc4:	0015883a 	mov	r10,zero
  809cc8:	00bfffc4 	movi	r2,-1
  809ccc:	5089883a 	add	r4,r10,r2
  809cd0:	588b883a 	add	r5,r11,r2
  809cd4:	228d803a 	cmpltu	r6,r4,r10
  809cd8:	314b883a 	add	r5,r6,r5
  809cdc:	4104703a 	and	r2,r8,r4
  809ce0:	4946703a 	and	r3,r9,r5
  809ce4:	10c4b03a 	or	r2,r2,r3
  809ce8:	10000226 	beq	r2,zero,809cf4 <__pack_d+0x214>
  809cec:	04400044 	movi	r17,1
  809cf0:	0025883a 	mov	r18,zero
  809cf4:	00803fc4 	movi	r2,255
  809cf8:	644eb03a 	or	r7,r12,r17
  809cfc:	3892703a 	and	r9,r7,r2
  809d00:	00802004 	movi	r2,128
  809d04:	6c90b03a 	or	r8,r13,r18
  809d08:	0015883a 	mov	r10,zero
  809d0c:	48801626 	beq	r9,r2,809d68 <__pack_d+0x288>
  809d10:	01001fc4 	movi	r4,127
  809d14:	3905883a 	add	r2,r7,r4
  809d18:	11cd803a 	cmpltu	r6,r2,r7
  809d1c:	320d883a 	add	r6,r6,r8
  809d20:	100f883a 	mov	r7,r2
  809d24:	00840034 	movhi	r2,4096
  809d28:	10bfffc4 	addi	r2,r2,-1
  809d2c:	3011883a 	mov	r8,r6
  809d30:	0007883a 	mov	r3,zero
  809d34:	11801b36 	bltu	r2,r6,809da4 <__pack_d+0x2c4>
  809d38:	4004963a 	slli	r2,r8,24
  809d3c:	3808d23a 	srli	r4,r7,8
  809d40:	400ad23a 	srli	r5,r8,8
  809d44:	1813883a 	mov	r9,r3
  809d48:	1108b03a 	or	r4,r2,r4
  809d4c:	00bfffc4 	movi	r2,-1
  809d50:	00c00434 	movhi	r3,16
  809d54:	18ffffc4 	addi	r3,r3,-1
  809d58:	208c703a 	and	r6,r4,r2
  809d5c:	28ce703a 	and	r7,r5,r3
  809d60:	4a01ffcc 	andi	r8,r9,2047
  809d64:	003f7206 	br	809b30 <__pack_d+0x50>
  809d68:	503fe91e 	bne	r10,zero,809d10 <__pack_d+0x230>
  809d6c:	01004004 	movi	r4,256
  809d70:	3904703a 	and	r2,r7,r4
  809d74:	0007883a 	mov	r3,zero
  809d78:	10c4b03a 	or	r2,r2,r3
  809d7c:	10000626 	beq	r2,zero,809d98 <__pack_d+0x2b8>
  809d80:	3a45883a 	add	r2,r7,r9
  809d84:	11cd803a 	cmpltu	r6,r2,r7
  809d88:	320d883a 	add	r6,r6,r8
  809d8c:	100f883a 	mov	r7,r2
  809d90:	3011883a 	mov	r8,r6
  809d94:	0007883a 	mov	r3,zero
  809d98:	00840034 	movhi	r2,4096
  809d9c:	10bfffc4 	addi	r2,r2,-1
  809da0:	123fe52e 	bgeu	r2,r8,809d38 <__pack_d+0x258>
  809da4:	00c00044 	movi	r3,1
  809da8:	003fe306 	br	809d38 <__pack_d+0x258>
  809dac:	0009883a 	mov	r4,zero
  809db0:	0013883a 	mov	r9,zero
  809db4:	000b883a 	mov	r5,zero
  809db8:	003fe406 	br	809d4c <__pack_d+0x26c>
  809dbc:	4a47883a 	add	r3,r9,r9
  809dc0:	008007c4 	movi	r2,31
  809dc4:	1105c83a 	sub	r2,r2,r4
  809dc8:	1886983a 	sll	r3,r3,r2
  809dcc:	4118d83a 	srl	r12,r8,r4
  809dd0:	491ad83a 	srl	r13,r9,r4
  809dd4:	1b18b03a 	or	r12,r3,r12
  809dd8:	003fb506 	br	809cb0 <__pack_d+0x1d0>
  809ddc:	2806d07a 	srli	r3,r5,1
  809de0:	008007c4 	movi	r2,31
  809de4:	1105c83a 	sub	r2,r2,r4
  809de8:	1896d83a 	srl	r11,r3,r2
  809dec:	2914983a 	sll	r10,r5,r4
  809df0:	003fb506 	br	809cc8 <__pack_d+0x1e8>

00809df4 <__unpack_d>:
  809df4:	20c00117 	ldw	r3,4(r4)
  809df8:	22400017 	ldw	r9,0(r4)
  809dfc:	00800434 	movhi	r2,16
  809e00:	10bfffc4 	addi	r2,r2,-1
  809e04:	1808d53a 	srli	r4,r3,20
  809e08:	180cd7fa 	srli	r6,r3,31
  809e0c:	1894703a 	and	r10,r3,r2
  809e10:	2201ffcc 	andi	r8,r4,2047
  809e14:	281b883a 	mov	r13,r5
  809e18:	4817883a 	mov	r11,r9
  809e1c:	29800115 	stw	r6,4(r5)
  809e20:	5019883a 	mov	r12,r10
  809e24:	40001e1e 	bne	r8,zero,809ea0 <__unpack_d+0xac>
  809e28:	4a84b03a 	or	r2,r9,r10
  809e2c:	10001926 	beq	r2,zero,809e94 <__unpack_d+0xa0>
  809e30:	4804d63a 	srli	r2,r9,24
  809e34:	500c923a 	slli	r6,r10,8
  809e38:	013f0084 	movi	r4,-1022
  809e3c:	00c40034 	movhi	r3,4096
  809e40:	18ffffc4 	addi	r3,r3,-1
  809e44:	118cb03a 	or	r6,r2,r6
  809e48:	008000c4 	movi	r2,3
  809e4c:	480a923a 	slli	r5,r9,8
  809e50:	68800015 	stw	r2,0(r13)
  809e54:	69000215 	stw	r4,8(r13)
  809e58:	19800b36 	bltu	r3,r6,809e88 <__unpack_d+0x94>
  809e5c:	200f883a 	mov	r7,r4
  809e60:	1811883a 	mov	r8,r3
  809e64:	2945883a 	add	r2,r5,r5
  809e68:	1149803a 	cmpltu	r4,r2,r5
  809e6c:	3187883a 	add	r3,r6,r6
  809e70:	20c9883a 	add	r4,r4,r3
  809e74:	100b883a 	mov	r5,r2
  809e78:	200d883a 	mov	r6,r4
  809e7c:	39ffffc4 	addi	r7,r7,-1
  809e80:	413ff82e 	bgeu	r8,r4,809e64 <__unpack_d+0x70>
  809e84:	69c00215 	stw	r7,8(r13)
  809e88:	69800415 	stw	r6,16(r13)
  809e8c:	69400315 	stw	r5,12(r13)
  809e90:	f800283a 	ret
  809e94:	00800084 	movi	r2,2
  809e98:	28800015 	stw	r2,0(r5)
  809e9c:	f800283a 	ret
  809ea0:	0081ffc4 	movi	r2,2047
  809ea4:	40800f26 	beq	r8,r2,809ee4 <__unpack_d+0xf0>
  809ea8:	480cd63a 	srli	r6,r9,24
  809eac:	5006923a 	slli	r3,r10,8
  809eb0:	4804923a 	slli	r2,r9,8
  809eb4:	0009883a 	mov	r4,zero
  809eb8:	30c6b03a 	or	r3,r6,r3
  809ebc:	01440034 	movhi	r5,4096
  809ec0:	110cb03a 	or	r6,r2,r4
  809ec4:	423f0044 	addi	r8,r8,-1023
  809ec8:	194eb03a 	or	r7,r3,r5
  809ecc:	008000c4 	movi	r2,3
  809ed0:	69c00415 	stw	r7,16(r13)
  809ed4:	6a000215 	stw	r8,8(r13)
  809ed8:	68800015 	stw	r2,0(r13)
  809edc:	69800315 	stw	r6,12(r13)
  809ee0:	f800283a 	ret
  809ee4:	4a84b03a 	or	r2,r9,r10
  809ee8:	1000031e 	bne	r2,zero,809ef8 <__unpack_d+0x104>
  809eec:	00800104 	movi	r2,4
  809ef0:	28800015 	stw	r2,0(r5)
  809ef4:	f800283a 	ret
  809ef8:	0009883a 	mov	r4,zero
  809efc:	01400234 	movhi	r5,8
  809f00:	4904703a 	and	r2,r9,r4
  809f04:	5146703a 	and	r3,r10,r5
  809f08:	10c4b03a 	or	r2,r2,r3
  809f0c:	10000526 	beq	r2,zero,809f24 <__unpack_d+0x130>
  809f10:	00800044 	movi	r2,1
  809f14:	68800015 	stw	r2,0(r13)
  809f18:	6b000415 	stw	r12,16(r13)
  809f1c:	6ac00315 	stw	r11,12(r13)
  809f20:	f800283a 	ret
  809f24:	68000015 	stw	zero,0(r13)
  809f28:	003ffb06 	br	809f18 <__unpack_d+0x124>

00809f2c <__fpcmp_parts_d>:
  809f2c:	21800017 	ldw	r6,0(r4)
  809f30:	00c00044 	movi	r3,1
  809f34:	19800a2e 	bgeu	r3,r6,809f60 <__fpcmp_parts_d+0x34>
  809f38:	28800017 	ldw	r2,0(r5)
  809f3c:	1880082e 	bgeu	r3,r2,809f60 <__fpcmp_parts_d+0x34>
  809f40:	00c00104 	movi	r3,4
  809f44:	30c02626 	beq	r6,r3,809fe0 <__fpcmp_parts_d+0xb4>
  809f48:	10c02226 	beq	r2,r3,809fd4 <__fpcmp_parts_d+0xa8>
  809f4c:	00c00084 	movi	r3,2
  809f50:	30c00526 	beq	r6,r3,809f68 <__fpcmp_parts_d+0x3c>
  809f54:	10c0071e 	bne	r2,r3,809f74 <__fpcmp_parts_d+0x48>
  809f58:	20800117 	ldw	r2,4(r4)
  809f5c:	1000091e 	bne	r2,zero,809f84 <__fpcmp_parts_d+0x58>
  809f60:	00800044 	movi	r2,1
  809f64:	f800283a 	ret
  809f68:	10c01a1e 	bne	r2,r3,809fd4 <__fpcmp_parts_d+0xa8>
  809f6c:	0005883a 	mov	r2,zero
  809f70:	f800283a 	ret
  809f74:	22000117 	ldw	r8,4(r4)
  809f78:	28800117 	ldw	r2,4(r5)
  809f7c:	40800326 	beq	r8,r2,809f8c <__fpcmp_parts_d+0x60>
  809f80:	403ff726 	beq	r8,zero,809f60 <__fpcmp_parts_d+0x34>
  809f84:	00bfffc4 	movi	r2,-1
  809f88:	f800283a 	ret
  809f8c:	20c00217 	ldw	r3,8(r4)
  809f90:	28800217 	ldw	r2,8(r5)
  809f94:	10fffa16 	blt	r2,r3,809f80 <__fpcmp_parts_d+0x54>
  809f98:	18800916 	blt	r3,r2,809fc0 <__fpcmp_parts_d+0x94>
  809f9c:	21c00417 	ldw	r7,16(r4)
  809fa0:	28c00417 	ldw	r3,16(r5)
  809fa4:	21800317 	ldw	r6,12(r4)
  809fa8:	28800317 	ldw	r2,12(r5)
  809fac:	19fff436 	bltu	r3,r7,809f80 <__fpcmp_parts_d+0x54>
  809fb0:	38c00526 	beq	r7,r3,809fc8 <__fpcmp_parts_d+0x9c>
  809fb4:	38c00236 	bltu	r7,r3,809fc0 <__fpcmp_parts_d+0x94>
  809fb8:	19ffec1e 	bne	r3,r7,809f6c <__fpcmp_parts_d+0x40>
  809fbc:	30bfeb2e 	bgeu	r6,r2,809f6c <__fpcmp_parts_d+0x40>
  809fc0:	403fe71e 	bne	r8,zero,809f60 <__fpcmp_parts_d+0x34>
  809fc4:	003fef06 	br	809f84 <__fpcmp_parts_d+0x58>
  809fc8:	11bffa2e 	bgeu	r2,r6,809fb4 <__fpcmp_parts_d+0x88>
  809fcc:	403fe426 	beq	r8,zero,809f60 <__fpcmp_parts_d+0x34>
  809fd0:	003fec06 	br	809f84 <__fpcmp_parts_d+0x58>
  809fd4:	28800117 	ldw	r2,4(r5)
  809fd8:	103fe11e 	bne	r2,zero,809f60 <__fpcmp_parts_d+0x34>
  809fdc:	003fe906 	br	809f84 <__fpcmp_parts_d+0x58>
  809fe0:	11bfdd1e 	bne	r2,r6,809f58 <__fpcmp_parts_d+0x2c>
  809fe4:	28c00117 	ldw	r3,4(r5)
  809fe8:	20800117 	ldw	r2,4(r4)
  809fec:	1885c83a 	sub	r2,r3,r2
  809ff0:	f800283a 	ret

00809ff4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  809ff4:	defff804 	addi	sp,sp,-32
  809ff8:	dfc00715 	stw	ra,28(sp)
  809ffc:	df000615 	stw	fp,24(sp)
  80a000:	df000604 	addi	fp,sp,24
  80a004:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80a008:	e0bffc17 	ldw	r2,-16(fp)
  80a00c:	1004803a 	cmplt	r2,r2,zero
  80a010:	1000091e 	bne	r2,zero,80a038 <close+0x44>
  80a014:	e13ffc17 	ldw	r4,-16(fp)
  80a018:	01400304 	movi	r5,12
  80a01c:	08099040 	call	809904 <__mulsi3>
  80a020:	1007883a 	mov	r3,r2
  80a024:	00802074 	movhi	r2,129
  80a028:	10b5d704 	addi	r2,r2,-10404
  80a02c:	1887883a 	add	r3,r3,r2
  80a030:	e0ffff15 	stw	r3,-4(fp)
  80a034:	00000106 	br	80a03c <close+0x48>
  80a038:	e03fff15 	stw	zero,-4(fp)
  80a03c:	e0bfff17 	ldw	r2,-4(fp)
  80a040:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80a044:	e0bffb17 	ldw	r2,-20(fp)
  80a048:	1005003a 	cmpeq	r2,r2,zero
  80a04c:	10001d1e 	bne	r2,zero,80a0c4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80a050:	e0bffb17 	ldw	r2,-20(fp)
  80a054:	10800017 	ldw	r2,0(r2)
  80a058:	10800417 	ldw	r2,16(r2)
  80a05c:	1005003a 	cmpeq	r2,r2,zero
  80a060:	1000071e 	bne	r2,zero,80a080 <close+0x8c>
  80a064:	e0bffb17 	ldw	r2,-20(fp)
  80a068:	10800017 	ldw	r2,0(r2)
  80a06c:	10800417 	ldw	r2,16(r2)
  80a070:	e13ffb17 	ldw	r4,-20(fp)
  80a074:	103ee83a 	callr	r2
  80a078:	e0bffe15 	stw	r2,-8(fp)
  80a07c:	00000106 	br	80a084 <close+0x90>
  80a080:	e03ffe15 	stw	zero,-8(fp)
  80a084:	e0bffe17 	ldw	r2,-8(fp)
  80a088:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80a08c:	e13ffc17 	ldw	r4,-16(fp)
  80a090:	080a84c0 	call	80a84c <alt_release_fd>
    if (rval < 0)
  80a094:	e0bffa17 	ldw	r2,-24(fp)
  80a098:	1004403a 	cmpge	r2,r2,zero
  80a09c:	1000071e 	bne	r2,zero,80a0bc <close+0xc8>
    {
      ALT_ERRNO = -rval;
  80a0a0:	080a0f40 	call	80a0f4 <alt_get_errno>
  80a0a4:	e0fffa17 	ldw	r3,-24(fp)
  80a0a8:	00c7c83a 	sub	r3,zero,r3
  80a0ac:	10c00015 	stw	r3,0(r2)
      return -1;
  80a0b0:	00bfffc4 	movi	r2,-1
  80a0b4:	e0bffd15 	stw	r2,-12(fp)
  80a0b8:	00000806 	br	80a0dc <close+0xe8>
    }
    return 0;
  80a0bc:	e03ffd15 	stw	zero,-12(fp)
  80a0c0:	00000606 	br	80a0dc <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a0c4:	080a0f40 	call	80a0f4 <alt_get_errno>
  80a0c8:	1007883a 	mov	r3,r2
  80a0cc:	00801444 	movi	r2,81
  80a0d0:	18800015 	stw	r2,0(r3)
    return -1;
  80a0d4:	00bfffc4 	movi	r2,-1
  80a0d8:	e0bffd15 	stw	r2,-12(fp)
  80a0dc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80a0e0:	e037883a 	mov	sp,fp
  80a0e4:	dfc00117 	ldw	ra,4(sp)
  80a0e8:	df000017 	ldw	fp,0(sp)
  80a0ec:	dec00204 	addi	sp,sp,8
  80a0f0:	f800283a 	ret

0080a0f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a0f4:	defffd04 	addi	sp,sp,-12
  80a0f8:	dfc00215 	stw	ra,8(sp)
  80a0fc:	df000115 	stw	fp,4(sp)
  80a100:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a104:	00802074 	movhi	r2,129
  80a108:	10ba7b04 	addi	r2,r2,-5652
  80a10c:	10800017 	ldw	r2,0(r2)
  80a110:	1005003a 	cmpeq	r2,r2,zero
  80a114:	1000061e 	bne	r2,zero,80a130 <alt_get_errno+0x3c>
  80a118:	00802074 	movhi	r2,129
  80a11c:	10ba7b04 	addi	r2,r2,-5652
  80a120:	10800017 	ldw	r2,0(r2)
  80a124:	103ee83a 	callr	r2
  80a128:	e0bfff15 	stw	r2,-4(fp)
  80a12c:	00000306 	br	80a13c <alt_get_errno+0x48>
  80a130:	00802074 	movhi	r2,129
  80a134:	10813e04 	addi	r2,r2,1272
  80a138:	e0bfff15 	stw	r2,-4(fp)
  80a13c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a140:	e037883a 	mov	sp,fp
  80a144:	dfc00117 	ldw	ra,4(sp)
  80a148:	df000017 	ldw	fp,0(sp)
  80a14c:	dec00204 	addi	sp,sp,8
  80a150:	f800283a 	ret

0080a154 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80a154:	defffc04 	addi	sp,sp,-16
  80a158:	df000315 	stw	fp,12(sp)
  80a15c:	df000304 	addi	fp,sp,12
  80a160:	e13ffd15 	stw	r4,-12(fp)
  80a164:	e17ffe15 	stw	r5,-8(fp)
  80a168:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80a16c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a170:	e037883a 	mov	sp,fp
  80a174:	df000017 	ldw	fp,0(sp)
  80a178:	dec00104 	addi	sp,sp,4
  80a17c:	f800283a 	ret

0080a180 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80a180:	defff904 	addi	sp,sp,-28
  80a184:	dfc00615 	stw	ra,24(sp)
  80a188:	df000515 	stw	fp,20(sp)
  80a18c:	df000504 	addi	fp,sp,20
  80a190:	e13ffc15 	stw	r4,-16(fp)
  80a194:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a198:	e0bffc17 	ldw	r2,-16(fp)
  80a19c:	1004803a 	cmplt	r2,r2,zero
  80a1a0:	1000091e 	bne	r2,zero,80a1c8 <fstat+0x48>
  80a1a4:	e13ffc17 	ldw	r4,-16(fp)
  80a1a8:	01400304 	movi	r5,12
  80a1ac:	08099040 	call	809904 <__mulsi3>
  80a1b0:	1007883a 	mov	r3,r2
  80a1b4:	00802074 	movhi	r2,129
  80a1b8:	10b5d704 	addi	r2,r2,-10404
  80a1bc:	1887883a 	add	r3,r3,r2
  80a1c0:	e0ffff15 	stw	r3,-4(fp)
  80a1c4:	00000106 	br	80a1cc <fstat+0x4c>
  80a1c8:	e03fff15 	stw	zero,-4(fp)
  80a1cc:	e0bfff17 	ldw	r2,-4(fp)
  80a1d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80a1d4:	e0bffb17 	ldw	r2,-20(fp)
  80a1d8:	1005003a 	cmpeq	r2,r2,zero
  80a1dc:	1000121e 	bne	r2,zero,80a228 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80a1e0:	e0bffb17 	ldw	r2,-20(fp)
  80a1e4:	10800017 	ldw	r2,0(r2)
  80a1e8:	10800817 	ldw	r2,32(r2)
  80a1ec:	1005003a 	cmpeq	r2,r2,zero
  80a1f0:	1000081e 	bne	r2,zero,80a214 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  80a1f4:	e0bffb17 	ldw	r2,-20(fp)
  80a1f8:	10800017 	ldw	r2,0(r2)
  80a1fc:	10800817 	ldw	r2,32(r2)
  80a200:	e13ffb17 	ldw	r4,-20(fp)
  80a204:	e17ffd17 	ldw	r5,-12(fp)
  80a208:	103ee83a 	callr	r2
  80a20c:	e0bffe15 	stw	r2,-8(fp)
  80a210:	00000b06 	br	80a240 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80a214:	e0fffd17 	ldw	r3,-12(fp)
  80a218:	00880004 	movi	r2,8192
  80a21c:	18800115 	stw	r2,4(r3)
      return 0;
  80a220:	e03ffe15 	stw	zero,-8(fp)
  80a224:	00000606 	br	80a240 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a228:	080a2580 	call	80a258 <alt_get_errno>
  80a22c:	1007883a 	mov	r3,r2
  80a230:	00801444 	movi	r2,81
  80a234:	18800015 	stw	r2,0(r3)
    return -1;
  80a238:	00bfffc4 	movi	r2,-1
  80a23c:	e0bffe15 	stw	r2,-8(fp)
  80a240:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a244:	e037883a 	mov	sp,fp
  80a248:	dfc00117 	ldw	ra,4(sp)
  80a24c:	df000017 	ldw	fp,0(sp)
  80a250:	dec00204 	addi	sp,sp,8
  80a254:	f800283a 	ret

0080a258 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a258:	defffd04 	addi	sp,sp,-12
  80a25c:	dfc00215 	stw	ra,8(sp)
  80a260:	df000115 	stw	fp,4(sp)
  80a264:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a268:	00802074 	movhi	r2,129
  80a26c:	10ba7b04 	addi	r2,r2,-5652
  80a270:	10800017 	ldw	r2,0(r2)
  80a274:	1005003a 	cmpeq	r2,r2,zero
  80a278:	1000061e 	bne	r2,zero,80a294 <alt_get_errno+0x3c>
  80a27c:	00802074 	movhi	r2,129
  80a280:	10ba7b04 	addi	r2,r2,-5652
  80a284:	10800017 	ldw	r2,0(r2)
  80a288:	103ee83a 	callr	r2
  80a28c:	e0bfff15 	stw	r2,-4(fp)
  80a290:	00000306 	br	80a2a0 <alt_get_errno+0x48>
  80a294:	00802074 	movhi	r2,129
  80a298:	10813e04 	addi	r2,r2,1272
  80a29c:	e0bfff15 	stw	r2,-4(fp)
  80a2a0:	e0bfff17 	ldw	r2,-4(fp)
}
  80a2a4:	e037883a 	mov	sp,fp
  80a2a8:	dfc00117 	ldw	ra,4(sp)
  80a2ac:	df000017 	ldw	fp,0(sp)
  80a2b0:	dec00204 	addi	sp,sp,8
  80a2b4:	f800283a 	ret

0080a2b8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80a2b8:	deffeb04 	addi	sp,sp,-84
  80a2bc:	dfc01415 	stw	ra,80(sp)
  80a2c0:	df001315 	stw	fp,76(sp)
  80a2c4:	df001304 	addi	fp,sp,76
  80a2c8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a2cc:	e0bffd17 	ldw	r2,-12(fp)
  80a2d0:	1004803a 	cmplt	r2,r2,zero
  80a2d4:	1000091e 	bne	r2,zero,80a2fc <isatty+0x44>
  80a2d8:	e13ffd17 	ldw	r4,-12(fp)
  80a2dc:	01400304 	movi	r5,12
  80a2e0:	08099040 	call	809904 <__mulsi3>
  80a2e4:	1007883a 	mov	r3,r2
  80a2e8:	00802074 	movhi	r2,129
  80a2ec:	10b5d704 	addi	r2,r2,-10404
  80a2f0:	1887883a 	add	r3,r3,r2
  80a2f4:	e0ffff15 	stw	r3,-4(fp)
  80a2f8:	00000106 	br	80a300 <isatty+0x48>
  80a2fc:	e03fff15 	stw	zero,-4(fp)
  80a300:	e0bfff17 	ldw	r2,-4(fp)
  80a304:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80a308:	e0bfed17 	ldw	r2,-76(fp)
  80a30c:	1005003a 	cmpeq	r2,r2,zero
  80a310:	10000f1e 	bne	r2,zero,80a350 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80a314:	e0bfed17 	ldw	r2,-76(fp)
  80a318:	10800017 	ldw	r2,0(r2)
  80a31c:	10800817 	ldw	r2,32(r2)
  80a320:	1004c03a 	cmpne	r2,r2,zero
  80a324:	1000031e 	bne	r2,zero,80a334 <isatty+0x7c>
    {
      return 1;
  80a328:	00800044 	movi	r2,1
  80a32c:	e0bffe15 	stw	r2,-8(fp)
  80a330:	00000c06 	br	80a364 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80a334:	e17fee04 	addi	r5,fp,-72
  80a338:	e13ffd17 	ldw	r4,-12(fp)
  80a33c:	080a1800 	call	80a180 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80a340:	e0bfef17 	ldw	r2,-68(fp)
  80a344:	10880020 	cmpeqi	r2,r2,8192
  80a348:	e0bffe15 	stw	r2,-8(fp)
  80a34c:	00000506 	br	80a364 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a350:	080a37c0 	call	80a37c <alt_get_errno>
  80a354:	1007883a 	mov	r3,r2
  80a358:	00801444 	movi	r2,81
  80a35c:	18800015 	stw	r2,0(r3)
    return 0;
  80a360:	e03ffe15 	stw	zero,-8(fp)
  80a364:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a368:	e037883a 	mov	sp,fp
  80a36c:	dfc00117 	ldw	ra,4(sp)
  80a370:	df000017 	ldw	fp,0(sp)
  80a374:	dec00204 	addi	sp,sp,8
  80a378:	f800283a 	ret

0080a37c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a37c:	defffd04 	addi	sp,sp,-12
  80a380:	dfc00215 	stw	ra,8(sp)
  80a384:	df000115 	stw	fp,4(sp)
  80a388:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a38c:	00802074 	movhi	r2,129
  80a390:	10ba7b04 	addi	r2,r2,-5652
  80a394:	10800017 	ldw	r2,0(r2)
  80a398:	1005003a 	cmpeq	r2,r2,zero
  80a39c:	1000061e 	bne	r2,zero,80a3b8 <alt_get_errno+0x3c>
  80a3a0:	00802074 	movhi	r2,129
  80a3a4:	10ba7b04 	addi	r2,r2,-5652
  80a3a8:	10800017 	ldw	r2,0(r2)
  80a3ac:	103ee83a 	callr	r2
  80a3b0:	e0bfff15 	stw	r2,-4(fp)
  80a3b4:	00000306 	br	80a3c4 <alt_get_errno+0x48>
  80a3b8:	00802074 	movhi	r2,129
  80a3bc:	10813e04 	addi	r2,r2,1272
  80a3c0:	e0bfff15 	stw	r2,-4(fp)
  80a3c4:	e0bfff17 	ldw	r2,-4(fp)
}
  80a3c8:	e037883a 	mov	sp,fp
  80a3cc:	dfc00117 	ldw	ra,4(sp)
  80a3d0:	df000017 	ldw	fp,0(sp)
  80a3d4:	dec00204 	addi	sp,sp,8
  80a3d8:	f800283a 	ret

0080a3dc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80a3dc:	defffe04 	addi	sp,sp,-8
  80a3e0:	dfc00115 	stw	ra,4(sp)
  80a3e4:	df000015 	stw	fp,0(sp)
  80a3e8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80a3ec:	01002074 	movhi	r4,129
  80a3f0:	213a8004 	addi	r4,r4,-5632
  80a3f4:	01402074 	movhi	r5,129
  80a3f8:	2973c804 	addi	r5,r5,-12512
  80a3fc:	01802074 	movhi	r6,129
  80a400:	31ba8004 	addi	r6,r6,-5632
  80a404:	080a45c0 	call	80a45c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80a408:	01002034 	movhi	r4,128
  80a40c:	21000804 	addi	r4,r4,32
  80a410:	01402034 	movhi	r5,128
  80a414:	29400804 	addi	r5,r5,32
  80a418:	01802034 	movhi	r6,128
  80a41c:	31806d04 	addi	r6,r6,436
  80a420:	080a45c0 	call	80a45c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80a424:	01002074 	movhi	r4,129
  80a428:	2132c804 	addi	r4,r4,-13536
  80a42c:	01402074 	movhi	r5,129
  80a430:	2972c804 	addi	r5,r5,-13536
  80a434:	01802074 	movhi	r6,129
  80a438:	31b3c804 	addi	r6,r6,-12512
  80a43c:	080a45c0 	call	80a45c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80a440:	080b9b80 	call	80b9b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80a444:	080bbb00 	call	80bbb0 <alt_icache_flush_all>
}
  80a448:	e037883a 	mov	sp,fp
  80a44c:	dfc00117 	ldw	ra,4(sp)
  80a450:	df000017 	ldw	fp,0(sp)
  80a454:	dec00204 	addi	sp,sp,8
  80a458:	f800283a 	ret

0080a45c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80a45c:	defffc04 	addi	sp,sp,-16
  80a460:	df000315 	stw	fp,12(sp)
  80a464:	df000304 	addi	fp,sp,12
  80a468:	e13ffd15 	stw	r4,-12(fp)
  80a46c:	e17ffe15 	stw	r5,-8(fp)
  80a470:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80a474:	e0fffe17 	ldw	r3,-8(fp)
  80a478:	e0bffd17 	ldw	r2,-12(fp)
  80a47c:	18800e26 	beq	r3,r2,80a4b8 <alt_load_section+0x5c>
  {
    while( to != end )
  80a480:	00000a06 	br	80a4ac <alt_load_section+0x50>
    {
      *to++ = *from++;
  80a484:	e0bffd17 	ldw	r2,-12(fp)
  80a488:	10c00017 	ldw	r3,0(r2)
  80a48c:	e0bffe17 	ldw	r2,-8(fp)
  80a490:	10c00015 	stw	r3,0(r2)
  80a494:	e0bffe17 	ldw	r2,-8(fp)
  80a498:	10800104 	addi	r2,r2,4
  80a49c:	e0bffe15 	stw	r2,-8(fp)
  80a4a0:	e0bffd17 	ldw	r2,-12(fp)
  80a4a4:	10800104 	addi	r2,r2,4
  80a4a8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80a4ac:	e0fffe17 	ldw	r3,-8(fp)
  80a4b0:	e0bfff17 	ldw	r2,-4(fp)
  80a4b4:	18bff31e 	bne	r3,r2,80a484 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80a4b8:	e037883a 	mov	sp,fp
  80a4bc:	df000017 	ldw	fp,0(sp)
  80a4c0:	dec00104 	addi	sp,sp,4
  80a4c4:	f800283a 	ret

0080a4c8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80a4c8:	defff804 	addi	sp,sp,-32
  80a4cc:	dfc00715 	stw	ra,28(sp)
  80a4d0:	df000615 	stw	fp,24(sp)
  80a4d4:	df000604 	addi	fp,sp,24
  80a4d8:	e13ffc15 	stw	r4,-16(fp)
  80a4dc:	e17ffd15 	stw	r5,-12(fp)
  80a4e0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80a4e4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a4e8:	e0bffc17 	ldw	r2,-16(fp)
  80a4ec:	1004803a 	cmplt	r2,r2,zero
  80a4f0:	1000091e 	bne	r2,zero,80a518 <lseek+0x50>
  80a4f4:	e13ffc17 	ldw	r4,-16(fp)
  80a4f8:	01400304 	movi	r5,12
  80a4fc:	08099040 	call	809904 <__mulsi3>
  80a500:	1007883a 	mov	r3,r2
  80a504:	00802074 	movhi	r2,129
  80a508:	10b5d704 	addi	r2,r2,-10404
  80a50c:	1887883a 	add	r3,r3,r2
  80a510:	e0ffff15 	stw	r3,-4(fp)
  80a514:	00000106 	br	80a51c <lseek+0x54>
  80a518:	e03fff15 	stw	zero,-4(fp)
  80a51c:	e0bfff17 	ldw	r2,-4(fp)
  80a520:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80a524:	e0bffb17 	ldw	r2,-20(fp)
  80a528:	1005003a 	cmpeq	r2,r2,zero
  80a52c:	1000111e 	bne	r2,zero,80a574 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80a530:	e0bffb17 	ldw	r2,-20(fp)
  80a534:	10800017 	ldw	r2,0(r2)
  80a538:	10800717 	ldw	r2,28(r2)
  80a53c:	1005003a 	cmpeq	r2,r2,zero
  80a540:	1000091e 	bne	r2,zero,80a568 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80a544:	e0bffb17 	ldw	r2,-20(fp)
  80a548:	10800017 	ldw	r2,0(r2)
  80a54c:	10800717 	ldw	r2,28(r2)
  80a550:	e13ffb17 	ldw	r4,-20(fp)
  80a554:	e17ffd17 	ldw	r5,-12(fp)
  80a558:	e1bffe17 	ldw	r6,-8(fp)
  80a55c:	103ee83a 	callr	r2
  80a560:	e0bffa15 	stw	r2,-24(fp)
  80a564:	00000506 	br	80a57c <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80a568:	00bfde84 	movi	r2,-134
  80a56c:	e0bffa15 	stw	r2,-24(fp)
  80a570:	00000206 	br	80a57c <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80a574:	00bfebc4 	movi	r2,-81
  80a578:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80a57c:	e0bffa17 	ldw	r2,-24(fp)
  80a580:	1004403a 	cmpge	r2,r2,zero
  80a584:	1000071e 	bne	r2,zero,80a5a4 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80a588:	080a5bc0 	call	80a5bc <alt_get_errno>
  80a58c:	1007883a 	mov	r3,r2
  80a590:	e0bffa17 	ldw	r2,-24(fp)
  80a594:	0085c83a 	sub	r2,zero,r2
  80a598:	18800015 	stw	r2,0(r3)
    rc = -1;
  80a59c:	00bfffc4 	movi	r2,-1
  80a5a0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80a5a4:	e0bffa17 	ldw	r2,-24(fp)
}
  80a5a8:	e037883a 	mov	sp,fp
  80a5ac:	dfc00117 	ldw	ra,4(sp)
  80a5b0:	df000017 	ldw	fp,0(sp)
  80a5b4:	dec00204 	addi	sp,sp,8
  80a5b8:	f800283a 	ret

0080a5bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a5bc:	defffd04 	addi	sp,sp,-12
  80a5c0:	dfc00215 	stw	ra,8(sp)
  80a5c4:	df000115 	stw	fp,4(sp)
  80a5c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a5cc:	00802074 	movhi	r2,129
  80a5d0:	10ba7b04 	addi	r2,r2,-5652
  80a5d4:	10800017 	ldw	r2,0(r2)
  80a5d8:	1005003a 	cmpeq	r2,r2,zero
  80a5dc:	1000061e 	bne	r2,zero,80a5f8 <alt_get_errno+0x3c>
  80a5e0:	00802074 	movhi	r2,129
  80a5e4:	10ba7b04 	addi	r2,r2,-5652
  80a5e8:	10800017 	ldw	r2,0(r2)
  80a5ec:	103ee83a 	callr	r2
  80a5f0:	e0bfff15 	stw	r2,-4(fp)
  80a5f4:	00000306 	br	80a604 <alt_get_errno+0x48>
  80a5f8:	00802074 	movhi	r2,129
  80a5fc:	10813e04 	addi	r2,r2,1272
  80a600:	e0bfff15 	stw	r2,-4(fp)
  80a604:	e0bfff17 	ldw	r2,-4(fp)
}
  80a608:	e037883a 	mov	sp,fp
  80a60c:	dfc00117 	ldw	ra,4(sp)
  80a610:	df000017 	ldw	fp,0(sp)
  80a614:	dec00204 	addi	sp,sp,8
  80a618:	f800283a 	ret

0080a61c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80a61c:	defffd04 	addi	sp,sp,-12
  80a620:	dfc00215 	stw	ra,8(sp)
  80a624:	df000115 	stw	fp,4(sp)
  80a628:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80a62c:	0009883a 	mov	r4,zero
  80a630:	080ab040 	call	80ab04 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80a634:	080ab380 	call	80ab38 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80a638:	01002074 	movhi	r4,129
  80a63c:	2133b404 	addi	r4,r4,-12592
  80a640:	01402074 	movhi	r5,129
  80a644:	2973b404 	addi	r5,r5,-12592
  80a648:	01802074 	movhi	r6,129
  80a64c:	31b3b404 	addi	r6,r6,-12592
  80a650:	080bf700 	call	80bf70 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80a654:	080bae80 	call	80bae8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80a658:	01002074 	movhi	r4,129
  80a65c:	212ed304 	addi	r4,r4,-17588
  80a660:	080c7140 	call	80c714 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80a664:	d126cf17 	ldw	r4,-25796(gp)
  80a668:	d166d017 	ldw	r5,-25792(gp)
  80a66c:	d1a6d117 	ldw	r6,-25788(gp)
  80a670:	080023c0 	call	80023c <main>
  80a674:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80a678:	01000044 	movi	r4,1
  80a67c:	0809ff40 	call	809ff4 <close>
  exit (result);
  80a680:	e13fff17 	ldw	r4,-4(fp)
  80a684:	080c7280 	call	80c728 <exit>

0080a688 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80a688:	defffe04 	addi	sp,sp,-8
  80a68c:	df000115 	stw	fp,4(sp)
  80a690:	df000104 	addi	fp,sp,4
  80a694:	e13fff15 	stw	r4,-4(fp)
}
  80a698:	e037883a 	mov	sp,fp
  80a69c:	df000017 	ldw	fp,0(sp)
  80a6a0:	dec00104 	addi	sp,sp,4
  80a6a4:	f800283a 	ret

0080a6a8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80a6a8:	defffe04 	addi	sp,sp,-8
  80a6ac:	df000115 	stw	fp,4(sp)
  80a6b0:	df000104 	addi	fp,sp,4
  80a6b4:	e13fff15 	stw	r4,-4(fp)
}
  80a6b8:	e037883a 	mov	sp,fp
  80a6bc:	df000017 	ldw	fp,0(sp)
  80a6c0:	dec00104 	addi	sp,sp,4
  80a6c4:	f800283a 	ret

0080a6c8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80a6c8:	defff704 	addi	sp,sp,-36
  80a6cc:	dfc00815 	stw	ra,32(sp)
  80a6d0:	df000715 	stw	fp,28(sp)
  80a6d4:	df000704 	addi	fp,sp,28
  80a6d8:	e13ffb15 	stw	r4,-20(fp)
  80a6dc:	e17ffc15 	stw	r5,-16(fp)
  80a6e0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a6e4:	e0bffb17 	ldw	r2,-20(fp)
  80a6e8:	1004803a 	cmplt	r2,r2,zero
  80a6ec:	1000091e 	bne	r2,zero,80a714 <read+0x4c>
  80a6f0:	e13ffb17 	ldw	r4,-20(fp)
  80a6f4:	01400304 	movi	r5,12
  80a6f8:	08099040 	call	809904 <__mulsi3>
  80a6fc:	1007883a 	mov	r3,r2
  80a700:	00802074 	movhi	r2,129
  80a704:	10b5d704 	addi	r2,r2,-10404
  80a708:	1887883a 	add	r3,r3,r2
  80a70c:	e0ffff15 	stw	r3,-4(fp)
  80a710:	00000106 	br	80a718 <read+0x50>
  80a714:	e03fff15 	stw	zero,-4(fp)
  80a718:	e0bfff17 	ldw	r2,-4(fp)
  80a71c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80a720:	e0bffa17 	ldw	r2,-24(fp)
  80a724:	1005003a 	cmpeq	r2,r2,zero
  80a728:	1000241e 	bne	r2,zero,80a7bc <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80a72c:	e0bffa17 	ldw	r2,-24(fp)
  80a730:	10800217 	ldw	r2,8(r2)
  80a734:	108000cc 	andi	r2,r2,3
  80a738:	10800060 	cmpeqi	r2,r2,1
  80a73c:	10001a1e 	bne	r2,zero,80a7a8 <read+0xe0>
  80a740:	e0bffa17 	ldw	r2,-24(fp)
  80a744:	10800017 	ldw	r2,0(r2)
  80a748:	10800517 	ldw	r2,20(r2)
  80a74c:	1005003a 	cmpeq	r2,r2,zero
  80a750:	1000151e 	bne	r2,zero,80a7a8 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80a754:	e0bffa17 	ldw	r2,-24(fp)
  80a758:	10800017 	ldw	r2,0(r2)
  80a75c:	10800517 	ldw	r2,20(r2)
  80a760:	e17ffc17 	ldw	r5,-16(fp)
  80a764:	e1bffd17 	ldw	r6,-12(fp)
  80a768:	e13ffa17 	ldw	r4,-24(fp)
  80a76c:	103ee83a 	callr	r2
  80a770:	e0bff915 	stw	r2,-28(fp)
  80a774:	e0bff917 	ldw	r2,-28(fp)
  80a778:	1004403a 	cmpge	r2,r2,zero
  80a77c:	1000071e 	bne	r2,zero,80a79c <read+0xd4>
        {
          ALT_ERRNO = -rval;
  80a780:	080a7ec0 	call	80a7ec <alt_get_errno>
  80a784:	e0fff917 	ldw	r3,-28(fp)
  80a788:	00c7c83a 	sub	r3,zero,r3
  80a78c:	10c00015 	stw	r3,0(r2)
          return -1;
  80a790:	00bfffc4 	movi	r2,-1
  80a794:	e0bffe15 	stw	r2,-8(fp)
  80a798:	00000e06 	br	80a7d4 <read+0x10c>
        }
        return rval;
  80a79c:	e0bff917 	ldw	r2,-28(fp)
  80a7a0:	e0bffe15 	stw	r2,-8(fp)
  80a7a4:	00000b06 	br	80a7d4 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80a7a8:	080a7ec0 	call	80a7ec <alt_get_errno>
  80a7ac:	1007883a 	mov	r3,r2
  80a7b0:	00800344 	movi	r2,13
  80a7b4:	18800015 	stw	r2,0(r3)
  80a7b8:	00000406 	br	80a7cc <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80a7bc:	080a7ec0 	call	80a7ec <alt_get_errno>
  80a7c0:	1007883a 	mov	r3,r2
  80a7c4:	00801444 	movi	r2,81
  80a7c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80a7cc:	00bfffc4 	movi	r2,-1
  80a7d0:	e0bffe15 	stw	r2,-8(fp)
  80a7d4:	e0bffe17 	ldw	r2,-8(fp)
}
  80a7d8:	e037883a 	mov	sp,fp
  80a7dc:	dfc00117 	ldw	ra,4(sp)
  80a7e0:	df000017 	ldw	fp,0(sp)
  80a7e4:	dec00204 	addi	sp,sp,8
  80a7e8:	f800283a 	ret

0080a7ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a7ec:	defffd04 	addi	sp,sp,-12
  80a7f0:	dfc00215 	stw	ra,8(sp)
  80a7f4:	df000115 	stw	fp,4(sp)
  80a7f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a7fc:	00802074 	movhi	r2,129
  80a800:	10ba7b04 	addi	r2,r2,-5652
  80a804:	10800017 	ldw	r2,0(r2)
  80a808:	1005003a 	cmpeq	r2,r2,zero
  80a80c:	1000061e 	bne	r2,zero,80a828 <alt_get_errno+0x3c>
  80a810:	00802074 	movhi	r2,129
  80a814:	10ba7b04 	addi	r2,r2,-5652
  80a818:	10800017 	ldw	r2,0(r2)
  80a81c:	103ee83a 	callr	r2
  80a820:	e0bfff15 	stw	r2,-4(fp)
  80a824:	00000306 	br	80a834 <alt_get_errno+0x48>
  80a828:	00802074 	movhi	r2,129
  80a82c:	10813e04 	addi	r2,r2,1272
  80a830:	e0bfff15 	stw	r2,-4(fp)
  80a834:	e0bfff17 	ldw	r2,-4(fp)
}
  80a838:	e037883a 	mov	sp,fp
  80a83c:	dfc00117 	ldw	ra,4(sp)
  80a840:	df000017 	ldw	fp,0(sp)
  80a844:	dec00204 	addi	sp,sp,8
  80a848:	f800283a 	ret

0080a84c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80a84c:	defffc04 	addi	sp,sp,-16
  80a850:	dfc00315 	stw	ra,12(sp)
  80a854:	df000215 	stw	fp,8(sp)
  80a858:	dc000115 	stw	r16,4(sp)
  80a85c:	df000104 	addi	fp,sp,4
  80a860:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80a864:	e0bfff17 	ldw	r2,-4(fp)
  80a868:	108000d0 	cmplti	r2,r2,3
  80a86c:	10000f1e 	bne	r2,zero,80a8ac <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  80a870:	e13fff17 	ldw	r4,-4(fp)
  80a874:	04002074 	movhi	r16,129
  80a878:	8435d704 	addi	r16,r16,-10404
  80a87c:	01400304 	movi	r5,12
  80a880:	08099040 	call	809904 <__mulsi3>
  80a884:	1405883a 	add	r2,r2,r16
  80a888:	10800204 	addi	r2,r2,8
  80a88c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80a890:	e13fff17 	ldw	r4,-4(fp)
  80a894:	04002074 	movhi	r16,129
  80a898:	8435d704 	addi	r16,r16,-10404
  80a89c:	01400304 	movi	r5,12
  80a8a0:	08099040 	call	809904 <__mulsi3>
  80a8a4:	1405883a 	add	r2,r2,r16
  80a8a8:	10000015 	stw	zero,0(r2)
  }
}
  80a8ac:	e037883a 	mov	sp,fp
  80a8b0:	dfc00217 	ldw	ra,8(sp)
  80a8b4:	df000117 	ldw	fp,4(sp)
  80a8b8:	dc000017 	ldw	r16,0(sp)
  80a8bc:	dec00304 	addi	sp,sp,12
  80a8c0:	f800283a 	ret

0080a8c4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80a8c4:	defff804 	addi	sp,sp,-32
  80a8c8:	df000715 	stw	fp,28(sp)
  80a8cc:	df000704 	addi	fp,sp,28
  80a8d0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a8d4:	0005303a 	rdctl	r2,status
  80a8d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a8dc:	e0fffb17 	ldw	r3,-20(fp)
  80a8e0:	00bfff84 	movi	r2,-2
  80a8e4:	1884703a 	and	r2,r3,r2
  80a8e8:	1001703a 	wrctl	status,r2
  
  return context;
  80a8ec:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80a8f0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80a8f4:	d0a00c17 	ldw	r2,-32720(gp)
  80a8f8:	10c000c4 	addi	r3,r2,3
  80a8fc:	00bfff04 	movi	r2,-4
  80a900:	1884703a 	and	r2,r3,r2
  80a904:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80a908:	d0e00c17 	ldw	r3,-32720(gp)
  80a90c:	e0bffe17 	ldw	r2,-8(fp)
  80a910:	1887883a 	add	r3,r3,r2
  80a914:	00804034 	movhi	r2,256
  80a918:	10800004 	addi	r2,r2,0
  80a91c:	10c0072e 	bgeu	r2,r3,80a93c <sbrk+0x78>
  80a920:	e0bffd17 	ldw	r2,-12(fp)
  80a924:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a928:	e0bffa17 	ldw	r2,-24(fp)
  80a92c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80a930:	00bfffc4 	movi	r2,-1
  80a934:	e0bfff15 	stw	r2,-4(fp)
  80a938:	00000c06 	br	80a96c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80a93c:	d0a00c17 	ldw	r2,-32720(gp)
  80a940:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80a944:	d0e00c17 	ldw	r3,-32720(gp)
  80a948:	e0bffe17 	ldw	r2,-8(fp)
  80a94c:	1885883a 	add	r2,r3,r2
  80a950:	d0a00c15 	stw	r2,-32720(gp)
  80a954:	e0bffd17 	ldw	r2,-12(fp)
  80a958:	e0bff915 	stw	r2,-28(fp)
  80a95c:	e0bff917 	ldw	r2,-28(fp)
  80a960:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80a964:	e0bffc17 	ldw	r2,-16(fp)
  80a968:	e0bfff15 	stw	r2,-4(fp)
  80a96c:	e0bfff17 	ldw	r2,-4(fp)
} 
  80a970:	e037883a 	mov	sp,fp
  80a974:	df000017 	ldw	fp,0(sp)
  80a978:	dec00104 	addi	sp,sp,4
  80a97c:	f800283a 	ret

0080a980 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80a980:	defff704 	addi	sp,sp,-36
  80a984:	dfc00815 	stw	ra,32(sp)
  80a988:	df000715 	stw	fp,28(sp)
  80a98c:	df000704 	addi	fp,sp,28
  80a990:	e13ffb15 	stw	r4,-20(fp)
  80a994:	e17ffc15 	stw	r5,-16(fp)
  80a998:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a99c:	e0bffb17 	ldw	r2,-20(fp)
  80a9a0:	1004803a 	cmplt	r2,r2,zero
  80a9a4:	1000091e 	bne	r2,zero,80a9cc <write+0x4c>
  80a9a8:	e13ffb17 	ldw	r4,-20(fp)
  80a9ac:	01400304 	movi	r5,12
  80a9b0:	08099040 	call	809904 <__mulsi3>
  80a9b4:	1007883a 	mov	r3,r2
  80a9b8:	00802074 	movhi	r2,129
  80a9bc:	10b5d704 	addi	r2,r2,-10404
  80a9c0:	1887883a 	add	r3,r3,r2
  80a9c4:	e0ffff15 	stw	r3,-4(fp)
  80a9c8:	00000106 	br	80a9d0 <write+0x50>
  80a9cc:	e03fff15 	stw	zero,-4(fp)
  80a9d0:	e0bfff17 	ldw	r2,-4(fp)
  80a9d4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80a9d8:	e0bffa17 	ldw	r2,-24(fp)
  80a9dc:	1005003a 	cmpeq	r2,r2,zero
  80a9e0:	1000241e 	bne	r2,zero,80aa74 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80a9e4:	e0bffa17 	ldw	r2,-24(fp)
  80a9e8:	10800217 	ldw	r2,8(r2)
  80a9ec:	108000cc 	andi	r2,r2,3
  80a9f0:	1005003a 	cmpeq	r2,r2,zero
  80a9f4:	10001a1e 	bne	r2,zero,80aa60 <write+0xe0>
  80a9f8:	e0bffa17 	ldw	r2,-24(fp)
  80a9fc:	10800017 	ldw	r2,0(r2)
  80aa00:	10800617 	ldw	r2,24(r2)
  80aa04:	1005003a 	cmpeq	r2,r2,zero
  80aa08:	1000151e 	bne	r2,zero,80aa60 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80aa0c:	e0bffa17 	ldw	r2,-24(fp)
  80aa10:	10800017 	ldw	r2,0(r2)
  80aa14:	10800617 	ldw	r2,24(r2)
  80aa18:	e17ffc17 	ldw	r5,-16(fp)
  80aa1c:	e1bffd17 	ldw	r6,-12(fp)
  80aa20:	e13ffa17 	ldw	r4,-24(fp)
  80aa24:	103ee83a 	callr	r2
  80aa28:	e0bff915 	stw	r2,-28(fp)
  80aa2c:	e0bff917 	ldw	r2,-28(fp)
  80aa30:	1004403a 	cmpge	r2,r2,zero
  80aa34:	1000071e 	bne	r2,zero,80aa54 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  80aa38:	080aaa40 	call	80aaa4 <alt_get_errno>
  80aa3c:	e0fff917 	ldw	r3,-28(fp)
  80aa40:	00c7c83a 	sub	r3,zero,r3
  80aa44:	10c00015 	stw	r3,0(r2)
        return -1;
  80aa48:	00bfffc4 	movi	r2,-1
  80aa4c:	e0bffe15 	stw	r2,-8(fp)
  80aa50:	00000e06 	br	80aa8c <write+0x10c>
      }
      return rval;
  80aa54:	e0bff917 	ldw	r2,-28(fp)
  80aa58:	e0bffe15 	stw	r2,-8(fp)
  80aa5c:	00000b06 	br	80aa8c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80aa60:	080aaa40 	call	80aaa4 <alt_get_errno>
  80aa64:	1007883a 	mov	r3,r2
  80aa68:	00800344 	movi	r2,13
  80aa6c:	18800015 	stw	r2,0(r3)
  80aa70:	00000406 	br	80aa84 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80aa74:	080aaa40 	call	80aaa4 <alt_get_errno>
  80aa78:	1007883a 	mov	r3,r2
  80aa7c:	00801444 	movi	r2,81
  80aa80:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80aa84:	00bfffc4 	movi	r2,-1
  80aa88:	e0bffe15 	stw	r2,-8(fp)
  80aa8c:	e0bffe17 	ldw	r2,-8(fp)
}
  80aa90:	e037883a 	mov	sp,fp
  80aa94:	dfc00117 	ldw	ra,4(sp)
  80aa98:	df000017 	ldw	fp,0(sp)
  80aa9c:	dec00204 	addi	sp,sp,8
  80aaa0:	f800283a 	ret

0080aaa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80aaa4:	defffd04 	addi	sp,sp,-12
  80aaa8:	dfc00215 	stw	ra,8(sp)
  80aaac:	df000115 	stw	fp,4(sp)
  80aab0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80aab4:	00802074 	movhi	r2,129
  80aab8:	10ba7b04 	addi	r2,r2,-5652
  80aabc:	10800017 	ldw	r2,0(r2)
  80aac0:	1005003a 	cmpeq	r2,r2,zero
  80aac4:	1000061e 	bne	r2,zero,80aae0 <alt_get_errno+0x3c>
  80aac8:	00802074 	movhi	r2,129
  80aacc:	10ba7b04 	addi	r2,r2,-5652
  80aad0:	10800017 	ldw	r2,0(r2)
  80aad4:	103ee83a 	callr	r2
  80aad8:	e0bfff15 	stw	r2,-4(fp)
  80aadc:	00000306 	br	80aaec <alt_get_errno+0x48>
  80aae0:	00802074 	movhi	r2,129
  80aae4:	10813e04 	addi	r2,r2,1272
  80aae8:	e0bfff15 	stw	r2,-4(fp)
  80aaec:	e0bfff17 	ldw	r2,-4(fp)
}
  80aaf0:	e037883a 	mov	sp,fp
  80aaf4:	dfc00117 	ldw	ra,4(sp)
  80aaf8:	df000017 	ldw	fp,0(sp)
  80aafc:	dec00204 	addi	sp,sp,8
  80ab00:	f800283a 	ret

0080ab04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80ab04:	defffd04 	addi	sp,sp,-12
  80ab08:	dfc00215 	stw	ra,8(sp)
  80ab0c:	df000115 	stw	fp,4(sp)
  80ab10:	df000104 	addi	fp,sp,4
  80ab14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
  80ab18:	080c4700 	call	80c470 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80ab1c:	00800044 	movi	r2,1
  80ab20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80ab24:	e037883a 	mov	sp,fp
  80ab28:	dfc00117 	ldw	ra,4(sp)
  80ab2c:	df000017 	ldw	fp,0(sp)
  80ab30:	dec00204 	addi	sp,sp,8
  80ab34:	f800283a 	ret

0080ab38 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80ab38:	defffd04 	addi	sp,sp,-12
  80ab3c:	dfc00215 	stw	ra,8(sp)
  80ab40:	df000115 	stw	fp,4(sp)
  80ab44:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80ab48:	01002074 	movhi	r4,129
  80ab4c:	21364104 	addi	r4,r4,-9980
  80ab50:	000b883a 	mov	r5,zero
  80ab54:	000d883a 	mov	r6,zero
  80ab58:	080af000 	call	80af00 <altera_avalon_jtag_uart_init>
  80ab5c:	01002074 	movhi	r4,129
  80ab60:	21363704 	addi	r4,r4,-10020
  80ab64:	080ad800 	call	80ad80 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
  80ab68:	01002074 	movhi	r4,129
  80ab6c:	213a4f04 	addi	r4,r4,-5828
  80ab70:	080ad800 	call	80ad80 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, Pixel_Buffer_DMA);
  80ab74:	00802074 	movhi	r2,129
  80ab78:	10ba5b04 	addi	r2,r2,-5780
  80ab7c:	10800a17 	ldw	r2,40(r2)
  80ab80:	10800017 	ldw	r2,0(r2)
  80ab84:	1007883a 	mov	r3,r2
  80ab88:	00802074 	movhi	r2,129
  80ab8c:	10ba5b04 	addi	r2,r2,-5780
  80ab90:	10c00b15 	stw	r3,44(r2)
  80ab94:	00802074 	movhi	r2,129
  80ab98:	10ba5b04 	addi	r2,r2,-5780
  80ab9c:	10800a17 	ldw	r2,40(r2)
  80aba0:	10800104 	addi	r2,r2,4
  80aba4:	10800017 	ldw	r2,0(r2)
  80aba8:	1007883a 	mov	r3,r2
  80abac:	00802074 	movhi	r2,129
  80abb0:	10ba5b04 	addi	r2,r2,-5780
  80abb4:	10c00c15 	stw	r3,48(r2)
  80abb8:	00802074 	movhi	r2,129
  80abbc:	10ba5b04 	addi	r2,r2,-5780
  80abc0:	10800a17 	ldw	r2,40(r2)
  80abc4:	10800204 	addi	r2,r2,8
  80abc8:	10800017 	ldw	r2,0(r2)
  80abcc:	10ffffcc 	andi	r3,r2,65535
  80abd0:	00802074 	movhi	r2,129
  80abd4:	10ba5b04 	addi	r2,r2,-5780
  80abd8:	10c00f15 	stw	r3,60(r2)
  80abdc:	00802074 	movhi	r2,129
  80abe0:	10ba5b04 	addi	r2,r2,-5780
  80abe4:	10800a17 	ldw	r2,40(r2)
  80abe8:	10800204 	addi	r2,r2,8
  80abec:	10800017 	ldw	r2,0(r2)
  80abf0:	1005d43a 	srai	r2,r2,16
  80abf4:	10ffffcc 	andi	r3,r2,65535
  80abf8:	00802074 	movhi	r2,129
  80abfc:	10ba5b04 	addi	r2,r2,-5780
  80ac00:	10c01015 	stw	r3,64(r2)
  80ac04:	00802074 	movhi	r2,129
  80ac08:	10ba5b04 	addi	r2,r2,-5780
  80ac0c:	10800a17 	ldw	r2,40(r2)
  80ac10:	10800304 	addi	r2,r2,12
  80ac14:	10800017 	ldw	r2,0(r2)
  80ac18:	1005d07a 	srai	r2,r2,1
  80ac1c:	10c0004c 	andi	r3,r2,1
  80ac20:	00802074 	movhi	r2,129
  80ac24:	10ba5b04 	addi	r2,r2,-5780
  80ac28:	10c00d15 	stw	r3,52(r2)
  80ac2c:	00802074 	movhi	r2,129
  80ac30:	10ba5b04 	addi	r2,r2,-5780
  80ac34:	10800a17 	ldw	r2,40(r2)
  80ac38:	10800304 	addi	r2,r2,12
  80ac3c:	10800017 	ldw	r2,0(r2)
  80ac40:	1005d13a 	srai	r2,r2,4
  80ac44:	10c003cc 	andi	r3,r2,15
  80ac48:	00802074 	movhi	r2,129
  80ac4c:	10ba5b04 	addi	r2,r2,-5780
  80ac50:	10c00e15 	stw	r3,56(r2)
  80ac54:	00802074 	movhi	r2,129
  80ac58:	10ba5b04 	addi	r2,r2,-5780
  80ac5c:	10800a17 	ldw	r2,40(r2)
  80ac60:	10800304 	addi	r2,r2,12
  80ac64:	10800017 	ldw	r2,0(r2)
  80ac68:	1005d43a 	srai	r2,r2,16
  80ac6c:	1007883a 	mov	r3,r2
  80ac70:	00bfffc4 	movi	r2,-1
  80ac74:	1884703a 	and	r2,r3,r2
  80ac78:	e0bfff45 	stb	r2,-3(fp)
  80ac7c:	00802074 	movhi	r2,129
  80ac80:	10ba5b04 	addi	r2,r2,-5780
  80ac84:	10800a17 	ldw	r2,40(r2)
  80ac88:	10800304 	addi	r2,r2,12
  80ac8c:	10800017 	ldw	r2,0(r2)
  80ac90:	1005d63a 	srai	r2,r2,24
  80ac94:	1007883a 	mov	r3,r2
  80ac98:	00bfffc4 	movi	r2,-1
  80ac9c:	1884703a 	and	r2,r3,r2
  80aca0:	e0bfff05 	stb	r2,-4(fp)
  80aca4:	00802074 	movhi	r2,129
  80aca8:	10ba5b04 	addi	r2,r2,-5780
  80acac:	10800e17 	ldw	r2,56(r2)
  80acb0:	10800058 	cmpnei	r2,r2,1
  80acb4:	1000041e 	bne	r2,zero,80acc8 <alt_sys_init+0x190>
  80acb8:	00802074 	movhi	r2,129
  80acbc:	10ba5b04 	addi	r2,r2,-5780
  80acc0:	10001115 	stw	zero,68(r2)
  80acc4:	00000e06 	br	80ad00 <alt_sys_init+0x1c8>
  80acc8:	00802074 	movhi	r2,129
  80accc:	10ba5b04 	addi	r2,r2,-5780
  80acd0:	10800e17 	ldw	r2,56(r2)
  80acd4:	10800098 	cmpnei	r2,r2,2
  80acd8:	1000051e 	bne	r2,zero,80acf0 <alt_sys_init+0x1b8>
  80acdc:	00c02074 	movhi	r3,129
  80ace0:	18fa5b04 	addi	r3,r3,-5780
  80ace4:	00800044 	movi	r2,1
  80ace8:	18801115 	stw	r2,68(r3)
  80acec:	00000406 	br	80ad00 <alt_sys_init+0x1c8>
  80acf0:	00c02074 	movhi	r3,129
  80acf4:	18fa5b04 	addi	r3,r3,-5780
  80acf8:	00800084 	movi	r2,2
  80acfc:	18801115 	stw	r2,68(r3)
  80ad00:	e0ffff43 	ldbu	r3,-3(fp)
  80ad04:	00800804 	movi	r2,32
  80ad08:	10c7c83a 	sub	r3,r2,r3
  80ad0c:	00bfffc4 	movi	r2,-1
  80ad10:	10c6d83a 	srl	r3,r2,r3
  80ad14:	00802074 	movhi	r2,129
  80ad18:	10ba5b04 	addi	r2,r2,-5780
  80ad1c:	10c01215 	stw	r3,72(r2)
  80ad20:	e0ffff43 	ldbu	r3,-3(fp)
  80ad24:	00802074 	movhi	r2,129
  80ad28:	10ba5b04 	addi	r2,r2,-5780
  80ad2c:	10801117 	ldw	r2,68(r2)
  80ad30:	1887883a 	add	r3,r3,r2
  80ad34:	00802074 	movhi	r2,129
  80ad38:	10ba5b04 	addi	r2,r2,-5780
  80ad3c:	10c01315 	stw	r3,76(r2)
  80ad40:	e0ffff03 	ldbu	r3,-4(fp)
  80ad44:	00800804 	movi	r2,32
  80ad48:	10c7c83a 	sub	r3,r2,r3
  80ad4c:	00bfffc4 	movi	r2,-1
  80ad50:	10c6d83a 	srl	r3,r2,r3
  80ad54:	00802074 	movhi	r2,129
  80ad58:	10ba5b04 	addi	r2,r2,-5780
  80ad5c:	10c01415 	stw	r3,80(r2)
  80ad60:	01002074 	movhi	r4,129
  80ad64:	213a5b04 	addi	r4,r4,-5780
  80ad68:	080ad800 	call	80ad80 <alt_dev_reg>
}
  80ad6c:	e037883a 	mov	sp,fp
  80ad70:	dfc00117 	ldw	ra,4(sp)
  80ad74:	df000017 	ldw	fp,0(sp)
  80ad78:	dec00204 	addi	sp,sp,8
  80ad7c:	f800283a 	ret

0080ad80 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80ad80:	defffd04 	addi	sp,sp,-12
  80ad84:	dfc00215 	stw	ra,8(sp)
  80ad88:	df000115 	stw	fp,4(sp)
  80ad8c:	df000104 	addi	fp,sp,4
  80ad90:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80ad94:	e13fff17 	ldw	r4,-4(fp)
  80ad98:	01402074 	movhi	r5,129
  80ad9c:	297a7804 	addi	r5,r5,-5664
  80ada0:	080b9d40 	call	80b9d4 <alt_dev_llist_insert>
}
  80ada4:	e037883a 	mov	sp,fp
  80ada8:	dfc00117 	ldw	ra,4(sp)
  80adac:	df000017 	ldw	fp,0(sp)
  80adb0:	dec00204 	addi	sp,sp,8
  80adb4:	f800283a 	ret

0080adb8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80adb8:	defffa04 	addi	sp,sp,-24
  80adbc:	dfc00515 	stw	ra,20(sp)
  80adc0:	df000415 	stw	fp,16(sp)
  80adc4:	df000404 	addi	fp,sp,16
  80adc8:	e13ffd15 	stw	r4,-12(fp)
  80adcc:	e17ffe15 	stw	r5,-8(fp)
  80add0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80add4:	e0bffd17 	ldw	r2,-12(fp)
  80add8:	10800017 	ldw	r2,0(r2)
  80addc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80ade0:	e0bffc17 	ldw	r2,-16(fp)
  80ade4:	11000a04 	addi	r4,r2,40
  80ade8:	e0bffd17 	ldw	r2,-12(fp)
  80adec:	11c00217 	ldw	r7,8(r2)
  80adf0:	e17ffe17 	ldw	r5,-8(fp)
  80adf4:	e1bfff17 	ldw	r6,-4(fp)
  80adf8:	080b4000 	call	80b400 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80adfc:	e037883a 	mov	sp,fp
  80ae00:	dfc00117 	ldw	ra,4(sp)
  80ae04:	df000017 	ldw	fp,0(sp)
  80ae08:	dec00204 	addi	sp,sp,8
  80ae0c:	f800283a 	ret

0080ae10 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ae10:	defffa04 	addi	sp,sp,-24
  80ae14:	dfc00515 	stw	ra,20(sp)
  80ae18:	df000415 	stw	fp,16(sp)
  80ae1c:	df000404 	addi	fp,sp,16
  80ae20:	e13ffd15 	stw	r4,-12(fp)
  80ae24:	e17ffe15 	stw	r5,-8(fp)
  80ae28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ae2c:	e0bffd17 	ldw	r2,-12(fp)
  80ae30:	10800017 	ldw	r2,0(r2)
  80ae34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80ae38:	e0bffc17 	ldw	r2,-16(fp)
  80ae3c:	11000a04 	addi	r4,r2,40
  80ae40:	e0bffd17 	ldw	r2,-12(fp)
  80ae44:	11c00217 	ldw	r7,8(r2)
  80ae48:	e17ffe17 	ldw	r5,-8(fp)
  80ae4c:	e1bfff17 	ldw	r6,-4(fp)
  80ae50:	080b6240 	call	80b624 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80ae54:	e037883a 	mov	sp,fp
  80ae58:	dfc00117 	ldw	ra,4(sp)
  80ae5c:	df000017 	ldw	fp,0(sp)
  80ae60:	dec00204 	addi	sp,sp,8
  80ae64:	f800283a 	ret

0080ae68 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80ae68:	defffc04 	addi	sp,sp,-16
  80ae6c:	dfc00315 	stw	ra,12(sp)
  80ae70:	df000215 	stw	fp,8(sp)
  80ae74:	df000204 	addi	fp,sp,8
  80ae78:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ae7c:	e0bfff17 	ldw	r2,-4(fp)
  80ae80:	10800017 	ldw	r2,0(r2)
  80ae84:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80ae88:	e0bffe17 	ldw	r2,-8(fp)
  80ae8c:	11000a04 	addi	r4,r2,40
  80ae90:	e0bfff17 	ldw	r2,-4(fp)
  80ae94:	11400217 	ldw	r5,8(r2)
  80ae98:	080b2980 	call	80b298 <altera_avalon_jtag_uart_close>
}
  80ae9c:	e037883a 	mov	sp,fp
  80aea0:	dfc00117 	ldw	ra,4(sp)
  80aea4:	df000017 	ldw	fp,0(sp)
  80aea8:	dec00204 	addi	sp,sp,8
  80aeac:	f800283a 	ret

0080aeb0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80aeb0:	defffa04 	addi	sp,sp,-24
  80aeb4:	dfc00515 	stw	ra,20(sp)
  80aeb8:	df000415 	stw	fp,16(sp)
  80aebc:	df000404 	addi	fp,sp,16
  80aec0:	e13ffd15 	stw	r4,-12(fp)
  80aec4:	e17ffe15 	stw	r5,-8(fp)
  80aec8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80aecc:	e0bffd17 	ldw	r2,-12(fp)
  80aed0:	10800017 	ldw	r2,0(r2)
  80aed4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80aed8:	e0bffc17 	ldw	r2,-16(fp)
  80aedc:	11000a04 	addi	r4,r2,40
  80aee0:	e17ffe17 	ldw	r5,-8(fp)
  80aee4:	e1bfff17 	ldw	r6,-4(fp)
  80aee8:	080b30c0 	call	80b30c <altera_avalon_jtag_uart_ioctl>
}
  80aeec:	e037883a 	mov	sp,fp
  80aef0:	dfc00117 	ldw	ra,4(sp)
  80aef4:	df000017 	ldw	fp,0(sp)
  80aef8:	dec00204 	addi	sp,sp,8
  80aefc:	f800283a 	ret

0080af00 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80af00:	defffa04 	addi	sp,sp,-24
  80af04:	dfc00515 	stw	ra,20(sp)
  80af08:	df000415 	stw	fp,16(sp)
  80af0c:	df000404 	addi	fp,sp,16
  80af10:	e13ffd15 	stw	r4,-12(fp)
  80af14:	e17ffe15 	stw	r5,-8(fp)
  80af18:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80af1c:	e0fffd17 	ldw	r3,-12(fp)
  80af20:	00800044 	movi	r2,1
  80af24:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80af28:	e0bffd17 	ldw	r2,-12(fp)
  80af2c:	10800017 	ldw	r2,0(r2)
  80af30:	11000104 	addi	r4,r2,4
  80af34:	e0bffd17 	ldw	r2,-12(fp)
  80af38:	10800817 	ldw	r2,32(r2)
  80af3c:	1007883a 	mov	r3,r2
  80af40:	2005883a 	mov	r2,r4
  80af44:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80af48:	e13ffe17 	ldw	r4,-8(fp)
  80af4c:	e17fff17 	ldw	r5,-4(fp)
  80af50:	d8000015 	stw	zero,0(sp)
  80af54:	01802074 	movhi	r6,129
  80af58:	31abf004 	addi	r6,r6,-20544
  80af5c:	e1fffd17 	ldw	r7,-12(fp)
  80af60:	080bbcc0 	call	80bbcc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80af64:	e0bffd17 	ldw	r2,-12(fp)
  80af68:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80af6c:	e0bffd17 	ldw	r2,-12(fp)
  80af70:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80af74:	00802074 	movhi	r2,129
  80af78:	10814304 	addi	r2,r2,1292
  80af7c:	10800017 	ldw	r2,0(r2)
  80af80:	100b883a 	mov	r5,r2
  80af84:	01802074 	movhi	r6,129
  80af88:	31ac7a04 	addi	r6,r6,-19992
  80af8c:	e1fffd17 	ldw	r7,-12(fp)
  80af90:	080b8640 	call	80b864 <alt_alarm_start>
  80af94:	1004403a 	cmpge	r2,r2,zero
  80af98:	1000041e 	bne	r2,zero,80afac <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80af9c:	e0fffd17 	ldw	r3,-12(fp)
  80afa0:	00a00034 	movhi	r2,32768
  80afa4:	10bfffc4 	addi	r2,r2,-1
  80afa8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80afac:	e037883a 	mov	sp,fp
  80afb0:	dfc00117 	ldw	ra,4(sp)
  80afb4:	df000017 	ldw	fp,0(sp)
  80afb8:	dec00204 	addi	sp,sp,8
  80afbc:	f800283a 	ret

0080afc0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80afc0:	defff804 	addi	sp,sp,-32
  80afc4:	df000715 	stw	fp,28(sp)
  80afc8:	df000704 	addi	fp,sp,28
  80afcc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80afd0:	e0bfff17 	ldw	r2,-4(fp)
  80afd4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80afd8:	e0bffe17 	ldw	r2,-8(fp)
  80afdc:	10800017 	ldw	r2,0(r2)
  80afe0:	e0bffd15 	stw	r2,-12(fp)
  80afe4:	00000006 	br	80afe8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80afe8:	e0bffd17 	ldw	r2,-12(fp)
  80afec:	10800104 	addi	r2,r2,4
  80aff0:	10800037 	ldwio	r2,0(r2)
  80aff4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80aff8:	e0bffc17 	ldw	r2,-16(fp)
  80affc:	1080c00c 	andi	r2,r2,768
  80b000:	1005003a 	cmpeq	r2,r2,zero
  80b004:	1000741e 	bne	r2,zero,80b1d8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80b008:	e0bffc17 	ldw	r2,-16(fp)
  80b00c:	1080400c 	andi	r2,r2,256
  80b010:	1005003a 	cmpeq	r2,r2,zero
  80b014:	1000351e 	bne	r2,zero,80b0ec <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80b018:	00800074 	movhi	r2,1
  80b01c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b020:	e0bffe17 	ldw	r2,-8(fp)
  80b024:	10800a17 	ldw	r2,40(r2)
  80b028:	10800044 	addi	r2,r2,1
  80b02c:	1081ffcc 	andi	r2,r2,2047
  80b030:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80b034:	e0bffe17 	ldw	r2,-8(fp)
  80b038:	10c00b17 	ldw	r3,44(r2)
  80b03c:	e0bffa17 	ldw	r2,-24(fp)
  80b040:	18801626 	beq	r3,r2,80b09c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80b044:	e0bffd17 	ldw	r2,-12(fp)
  80b048:	10800037 	ldwio	r2,0(r2)
  80b04c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80b050:	e0bffb17 	ldw	r2,-20(fp)
  80b054:	10a0000c 	andi	r2,r2,32768
  80b058:	1005003a 	cmpeq	r2,r2,zero
  80b05c:	10000f1e 	bne	r2,zero,80b09c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80b060:	e0bffe17 	ldw	r2,-8(fp)
  80b064:	10c00a17 	ldw	r3,40(r2)
  80b068:	e0bffb17 	ldw	r2,-20(fp)
  80b06c:	1009883a 	mov	r4,r2
  80b070:	e0bffe17 	ldw	r2,-8(fp)
  80b074:	1885883a 	add	r2,r3,r2
  80b078:	10800e04 	addi	r2,r2,56
  80b07c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b080:	e0bffe17 	ldw	r2,-8(fp)
  80b084:	10800a17 	ldw	r2,40(r2)
  80b088:	10800044 	addi	r2,r2,1
  80b08c:	10c1ffcc 	andi	r3,r2,2047
  80b090:	e0bffe17 	ldw	r2,-8(fp)
  80b094:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80b098:	003fe106 	br	80b020 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80b09c:	e0bffb17 	ldw	r2,-20(fp)
  80b0a0:	10bfffec 	andhi	r2,r2,65535
  80b0a4:	1005003a 	cmpeq	r2,r2,zero
  80b0a8:	1000101e 	bne	r2,zero,80b0ec <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b0ac:	e0bffe17 	ldw	r2,-8(fp)
  80b0b0:	10c00817 	ldw	r3,32(r2)
  80b0b4:	00bfff84 	movi	r2,-2
  80b0b8:	1886703a 	and	r3,r3,r2
  80b0bc:	e0bffe17 	ldw	r2,-8(fp)
  80b0c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80b0c4:	e0bffd17 	ldw	r2,-12(fp)
  80b0c8:	11000104 	addi	r4,r2,4
  80b0cc:	e0bffe17 	ldw	r2,-8(fp)
  80b0d0:	10800817 	ldw	r2,32(r2)
  80b0d4:	1007883a 	mov	r3,r2
  80b0d8:	2005883a 	mov	r2,r4
  80b0dc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b0e0:	e0bffd17 	ldw	r2,-12(fp)
  80b0e4:	10800104 	addi	r2,r2,4
  80b0e8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80b0ec:	e0bffc17 	ldw	r2,-16(fp)
  80b0f0:	1080800c 	andi	r2,r2,512
  80b0f4:	1005003a 	cmpeq	r2,r2,zero
  80b0f8:	103fbb1e 	bne	r2,zero,80afe8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80b0fc:	e0bffc17 	ldw	r2,-16(fp)
  80b100:	10bfffec 	andhi	r2,r2,65535
  80b104:	1004d43a 	srli	r2,r2,16
  80b108:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b10c:	00001506 	br	80b164 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80b110:	e13ffd17 	ldw	r4,-12(fp)
  80b114:	e0bffe17 	ldw	r2,-8(fp)
  80b118:	10c00d17 	ldw	r3,52(r2)
  80b11c:	e0bffe17 	ldw	r2,-8(fp)
  80b120:	1885883a 	add	r2,r3,r2
  80b124:	10820e04 	addi	r2,r2,2104
  80b128:	10800003 	ldbu	r2,0(r2)
  80b12c:	10c03fcc 	andi	r3,r2,255
  80b130:	18c0201c 	xori	r3,r3,128
  80b134:	18ffe004 	addi	r3,r3,-128
  80b138:	2005883a 	mov	r2,r4
  80b13c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b140:	e0bffe17 	ldw	r2,-8(fp)
  80b144:	10800d17 	ldw	r2,52(r2)
  80b148:	10800044 	addi	r2,r2,1
  80b14c:	10c1ffcc 	andi	r3,r2,2047
  80b150:	e0bffe17 	ldw	r2,-8(fp)
  80b154:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80b158:	e0bff917 	ldw	r2,-28(fp)
  80b15c:	10bfffc4 	addi	r2,r2,-1
  80b160:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b164:	e0bff917 	ldw	r2,-28(fp)
  80b168:	1005003a 	cmpeq	r2,r2,zero
  80b16c:	1000051e 	bne	r2,zero,80b184 <altera_avalon_jtag_uart_irq+0x1c4>
  80b170:	e0bffe17 	ldw	r2,-8(fp)
  80b174:	10c00d17 	ldw	r3,52(r2)
  80b178:	e0bffe17 	ldw	r2,-8(fp)
  80b17c:	10800c17 	ldw	r2,48(r2)
  80b180:	18bfe31e 	bne	r3,r2,80b110 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80b184:	e0bff917 	ldw	r2,-28(fp)
  80b188:	1005003a 	cmpeq	r2,r2,zero
  80b18c:	103f961e 	bne	r2,zero,80afe8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b190:	e0bffe17 	ldw	r2,-8(fp)
  80b194:	10c00817 	ldw	r3,32(r2)
  80b198:	00bfff44 	movi	r2,-3
  80b19c:	1886703a 	and	r3,r3,r2
  80b1a0:	e0bffe17 	ldw	r2,-8(fp)
  80b1a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b1a8:	e0bffe17 	ldw	r2,-8(fp)
  80b1ac:	10800017 	ldw	r2,0(r2)
  80b1b0:	11000104 	addi	r4,r2,4
  80b1b4:	e0bffe17 	ldw	r2,-8(fp)
  80b1b8:	10800817 	ldw	r2,32(r2)
  80b1bc:	1007883a 	mov	r3,r2
  80b1c0:	2005883a 	mov	r2,r4
  80b1c4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b1c8:	e0bffd17 	ldw	r2,-12(fp)
  80b1cc:	10800104 	addi	r2,r2,4
  80b1d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80b1d4:	003f8406 	br	80afe8 <altera_avalon_jtag_uart_irq+0x28>
}
  80b1d8:	e037883a 	mov	sp,fp
  80b1dc:	df000017 	ldw	fp,0(sp)
  80b1e0:	dec00104 	addi	sp,sp,4
  80b1e4:	f800283a 	ret

0080b1e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80b1e8:	defffc04 	addi	sp,sp,-16
  80b1ec:	df000315 	stw	fp,12(sp)
  80b1f0:	df000304 	addi	fp,sp,12
  80b1f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80b1f8:	e0bfff17 	ldw	r2,-4(fp)
  80b1fc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80b200:	e0bffe17 	ldw	r2,-8(fp)
  80b204:	10800017 	ldw	r2,0(r2)
  80b208:	10800104 	addi	r2,r2,4
  80b20c:	10800037 	ldwio	r2,0(r2)
  80b210:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80b214:	e0bffd17 	ldw	r2,-12(fp)
  80b218:	1081000c 	andi	r2,r2,1024
  80b21c:	1005003a 	cmpeq	r2,r2,zero
  80b220:	10000c1e 	bne	r2,zero,80b254 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80b224:	e0bffe17 	ldw	r2,-8(fp)
  80b228:	10800017 	ldw	r2,0(r2)
  80b22c:	11000104 	addi	r4,r2,4
  80b230:	e0bffe17 	ldw	r2,-8(fp)
  80b234:	10800817 	ldw	r2,32(r2)
  80b238:	10810014 	ori	r2,r2,1024
  80b23c:	1007883a 	mov	r3,r2
  80b240:	2005883a 	mov	r2,r4
  80b244:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80b248:	e0bffe17 	ldw	r2,-8(fp)
  80b24c:	10000915 	stw	zero,36(r2)
  80b250:	00000a06 	br	80b27c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80b254:	e0bffe17 	ldw	r2,-8(fp)
  80b258:	10c00917 	ldw	r3,36(r2)
  80b25c:	00a00034 	movhi	r2,32768
  80b260:	10bfff04 	addi	r2,r2,-4
  80b264:	10c00536 	bltu	r2,r3,80b27c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80b268:	e0bffe17 	ldw	r2,-8(fp)
  80b26c:	10800917 	ldw	r2,36(r2)
  80b270:	10c00044 	addi	r3,r2,1
  80b274:	e0bffe17 	ldw	r2,-8(fp)
  80b278:	10c00915 	stw	r3,36(r2)
  80b27c:	00802074 	movhi	r2,129
  80b280:	10814304 	addi	r2,r2,1292
  80b284:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80b288:	e037883a 	mov	sp,fp
  80b28c:	df000017 	ldw	fp,0(sp)
  80b290:	dec00104 	addi	sp,sp,4
  80b294:	f800283a 	ret

0080b298 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80b298:	defffc04 	addi	sp,sp,-16
  80b29c:	df000315 	stw	fp,12(sp)
  80b2a0:	df000304 	addi	fp,sp,12
  80b2a4:	e13ffd15 	stw	r4,-12(fp)
  80b2a8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b2ac:	00000706 	br	80b2cc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80b2b0:	e0bffe17 	ldw	r2,-8(fp)
  80b2b4:	1090000c 	andi	r2,r2,16384
  80b2b8:	1005003a 	cmpeq	r2,r2,zero
  80b2bc:	1000031e 	bne	r2,zero,80b2cc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80b2c0:	00bffd44 	movi	r2,-11
  80b2c4:	e0bfff15 	stw	r2,-4(fp)
  80b2c8:	00000b06 	br	80b2f8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b2cc:	e0bffd17 	ldw	r2,-12(fp)
  80b2d0:	10c00d17 	ldw	r3,52(r2)
  80b2d4:	e0bffd17 	ldw	r2,-12(fp)
  80b2d8:	10800c17 	ldw	r2,48(r2)
  80b2dc:	18800526 	beq	r3,r2,80b2f4 <altera_avalon_jtag_uart_close+0x5c>
  80b2e0:	e0bffd17 	ldw	r2,-12(fp)
  80b2e4:	10c00917 	ldw	r3,36(r2)
  80b2e8:	e0bffd17 	ldw	r2,-12(fp)
  80b2ec:	10800117 	ldw	r2,4(r2)
  80b2f0:	18bfef36 	bltu	r3,r2,80b2b0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80b2f4:	e03fff15 	stw	zero,-4(fp)
  80b2f8:	e0bfff17 	ldw	r2,-4(fp)
}
  80b2fc:	e037883a 	mov	sp,fp
  80b300:	df000017 	ldw	fp,0(sp)
  80b304:	dec00104 	addi	sp,sp,4
  80b308:	f800283a 	ret

0080b30c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80b30c:	defff804 	addi	sp,sp,-32
  80b310:	df000715 	stw	fp,28(sp)
  80b314:	df000704 	addi	fp,sp,28
  80b318:	e13ffb15 	stw	r4,-20(fp)
  80b31c:	e17ffc15 	stw	r5,-16(fp)
  80b320:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80b324:	00bff9c4 	movi	r2,-25
  80b328:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80b32c:	e0bffc17 	ldw	r2,-16(fp)
  80b330:	e0bfff15 	stw	r2,-4(fp)
  80b334:	e0ffff17 	ldw	r3,-4(fp)
  80b338:	189a8060 	cmpeqi	r2,r3,27137
  80b33c:	1000041e 	bne	r2,zero,80b350 <altera_avalon_jtag_uart_ioctl+0x44>
  80b340:	e0ffff17 	ldw	r3,-4(fp)
  80b344:	189a80a0 	cmpeqi	r2,r3,27138
  80b348:	10001b1e 	bne	r2,zero,80b3b8 <altera_avalon_jtag_uart_ioctl+0xac>
  80b34c:	00002706 	br	80b3ec <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80b350:	e0bffb17 	ldw	r2,-20(fp)
  80b354:	10c00117 	ldw	r3,4(r2)
  80b358:	00a00034 	movhi	r2,32768
  80b35c:	10bfffc4 	addi	r2,r2,-1
  80b360:	18802226 	beq	r3,r2,80b3ec <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80b364:	e0bffd17 	ldw	r2,-12(fp)
  80b368:	10800017 	ldw	r2,0(r2)
  80b36c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80b370:	e0bff917 	ldw	r2,-28(fp)
  80b374:	10800090 	cmplti	r2,r2,2
  80b378:	1000071e 	bne	r2,zero,80b398 <altera_avalon_jtag_uart_ioctl+0x8c>
  80b37c:	e0fff917 	ldw	r3,-28(fp)
  80b380:	00a00034 	movhi	r2,32768
  80b384:	10bfffc4 	addi	r2,r2,-1
  80b388:	18800326 	beq	r3,r2,80b398 <altera_avalon_jtag_uart_ioctl+0x8c>
  80b38c:	e0bff917 	ldw	r2,-28(fp)
  80b390:	e0bffe15 	stw	r2,-8(fp)
  80b394:	00000306 	br	80b3a4 <altera_avalon_jtag_uart_ioctl+0x98>
  80b398:	00e00034 	movhi	r3,32768
  80b39c:	18ffff84 	addi	r3,r3,-2
  80b3a0:	e0fffe15 	stw	r3,-8(fp)
  80b3a4:	e0bffb17 	ldw	r2,-20(fp)
  80b3a8:	e0fffe17 	ldw	r3,-8(fp)
  80b3ac:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80b3b0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80b3b4:	00000d06 	br	80b3ec <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80b3b8:	e0bffb17 	ldw	r2,-20(fp)
  80b3bc:	10c00117 	ldw	r3,4(r2)
  80b3c0:	00a00034 	movhi	r2,32768
  80b3c4:	10bfffc4 	addi	r2,r2,-1
  80b3c8:	18800826 	beq	r3,r2,80b3ec <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80b3cc:	e13ffd17 	ldw	r4,-12(fp)
  80b3d0:	e0bffb17 	ldw	r2,-20(fp)
  80b3d4:	10c00917 	ldw	r3,36(r2)
  80b3d8:	e0bffb17 	ldw	r2,-20(fp)
  80b3dc:	10800117 	ldw	r2,4(r2)
  80b3e0:	1885803a 	cmpltu	r2,r3,r2
  80b3e4:	20800015 	stw	r2,0(r4)
      rc = 0;
  80b3e8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80b3ec:	e0bffa17 	ldw	r2,-24(fp)
}
  80b3f0:	e037883a 	mov	sp,fp
  80b3f4:	df000017 	ldw	fp,0(sp)
  80b3f8:	dec00104 	addi	sp,sp,4
  80b3fc:	f800283a 	ret

0080b400 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80b400:	defff204 	addi	sp,sp,-56
  80b404:	dfc00d15 	stw	ra,52(sp)
  80b408:	df000c15 	stw	fp,48(sp)
  80b40c:	df000c04 	addi	fp,sp,48
  80b410:	e13ffb15 	stw	r4,-20(fp)
  80b414:	e17ffc15 	stw	r5,-16(fp)
  80b418:	e1bffd15 	stw	r6,-12(fp)
  80b41c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80b420:	e0bffc17 	ldw	r2,-16(fp)
  80b424:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b428:	00004806 	br	80b54c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80b42c:	e0bffb17 	ldw	r2,-20(fp)
  80b430:	10800a17 	ldw	r2,40(r2)
  80b434:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80b438:	e0bffb17 	ldw	r2,-20(fp)
  80b43c:	10800b17 	ldw	r2,44(r2)
  80b440:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80b444:	e0fff717 	ldw	r3,-36(fp)
  80b448:	e0bff617 	ldw	r2,-40(fp)
  80b44c:	18800536 	bltu	r3,r2,80b464 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80b450:	e0bff717 	ldw	r2,-36(fp)
  80b454:	e0fff617 	ldw	r3,-40(fp)
  80b458:	10c5c83a 	sub	r2,r2,r3
  80b45c:	e0bff815 	stw	r2,-32(fp)
  80b460:	00000406 	br	80b474 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80b464:	00820004 	movi	r2,2048
  80b468:	e0fff617 	ldw	r3,-40(fp)
  80b46c:	10c5c83a 	sub	r2,r2,r3
  80b470:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80b474:	e0bff817 	ldw	r2,-32(fp)
  80b478:	1005003a 	cmpeq	r2,r2,zero
  80b47c:	10001f1e 	bne	r2,zero,80b4fc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80b480:	e0fffd17 	ldw	r3,-12(fp)
  80b484:	e0bff817 	ldw	r2,-32(fp)
  80b488:	1880022e 	bgeu	r3,r2,80b494 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80b48c:	e0bffd17 	ldw	r2,-12(fp)
  80b490:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80b494:	e0bffb17 	ldw	r2,-20(fp)
  80b498:	10c00e04 	addi	r3,r2,56
  80b49c:	e0bff617 	ldw	r2,-40(fp)
  80b4a0:	1887883a 	add	r3,r3,r2
  80b4a4:	e0bffa17 	ldw	r2,-24(fp)
  80b4a8:	1009883a 	mov	r4,r2
  80b4ac:	180b883a 	mov	r5,r3
  80b4b0:	e1bff817 	ldw	r6,-32(fp)
  80b4b4:	08059980 	call	805998 <memcpy>
      ptr   += n;
  80b4b8:	e0fff817 	ldw	r3,-32(fp)
  80b4bc:	e0bffa17 	ldw	r2,-24(fp)
  80b4c0:	10c5883a 	add	r2,r2,r3
  80b4c4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80b4c8:	e0fffd17 	ldw	r3,-12(fp)
  80b4cc:	e0bff817 	ldw	r2,-32(fp)
  80b4d0:	1885c83a 	sub	r2,r3,r2
  80b4d4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b4d8:	e0fff617 	ldw	r3,-40(fp)
  80b4dc:	e0bff817 	ldw	r2,-32(fp)
  80b4e0:	1885883a 	add	r2,r3,r2
  80b4e4:	10c1ffcc 	andi	r3,r2,2047
  80b4e8:	e0bffb17 	ldw	r2,-20(fp)
  80b4ec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80b4f0:	e0bffd17 	ldw	r2,-12(fp)
  80b4f4:	10800048 	cmpgei	r2,r2,1
  80b4f8:	103fcc1e 	bne	r2,zero,80b42c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80b4fc:	e0fffa17 	ldw	r3,-24(fp)
  80b500:	e0bffc17 	ldw	r2,-16(fp)
  80b504:	1880141e 	bne	r3,r2,80b558 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80b508:	e0bffe17 	ldw	r2,-8(fp)
  80b50c:	1090000c 	andi	r2,r2,16384
  80b510:	1004c03a 	cmpne	r2,r2,zero
  80b514:	1000101e 	bne	r2,zero,80b558 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80b518:	e0bffb17 	ldw	r2,-20(fp)
  80b51c:	10c00a17 	ldw	r3,40(r2)
  80b520:	e0bff717 	ldw	r2,-36(fp)
  80b524:	1880051e 	bne	r3,r2,80b53c <altera_avalon_jtag_uart_read+0x13c>
  80b528:	e0bffb17 	ldw	r2,-20(fp)
  80b52c:	10c00917 	ldw	r3,36(r2)
  80b530:	e0bffb17 	ldw	r2,-20(fp)
  80b534:	10800117 	ldw	r2,4(r2)
  80b538:	18bff736 	bltu	r3,r2,80b518 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80b53c:	e0bffb17 	ldw	r2,-20(fp)
  80b540:	10c00a17 	ldw	r3,40(r2)
  80b544:	e0bff717 	ldw	r2,-36(fp)
  80b548:	18800326 	beq	r3,r2,80b558 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b54c:	e0bffd17 	ldw	r2,-12(fp)
  80b550:	10800048 	cmpgei	r2,r2,1
  80b554:	103fb51e 	bne	r2,zero,80b42c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80b558:	e0fffa17 	ldw	r3,-24(fp)
  80b55c:	e0bffc17 	ldw	r2,-16(fp)
  80b560:	18801926 	beq	r3,r2,80b5c8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b564:	0005303a 	rdctl	r2,status
  80b568:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b56c:	e0fff517 	ldw	r3,-44(fp)
  80b570:	00bfff84 	movi	r2,-2
  80b574:	1884703a 	and	r2,r3,r2
  80b578:	1001703a 	wrctl	status,r2
  
  return context;
  80b57c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80b580:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b584:	e0bffb17 	ldw	r2,-20(fp)
  80b588:	10800817 	ldw	r2,32(r2)
  80b58c:	10c00054 	ori	r3,r2,1
  80b590:	e0bffb17 	ldw	r2,-20(fp)
  80b594:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b598:	e0bffb17 	ldw	r2,-20(fp)
  80b59c:	10800017 	ldw	r2,0(r2)
  80b5a0:	11000104 	addi	r4,r2,4
  80b5a4:	e0bffb17 	ldw	r2,-20(fp)
  80b5a8:	10800817 	ldw	r2,32(r2)
  80b5ac:	1007883a 	mov	r3,r2
  80b5b0:	2005883a 	mov	r2,r4
  80b5b4:	10c00035 	stwio	r3,0(r2)
  80b5b8:	e0bff917 	ldw	r2,-28(fp)
  80b5bc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b5c0:	e0bff417 	ldw	r2,-48(fp)
  80b5c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80b5c8:	e0fffa17 	ldw	r3,-24(fp)
  80b5cc:	e0bffc17 	ldw	r2,-16(fp)
  80b5d0:	18800526 	beq	r3,r2,80b5e8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80b5d4:	e0fffa17 	ldw	r3,-24(fp)
  80b5d8:	e0bffc17 	ldw	r2,-16(fp)
  80b5dc:	1887c83a 	sub	r3,r3,r2
  80b5e0:	e0ffff15 	stw	r3,-4(fp)
  80b5e4:	00000906 	br	80b60c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80b5e8:	e0bffe17 	ldw	r2,-8(fp)
  80b5ec:	1090000c 	andi	r2,r2,16384
  80b5f0:	1005003a 	cmpeq	r2,r2,zero
  80b5f4:	1000031e 	bne	r2,zero,80b604 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80b5f8:	00bffd44 	movi	r2,-11
  80b5fc:	e0bfff15 	stw	r2,-4(fp)
  80b600:	00000206 	br	80b60c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80b604:	00bffec4 	movi	r2,-5
  80b608:	e0bfff15 	stw	r2,-4(fp)
  80b60c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b610:	e037883a 	mov	sp,fp
  80b614:	dfc00117 	ldw	ra,4(sp)
  80b618:	df000017 	ldw	fp,0(sp)
  80b61c:	dec00204 	addi	sp,sp,8
  80b620:	f800283a 	ret

0080b624 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80b624:	defff204 	addi	sp,sp,-56
  80b628:	dfc00d15 	stw	ra,52(sp)
  80b62c:	df000c15 	stw	fp,48(sp)
  80b630:	df000c04 	addi	fp,sp,48
  80b634:	e13ffb15 	stw	r4,-20(fp)
  80b638:	e17ffc15 	stw	r5,-16(fp)
  80b63c:	e1bffd15 	stw	r6,-12(fp)
  80b640:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80b644:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80b648:	e0bffc17 	ldw	r2,-16(fp)
  80b64c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80b650:	00003a06 	br	80b73c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80b654:	e0bffb17 	ldw	r2,-20(fp)
  80b658:	10800c17 	ldw	r2,48(r2)
  80b65c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80b660:	e0bffb17 	ldw	r2,-20(fp)
  80b664:	10800d17 	ldw	r2,52(r2)
  80b668:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80b66c:	e0fffa17 	ldw	r3,-24(fp)
  80b670:	e0bff917 	ldw	r2,-28(fp)
  80b674:	1880062e 	bgeu	r3,r2,80b690 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80b678:	e0fff917 	ldw	r3,-28(fp)
  80b67c:	e0bffa17 	ldw	r2,-24(fp)
  80b680:	1885c83a 	sub	r2,r3,r2
  80b684:	10bfffc4 	addi	r2,r2,-1
  80b688:	e0bff815 	stw	r2,-32(fp)
  80b68c:	00000c06 	br	80b6c0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80b690:	e0bff917 	ldw	r2,-28(fp)
  80b694:	1005003a 	cmpeq	r2,r2,zero
  80b698:	1000051e 	bne	r2,zero,80b6b0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80b69c:	00820004 	movi	r2,2048
  80b6a0:	e0fffa17 	ldw	r3,-24(fp)
  80b6a4:	10c5c83a 	sub	r2,r2,r3
  80b6a8:	e0bff815 	stw	r2,-32(fp)
  80b6ac:	00000406 	br	80b6c0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80b6b0:	0081ffc4 	movi	r2,2047
  80b6b4:	e0fffa17 	ldw	r3,-24(fp)
  80b6b8:	10c5c83a 	sub	r2,r2,r3
  80b6bc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80b6c0:	e0bff817 	ldw	r2,-32(fp)
  80b6c4:	1005003a 	cmpeq	r2,r2,zero
  80b6c8:	10001f1e 	bne	r2,zero,80b748 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80b6cc:	e0fffd17 	ldw	r3,-12(fp)
  80b6d0:	e0bff817 	ldw	r2,-32(fp)
  80b6d4:	1880022e 	bgeu	r3,r2,80b6e0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80b6d8:	e0bffd17 	ldw	r2,-12(fp)
  80b6dc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80b6e0:	e0bffb17 	ldw	r2,-20(fp)
  80b6e4:	10c20e04 	addi	r3,r2,2104
  80b6e8:	e0bffa17 	ldw	r2,-24(fp)
  80b6ec:	1885883a 	add	r2,r3,r2
  80b6f0:	e0fffc17 	ldw	r3,-16(fp)
  80b6f4:	1009883a 	mov	r4,r2
  80b6f8:	180b883a 	mov	r5,r3
  80b6fc:	e1bff817 	ldw	r6,-32(fp)
  80b700:	08059980 	call	805998 <memcpy>
      ptr   += n;
  80b704:	e0fff817 	ldw	r3,-32(fp)
  80b708:	e0bffc17 	ldw	r2,-16(fp)
  80b70c:	10c5883a 	add	r2,r2,r3
  80b710:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80b714:	e0fffd17 	ldw	r3,-12(fp)
  80b718:	e0bff817 	ldw	r2,-32(fp)
  80b71c:	1885c83a 	sub	r2,r3,r2
  80b720:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b724:	e0fffa17 	ldw	r3,-24(fp)
  80b728:	e0bff817 	ldw	r2,-32(fp)
  80b72c:	1885883a 	add	r2,r3,r2
  80b730:	10c1ffcc 	andi	r3,r2,2047
  80b734:	e0bffb17 	ldw	r2,-20(fp)
  80b738:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80b73c:	e0bffd17 	ldw	r2,-12(fp)
  80b740:	10800048 	cmpgei	r2,r2,1
  80b744:	103fc31e 	bne	r2,zero,80b654 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b748:	0005303a 	rdctl	r2,status
  80b74c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b750:	e0fff517 	ldw	r3,-44(fp)
  80b754:	00bfff84 	movi	r2,-2
  80b758:	1884703a 	and	r2,r3,r2
  80b75c:	1001703a 	wrctl	status,r2
  
  return context;
  80b760:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80b764:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b768:	e0bffb17 	ldw	r2,-20(fp)
  80b76c:	10800817 	ldw	r2,32(r2)
  80b770:	10c00094 	ori	r3,r2,2
  80b774:	e0bffb17 	ldw	r2,-20(fp)
  80b778:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b77c:	e0bffb17 	ldw	r2,-20(fp)
  80b780:	10800017 	ldw	r2,0(r2)
  80b784:	11000104 	addi	r4,r2,4
  80b788:	e0bffb17 	ldw	r2,-20(fp)
  80b78c:	10800817 	ldw	r2,32(r2)
  80b790:	1007883a 	mov	r3,r2
  80b794:	2005883a 	mov	r2,r4
  80b798:	10c00035 	stwio	r3,0(r2)
  80b79c:	e0bff717 	ldw	r2,-36(fp)
  80b7a0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b7a4:	e0bff417 	ldw	r2,-48(fp)
  80b7a8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80b7ac:	e0bffd17 	ldw	r2,-12(fp)
  80b7b0:	10800050 	cmplti	r2,r2,1
  80b7b4:	1000111e 	bne	r2,zero,80b7fc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80b7b8:	e0bffe17 	ldw	r2,-8(fp)
  80b7bc:	1090000c 	andi	r2,r2,16384
  80b7c0:	1004c03a 	cmpne	r2,r2,zero
  80b7c4:	1000101e 	bne	r2,zero,80b808 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80b7c8:	e0bffb17 	ldw	r2,-20(fp)
  80b7cc:	10c00d17 	ldw	r3,52(r2)
  80b7d0:	e0bff917 	ldw	r2,-28(fp)
  80b7d4:	1880051e 	bne	r3,r2,80b7ec <altera_avalon_jtag_uart_write+0x1c8>
  80b7d8:	e0bffb17 	ldw	r2,-20(fp)
  80b7dc:	10c00917 	ldw	r3,36(r2)
  80b7e0:	e0bffb17 	ldw	r2,-20(fp)
  80b7e4:	10800117 	ldw	r2,4(r2)
  80b7e8:	18bff736 	bltu	r3,r2,80b7c8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80b7ec:	e0bffb17 	ldw	r2,-20(fp)
  80b7f0:	10c00d17 	ldw	r3,52(r2)
  80b7f4:	e0bff917 	ldw	r2,-28(fp)
  80b7f8:	18800326 	beq	r3,r2,80b808 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  80b7fc:	e0bffd17 	ldw	r2,-12(fp)
  80b800:	10800048 	cmpgei	r2,r2,1
  80b804:	103fcd1e 	bne	r2,zero,80b73c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80b808:	e0fffc17 	ldw	r3,-16(fp)
  80b80c:	e0bff617 	ldw	r2,-40(fp)
  80b810:	18800526 	beq	r3,r2,80b828 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80b814:	e0fffc17 	ldw	r3,-16(fp)
  80b818:	e0bff617 	ldw	r2,-40(fp)
  80b81c:	1887c83a 	sub	r3,r3,r2
  80b820:	e0ffff15 	stw	r3,-4(fp)
  80b824:	00000906 	br	80b84c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80b828:	e0bffe17 	ldw	r2,-8(fp)
  80b82c:	1090000c 	andi	r2,r2,16384
  80b830:	1005003a 	cmpeq	r2,r2,zero
  80b834:	1000031e 	bne	r2,zero,80b844 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80b838:	00bffd44 	movi	r2,-11
  80b83c:	e0bfff15 	stw	r2,-4(fp)
  80b840:	00000206 	br	80b84c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80b844:	00bffec4 	movi	r2,-5
  80b848:	e0bfff15 	stw	r2,-4(fp)
  80b84c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b850:	e037883a 	mov	sp,fp
  80b854:	dfc00117 	ldw	ra,4(sp)
  80b858:	df000017 	ldw	fp,0(sp)
  80b85c:	dec00204 	addi	sp,sp,8
  80b860:	f800283a 	ret

0080b864 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80b864:	defff404 	addi	sp,sp,-48
  80b868:	df000b15 	stw	fp,44(sp)
  80b86c:	df000b04 	addi	fp,sp,44
  80b870:	e13ffb15 	stw	r4,-20(fp)
  80b874:	e17ffc15 	stw	r5,-16(fp)
  80b878:	e1bffd15 	stw	r6,-12(fp)
  80b87c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80b880:	e03ff915 	stw	zero,-28(fp)
  80b884:	00802074 	movhi	r2,129
  80b888:	10814304 	addi	r2,r2,1292
  80b88c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80b890:	1005003a 	cmpeq	r2,r2,zero
  80b894:	1000411e 	bne	r2,zero,80b99c <alt_alarm_start+0x138>
  {
    if (alarm)
  80b898:	e0bffb17 	ldw	r2,-20(fp)
  80b89c:	1005003a 	cmpeq	r2,r2,zero
  80b8a0:	10003b1e 	bne	r2,zero,80b990 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80b8a4:	e0fffb17 	ldw	r3,-20(fp)
  80b8a8:	e0bffd17 	ldw	r2,-12(fp)
  80b8ac:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80b8b0:	e0fffb17 	ldw	r3,-20(fp)
  80b8b4:	e0bffe17 	ldw	r2,-8(fp)
  80b8b8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b8bc:	0005303a 	rdctl	r2,status
  80b8c0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b8c4:	e0fff817 	ldw	r3,-32(fp)
  80b8c8:	00bfff84 	movi	r2,-2
  80b8cc:	1884703a 	and	r2,r3,r2
  80b8d0:	1001703a 	wrctl	status,r2
  
  return context;
  80b8d4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80b8d8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80b8dc:	00802074 	movhi	r2,129
  80b8e0:	10814404 	addi	r2,r2,1296
  80b8e4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80b8e8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80b8ec:	e0fffc17 	ldw	r3,-16(fp)
  80b8f0:	e0bff917 	ldw	r2,-28(fp)
  80b8f4:	1885883a 	add	r2,r3,r2
  80b8f8:	10c00044 	addi	r3,r2,1
  80b8fc:	e0bffb17 	ldw	r2,-20(fp)
  80b900:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80b904:	e0bffb17 	ldw	r2,-20(fp)
  80b908:	10c00217 	ldw	r3,8(r2)
  80b90c:	e0bff917 	ldw	r2,-28(fp)
  80b910:	1880042e 	bgeu	r3,r2,80b924 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80b914:	e0fffb17 	ldw	r3,-20(fp)
  80b918:	00800044 	movi	r2,1
  80b91c:	18800405 	stb	r2,16(r3)
  80b920:	00000206 	br	80b92c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80b924:	e0bffb17 	ldw	r2,-20(fp)
  80b928:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80b92c:	e0fffb17 	ldw	r3,-20(fp)
  80b930:	00802074 	movhi	r2,129
  80b934:	10ba7e04 	addi	r2,r2,-5640
  80b938:	e0bff615 	stw	r2,-40(fp)
  80b93c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80b940:	e0fff717 	ldw	r3,-36(fp)
  80b944:	e0bff617 	ldw	r2,-40(fp)
  80b948:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80b94c:	e0bff617 	ldw	r2,-40(fp)
  80b950:	10c00017 	ldw	r3,0(r2)
  80b954:	e0bff717 	ldw	r2,-36(fp)
  80b958:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80b95c:	e0bff617 	ldw	r2,-40(fp)
  80b960:	10c00017 	ldw	r3,0(r2)
  80b964:	e0bff717 	ldw	r2,-36(fp)
  80b968:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80b96c:	e0fff617 	ldw	r3,-40(fp)
  80b970:	e0bff717 	ldw	r2,-36(fp)
  80b974:	18800015 	stw	r2,0(r3)
  80b978:	e0bffa17 	ldw	r2,-24(fp)
  80b97c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b980:	e0bff517 	ldw	r2,-44(fp)
  80b984:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80b988:	e03fff15 	stw	zero,-4(fp)
  80b98c:	00000506 	br	80b9a4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80b990:	00bffa84 	movi	r2,-22
  80b994:	e0bfff15 	stw	r2,-4(fp)
  80b998:	00000206 	br	80b9a4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80b99c:	00bfde84 	movi	r2,-134
  80b9a0:	e0bfff15 	stw	r2,-4(fp)
  80b9a4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80b9a8:	e037883a 	mov	sp,fp
  80b9ac:	df000017 	ldw	fp,0(sp)
  80b9b0:	dec00104 	addi	sp,sp,4
  80b9b4:	f800283a 	ret

0080b9b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80b9b8:	deffff04 	addi	sp,sp,-4
  80b9bc:	df000015 	stw	fp,0(sp)
  80b9c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80b9c4:	e037883a 	mov	sp,fp
  80b9c8:	df000017 	ldw	fp,0(sp)
  80b9cc:	dec00104 	addi	sp,sp,4
  80b9d0:	f800283a 	ret

0080b9d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80b9d4:	defff904 	addi	sp,sp,-28
  80b9d8:	dfc00615 	stw	ra,24(sp)
  80b9dc:	df000515 	stw	fp,20(sp)
  80b9e0:	df000504 	addi	fp,sp,20
  80b9e4:	e13ffd15 	stw	r4,-12(fp)
  80b9e8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80b9ec:	e0bffd17 	ldw	r2,-12(fp)
  80b9f0:	1005003a 	cmpeq	r2,r2,zero
  80b9f4:	1000041e 	bne	r2,zero,80ba08 <alt_dev_llist_insert+0x34>
  80b9f8:	e0bffd17 	ldw	r2,-12(fp)
  80b9fc:	10800217 	ldw	r2,8(r2)
  80ba00:	1004c03a 	cmpne	r2,r2,zero
  80ba04:	1000071e 	bne	r2,zero,80ba24 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80ba08:	080ba880 	call	80ba88 <alt_get_errno>
  80ba0c:	1007883a 	mov	r3,r2
  80ba10:	00800584 	movi	r2,22
  80ba14:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80ba18:	00bffa84 	movi	r2,-22
  80ba1c:	e0bfff15 	stw	r2,-4(fp)
  80ba20:	00001306 	br	80ba70 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80ba24:	e0fffd17 	ldw	r3,-12(fp)
  80ba28:	e0bffe17 	ldw	r2,-8(fp)
  80ba2c:	e0bffb15 	stw	r2,-20(fp)
  80ba30:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ba34:	e0fffc17 	ldw	r3,-16(fp)
  80ba38:	e0bffb17 	ldw	r2,-20(fp)
  80ba3c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80ba40:	e0bffb17 	ldw	r2,-20(fp)
  80ba44:	10c00017 	ldw	r3,0(r2)
  80ba48:	e0bffc17 	ldw	r2,-16(fp)
  80ba4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ba50:	e0bffb17 	ldw	r2,-20(fp)
  80ba54:	10c00017 	ldw	r3,0(r2)
  80ba58:	e0bffc17 	ldw	r2,-16(fp)
  80ba5c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80ba60:	e0fffb17 	ldw	r3,-20(fp)
  80ba64:	e0bffc17 	ldw	r2,-16(fp)
  80ba68:	18800015 	stw	r2,0(r3)

  return 0;  
  80ba6c:	e03fff15 	stw	zero,-4(fp)
  80ba70:	e0bfff17 	ldw	r2,-4(fp)
}
  80ba74:	e037883a 	mov	sp,fp
  80ba78:	dfc00117 	ldw	ra,4(sp)
  80ba7c:	df000017 	ldw	fp,0(sp)
  80ba80:	dec00204 	addi	sp,sp,8
  80ba84:	f800283a 	ret

0080ba88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ba88:	defffd04 	addi	sp,sp,-12
  80ba8c:	dfc00215 	stw	ra,8(sp)
  80ba90:	df000115 	stw	fp,4(sp)
  80ba94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ba98:	00802074 	movhi	r2,129
  80ba9c:	10ba7b04 	addi	r2,r2,-5652
  80baa0:	10800017 	ldw	r2,0(r2)
  80baa4:	1005003a 	cmpeq	r2,r2,zero
  80baa8:	1000061e 	bne	r2,zero,80bac4 <alt_get_errno+0x3c>
  80baac:	00802074 	movhi	r2,129
  80bab0:	10ba7b04 	addi	r2,r2,-5652
  80bab4:	10800017 	ldw	r2,0(r2)
  80bab8:	103ee83a 	callr	r2
  80babc:	e0bfff15 	stw	r2,-4(fp)
  80bac0:	00000306 	br	80bad0 <alt_get_errno+0x48>
  80bac4:	00802074 	movhi	r2,129
  80bac8:	10813e04 	addi	r2,r2,1272
  80bacc:	e0bfff15 	stw	r2,-4(fp)
  80bad0:	e0bfff17 	ldw	r2,-4(fp)
}
  80bad4:	e037883a 	mov	sp,fp
  80bad8:	dfc00117 	ldw	ra,4(sp)
  80badc:	df000017 	ldw	fp,0(sp)
  80bae0:	dec00204 	addi	sp,sp,8
  80bae4:	f800283a 	ret

0080bae8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80bae8:	defffd04 	addi	sp,sp,-12
  80baec:	dfc00215 	stw	ra,8(sp)
  80baf0:	df000115 	stw	fp,4(sp)
  80baf4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80baf8:	00bfff04 	movi	r2,-4
  80bafc:	00c02074 	movhi	r3,129
  80bb00:	18f2c804 	addi	r3,r3,-13536
  80bb04:	1885883a 	add	r2,r3,r2
  80bb08:	e0bfff15 	stw	r2,-4(fp)
  80bb0c:	00000606 	br	80bb28 <_do_ctors+0x40>
        (*ctor) (); 
  80bb10:	e0bfff17 	ldw	r2,-4(fp)
  80bb14:	10800017 	ldw	r2,0(r2)
  80bb18:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80bb1c:	e0bfff17 	ldw	r2,-4(fp)
  80bb20:	10bfff04 	addi	r2,r2,-4
  80bb24:	e0bfff15 	stw	r2,-4(fp)
  80bb28:	e0ffff17 	ldw	r3,-4(fp)
  80bb2c:	00802074 	movhi	r2,129
  80bb30:	10b2c704 	addi	r2,r2,-13540
  80bb34:	18bff62e 	bgeu	r3,r2,80bb10 <_do_ctors+0x28>
        (*ctor) (); 
}
  80bb38:	e037883a 	mov	sp,fp
  80bb3c:	dfc00117 	ldw	ra,4(sp)
  80bb40:	df000017 	ldw	fp,0(sp)
  80bb44:	dec00204 	addi	sp,sp,8
  80bb48:	f800283a 	ret

0080bb4c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80bb4c:	defffd04 	addi	sp,sp,-12
  80bb50:	dfc00215 	stw	ra,8(sp)
  80bb54:	df000115 	stw	fp,4(sp)
  80bb58:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80bb5c:	00bfff04 	movi	r2,-4
  80bb60:	00c02074 	movhi	r3,129
  80bb64:	18f2c804 	addi	r3,r3,-13536
  80bb68:	1885883a 	add	r2,r3,r2
  80bb6c:	e0bfff15 	stw	r2,-4(fp)
  80bb70:	00000606 	br	80bb8c <_do_dtors+0x40>
        (*dtor) (); 
  80bb74:	e0bfff17 	ldw	r2,-4(fp)
  80bb78:	10800017 	ldw	r2,0(r2)
  80bb7c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80bb80:	e0bfff17 	ldw	r2,-4(fp)
  80bb84:	10bfff04 	addi	r2,r2,-4
  80bb88:	e0bfff15 	stw	r2,-4(fp)
  80bb8c:	e0ffff17 	ldw	r3,-4(fp)
  80bb90:	00802074 	movhi	r2,129
  80bb94:	10b2c804 	addi	r2,r2,-13536
  80bb98:	18bff62e 	bgeu	r3,r2,80bb74 <_do_dtors+0x28>
        (*dtor) (); 
}
  80bb9c:	e037883a 	mov	sp,fp
  80bba0:	dfc00117 	ldw	ra,4(sp)
  80bba4:	df000017 	ldw	fp,0(sp)
  80bba8:	dec00204 	addi	sp,sp,8
  80bbac:	f800283a 	ret

0080bbb0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80bbb0:	deffff04 	addi	sp,sp,-4
  80bbb4:	df000015 	stw	fp,0(sp)
  80bbb8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  80bbbc:	e037883a 	mov	sp,fp
  80bbc0:	df000017 	ldw	fp,0(sp)
  80bbc4:	dec00104 	addi	sp,sp,4
  80bbc8:	f800283a 	ret

0080bbcc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80bbcc:	defff904 	addi	sp,sp,-28
  80bbd0:	dfc00615 	stw	ra,24(sp)
  80bbd4:	df000515 	stw	fp,20(sp)
  80bbd8:	df000504 	addi	fp,sp,20
  80bbdc:	e13ffc15 	stw	r4,-16(fp)
  80bbe0:	e17ffd15 	stw	r5,-12(fp)
  80bbe4:	e1bffe15 	stw	r6,-8(fp)
  80bbe8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80bbec:	e0800217 	ldw	r2,8(fp)
  80bbf0:	d8800015 	stw	r2,0(sp)
  80bbf4:	e13ffc17 	ldw	r4,-16(fp)
  80bbf8:	e17ffd17 	ldw	r5,-12(fp)
  80bbfc:	e1bffe17 	ldw	r6,-8(fp)
  80bc00:	e1ffff17 	ldw	r7,-4(fp)
  80bc04:	080bda00 	call	80bda0 <alt_iic_isr_register>
}  
  80bc08:	e037883a 	mov	sp,fp
  80bc0c:	dfc00117 	ldw	ra,4(sp)
  80bc10:	df000017 	ldw	fp,0(sp)
  80bc14:	dec00204 	addi	sp,sp,8
  80bc18:	f800283a 	ret

0080bc1c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80bc1c:	defff904 	addi	sp,sp,-28
  80bc20:	df000615 	stw	fp,24(sp)
  80bc24:	df000604 	addi	fp,sp,24
  80bc28:	e13ffe15 	stw	r4,-8(fp)
  80bc2c:	e17fff15 	stw	r5,-4(fp)
  80bc30:	e0bfff17 	ldw	r2,-4(fp)
  80bc34:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bc38:	0005303a 	rdctl	r2,status
  80bc3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bc40:	e0fffb17 	ldw	r3,-20(fp)
  80bc44:	00bfff84 	movi	r2,-2
  80bc48:	1884703a 	and	r2,r3,r2
  80bc4c:	1001703a 	wrctl	status,r2
  
  return context;
  80bc50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80bc54:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80bc58:	e0fffc17 	ldw	r3,-16(fp)
  80bc5c:	00800044 	movi	r2,1
  80bc60:	10c4983a 	sll	r2,r2,r3
  80bc64:	1007883a 	mov	r3,r2
  80bc68:	00802074 	movhi	r2,129
  80bc6c:	10814204 	addi	r2,r2,1288
  80bc70:	10800017 	ldw	r2,0(r2)
  80bc74:	1886b03a 	or	r3,r3,r2
  80bc78:	00802074 	movhi	r2,129
  80bc7c:	10814204 	addi	r2,r2,1288
  80bc80:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80bc84:	00802074 	movhi	r2,129
  80bc88:	10814204 	addi	r2,r2,1288
  80bc8c:	10800017 	ldw	r2,0(r2)
  80bc90:	100170fa 	wrctl	ienable,r2
  80bc94:	e0bffd17 	ldw	r2,-12(fp)
  80bc98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bc9c:	e0bffa17 	ldw	r2,-24(fp)
  80bca0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80bca4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80bca8:	e037883a 	mov	sp,fp
  80bcac:	df000017 	ldw	fp,0(sp)
  80bcb0:	dec00104 	addi	sp,sp,4
  80bcb4:	f800283a 	ret

0080bcb8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80bcb8:	defff904 	addi	sp,sp,-28
  80bcbc:	df000615 	stw	fp,24(sp)
  80bcc0:	df000604 	addi	fp,sp,24
  80bcc4:	e13ffe15 	stw	r4,-8(fp)
  80bcc8:	e17fff15 	stw	r5,-4(fp)
  80bccc:	e0bfff17 	ldw	r2,-4(fp)
  80bcd0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bcd4:	0005303a 	rdctl	r2,status
  80bcd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bcdc:	e0fffb17 	ldw	r3,-20(fp)
  80bce0:	00bfff84 	movi	r2,-2
  80bce4:	1884703a 	and	r2,r3,r2
  80bce8:	1001703a 	wrctl	status,r2
  
  return context;
  80bcec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80bcf0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80bcf4:	e0fffc17 	ldw	r3,-16(fp)
  80bcf8:	00800044 	movi	r2,1
  80bcfc:	10c4983a 	sll	r2,r2,r3
  80bd00:	0084303a 	nor	r2,zero,r2
  80bd04:	1007883a 	mov	r3,r2
  80bd08:	00802074 	movhi	r2,129
  80bd0c:	10814204 	addi	r2,r2,1288
  80bd10:	10800017 	ldw	r2,0(r2)
  80bd14:	1886703a 	and	r3,r3,r2
  80bd18:	00802074 	movhi	r2,129
  80bd1c:	10814204 	addi	r2,r2,1288
  80bd20:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80bd24:	00802074 	movhi	r2,129
  80bd28:	10814204 	addi	r2,r2,1288
  80bd2c:	10800017 	ldw	r2,0(r2)
  80bd30:	100170fa 	wrctl	ienable,r2
  80bd34:	e0bffd17 	ldw	r2,-12(fp)
  80bd38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bd3c:	e0bffa17 	ldw	r2,-24(fp)
  80bd40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80bd44:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80bd48:	e037883a 	mov	sp,fp
  80bd4c:	df000017 	ldw	fp,0(sp)
  80bd50:	dec00104 	addi	sp,sp,4
  80bd54:	f800283a 	ret

0080bd58 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80bd58:	defffc04 	addi	sp,sp,-16
  80bd5c:	df000315 	stw	fp,12(sp)
  80bd60:	df000304 	addi	fp,sp,12
  80bd64:	e13ffe15 	stw	r4,-8(fp)
  80bd68:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80bd6c:	000530fa 	rdctl	r2,ienable
  80bd70:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80bd74:	e0ffff17 	ldw	r3,-4(fp)
  80bd78:	00800044 	movi	r2,1
  80bd7c:	10c4983a 	sll	r2,r2,r3
  80bd80:	1007883a 	mov	r3,r2
  80bd84:	e0bffd17 	ldw	r2,-12(fp)
  80bd88:	1884703a 	and	r2,r3,r2
  80bd8c:	1004c03a 	cmpne	r2,r2,zero
}
  80bd90:	e037883a 	mov	sp,fp
  80bd94:	df000017 	ldw	fp,0(sp)
  80bd98:	dec00104 	addi	sp,sp,4
  80bd9c:	f800283a 	ret

0080bda0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80bda0:	defff404 	addi	sp,sp,-48
  80bda4:	dfc00b15 	stw	ra,44(sp)
  80bda8:	df000a15 	stw	fp,40(sp)
  80bdac:	df000a04 	addi	fp,sp,40
  80bdb0:	e13ffb15 	stw	r4,-20(fp)
  80bdb4:	e17ffc15 	stw	r5,-16(fp)
  80bdb8:	e1bffd15 	stw	r6,-12(fp)
  80bdbc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80bdc0:	00bffa84 	movi	r2,-22
  80bdc4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80bdc8:	e0bffc17 	ldw	r2,-16(fp)
  80bdcc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80bdd0:	e0bff917 	ldw	r2,-28(fp)
  80bdd4:	10800808 	cmpgei	r2,r2,32
  80bdd8:	1000291e 	bne	r2,zero,80be80 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bddc:	0005303a 	rdctl	r2,status
  80bde0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bde4:	e0fff717 	ldw	r3,-36(fp)
  80bde8:	00bfff84 	movi	r2,-2
  80bdec:	1884703a 	and	r2,r3,r2
  80bdf0:	1001703a 	wrctl	status,r2
  
  return context;
  80bdf4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80bdf8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80bdfc:	e0bff917 	ldw	r2,-28(fp)
  80be00:	00c02074 	movhi	r3,129
  80be04:	18c14f04 	addi	r3,r3,1340
  80be08:	100490fa 	slli	r2,r2,3
  80be0c:	10c7883a 	add	r3,r2,r3
  80be10:	e0bffd17 	ldw	r2,-12(fp)
  80be14:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80be18:	e0bff917 	ldw	r2,-28(fp)
  80be1c:	00c02074 	movhi	r3,129
  80be20:	18c14f04 	addi	r3,r3,1340
  80be24:	100490fa 	slli	r2,r2,3
  80be28:	10c5883a 	add	r2,r2,r3
  80be2c:	10c00104 	addi	r3,r2,4
  80be30:	e0bffe17 	ldw	r2,-8(fp)
  80be34:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80be38:	e0bffd17 	ldw	r2,-12(fp)
  80be3c:	1005003a 	cmpeq	r2,r2,zero
  80be40:	1000051e 	bne	r2,zero,80be58 <alt_iic_isr_register+0xb8>
  80be44:	e17ff917 	ldw	r5,-28(fp)
  80be48:	e13ffb17 	ldw	r4,-20(fp)
  80be4c:	080bc1c0 	call	80bc1c <alt_ic_irq_enable>
  80be50:	e0bfff15 	stw	r2,-4(fp)
  80be54:	00000406 	br	80be68 <alt_iic_isr_register+0xc8>
  80be58:	e17ff917 	ldw	r5,-28(fp)
  80be5c:	e13ffb17 	ldw	r4,-20(fp)
  80be60:	080bcb80 	call	80bcb8 <alt_ic_irq_disable>
  80be64:	e0bfff15 	stw	r2,-4(fp)
  80be68:	e0bfff17 	ldw	r2,-4(fp)
  80be6c:	e0bffa15 	stw	r2,-24(fp)
  80be70:	e0bff817 	ldw	r2,-32(fp)
  80be74:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80be78:	e0bff617 	ldw	r2,-40(fp)
  80be7c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80be80:	e0bffa17 	ldw	r2,-24(fp)
}
  80be84:	e037883a 	mov	sp,fp
  80be88:	dfc00117 	ldw	ra,4(sp)
  80be8c:	df000017 	ldw	fp,0(sp)
  80be90:	dec00204 	addi	sp,sp,8
  80be94:	f800283a 	ret

0080be98 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80be98:	defff804 	addi	sp,sp,-32
  80be9c:	dfc00715 	stw	ra,28(sp)
  80bea0:	df000615 	stw	fp,24(sp)
  80bea4:	dc000515 	stw	r16,20(sp)
  80bea8:	df000504 	addi	fp,sp,20
  80beac:	e13ffc15 	stw	r4,-16(fp)
  80beb0:	e17ffd15 	stw	r5,-12(fp)
  80beb4:	e1bffe15 	stw	r6,-8(fp)
  80beb8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80bebc:	e13ffd17 	ldw	r4,-12(fp)
  80bec0:	e17ffe17 	ldw	r5,-8(fp)
  80bec4:	e1bfff17 	ldw	r6,-4(fp)
  80bec8:	080c0e00 	call	80c0e0 <open>
  80becc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80bed0:	e0bffb17 	ldw	r2,-20(fp)
  80bed4:	1004803a 	cmplt	r2,r2,zero
  80bed8:	10001f1e 	bne	r2,zero,80bf58 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80bedc:	e13ffb17 	ldw	r4,-20(fp)
  80bee0:	04002074 	movhi	r16,129
  80bee4:	8435d704 	addi	r16,r16,-10404
  80bee8:	01400304 	movi	r5,12
  80beec:	08099040 	call	809904 <__mulsi3>
  80bef0:	1405883a 	add	r2,r2,r16
  80bef4:	10c00017 	ldw	r3,0(r2)
  80bef8:	e0bffc17 	ldw	r2,-16(fp)
  80befc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80bf00:	e13ffb17 	ldw	r4,-20(fp)
  80bf04:	04002074 	movhi	r16,129
  80bf08:	8435d704 	addi	r16,r16,-10404
  80bf0c:	01400304 	movi	r5,12
  80bf10:	08099040 	call	809904 <__mulsi3>
  80bf14:	1405883a 	add	r2,r2,r16
  80bf18:	10800104 	addi	r2,r2,4
  80bf1c:	10c00017 	ldw	r3,0(r2)
  80bf20:	e0bffc17 	ldw	r2,-16(fp)
  80bf24:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80bf28:	e13ffb17 	ldw	r4,-20(fp)
  80bf2c:	04002074 	movhi	r16,129
  80bf30:	8435d704 	addi	r16,r16,-10404
  80bf34:	01400304 	movi	r5,12
  80bf38:	08099040 	call	809904 <__mulsi3>
  80bf3c:	1405883a 	add	r2,r2,r16
  80bf40:	10800204 	addi	r2,r2,8
  80bf44:	10c00017 	ldw	r3,0(r2)
  80bf48:	e0bffc17 	ldw	r2,-16(fp)
  80bf4c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80bf50:	e13ffb17 	ldw	r4,-20(fp)
  80bf54:	080a84c0 	call	80a84c <alt_release_fd>
  }
} 
  80bf58:	e037883a 	mov	sp,fp
  80bf5c:	dfc00217 	ldw	ra,8(sp)
  80bf60:	df000117 	ldw	fp,4(sp)
  80bf64:	dc000017 	ldw	r16,0(sp)
  80bf68:	dec00304 	addi	sp,sp,12
  80bf6c:	f800283a 	ret

0080bf70 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80bf70:	defffb04 	addi	sp,sp,-20
  80bf74:	dfc00415 	stw	ra,16(sp)
  80bf78:	df000315 	stw	fp,12(sp)
  80bf7c:	df000304 	addi	fp,sp,12
  80bf80:	e13ffd15 	stw	r4,-12(fp)
  80bf84:	e17ffe15 	stw	r5,-8(fp)
  80bf88:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80bf8c:	01002074 	movhi	r4,129
  80bf90:	2135da04 	addi	r4,r4,-10392
  80bf94:	e17ffd17 	ldw	r5,-12(fp)
  80bf98:	01800044 	movi	r6,1
  80bf9c:	01c07fc4 	movi	r7,511
  80bfa0:	080be980 	call	80be98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80bfa4:	01002074 	movhi	r4,129
  80bfa8:	2135d704 	addi	r4,r4,-10404
  80bfac:	e17ffe17 	ldw	r5,-8(fp)
  80bfb0:	000d883a 	mov	r6,zero
  80bfb4:	01c07fc4 	movi	r7,511
  80bfb8:	080be980 	call	80be98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80bfbc:	01002074 	movhi	r4,129
  80bfc0:	2135dd04 	addi	r4,r4,-10380
  80bfc4:	e17fff17 	ldw	r5,-4(fp)
  80bfc8:	01800044 	movi	r6,1
  80bfcc:	01c07fc4 	movi	r7,511
  80bfd0:	080be980 	call	80be98 <alt_open_fd>
}  
  80bfd4:	e037883a 	mov	sp,fp
  80bfd8:	dfc00117 	ldw	ra,4(sp)
  80bfdc:	df000017 	ldw	fp,0(sp)
  80bfe0:	dec00204 	addi	sp,sp,8
  80bfe4:	f800283a 	ret

0080bfe8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80bfe8:	defffa04 	addi	sp,sp,-24
  80bfec:	dfc00515 	stw	ra,20(sp)
  80bff0:	df000415 	stw	fp,16(sp)
  80bff4:	dc000315 	stw	r16,12(sp)
  80bff8:	df000304 	addi	fp,sp,12
  80bffc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80c000:	e0bffe17 	ldw	r2,-8(fp)
  80c004:	10800217 	ldw	r2,8(r2)
  80c008:	10d00034 	orhi	r3,r2,16384
  80c00c:	e0bffe17 	ldw	r2,-8(fp)
  80c010:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80c014:	e03ffd15 	stw	zero,-12(fp)
  80c018:	00002306 	br	80c0a8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80c01c:	e13ffd17 	ldw	r4,-12(fp)
  80c020:	04002074 	movhi	r16,129
  80c024:	8435d704 	addi	r16,r16,-10404
  80c028:	01400304 	movi	r5,12
  80c02c:	08099040 	call	809904 <__mulsi3>
  80c030:	1405883a 	add	r2,r2,r16
  80c034:	10c00017 	ldw	r3,0(r2)
  80c038:	e0bffe17 	ldw	r2,-8(fp)
  80c03c:	10800017 	ldw	r2,0(r2)
  80c040:	1880161e 	bne	r3,r2,80c09c <alt_file_locked+0xb4>
  80c044:	e13ffd17 	ldw	r4,-12(fp)
  80c048:	04002074 	movhi	r16,129
  80c04c:	8435d704 	addi	r16,r16,-10404
  80c050:	01400304 	movi	r5,12
  80c054:	08099040 	call	809904 <__mulsi3>
  80c058:	1405883a 	add	r2,r2,r16
  80c05c:	10800204 	addi	r2,r2,8
  80c060:	10800017 	ldw	r2,0(r2)
  80c064:	1004403a 	cmpge	r2,r2,zero
  80c068:	10000c1e 	bne	r2,zero,80c09c <alt_file_locked+0xb4>
  80c06c:	e13ffd17 	ldw	r4,-12(fp)
  80c070:	01400304 	movi	r5,12
  80c074:	08099040 	call	809904 <__mulsi3>
  80c078:	1007883a 	mov	r3,r2
  80c07c:	00802074 	movhi	r2,129
  80c080:	10b5d704 	addi	r2,r2,-10404
  80c084:	1887883a 	add	r3,r3,r2
  80c088:	e0bffe17 	ldw	r2,-8(fp)
  80c08c:	18800326 	beq	r3,r2,80c09c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80c090:	00bffcc4 	movi	r2,-13
  80c094:	e0bfff15 	stw	r2,-4(fp)
  80c098:	00000a06 	br	80c0c4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80c09c:	e0bffd17 	ldw	r2,-12(fp)
  80c0a0:	10800044 	addi	r2,r2,1
  80c0a4:	e0bffd15 	stw	r2,-12(fp)
  80c0a8:	00802074 	movhi	r2,129
  80c0ac:	10ba7a04 	addi	r2,r2,-5656
  80c0b0:	10800017 	ldw	r2,0(r2)
  80c0b4:	1007883a 	mov	r3,r2
  80c0b8:	e0bffd17 	ldw	r2,-12(fp)
  80c0bc:	18bfd72e 	bgeu	r3,r2,80c01c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80c0c0:	e03fff15 	stw	zero,-4(fp)
  80c0c4:	e0bfff17 	ldw	r2,-4(fp)
}
  80c0c8:	e037883a 	mov	sp,fp
  80c0cc:	dfc00217 	ldw	ra,8(sp)
  80c0d0:	df000117 	ldw	fp,4(sp)
  80c0d4:	dc000017 	ldw	r16,0(sp)
  80c0d8:	dec00304 	addi	sp,sp,12
  80c0dc:	f800283a 	ret

0080c0e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80c0e0:	defff404 	addi	sp,sp,-48
  80c0e4:	dfc00b15 	stw	ra,44(sp)
  80c0e8:	df000a15 	stw	fp,40(sp)
  80c0ec:	df000a04 	addi	fp,sp,40
  80c0f0:	e13ffb15 	stw	r4,-20(fp)
  80c0f4:	e17ffc15 	stw	r5,-16(fp)
  80c0f8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80c0fc:	00bfffc4 	movi	r2,-1
  80c100:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80c104:	00bffb44 	movi	r2,-19
  80c108:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80c10c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80c110:	e13ffb17 	ldw	r4,-20(fp)
  80c114:	01402074 	movhi	r5,129
  80c118:	297a7804 	addi	r5,r5,-5664
  80c11c:	080c4900 	call	80c490 <alt_find_dev>
  80c120:	e0bffa15 	stw	r2,-24(fp)
  80c124:	e0bffa17 	ldw	r2,-24(fp)
  80c128:	1004c03a 	cmpne	r2,r2,zero
  80c12c:	1000051e 	bne	r2,zero,80c144 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80c130:	e13ffb17 	ldw	r4,-20(fp)
  80c134:	080c5240 	call	80c524 <alt_find_file>
  80c138:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80c13c:	00800044 	movi	r2,1
  80c140:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80c144:	e0bffa17 	ldw	r2,-24(fp)
  80c148:	1005003a 	cmpeq	r2,r2,zero
  80c14c:	1000311e 	bne	r2,zero,80c214 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80c150:	e13ffa17 	ldw	r4,-24(fp)
  80c154:	080c6440 	call	80c644 <alt_get_fd>
  80c158:	e0bff815 	stw	r2,-32(fp)
  80c15c:	e0bff817 	ldw	r2,-32(fp)
  80c160:	1004403a 	cmpge	r2,r2,zero
  80c164:	1000031e 	bne	r2,zero,80c174 <open+0x94>
    {
      status = index;
  80c168:	e0bff817 	ldw	r2,-32(fp)
  80c16c:	e0bff715 	stw	r2,-36(fp)
  80c170:	00002a06 	br	80c21c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  80c174:	e13ff817 	ldw	r4,-32(fp)
  80c178:	01400304 	movi	r5,12
  80c17c:	08099040 	call	809904 <__mulsi3>
  80c180:	1007883a 	mov	r3,r2
  80c184:	00802074 	movhi	r2,129
  80c188:	10b5d704 	addi	r2,r2,-10404
  80c18c:	1885883a 	add	r2,r3,r2
  80c190:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80c194:	e0fffc17 	ldw	r3,-16(fp)
  80c198:	00900034 	movhi	r2,16384
  80c19c:	10bfffc4 	addi	r2,r2,-1
  80c1a0:	1886703a 	and	r3,r3,r2
  80c1a4:	e0bff917 	ldw	r2,-28(fp)
  80c1a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80c1ac:	e0bff617 	ldw	r2,-40(fp)
  80c1b0:	1004c03a 	cmpne	r2,r2,zero
  80c1b4:	1000061e 	bne	r2,zero,80c1d0 <open+0xf0>
  80c1b8:	e13ff917 	ldw	r4,-28(fp)
  80c1bc:	080bfe80 	call	80bfe8 <alt_file_locked>
  80c1c0:	e0bff715 	stw	r2,-36(fp)
  80c1c4:	e0bff717 	ldw	r2,-36(fp)
  80c1c8:	1004803a 	cmplt	r2,r2,zero
  80c1cc:	1000131e 	bne	r2,zero,80c21c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80c1d0:	e0bffa17 	ldw	r2,-24(fp)
  80c1d4:	10800317 	ldw	r2,12(r2)
  80c1d8:	1005003a 	cmpeq	r2,r2,zero
  80c1dc:	1000091e 	bne	r2,zero,80c204 <open+0x124>
  80c1e0:	e0bffa17 	ldw	r2,-24(fp)
  80c1e4:	10800317 	ldw	r2,12(r2)
  80c1e8:	e13ff917 	ldw	r4,-28(fp)
  80c1ec:	e17ffb17 	ldw	r5,-20(fp)
  80c1f0:	e1bffc17 	ldw	r6,-16(fp)
  80c1f4:	e1fffd17 	ldw	r7,-12(fp)
  80c1f8:	103ee83a 	callr	r2
  80c1fc:	e0bfff15 	stw	r2,-4(fp)
  80c200:	00000106 	br	80c208 <open+0x128>
  80c204:	e03fff15 	stw	zero,-4(fp)
  80c208:	e0bfff17 	ldw	r2,-4(fp)
  80c20c:	e0bff715 	stw	r2,-36(fp)
  80c210:	00000206 	br	80c21c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80c214:	00bffb44 	movi	r2,-19
  80c218:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80c21c:	e0bff717 	ldw	r2,-36(fp)
  80c220:	1004403a 	cmpge	r2,r2,zero
  80c224:	1000091e 	bne	r2,zero,80c24c <open+0x16c>
  {
    alt_release_fd (index);  
  80c228:	e13ff817 	ldw	r4,-32(fp)
  80c22c:	080a84c0 	call	80a84c <alt_release_fd>
    ALT_ERRNO = -status;
  80c230:	080c26c0 	call	80c26c <alt_get_errno>
  80c234:	e0fff717 	ldw	r3,-36(fp)
  80c238:	00c7c83a 	sub	r3,zero,r3
  80c23c:	10c00015 	stw	r3,0(r2)
    return -1;
  80c240:	00bfffc4 	movi	r2,-1
  80c244:	e0bffe15 	stw	r2,-8(fp)
  80c248:	00000206 	br	80c254 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  80c24c:	e0bff817 	ldw	r2,-32(fp)
  80c250:	e0bffe15 	stw	r2,-8(fp)
  80c254:	e0bffe17 	ldw	r2,-8(fp)
}
  80c258:	e037883a 	mov	sp,fp
  80c25c:	dfc00117 	ldw	ra,4(sp)
  80c260:	df000017 	ldw	fp,0(sp)
  80c264:	dec00204 	addi	sp,sp,8
  80c268:	f800283a 	ret

0080c26c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c26c:	defffd04 	addi	sp,sp,-12
  80c270:	dfc00215 	stw	ra,8(sp)
  80c274:	df000115 	stw	fp,4(sp)
  80c278:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c27c:	00802074 	movhi	r2,129
  80c280:	10ba7b04 	addi	r2,r2,-5652
  80c284:	10800017 	ldw	r2,0(r2)
  80c288:	1005003a 	cmpeq	r2,r2,zero
  80c28c:	1000061e 	bne	r2,zero,80c2a8 <alt_get_errno+0x3c>
  80c290:	00802074 	movhi	r2,129
  80c294:	10ba7b04 	addi	r2,r2,-5652
  80c298:	10800017 	ldw	r2,0(r2)
  80c29c:	103ee83a 	callr	r2
  80c2a0:	e0bfff15 	stw	r2,-4(fp)
  80c2a4:	00000306 	br	80c2b4 <alt_get_errno+0x48>
  80c2a8:	00802074 	movhi	r2,129
  80c2ac:	10813e04 	addi	r2,r2,1272
  80c2b0:	e0bfff15 	stw	r2,-4(fp)
  80c2b4:	e0bfff17 	ldw	r2,-4(fp)
}
  80c2b8:	e037883a 	mov	sp,fp
  80c2bc:	dfc00117 	ldw	ra,4(sp)
  80c2c0:	df000017 	ldw	fp,0(sp)
  80c2c4:	dec00204 	addi	sp,sp,8
  80c2c8:	f800283a 	ret

0080c2cc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80c2cc:	defffa04 	addi	sp,sp,-24
  80c2d0:	df000515 	stw	fp,20(sp)
  80c2d4:	df000504 	addi	fp,sp,20
  80c2d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c2dc:	0005303a 	rdctl	r2,status
  80c2e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c2e4:	e0fffd17 	ldw	r3,-12(fp)
  80c2e8:	00bfff84 	movi	r2,-2
  80c2ec:	1884703a 	and	r2,r3,r2
  80c2f0:	1001703a 	wrctl	status,r2
  
  return context;
  80c2f4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80c2f8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80c2fc:	e0bfff17 	ldw	r2,-4(fp)
  80c300:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80c304:	e0bffc17 	ldw	r2,-16(fp)
  80c308:	10c00017 	ldw	r3,0(r2)
  80c30c:	e0bffc17 	ldw	r2,-16(fp)
  80c310:	10800117 	ldw	r2,4(r2)
  80c314:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80c318:	e0bffc17 	ldw	r2,-16(fp)
  80c31c:	10c00117 	ldw	r3,4(r2)
  80c320:	e0bffc17 	ldw	r2,-16(fp)
  80c324:	10800017 	ldw	r2,0(r2)
  80c328:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80c32c:	e0fffc17 	ldw	r3,-16(fp)
  80c330:	e0bffc17 	ldw	r2,-16(fp)
  80c334:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80c338:	e0fffc17 	ldw	r3,-16(fp)
  80c33c:	e0bffc17 	ldw	r2,-16(fp)
  80c340:	18800015 	stw	r2,0(r3)
  80c344:	e0bffe17 	ldw	r2,-8(fp)
  80c348:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c34c:	e0bffb17 	ldw	r2,-20(fp)
  80c350:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80c354:	e037883a 	mov	sp,fp
  80c358:	df000017 	ldw	fp,0(sp)
  80c35c:	dec00104 	addi	sp,sp,4
  80c360:	f800283a 	ret

0080c364 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80c364:	defffb04 	addi	sp,sp,-20
  80c368:	dfc00415 	stw	ra,16(sp)
  80c36c:	df000315 	stw	fp,12(sp)
  80c370:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80c374:	d0a00e17 	ldw	r2,-32712(gp)
  80c378:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80c37c:	d0a6d417 	ldw	r2,-25776(gp)
  80c380:	10800044 	addi	r2,r2,1
  80c384:	d0a6d415 	stw	r2,-25776(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c388:	00003106 	br	80c450 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80c38c:	e0bffe17 	ldw	r2,-8(fp)
  80c390:	10800017 	ldw	r2,0(r2)
  80c394:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80c398:	e0bffe17 	ldw	r2,-8(fp)
  80c39c:	10800403 	ldbu	r2,16(r2)
  80c3a0:	10803fcc 	andi	r2,r2,255
  80c3a4:	1005003a 	cmpeq	r2,r2,zero
  80c3a8:	1000051e 	bne	r2,zero,80c3c0 <alt_tick+0x5c>
  80c3ac:	d0a6d417 	ldw	r2,-25776(gp)
  80c3b0:	1004c03a 	cmpne	r2,r2,zero
  80c3b4:	1000021e 	bne	r2,zero,80c3c0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80c3b8:	e0bffe17 	ldw	r2,-8(fp)
  80c3bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80c3c0:	e0bffe17 	ldw	r2,-8(fp)
  80c3c4:	10c00217 	ldw	r3,8(r2)
  80c3c8:	d0a6d417 	ldw	r2,-25776(gp)
  80c3cc:	10c01e36 	bltu	r2,r3,80c448 <alt_tick+0xe4>
  80c3d0:	e0bffe17 	ldw	r2,-8(fp)
  80c3d4:	10800403 	ldbu	r2,16(r2)
  80c3d8:	10803fcc 	andi	r2,r2,255
  80c3dc:	1004c03a 	cmpne	r2,r2,zero
  80c3e0:	1000191e 	bne	r2,zero,80c448 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80c3e4:	e0bffe17 	ldw	r2,-8(fp)
  80c3e8:	10c00317 	ldw	r3,12(r2)
  80c3ec:	e0bffe17 	ldw	r2,-8(fp)
  80c3f0:	11000517 	ldw	r4,20(r2)
  80c3f4:	183ee83a 	callr	r3
  80c3f8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80c3fc:	e0bffd17 	ldw	r2,-12(fp)
  80c400:	1004c03a 	cmpne	r2,r2,zero
  80c404:	1000031e 	bne	r2,zero,80c414 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80c408:	e13ffe17 	ldw	r4,-8(fp)
  80c40c:	080c2cc0 	call	80c2cc <alt_alarm_stop>
  80c410:	00000d06 	br	80c448 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80c414:	e0bffe17 	ldw	r2,-8(fp)
  80c418:	10c00217 	ldw	r3,8(r2)
  80c41c:	e0bffd17 	ldw	r2,-12(fp)
  80c420:	1887883a 	add	r3,r3,r2
  80c424:	e0bffe17 	ldw	r2,-8(fp)
  80c428:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80c42c:	e0bffe17 	ldw	r2,-8(fp)
  80c430:	10c00217 	ldw	r3,8(r2)
  80c434:	d0a6d417 	ldw	r2,-25776(gp)
  80c438:	1880032e 	bgeu	r3,r2,80c448 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80c43c:	e0fffe17 	ldw	r3,-8(fp)
  80c440:	00800044 	movi	r2,1
  80c444:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80c448:	e0bfff17 	ldw	r2,-4(fp)
  80c44c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c450:	d0e00e04 	addi	r3,gp,-32712
  80c454:	e0bffe17 	ldw	r2,-8(fp)
  80c458:	10ffcc1e 	bne	r2,r3,80c38c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80c45c:	e037883a 	mov	sp,fp
  80c460:	dfc00117 	ldw	ra,4(sp)
  80c464:	df000017 	ldw	fp,0(sp)
  80c468:	dec00204 	addi	sp,sp,8
  80c46c:	f800283a 	ret

0080c470 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  80c470:	deffff04 	addi	sp,sp,-4
  80c474:	df000015 	stw	fp,0(sp)
  80c478:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80c47c:	000170fa 	wrctl	ienable,zero
}
  80c480:	e037883a 	mov	sp,fp
  80c484:	df000017 	ldw	fp,0(sp)
  80c488:	dec00104 	addi	sp,sp,4
  80c48c:	f800283a 	ret

0080c490 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80c490:	defff904 	addi	sp,sp,-28
  80c494:	dfc00615 	stw	ra,24(sp)
  80c498:	df000515 	stw	fp,20(sp)
  80c49c:	df000504 	addi	fp,sp,20
  80c4a0:	e13ffd15 	stw	r4,-12(fp)
  80c4a4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80c4a8:	e0bffe17 	ldw	r2,-8(fp)
  80c4ac:	10800017 	ldw	r2,0(r2)
  80c4b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80c4b4:	e13ffd17 	ldw	r4,-12(fp)
  80c4b8:	08006b40 	call	8006b4 <strlen>
  80c4bc:	10800044 	addi	r2,r2,1
  80c4c0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80c4c4:	00000d06 	br	80c4fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80c4c8:	e0bffc17 	ldw	r2,-16(fp)
  80c4cc:	11000217 	ldw	r4,8(r2)
  80c4d0:	e1bffb17 	ldw	r6,-20(fp)
  80c4d4:	e17ffd17 	ldw	r5,-12(fp)
  80c4d8:	080c7600 	call	80c760 <memcmp>
  80c4dc:	1004c03a 	cmpne	r2,r2,zero
  80c4e0:	1000031e 	bne	r2,zero,80c4f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80c4e4:	e0bffc17 	ldw	r2,-16(fp)
  80c4e8:	e0bfff15 	stw	r2,-4(fp)
  80c4ec:	00000706 	br	80c50c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80c4f0:	e0bffc17 	ldw	r2,-16(fp)
  80c4f4:	10800017 	ldw	r2,0(r2)
  80c4f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80c4fc:	e0fffe17 	ldw	r3,-8(fp)
  80c500:	e0bffc17 	ldw	r2,-16(fp)
  80c504:	10fff01e 	bne	r2,r3,80c4c8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80c508:	e03fff15 	stw	zero,-4(fp)
  80c50c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c510:	e037883a 	mov	sp,fp
  80c514:	dfc00117 	ldw	ra,4(sp)
  80c518:	df000017 	ldw	fp,0(sp)
  80c51c:	dec00204 	addi	sp,sp,8
  80c520:	f800283a 	ret

0080c524 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80c524:	defffa04 	addi	sp,sp,-24
  80c528:	dfc00515 	stw	ra,20(sp)
  80c52c:	df000415 	stw	fp,16(sp)
  80c530:	df000404 	addi	fp,sp,16
  80c534:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80c538:	00802074 	movhi	r2,129
  80c53c:	10ba7604 	addi	r2,r2,-5672
  80c540:	10800017 	ldw	r2,0(r2)
  80c544:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80c548:	00003306 	br	80c618 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80c54c:	e0bffd17 	ldw	r2,-12(fp)
  80c550:	11000217 	ldw	r4,8(r2)
  80c554:	08006b40 	call	8006b4 <strlen>
  80c558:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80c55c:	e0bffd17 	ldw	r2,-12(fp)
  80c560:	10c00217 	ldw	r3,8(r2)
  80c564:	e0bffc17 	ldw	r2,-16(fp)
  80c568:	1885883a 	add	r2,r3,r2
  80c56c:	10bfffc4 	addi	r2,r2,-1
  80c570:	10800003 	ldbu	r2,0(r2)
  80c574:	10803fcc 	andi	r2,r2,255
  80c578:	1080201c 	xori	r2,r2,128
  80c57c:	10bfe004 	addi	r2,r2,-128
  80c580:	10800bd8 	cmpnei	r2,r2,47
  80c584:	1000031e 	bne	r2,zero,80c594 <alt_find_file+0x70>
    {
      len -= 1;
  80c588:	e0bffc17 	ldw	r2,-16(fp)
  80c58c:	10bfffc4 	addi	r2,r2,-1
  80c590:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80c594:	e0bffc17 	ldw	r2,-16(fp)
  80c598:	1007883a 	mov	r3,r2
  80c59c:	e0bffe17 	ldw	r2,-8(fp)
  80c5a0:	1885883a 	add	r2,r3,r2
  80c5a4:	10800003 	ldbu	r2,0(r2)
  80c5a8:	10803fcc 	andi	r2,r2,255
  80c5ac:	1080201c 	xori	r2,r2,128
  80c5b0:	10bfe004 	addi	r2,r2,-128
  80c5b4:	10800be0 	cmpeqi	r2,r2,47
  80c5b8:	10000a1e 	bne	r2,zero,80c5e4 <alt_find_file+0xc0>
  80c5bc:	e0bffc17 	ldw	r2,-16(fp)
  80c5c0:	1007883a 	mov	r3,r2
  80c5c4:	e0bffe17 	ldw	r2,-8(fp)
  80c5c8:	1885883a 	add	r2,r3,r2
  80c5cc:	10800003 	ldbu	r2,0(r2)
  80c5d0:	10803fcc 	andi	r2,r2,255
  80c5d4:	1080201c 	xori	r2,r2,128
  80c5d8:	10bfe004 	addi	r2,r2,-128
  80c5dc:	1004c03a 	cmpne	r2,r2,zero
  80c5e0:	10000a1e 	bne	r2,zero,80c60c <alt_find_file+0xe8>
  80c5e4:	e0bffd17 	ldw	r2,-12(fp)
  80c5e8:	11000217 	ldw	r4,8(r2)
  80c5ec:	e1bffc17 	ldw	r6,-16(fp)
  80c5f0:	e17ffe17 	ldw	r5,-8(fp)
  80c5f4:	080c7600 	call	80c760 <memcmp>
  80c5f8:	1004c03a 	cmpne	r2,r2,zero
  80c5fc:	1000031e 	bne	r2,zero,80c60c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80c600:	e0bffd17 	ldw	r2,-12(fp)
  80c604:	e0bfff15 	stw	r2,-4(fp)
  80c608:	00000806 	br	80c62c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80c60c:	e0bffd17 	ldw	r2,-12(fp)
  80c610:	10800017 	ldw	r2,0(r2)
  80c614:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80c618:	00c02074 	movhi	r3,129
  80c61c:	18fa7604 	addi	r3,r3,-5672
  80c620:	e0bffd17 	ldw	r2,-12(fp)
  80c624:	10ffc91e 	bne	r2,r3,80c54c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80c628:	e03fff15 	stw	zero,-4(fp)
  80c62c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c630:	e037883a 	mov	sp,fp
  80c634:	dfc00117 	ldw	ra,4(sp)
  80c638:	df000017 	ldw	fp,0(sp)
  80c63c:	dec00204 	addi	sp,sp,8
  80c640:	f800283a 	ret

0080c644 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80c644:	defffa04 	addi	sp,sp,-24
  80c648:	dfc00515 	stw	ra,20(sp)
  80c64c:	df000415 	stw	fp,16(sp)
  80c650:	dc000315 	stw	r16,12(sp)
  80c654:	df000304 	addi	fp,sp,12
  80c658:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80c65c:	00bffa04 	movi	r2,-24
  80c660:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80c664:	e03ffe15 	stw	zero,-8(fp)
  80c668:	00002006 	br	80c6ec <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  80c66c:	e13ffe17 	ldw	r4,-8(fp)
  80c670:	04002074 	movhi	r16,129
  80c674:	8435d704 	addi	r16,r16,-10404
  80c678:	01400304 	movi	r5,12
  80c67c:	08099040 	call	809904 <__mulsi3>
  80c680:	1405883a 	add	r2,r2,r16
  80c684:	10800017 	ldw	r2,0(r2)
  80c688:	1004c03a 	cmpne	r2,r2,zero
  80c68c:	1000141e 	bne	r2,zero,80c6e0 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  80c690:	e13ffe17 	ldw	r4,-8(fp)
  80c694:	04002074 	movhi	r16,129
  80c698:	8435d704 	addi	r16,r16,-10404
  80c69c:	01400304 	movi	r5,12
  80c6a0:	08099040 	call	809904 <__mulsi3>
  80c6a4:	1407883a 	add	r3,r2,r16
  80c6a8:	e0bfff17 	ldw	r2,-4(fp)
  80c6ac:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80c6b0:	00802074 	movhi	r2,129
  80c6b4:	10ba7a04 	addi	r2,r2,-5656
  80c6b8:	10c00017 	ldw	r3,0(r2)
  80c6bc:	e0bffe17 	ldw	r2,-8(fp)
  80c6c0:	1880040e 	bge	r3,r2,80c6d4 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  80c6c4:	00c02074 	movhi	r3,129
  80c6c8:	18fa7a04 	addi	r3,r3,-5656
  80c6cc:	e0bffe17 	ldw	r2,-8(fp)
  80c6d0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80c6d4:	e0bffe17 	ldw	r2,-8(fp)
  80c6d8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80c6dc:	00000606 	br	80c6f8 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80c6e0:	e0bffe17 	ldw	r2,-8(fp)
  80c6e4:	10800044 	addi	r2,r2,1
  80c6e8:	e0bffe15 	stw	r2,-8(fp)
  80c6ec:	e0bffe17 	ldw	r2,-8(fp)
  80c6f0:	10800810 	cmplti	r2,r2,32
  80c6f4:	103fdd1e 	bne	r2,zero,80c66c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80c6f8:	e0bffd17 	ldw	r2,-12(fp)
}
  80c6fc:	e037883a 	mov	sp,fp
  80c700:	dfc00217 	ldw	ra,8(sp)
  80c704:	df000117 	ldw	fp,4(sp)
  80c708:	dc000017 	ldw	r16,0(sp)
  80c70c:	dec00304 	addi	sp,sp,12
  80c710:	f800283a 	ret

0080c714 <atexit>:
  80c714:	200b883a 	mov	r5,r4
  80c718:	000d883a 	mov	r6,zero
  80c71c:	0009883a 	mov	r4,zero
  80c720:	000f883a 	mov	r7,zero
  80c724:	080c7d41 	jmpi	80c7d4 <__register_exitproc>

0080c728 <exit>:
  80c728:	defffe04 	addi	sp,sp,-8
  80c72c:	000b883a 	mov	r5,zero
  80c730:	dc000015 	stw	r16,0(sp)
  80c734:	dfc00115 	stw	ra,4(sp)
  80c738:	2021883a 	mov	r16,r4
  80c73c:	080c90c0 	call	80c90c <__call_exitprocs>
  80c740:	00802074 	movhi	r2,129
  80c744:	10ba7104 	addi	r2,r2,-5692
  80c748:	11000017 	ldw	r4,0(r2)
  80c74c:	20800f17 	ldw	r2,60(r4)
  80c750:	10000126 	beq	r2,zero,80c758 <exit+0x30>
  80c754:	103ee83a 	callr	r2
  80c758:	8009883a 	mov	r4,r16
  80c75c:	080cafc0 	call	80cafc <_exit>

0080c760 <memcmp>:
  80c760:	00c000c4 	movi	r3,3
  80c764:	1980032e 	bgeu	r3,r6,80c774 <memcmp+0x14>
  80c768:	2144b03a 	or	r2,r4,r5
  80c76c:	10c4703a 	and	r2,r2,r3
  80c770:	10000f26 	beq	r2,zero,80c7b0 <memcmp+0x50>
  80c774:	31ffffc4 	addi	r7,r6,-1
  80c778:	3000061e 	bne	r6,zero,80c794 <memcmp+0x34>
  80c77c:	00000a06 	br	80c7a8 <memcmp+0x48>
  80c780:	39ffffc4 	addi	r7,r7,-1
  80c784:	00bfffc4 	movi	r2,-1
  80c788:	21000044 	addi	r4,r4,1
  80c78c:	29400044 	addi	r5,r5,1
  80c790:	38800526 	beq	r7,r2,80c7a8 <memcmp+0x48>
  80c794:	20c00003 	ldbu	r3,0(r4)
  80c798:	28800003 	ldbu	r2,0(r5)
  80c79c:	18bff826 	beq	r3,r2,80c780 <memcmp+0x20>
  80c7a0:	1885c83a 	sub	r2,r3,r2
  80c7a4:	f800283a 	ret
  80c7a8:	0005883a 	mov	r2,zero
  80c7ac:	f800283a 	ret
  80c7b0:	180f883a 	mov	r7,r3
  80c7b4:	20c00017 	ldw	r3,0(r4)
  80c7b8:	28800017 	ldw	r2,0(r5)
  80c7bc:	18bfed1e 	bne	r3,r2,80c774 <memcmp+0x14>
  80c7c0:	31bfff04 	addi	r6,r6,-4
  80c7c4:	21000104 	addi	r4,r4,4
  80c7c8:	29400104 	addi	r5,r5,4
  80c7cc:	39bff936 	bltu	r7,r6,80c7b4 <memcmp+0x54>
  80c7d0:	003fe806 	br	80c774 <memcmp+0x14>

0080c7d4 <__register_exitproc>:
  80c7d4:	defffa04 	addi	sp,sp,-24
  80c7d8:	00802074 	movhi	r2,129
  80c7dc:	10ba7104 	addi	r2,r2,-5692
  80c7e0:	dc000015 	stw	r16,0(sp)
  80c7e4:	14000017 	ldw	r16,0(r2)
  80c7e8:	dd000415 	stw	r20,16(sp)
  80c7ec:	2829883a 	mov	r20,r5
  80c7f0:	81405217 	ldw	r5,328(r16)
  80c7f4:	dcc00315 	stw	r19,12(sp)
  80c7f8:	dc800215 	stw	r18,8(sp)
  80c7fc:	dc400115 	stw	r17,4(sp)
  80c800:	dfc00515 	stw	ra,20(sp)
  80c804:	2023883a 	mov	r17,r4
  80c808:	3027883a 	mov	r19,r6
  80c80c:	3825883a 	mov	r18,r7
  80c810:	28002526 	beq	r5,zero,80c8a8 <__register_exitproc+0xd4>
  80c814:	29000117 	ldw	r4,4(r5)
  80c818:	008007c4 	movi	r2,31
  80c81c:	11002716 	blt	r2,r4,80c8bc <__register_exitproc+0xe8>
  80c820:	8800101e 	bne	r17,zero,80c864 <__register_exitproc+0x90>
  80c824:	2105883a 	add	r2,r4,r4
  80c828:	1085883a 	add	r2,r2,r2
  80c82c:	20c00044 	addi	r3,r4,1
  80c830:	1145883a 	add	r2,r2,r5
  80c834:	0009883a 	mov	r4,zero
  80c838:	15000215 	stw	r20,8(r2)
  80c83c:	28c00115 	stw	r3,4(r5)
  80c840:	2005883a 	mov	r2,r4
  80c844:	dfc00517 	ldw	ra,20(sp)
  80c848:	dd000417 	ldw	r20,16(sp)
  80c84c:	dcc00317 	ldw	r19,12(sp)
  80c850:	dc800217 	ldw	r18,8(sp)
  80c854:	dc400117 	ldw	r17,4(sp)
  80c858:	dc000017 	ldw	r16,0(sp)
  80c85c:	dec00604 	addi	sp,sp,24
  80c860:	f800283a 	ret
  80c864:	29802204 	addi	r6,r5,136
  80c868:	00800044 	movi	r2,1
  80c86c:	110e983a 	sll	r7,r2,r4
  80c870:	30c04017 	ldw	r3,256(r6)
  80c874:	2105883a 	add	r2,r4,r4
  80c878:	1085883a 	add	r2,r2,r2
  80c87c:	1185883a 	add	r2,r2,r6
  80c880:	19c6b03a 	or	r3,r3,r7
  80c884:	14802015 	stw	r18,128(r2)
  80c888:	14c00015 	stw	r19,0(r2)
  80c88c:	00800084 	movi	r2,2
  80c890:	30c04015 	stw	r3,256(r6)
  80c894:	88bfe31e 	bne	r17,r2,80c824 <__register_exitproc+0x50>
  80c898:	30804117 	ldw	r2,260(r6)
  80c89c:	11c4b03a 	or	r2,r2,r7
  80c8a0:	30804115 	stw	r2,260(r6)
  80c8a4:	003fdf06 	br	80c824 <__register_exitproc+0x50>
  80c8a8:	00802074 	movhi	r2,129
  80c8ac:	10818f04 	addi	r2,r2,1596
  80c8b0:	100b883a 	mov	r5,r2
  80c8b4:	80805215 	stw	r2,328(r16)
  80c8b8:	003fd606 	br	80c814 <__register_exitproc+0x40>
  80c8bc:	00800034 	movhi	r2,0
  80c8c0:	10800004 	addi	r2,r2,0
  80c8c4:	1000021e 	bne	r2,zero,80c8d0 <__register_exitproc+0xfc>
  80c8c8:	013fffc4 	movi	r4,-1
  80c8cc:	003fdc06 	br	80c840 <__register_exitproc+0x6c>
  80c8d0:	01006404 	movi	r4,400
  80c8d4:	103ee83a 	callr	r2
  80c8d8:	1007883a 	mov	r3,r2
  80c8dc:	103ffa26 	beq	r2,zero,80c8c8 <__register_exitproc+0xf4>
  80c8e0:	80805217 	ldw	r2,328(r16)
  80c8e4:	180b883a 	mov	r5,r3
  80c8e8:	18000115 	stw	zero,4(r3)
  80c8ec:	18800015 	stw	r2,0(r3)
  80c8f0:	80c05215 	stw	r3,328(r16)
  80c8f4:	18006215 	stw	zero,392(r3)
  80c8f8:	18006315 	stw	zero,396(r3)
  80c8fc:	0009883a 	mov	r4,zero
  80c900:	883fc826 	beq	r17,zero,80c824 <__register_exitproc+0x50>
  80c904:	003fd706 	br	80c864 <__register_exitproc+0x90>

0080c908 <register_fini>:
  80c908:	f800283a 	ret

0080c90c <__call_exitprocs>:
  80c90c:	00802074 	movhi	r2,129
  80c910:	10ba7104 	addi	r2,r2,-5692
  80c914:	10800017 	ldw	r2,0(r2)
  80c918:	defff304 	addi	sp,sp,-52
  80c91c:	df000b15 	stw	fp,44(sp)
  80c920:	d8800115 	stw	r2,4(sp)
  80c924:	00800034 	movhi	r2,0
  80c928:	10800004 	addi	r2,r2,0
  80c92c:	1005003a 	cmpeq	r2,r2,zero
  80c930:	d8800215 	stw	r2,8(sp)
  80c934:	d8800117 	ldw	r2,4(sp)
  80c938:	dd400815 	stw	r21,32(sp)
  80c93c:	dd000715 	stw	r20,28(sp)
  80c940:	10805204 	addi	r2,r2,328
  80c944:	dfc00c15 	stw	ra,48(sp)
  80c948:	ddc00a15 	stw	r23,40(sp)
  80c94c:	dd800915 	stw	r22,36(sp)
  80c950:	dcc00615 	stw	r19,24(sp)
  80c954:	dc800515 	stw	r18,20(sp)
  80c958:	dc400415 	stw	r17,16(sp)
  80c95c:	dc000315 	stw	r16,12(sp)
  80c960:	282b883a 	mov	r21,r5
  80c964:	2039883a 	mov	fp,r4
  80c968:	d8800015 	stw	r2,0(sp)
  80c96c:	2829003a 	cmpeq	r20,r5,zero
  80c970:	d8800117 	ldw	r2,4(sp)
  80c974:	14405217 	ldw	r17,328(r2)
  80c978:	88001026 	beq	r17,zero,80c9bc <__call_exitprocs+0xb0>
  80c97c:	ddc00017 	ldw	r23,0(sp)
  80c980:	88800117 	ldw	r2,4(r17)
  80c984:	8c802204 	addi	r18,r17,136
  80c988:	143fffc4 	addi	r16,r2,-1
  80c98c:	80000916 	blt	r16,zero,80c9b4 <__call_exitprocs+0xa8>
  80c990:	05bfffc4 	movi	r22,-1
  80c994:	a000151e 	bne	r20,zero,80c9ec <__call_exitprocs+0xe0>
  80c998:	8409883a 	add	r4,r16,r16
  80c99c:	2105883a 	add	r2,r4,r4
  80c9a0:	1485883a 	add	r2,r2,r18
  80c9a4:	10c02017 	ldw	r3,128(r2)
  80c9a8:	a8c01126 	beq	r21,r3,80c9f0 <__call_exitprocs+0xe4>
  80c9ac:	843fffc4 	addi	r16,r16,-1
  80c9b0:	85bff81e 	bne	r16,r22,80c994 <__call_exitprocs+0x88>
  80c9b4:	d8800217 	ldw	r2,8(sp)
  80c9b8:	10003126 	beq	r2,zero,80ca80 <__call_exitprocs+0x174>
  80c9bc:	dfc00c17 	ldw	ra,48(sp)
  80c9c0:	df000b17 	ldw	fp,44(sp)
  80c9c4:	ddc00a17 	ldw	r23,40(sp)
  80c9c8:	dd800917 	ldw	r22,36(sp)
  80c9cc:	dd400817 	ldw	r21,32(sp)
  80c9d0:	dd000717 	ldw	r20,28(sp)
  80c9d4:	dcc00617 	ldw	r19,24(sp)
  80c9d8:	dc800517 	ldw	r18,20(sp)
  80c9dc:	dc400417 	ldw	r17,16(sp)
  80c9e0:	dc000317 	ldw	r16,12(sp)
  80c9e4:	dec00d04 	addi	sp,sp,52
  80c9e8:	f800283a 	ret
  80c9ec:	8409883a 	add	r4,r16,r16
  80c9f0:	88c00117 	ldw	r3,4(r17)
  80c9f4:	2105883a 	add	r2,r4,r4
  80c9f8:	1445883a 	add	r2,r2,r17
  80c9fc:	18ffffc4 	addi	r3,r3,-1
  80ca00:	11800217 	ldw	r6,8(r2)
  80ca04:	1c001526 	beq	r3,r16,80ca5c <__call_exitprocs+0x150>
  80ca08:	10000215 	stw	zero,8(r2)
  80ca0c:	303fe726 	beq	r6,zero,80c9ac <__call_exitprocs+0xa0>
  80ca10:	00c00044 	movi	r3,1
  80ca14:	1c06983a 	sll	r3,r3,r16
  80ca18:	90804017 	ldw	r2,256(r18)
  80ca1c:	8cc00117 	ldw	r19,4(r17)
  80ca20:	1884703a 	and	r2,r3,r2
  80ca24:	10001426 	beq	r2,zero,80ca78 <__call_exitprocs+0x16c>
  80ca28:	90804117 	ldw	r2,260(r18)
  80ca2c:	1884703a 	and	r2,r3,r2
  80ca30:	10000c1e 	bne	r2,zero,80ca64 <__call_exitprocs+0x158>
  80ca34:	2105883a 	add	r2,r4,r4
  80ca38:	1485883a 	add	r2,r2,r18
  80ca3c:	11400017 	ldw	r5,0(r2)
  80ca40:	e009883a 	mov	r4,fp
  80ca44:	303ee83a 	callr	r6
  80ca48:	88800117 	ldw	r2,4(r17)
  80ca4c:	98bfc81e 	bne	r19,r2,80c970 <__call_exitprocs+0x64>
  80ca50:	b8800017 	ldw	r2,0(r23)
  80ca54:	147fd526 	beq	r2,r17,80c9ac <__call_exitprocs+0xa0>
  80ca58:	003fc506 	br	80c970 <__call_exitprocs+0x64>
  80ca5c:	8c000115 	stw	r16,4(r17)
  80ca60:	003fea06 	br	80ca0c <__call_exitprocs+0x100>
  80ca64:	2105883a 	add	r2,r4,r4
  80ca68:	1485883a 	add	r2,r2,r18
  80ca6c:	11000017 	ldw	r4,0(r2)
  80ca70:	303ee83a 	callr	r6
  80ca74:	003ff406 	br	80ca48 <__call_exitprocs+0x13c>
  80ca78:	303ee83a 	callr	r6
  80ca7c:	003ff206 	br	80ca48 <__call_exitprocs+0x13c>
  80ca80:	88800117 	ldw	r2,4(r17)
  80ca84:	1000081e 	bne	r2,zero,80caa8 <__call_exitprocs+0x19c>
  80ca88:	89000017 	ldw	r4,0(r17)
  80ca8c:	20000726 	beq	r4,zero,80caac <__call_exitprocs+0x1a0>
  80ca90:	b9000015 	stw	r4,0(r23)
  80ca94:	8809883a 	mov	r4,r17
  80ca98:	00000000 	call	0 <__reset-0x800000>
  80ca9c:	bc400017 	ldw	r17,0(r23)
  80caa0:	883fb71e 	bne	r17,zero,80c980 <__call_exitprocs+0x74>
  80caa4:	003fc506 	br	80c9bc <__call_exitprocs+0xb0>
  80caa8:	89000017 	ldw	r4,0(r17)
  80caac:	882f883a 	mov	r23,r17
  80cab0:	2023883a 	mov	r17,r4
  80cab4:	883fb21e 	bne	r17,zero,80c980 <__call_exitprocs+0x74>
  80cab8:	003fc006 	br	80c9bc <__call_exitprocs+0xb0>

0080cabc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80cabc:	defffd04 	addi	sp,sp,-12
  80cac0:	df000215 	stw	fp,8(sp)
  80cac4:	df000204 	addi	fp,sp,8
  80cac8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80cacc:	e0bfff17 	ldw	r2,-4(fp)
  80cad0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80cad4:	e0bffe17 	ldw	r2,-8(fp)
  80cad8:	1005003a 	cmpeq	r2,r2,zero
  80cadc:	1000021e 	bne	r2,zero,80cae8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80cae0:	002af070 	cmpltui	zero,zero,43969
  80cae4:	00000106 	br	80caec <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80cae8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80caec:	e037883a 	mov	sp,fp
  80caf0:	df000017 	ldw	fp,0(sp)
  80caf4:	dec00104 	addi	sp,sp,4
  80caf8:	f800283a 	ret

0080cafc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80cafc:	defffd04 	addi	sp,sp,-12
  80cb00:	dfc00215 	stw	ra,8(sp)
  80cb04:	df000115 	stw	fp,4(sp)
  80cb08:	df000104 	addi	fp,sp,4
  80cb0c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80cb10:	e13fff17 	ldw	r4,-4(fp)
  80cb14:	080cabc0 	call	80cabc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80cb18:	003fff06 	br	80cb18 <_exit+0x1c>
  80cb1c:	0080c908 	cmpgei	r2,zero,804
